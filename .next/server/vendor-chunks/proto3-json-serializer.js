"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/proto3-json-serializer";
exports.ids = ["vendor-chunks/proto3-json-serializer"];
exports.modules = {

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/any.js":
/*!**************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/any.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.googleProtobufAnyFromProto3JSON = exports.googleProtobufAnyToProto3JSON = void 0;\nconst fromproto3json_1 = __webpack_require__(/*! ./fromproto3json */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/fromproto3json.js\");\nconst toproto3json_1 = __webpack_require__(/*! ./toproto3json */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/toproto3json.js\");\n// https://github.com/protocolbuffers/protobuf/blob/ba3836703b4a9e98e474aea2bac8c5b49b6d3b5c/python/google/protobuf/json_format.py#L850\nconst specialJSON = new Set([\n    \"google.protobuf.Any\",\n    \"google.protobuf.Duration\",\n    \"google.protobuf.FieldMask\",\n    \"google.protobuf.ListValue\",\n    \"google.protobuf.Struct\",\n    \"google.protobuf.Timestamp\",\n    \"google.protobuf.Value\"\n]);\nfunction googleProtobufAnyToProto3JSON(obj, options) {\n    // https://developers.google.com/protocol-buffers/docs/proto3#json\n    // If the Any contains a value that has a special JSON mapping, it will be converted as follows:\n    // {\"@type\": xxx, \"value\": yyy}.\n    // Otherwise, the value will be converted into a JSON object, and the \"@type\" field will be inserted\n    // to indicate the actual data type.\n    const typeName = obj.type_url.replace(/^.*\\//, \"\");\n    let type;\n    try {\n        type = obj.$type.root.lookupType(typeName);\n    } catch (err) {\n        throw new Error(`googleProtobufAnyToProto3JSON: cannot find type ${typeName}: ${err}`);\n    }\n    const valueMessage = type.decode(obj.value);\n    const valueProto3JSON = (0, toproto3json_1.toProto3JSON)(valueMessage, options);\n    if (specialJSON.has(typeName)) {\n        return {\n            \"@type\": obj.type_url,\n            value: valueProto3JSON\n        };\n    }\n    valueProto3JSON[\"@type\"] = obj.type_url;\n    return valueProto3JSON;\n}\nexports.googleProtobufAnyToProto3JSON = googleProtobufAnyToProto3JSON;\nfunction googleProtobufAnyFromProto3JSON(root, json) {\n    // Not all possible JSON values can hold Any, only real objects.\n    if (json === null || typeof json !== \"object\" || Array.isArray(json)) {\n        throw new Error(\"googleProtobufAnyFromProto3JSON: must be an object to decode google.protobuf.Any\");\n    }\n    const typeUrl = json[\"@type\"];\n    if (!typeUrl || typeof typeUrl !== \"string\") {\n        throw new Error(\"googleProtobufAnyFromProto3JSON: JSON serialization of google.protobuf.Any must contain @type field\");\n    }\n    const typeName = typeUrl.replace(/^.*\\//, \"\");\n    let type;\n    try {\n        type = root.lookupType(typeName);\n    } catch (err) {\n        throw new Error(`googleProtobufAnyFromProto3JSON: cannot find type ${typeName}: ${err}`);\n    }\n    let value = json;\n    if (specialJSON.has(typeName)) {\n        if (!(\"value\" in json)) {\n            throw new Error(`googleProtobufAnyFromProto3JSON: JSON representation of google.protobuf.Any with type ${typeName} must contain the value field`);\n        }\n        value = json.value;\n    }\n    const valueMessage = (0, fromproto3json_1.fromProto3JSON)(type, value);\n    if (valueMessage === null) {\n        return {\n            type_url: typeUrl,\n            value: null\n        };\n    }\n    const uint8array = type.encode(valueMessage).finish();\n    const buffer = Buffer.from(uint8array, 0, uint8array.byteLength);\n    const base64 = buffer.toString(\"base64\");\n    return {\n        type_url: typeUrl,\n        value: base64\n    };\n}\nexports.googleProtobufAnyFromProto3JSON = googleProtobufAnyFromProto3JSON; //# sourceMappingURL=any.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/any.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/bytes.js":
/*!****************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/bytes.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.bytesFromProto3JSON = exports.bytesToProto3JSON = void 0;\nfunction bytesToProto3JSON(obj) {\n    if (Buffer.isBuffer(obj)) {\n        return obj.toString(\"base64\");\n    } else {\n        return Buffer.from(obj.buffer, 0, obj.byteLength).toString(\"base64\");\n    }\n}\nexports.bytesToProto3JSON = bytesToProto3JSON;\nfunction bytesFromProto3JSON(json) {\n    return Buffer.from(json, \"base64\");\n}\nexports.bytesFromProto3JSON = bytesFromProto3JSON; //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcHJvdG8zLWpzb24tc2VyaWFsaXplci9idWlsZC9zcmMvYnl0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixpREFBaUQ7QUFDakQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwyQkFBMkIsR0FBR0EseUJBQXlCLEdBQUcsS0FBSztBQUMvRCxTQUFTRyxrQkFBa0JDLEdBQUc7SUFDMUIsSUFBSUMsT0FBT0MsUUFBUSxDQUFDRixNQUFNO1FBQ3RCLE9BQU9BLElBQUlHLFFBQVEsQ0FBQztJQUN4QixPQUNLO1FBQ0QsT0FBT0YsT0FBT0csSUFBSSxDQUFDSixJQUFJSyxNQUFNLEVBQUUsR0FBR0wsSUFBSU0sVUFBVSxFQUFFSCxRQUFRLENBQUM7SUFDL0Q7QUFDSjtBQUNBUCx5QkFBeUIsR0FBR0c7QUFDNUIsU0FBU0Qsb0JBQW9CUyxJQUFJO0lBQzdCLE9BQU9OLE9BQU9HLElBQUksQ0FBQ0csTUFBTTtBQUM3QjtBQUNBWCwyQkFBMkIsR0FBR0UscUJBQzlCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9wcm90bzMtanNvbi1zZXJpYWxpemVyL2J1aWxkL3NyYy9ieXRlcy5qcz8wYjQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnl0ZXNGcm9tUHJvdG8zSlNPTiA9IGV4cG9ydHMuYnl0ZXNUb1Byb3RvM0pTT04gPSB2b2lkIDA7XG5mdW5jdGlvbiBieXRlc1RvUHJvdG8zSlNPTihvYmopIHtcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG9iai50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20ob2JqLmJ1ZmZlciwgMCwgb2JqLmJ5dGVMZW5ndGgpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICB9XG59XG5leHBvcnRzLmJ5dGVzVG9Qcm90bzNKU09OID0gYnl0ZXNUb1Byb3RvM0pTT047XG5mdW5jdGlvbiBieXRlc0Zyb21Qcm90bzNKU09OKGpzb24pIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oanNvbiwgJ2Jhc2U2NCcpO1xufVxuZXhwb3J0cy5ieXRlc0Zyb21Qcm90bzNKU09OID0gYnl0ZXNGcm9tUHJvdG8zSlNPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ5dGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImJ5dGVzRnJvbVByb3RvM0pTT04iLCJieXRlc1RvUHJvdG8zSlNPTiIsIm9iaiIsIkJ1ZmZlciIsImlzQnVmZmVyIiwidG9TdHJpbmciLCJmcm9tIiwiYnVmZmVyIiwiYnl0ZUxlbmd0aCIsImpzb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/bytes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/duration.js":
/*!*******************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/duration.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.googleProtobufDurationFromProto3JSON = exports.googleProtobufDurationToProto3JSON = void 0;\nfunction googleProtobufDurationToProto3JSON(obj) {\n    // seconds is an instance of Long so it won't be undefined\n    let durationSeconds = obj.seconds.toString();\n    if (typeof obj.nanos === \"number\" && obj.nanos > 0) {\n        // nanosStr should contain 3, 6, or 9 fractional digits.\n        const nanosStr = obj.nanos.toString().padStart(9, \"0\").replace(/^((?:\\d\\d\\d)+?)(?:0*)$/, \"$1\");\n        durationSeconds += \".\" + nanosStr;\n    }\n    durationSeconds += \"s\";\n    return durationSeconds;\n}\nexports.googleProtobufDurationToProto3JSON = googleProtobufDurationToProto3JSON;\nfunction googleProtobufDurationFromProto3JSON(json) {\n    const match = json.match(/^(\\d*)(?:\\.(\\d*))?s$/);\n    if (!match) {\n        throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);\n    }\n    let seconds = 0;\n    let nanos = 0;\n    if (typeof match[1] === \"string\" && match[1].length > 0) {\n        seconds = parseInt(match[1]);\n    }\n    if (typeof match[2] === \"string\" && match[2].length > 0) {\n        nanos = parseInt(match[2].padEnd(9, \"0\"));\n    }\n    const result = {};\n    if (seconds !== 0) {\n        result.seconds = seconds;\n    }\n    if (nanos !== 0) {\n        result.nanos = nanos;\n    }\n    return result;\n}\nexports.googleProtobufDurationFromProto3JSON = googleProtobufDurationFromProto3JSON; //# sourceMappingURL=duration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcHJvdG8zLWpzb24tc2VyaWFsaXplci9idWlsZC9zcmMvZHVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixpREFBaUQ7QUFDakQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw0Q0FBNEMsR0FBR0EsMENBQTBDLEdBQUcsS0FBSztBQUNqRyxTQUFTRyxtQ0FBbUNDLEdBQUc7SUFDM0MsMERBQTBEO0lBQzFELElBQUlDLGtCQUFrQkQsSUFBSUUsT0FBTyxDQUFDQyxRQUFRO0lBQzFDLElBQUksT0FBT0gsSUFBSUksS0FBSyxLQUFLLFlBQVlKLElBQUlJLEtBQUssR0FBRyxHQUFHO1FBQ2hELHdEQUF3RDtRQUN4RCxNQUFNQyxXQUFXTCxJQUFJSSxLQUFLLENBQ3JCRCxRQUFRLEdBQ1JHLFFBQVEsQ0FBQyxHQUFHLEtBQ1pDLE9BQU8sQ0FBQywwQkFBMEI7UUFDdkNOLG1CQUFtQixNQUFNSTtJQUM3QjtJQUNBSixtQkFBbUI7SUFDbkIsT0FBT0E7QUFDWDtBQUNBTCwwQ0FBMEMsR0FBR0c7QUFDN0MsU0FBU0QscUNBQXFDVSxJQUFJO0lBQzlDLE1BQU1DLFFBQVFELEtBQUtDLEtBQUssQ0FBQztJQUN6QixJQUFJLENBQUNBLE9BQU87UUFDUixNQUFNLElBQUlDLE1BQU0sQ0FBQyxzREFBc0QsRUFBRUYsS0FBSyxtQ0FBbUMsQ0FBQztJQUN0SDtJQUNBLElBQUlOLFVBQVU7SUFDZCxJQUFJRSxRQUFRO0lBQ1osSUFBSSxPQUFPSyxLQUFLLENBQUMsRUFBRSxLQUFLLFlBQVlBLEtBQUssQ0FBQyxFQUFFLENBQUNFLE1BQU0sR0FBRyxHQUFHO1FBQ3JEVCxVQUFVVSxTQUFTSCxLQUFLLENBQUMsRUFBRTtJQUMvQjtJQUNBLElBQUksT0FBT0EsS0FBSyxDQUFDLEVBQUUsS0FBSyxZQUFZQSxLQUFLLENBQUMsRUFBRSxDQUFDRSxNQUFNLEdBQUcsR0FBRztRQUNyRFAsUUFBUVEsU0FBU0gsS0FBSyxDQUFDLEVBQUUsQ0FBQ0ksTUFBTSxDQUFDLEdBQUc7SUFDeEM7SUFDQSxNQUFNQyxTQUFTLENBQUM7SUFDaEIsSUFBSVosWUFBWSxHQUFHO1FBQ2ZZLE9BQU9aLE9BQU8sR0FBR0E7SUFDckI7SUFDQSxJQUFJRSxVQUFVLEdBQUc7UUFDYlUsT0FBT1YsS0FBSyxHQUFHQTtJQUNuQjtJQUNBLE9BQU9VO0FBQ1g7QUFDQWxCLDRDQUE0QyxHQUFHRSxzQ0FDL0Msb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL3Byb3RvMy1qc29uLXNlcmlhbGl6ZXIvYnVpbGQvc3JjL2R1cmF0aW9uLmpzPzI5NmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nb29nbGVQcm90b2J1ZkR1cmF0aW9uRnJvbVByb3RvM0pTT04gPSBleHBvcnRzLmdvb2dsZVByb3RvYnVmRHVyYXRpb25Ub1Byb3RvM0pTT04gPSB2b2lkIDA7XG5mdW5jdGlvbiBnb29nbGVQcm90b2J1ZkR1cmF0aW9uVG9Qcm90bzNKU09OKG9iaikge1xuICAgIC8vIHNlY29uZHMgaXMgYW4gaW5zdGFuY2Ugb2YgTG9uZyBzbyBpdCB3b24ndCBiZSB1bmRlZmluZWRcbiAgICBsZXQgZHVyYXRpb25TZWNvbmRzID0gb2JqLnNlY29uZHMudG9TdHJpbmcoKTtcbiAgICBpZiAodHlwZW9mIG9iai5uYW5vcyA9PT0gJ251bWJlcicgJiYgb2JqLm5hbm9zID4gMCkge1xuICAgICAgICAvLyBuYW5vc1N0ciBzaG91bGQgY29udGFpbiAzLCA2LCBvciA5IGZyYWN0aW9uYWwgZGlnaXRzLlxuICAgICAgICBjb25zdCBuYW5vc1N0ciA9IG9iai5uYW5vc1xuICAgICAgICAgICAgLnRvU3RyaW5nKClcbiAgICAgICAgICAgIC5wYWRTdGFydCg5LCAnMCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvXigoPzpcXGRcXGRcXGQpKz8pKD86MCopJC8sICckMScpO1xuICAgICAgICBkdXJhdGlvblNlY29uZHMgKz0gJy4nICsgbmFub3NTdHI7XG4gICAgfVxuICAgIGR1cmF0aW9uU2Vjb25kcyArPSAncyc7XG4gICAgcmV0dXJuIGR1cmF0aW9uU2Vjb25kcztcbn1cbmV4cG9ydHMuZ29vZ2xlUHJvdG9idWZEdXJhdGlvblRvUHJvdG8zSlNPTiA9IGdvb2dsZVByb3RvYnVmRHVyYXRpb25Ub1Byb3RvM0pTT047XG5mdW5jdGlvbiBnb29nbGVQcm90b2J1ZkR1cmF0aW9uRnJvbVByb3RvM0pTT04oanNvbikge1xuICAgIGNvbnN0IG1hdGNoID0ganNvbi5tYXRjaCgvXihcXGQqKSg/OlxcLihcXGQqKSk/cyQvKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZ29vZ2xlUHJvdG9idWZEdXJhdGlvbkZyb21Qcm90bzNKU09OOiBpbmNvcnJlY3QgdmFsdWUgJHtqc29ufSBwYXNzZWQgYXMgZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uYCk7XG4gICAgfVxuICAgIGxldCBzZWNvbmRzID0gMDtcbiAgICBsZXQgbmFub3MgPSAwO1xuICAgIGlmICh0eXBlb2YgbWF0Y2hbMV0gPT09ICdzdHJpbmcnICYmIG1hdGNoWzFdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2Vjb25kcyA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBtYXRjaFsyXSA9PT0gJ3N0cmluZycgJiYgbWF0Y2hbMl0ubGVuZ3RoID4gMCkge1xuICAgICAgICBuYW5vcyA9IHBhcnNlSW50KG1hdGNoWzJdLnBhZEVuZCg5LCAnMCcpKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgaWYgKHNlY29uZHMgIT09IDApIHtcbiAgICAgICAgcmVzdWx0LnNlY29uZHMgPSBzZWNvbmRzO1xuICAgIH1cbiAgICBpZiAobmFub3MgIT09IDApIHtcbiAgICAgICAgcmVzdWx0Lm5hbm9zID0gbmFub3M7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmdvb2dsZVByb3RvYnVmRHVyYXRpb25Gcm9tUHJvdG8zSlNPTiA9IGdvb2dsZVByb3RvYnVmRHVyYXRpb25Gcm9tUHJvdG8zSlNPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWR1cmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdvb2dsZVByb3RvYnVmRHVyYXRpb25Gcm9tUHJvdG8zSlNPTiIsImdvb2dsZVByb3RvYnVmRHVyYXRpb25Ub1Byb3RvM0pTT04iLCJvYmoiLCJkdXJhdGlvblNlY29uZHMiLCJzZWNvbmRzIiwidG9TdHJpbmciLCJuYW5vcyIsIm5hbm9zU3RyIiwicGFkU3RhcnQiLCJyZXBsYWNlIiwianNvbiIsIm1hdGNoIiwiRXJyb3IiLCJsZW5ndGgiLCJwYXJzZUludCIsInBhZEVuZCIsInJlc3VsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/duration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/enum.js":
/*!***************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/enum.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resolveEnumValueToNumber = exports.resolveEnumValueToString = void 0;\nfunction resolveEnumValueToString(enumType, enumValue) {\n    // for unknown enum values, do not fail and try to do the best we could.\n    // protobuf.js fromObject() will likely ignore unknown values, but at least\n    // we won't fail.\n    if (typeof enumValue === \"number\") {\n        const value = enumType.valuesById[enumValue];\n        if (typeof value === \"undefined\") {\n            // unknown value, cannot convert to string, returning number as is\n            return enumValue;\n        }\n        return value;\n    }\n    if (typeof enumValue === \"string\") {\n        // for strings, just accept what we got\n        return enumValue;\n    }\n    throw new Error(\"resolveEnumValueToString: enum value must be a string or a number\");\n}\nexports.resolveEnumValueToString = resolveEnumValueToString;\nfunction resolveEnumValueToNumber(enumType, enumValue) {\n    if (typeof enumValue === \"number\") {\n        // return as is\n        return enumValue;\n    }\n    if (typeof enumValue === \"string\") {\n        const num = enumType.values[enumValue];\n        if (typeof num === \"undefined\") {\n            // unknown value, cannot convert to number, returning string as is\n            return enumValue;\n        }\n        return num;\n    }\n    throw new Error(\"resolveEnumValueToNumber: enum value must be a string or a number\");\n}\nexports.resolveEnumValueToNumber = resolveEnumValueToNumber; //# sourceMappingURL=enum.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcHJvdG8zLWpzb24tc2VyaWFsaXplci9idWlsZC9zcmMvZW51bS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHQSxnQ0FBZ0MsR0FBRyxLQUFLO0FBQzNFLFNBQVNHLHlCQUF5QkMsUUFBUSxFQUFFQyxTQUFTO0lBQ2pELHdFQUF3RTtJQUN4RSwyRUFBMkU7SUFDM0UsaUJBQWlCO0lBQ2pCLElBQUksT0FBT0EsY0FBYyxVQUFVO1FBQy9CLE1BQU1KLFFBQVFHLFNBQVNFLFVBQVUsQ0FBQ0QsVUFBVTtRQUM1QyxJQUFJLE9BQU9KLFVBQVUsYUFBYTtZQUM5QixrRUFBa0U7WUFDbEUsT0FBT0k7UUFDWDtRQUNBLE9BQU9KO0lBQ1g7SUFDQSxJQUFJLE9BQU9JLGNBQWMsVUFBVTtRQUMvQix1Q0FBdUM7UUFDdkMsT0FBT0E7SUFDWDtJQUNBLE1BQU0sSUFBSUUsTUFBTTtBQUNwQjtBQUNBUCxnQ0FBZ0MsR0FBR0c7QUFDbkMsU0FBU0QseUJBQXlCRSxRQUFRLEVBQUVDLFNBQVM7SUFDakQsSUFBSSxPQUFPQSxjQUFjLFVBQVU7UUFDL0IsZUFBZTtRQUNmLE9BQU9BO0lBQ1g7SUFDQSxJQUFJLE9BQU9BLGNBQWMsVUFBVTtRQUMvQixNQUFNRyxNQUFNSixTQUFTSyxNQUFNLENBQUNKLFVBQVU7UUFDdEMsSUFBSSxPQUFPRyxRQUFRLGFBQWE7WUFDNUIsa0VBQWtFO1lBQ2xFLE9BQU9IO1FBQ1g7UUFDQSxPQUFPRztJQUNYO0lBQ0EsTUFBTSxJQUFJRCxNQUFNO0FBQ3BCO0FBQ0FQLGdDQUFnQyxHQUFHRSwwQkFDbkMsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL3Byb3RvMy1qc29uLXNlcmlhbGl6ZXIvYnVpbGQvc3JjL2VudW0uanM/N2E3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlc29sdmVFbnVtVmFsdWVUb051bWJlciA9IGV4cG9ydHMucmVzb2x2ZUVudW1WYWx1ZVRvU3RyaW5nID0gdm9pZCAwO1xuZnVuY3Rpb24gcmVzb2x2ZUVudW1WYWx1ZVRvU3RyaW5nKGVudW1UeXBlLCBlbnVtVmFsdWUpIHtcbiAgICAvLyBmb3IgdW5rbm93biBlbnVtIHZhbHVlcywgZG8gbm90IGZhaWwgYW5kIHRyeSB0byBkbyB0aGUgYmVzdCB3ZSBjb3VsZC5cbiAgICAvLyBwcm90b2J1Zi5qcyBmcm9tT2JqZWN0KCkgd2lsbCBsaWtlbHkgaWdub3JlIHVua25vd24gdmFsdWVzLCBidXQgYXQgbGVhc3RcbiAgICAvLyB3ZSB3b24ndCBmYWlsLlxuICAgIGlmICh0eXBlb2YgZW51bVZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGVudW1UeXBlLnZhbHVlc0J5SWRbZW51bVZhbHVlXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIC8vIHVua25vd24gdmFsdWUsIGNhbm5vdCBjb252ZXJ0IHRvIHN0cmluZywgcmV0dXJuaW5nIG51bWJlciBhcyBpc1xuICAgICAgICAgICAgcmV0dXJuIGVudW1WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW51bVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBmb3Igc3RyaW5ncywganVzdCBhY2NlcHQgd2hhdCB3ZSBnb3RcbiAgICAgICAgcmV0dXJuIGVudW1WYWx1ZTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyZXNvbHZlRW51bVZhbHVlVG9TdHJpbmc6IGVudW0gdmFsdWUgbXVzdCBiZSBhIHN0cmluZyBvciBhIG51bWJlcicpO1xufVxuZXhwb3J0cy5yZXNvbHZlRW51bVZhbHVlVG9TdHJpbmcgPSByZXNvbHZlRW51bVZhbHVlVG9TdHJpbmc7XG5mdW5jdGlvbiByZXNvbHZlRW51bVZhbHVlVG9OdW1iZXIoZW51bVR5cGUsIGVudW1WYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgZW51bVZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyByZXR1cm4gYXMgaXNcbiAgICAgICAgcmV0dXJuIGVudW1WYWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbnVtVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IGVudW1UeXBlLnZhbHVlc1tlbnVtVmFsdWVdO1xuICAgICAgICBpZiAodHlwZW9mIG51bSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIC8vIHVua25vd24gdmFsdWUsIGNhbm5vdCBjb252ZXJ0IHRvIG51bWJlciwgcmV0dXJuaW5nIHN0cmluZyBhcyBpc1xuICAgICAgICAgICAgcmV0dXJuIGVudW1WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Jlc29sdmVFbnVtVmFsdWVUb051bWJlcjogZW51bSB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgbnVtYmVyJyk7XG59XG5leHBvcnRzLnJlc29sdmVFbnVtVmFsdWVUb051bWJlciA9IHJlc29sdmVFbnVtVmFsdWVUb051bWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudW0uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVzb2x2ZUVudW1WYWx1ZVRvTnVtYmVyIiwicmVzb2x2ZUVudW1WYWx1ZVRvU3RyaW5nIiwiZW51bVR5cGUiLCJlbnVtVmFsdWUiLCJ2YWx1ZXNCeUlkIiwiRXJyb3IiLCJudW0iLCJ2YWx1ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/enum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/fieldmask.js":
/*!********************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/fieldmask.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.googleProtobufFieldMaskFromProto3JSON = exports.googleProtobufFieldMaskToProto3JSON = void 0;\nfunction googleProtobufFieldMaskToProto3JSON(obj) {\n    return obj.paths.join(\",\");\n}\nexports.googleProtobufFieldMaskToProto3JSON = googleProtobufFieldMaskToProto3JSON;\nfunction googleProtobufFieldMaskFromProto3JSON(json) {\n    return {\n        paths: json.split(\",\")\n    };\n}\nexports.googleProtobufFieldMaskFromProto3JSON = googleProtobufFieldMaskFromProto3JSON; //# sourceMappingURL=fieldmask.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcHJvdG8zLWpzb24tc2VyaWFsaXplci9idWlsZC9zcmMvZmllbGRtYXNrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0YsaURBQWlEO0FBQ2pELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkNBQTZDLEdBQUdBLDJDQUEyQyxHQUFHLEtBQUs7QUFDbkcsU0FBU0csb0NBQW9DQyxHQUFHO0lBQzVDLE9BQU9BLElBQUlDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDO0FBQzFCO0FBQ0FOLDJDQUEyQyxHQUFHRztBQUM5QyxTQUFTRCxzQ0FBc0NLLElBQUk7SUFDL0MsT0FBTztRQUNIRixPQUFPRSxLQUFLQyxLQUFLLENBQUM7SUFDdEI7QUFDSjtBQUNBUiw2Q0FBNkMsR0FBR0UsdUNBQ2hELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9wcm90bzMtanNvbi1zZXJpYWxpemVyL2J1aWxkL3NyYy9maWVsZG1hc2suanM/MGM2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdvb2dsZVByb3RvYnVmRmllbGRNYXNrRnJvbVByb3RvM0pTT04gPSBleHBvcnRzLmdvb2dsZVByb3RvYnVmRmllbGRNYXNrVG9Qcm90bzNKU09OID0gdm9pZCAwO1xuZnVuY3Rpb24gZ29vZ2xlUHJvdG9idWZGaWVsZE1hc2tUb1Byb3RvM0pTT04ob2JqKSB7XG4gICAgcmV0dXJuIG9iai5wYXRocy5qb2luKCcsJyk7XG59XG5leHBvcnRzLmdvb2dsZVByb3RvYnVmRmllbGRNYXNrVG9Qcm90bzNKU09OID0gZ29vZ2xlUHJvdG9idWZGaWVsZE1hc2tUb1Byb3RvM0pTT047XG5mdW5jdGlvbiBnb29nbGVQcm90b2J1ZkZpZWxkTWFza0Zyb21Qcm90bzNKU09OKGpzb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRoczoganNvbi5zcGxpdCgnLCcpLFxuICAgIH07XG59XG5leHBvcnRzLmdvb2dsZVByb3RvYnVmRmllbGRNYXNrRnJvbVByb3RvM0pTT04gPSBnb29nbGVQcm90b2J1ZkZpZWxkTWFza0Zyb21Qcm90bzNKU09OO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmllbGRtYXNrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdvb2dsZVByb3RvYnVmRmllbGRNYXNrRnJvbVByb3RvM0pTT04iLCJnb29nbGVQcm90b2J1ZkZpZWxkTWFza1RvUHJvdG8zSlNPTiIsIm9iaiIsInBhdGhzIiwiam9pbiIsImpzb24iLCJzcGxpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/fieldmask.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/fromproto3json.js":
/*!*************************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/fromproto3json.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromProto3JSON = exports.fromProto3JSONToInternalRepresentation = void 0;\nconst any_1 = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/any.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/bytes.js\");\nconst enum_1 = __webpack_require__(/*! ./enum */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/enum.js\");\nconst value_1 = __webpack_require__(/*! ./value */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/value.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/util.js\");\nconst duration_1 = __webpack_require__(/*! ./duration */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/duration.js\");\nconst timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/timestamp.js\");\nconst wrappers_1 = __webpack_require__(/*! ./wrappers */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/wrappers.js\");\nconst fieldmask_1 = __webpack_require__(/*! ./fieldmask */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/fieldmask.js\");\nfunction fromProto3JSONToInternalRepresentation(type, json) {\n    const fullyQualifiedTypeName = typeof type === \"string\" ? type : (0, util_1.getFullyQualifiedTypeName)(type);\n    if (typeof type !== \"string\" && \"values\" in type) {\n        // type is an Enum\n        if (fullyQualifiedTypeName === \".google.protobuf.NullValue\") {\n            return \"NULL_VALUE\";\n        }\n        return (0, enum_1.resolveEnumValueToString)(type, json);\n    }\n    if (typeof type !== \"string\") {\n        type.resolveAll();\n    }\n    if (typeof type === \"string\") {\n        return json;\n    }\n    // Types that require special handling according to\n    // https://developers.google.com/protocol-buffers/docs/proto3#json\n    // Types that can have meaningful \"null\" value\n    if (fullyQualifiedTypeName === \".google.protobuf.Value\") {\n        return (0, value_1.googleProtobufValueFromProto3JSON)(json);\n    }\n    if (util_1.wrapperTypes.has(fullyQualifiedTypeName)) {\n        if (json !== null && typeof json === \"object\" || Array.isArray(json)) {\n            throw new Error(`fromProto3JSONToInternalRepresentation: JSON representation for ${fullyQualifiedTypeName} expects a string, a number, or a boolean, but got ${typeof json}`);\n        }\n        return (0, wrappers_1.wrapperFromProto3JSON)(fullyQualifiedTypeName, json);\n    }\n    if (json === null) {\n        return null;\n    }\n    // Types that cannot be \"null\"\n    if (fullyQualifiedTypeName === \".google.protobuf.Any\") {\n        return (0, any_1.googleProtobufAnyFromProto3JSON)(type.root, json);\n    }\n    if (fullyQualifiedTypeName === \".google.protobuf.Struct\") {\n        if (typeof json !== \"object\") {\n            throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Struct must be an object but got ${typeof json}`);\n        }\n        if (Array.isArray(json)) {\n            throw new Error(\"fromProto3JSONToInternalRepresentation: google.protobuf.Struct must be an object but got an array\");\n        }\n        return (0, value_1.googleProtobufStructFromProto3JSON)(json);\n    }\n    if (fullyQualifiedTypeName === \".google.protobuf.ListValue\") {\n        if (!Array.isArray(json)) {\n            throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.ListValue must be an array but got ${typeof json}`);\n        }\n        return (0, value_1.googleProtobufListValueFromProto3JSON)(json);\n    }\n    if (fullyQualifiedTypeName === \".google.protobuf.Duration\") {\n        if (typeof json !== \"string\") {\n            throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Duration must be a string but got ${typeof json}`);\n        }\n        return (0, duration_1.googleProtobufDurationFromProto3JSON)(json);\n    }\n    if (fullyQualifiedTypeName === \".google.protobuf.Timestamp\") {\n        if (typeof json !== \"string\") {\n            throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Timestamp must be a string but got ${typeof json}`);\n        }\n        return (0, timestamp_1.googleProtobufTimestampFromProto3JSON)(json);\n    }\n    if (fullyQualifiedTypeName === \".google.protobuf.FieldMask\") {\n        if (typeof json !== \"string\") {\n            throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.FieldMask must be a string but got ${typeof json}`);\n        }\n        return (0, fieldmask_1.googleProtobufFieldMaskFromProto3JSON)(json);\n    }\n    const result = {};\n    for (const [key, value] of Object.entries(json)){\n        const field = type.fields[key];\n        if (!field) {\n            continue;\n        }\n        const resolvedType = field.resolvedType;\n        const fieldType = field.type;\n        if (field.repeated) {\n            if (value === null) {\n                result[key] = [];\n            } else {\n                if (!Array.isArray(value)) {\n                    throw new Error(`fromProto3JSONToInternalRepresentation: expected an array for field ${key}`);\n                }\n                result[key] = value.map((element)=>fromProto3JSONToInternalRepresentation(resolvedType || fieldType, element));\n            }\n        } else if (field.map) {\n            const map = {};\n            for (const [mapKey, mapValue] of Object.entries(value)){\n                map[mapKey] = fromProto3JSONToInternalRepresentation(resolvedType || fieldType, mapValue);\n            }\n            result[key] = map;\n        } else if (fieldType.match(/^(?:(?:(?:u?int|fixed)(?:32|64))|float|double)$/)) {\n            if (typeof value !== \"number\" && typeof value !== \"string\") {\n                throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);\n            }\n            result[key] = value;\n        } else if (fieldType === \"string\") {\n            if (typeof value !== \"string\") {\n                throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);\n            }\n            result[key] = value;\n        } else if (fieldType === \"bool\") {\n            if (typeof value !== \"boolean\") {\n                throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);\n            }\n            result[key] = value;\n        } else if (fieldType === \"bytes\") {\n            if (typeof value !== \"string\") {\n                throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);\n            }\n            result[key] = (0, bytes_1.bytesFromProto3JSON)(value);\n        } else {\n            // Message type\n            (0, util_1.assert)(resolvedType !== null, `Expected to be able to resolve type for field ${field.name}`);\n            const deserializedValue = fromProto3JSONToInternalRepresentation(resolvedType, value);\n            result[key] = deserializedValue;\n        }\n    }\n    return result;\n}\nexports.fromProto3JSONToInternalRepresentation = fromProto3JSONToInternalRepresentation;\nfunction fromProto3JSON(type, json) {\n    const internalRepr = fromProto3JSONToInternalRepresentation(type, json);\n    if (internalRepr === null) {\n        return null;\n    }\n    // We only expect a real object here sine all special cases should be already resolved. Everything else is an internal error\n    (0, util_1.assert)(typeof internalRepr === \"object\" && !Array.isArray(internalRepr), `fromProto3JSON: expected an object, not ${json}`);\n    return type.fromObject(internalRepr);\n}\nexports.fromProto3JSON = fromProto3JSON; //# sourceMappingURL=fromproto3json.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/fromproto3json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromProto3JSON = exports.toProto3JSON = void 0;\nvar toproto3json_1 = __webpack_require__(/*! ./toproto3json */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/toproto3json.js\");\nObject.defineProperty(exports, \"toProto3JSON\", ({\n    enumerable: true,\n    get: function() {\n        return toproto3json_1.toProto3JSON;\n    }\n}));\nvar fromproto3json_1 = __webpack_require__(/*! ./fromproto3json */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/fromproto3json.js\");\nObject.defineProperty(exports, \"fromProto3JSON\", ({\n    enumerable: true,\n    get: function() {\n        return fromproto3json_1.fromProto3JSON;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcHJvdG8zLWpzb24tc2VyaWFsaXplci9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixpREFBaUQ7QUFDakQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBR0Esb0JBQW9CLEdBQUcsS0FBSztBQUNyRCxJQUFJSSxpQkFBaUJDLG1CQUFPQSxDQUFDLDZGQUFnQjtBQUM3Q1AsZ0RBQStDO0lBQUVRLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILGVBQWVELFlBQVk7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM5SCxJQUFJSyxtQkFBbUJILG1CQUFPQSxDQUFDLGlHQUFrQjtBQUNqRFAsa0RBQWlEO0lBQUVRLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLGlCQUFpQk4sY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDLEVBQ3BJLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9wcm90bzMtanNvbi1zZXJpYWxpemVyL2J1aWxkL3NyYy9pbmRleC5qcz9iOTFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbVByb3RvM0pTT04gPSBleHBvcnRzLnRvUHJvdG8zSlNPTiA9IHZvaWQgMDtcbnZhciB0b3Byb3RvM2pzb25fMSA9IHJlcXVpcmUoXCIuL3RvcHJvdG8zanNvblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvUHJvdG8zSlNPTlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdG9wcm90bzNqc29uXzEudG9Qcm90bzNKU09OOyB9IH0pO1xudmFyIGZyb21wcm90bzNqc29uXzEgPSByZXF1aXJlKFwiLi9mcm9tcHJvdG8zanNvblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21Qcm90bzNKU09OXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmcm9tcHJvdG8zanNvbl8xLmZyb21Qcm90bzNKU09OOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZnJvbVByb3RvM0pTT04iLCJ0b1Byb3RvM0pTT04iLCJ0b3Byb3RvM2pzb25fMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZnJvbXByb3RvM2pzb25fMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/timestamp.js":
/*!********************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/timestamp.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.googleProtobufTimestampFromProto3JSON = exports.googleProtobufTimestampToProto3JSON = void 0;\nfunction googleProtobufTimestampToProto3JSON(obj) {\n    var _a;\n    // seconds is an instance of Long so it won't be undefined\n    const durationSeconds = obj.seconds;\n    const date = new Date(durationSeconds * 1000).toISOString();\n    // Pad leading zeros if nano string length is less than 9.\n    let nanos = (_a = obj.nanos) === null || _a === void 0 ? void 0 : _a.toString().padStart(9, \"0\");\n    // Trim the unsignificant zeros and keep 3, 6, or 9 decimal digits.\n    while(nanos && nanos.length > 3 && nanos.endsWith(\"000\")){\n        nanos = nanos.slice(0, -3);\n    }\n    return date.replace(/(?:\\.\\d{0,9})/, \".\" + nanos);\n}\nexports.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;\nfunction googleProtobufTimestampFromProto3JSON(json) {\n    const match = json.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/);\n    if (!match) {\n        throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);\n    }\n    const date = new Date(json);\n    const millisecondsSinceEpoch = date.getTime();\n    const seconds = Math.floor(millisecondsSinceEpoch / 1000);\n    // The fractional seconds in the JSON timestamps can go up to 9 digits (i.e. up to 1 nanosecond resolution).\n    // However, Javascript Date object represent any date and time to millisecond precision.\n    // To keep the precision, we extract the fractional seconds and append 0 until the length is equal to 9.\n    let nanos = 0;\n    const secondsFromDate = json.split(\".\")[1];\n    if (secondsFromDate) {\n        nanos = parseInt(secondsFromDate.slice(0, -1).padEnd(9, \"0\"));\n    }\n    const result = {};\n    if (seconds !== 0) {\n        result.seconds = seconds;\n    }\n    if (nanos !== 0) {\n        result.nanos = nanos;\n    }\n    return result;\n}\nexports.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON; //# sourceMappingURL=timestamp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcHJvdG8zLWpzb24tc2VyaWFsaXplci9idWlsZC9zcmMvdGltZXN0YW1wLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0YsaURBQWlEO0FBQ2pELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkNBQTZDLEdBQUdBLDJDQUEyQyxHQUFHLEtBQUs7QUFDbkcsU0FBU0csb0NBQW9DQyxHQUFHO0lBQzVDLElBQUlDO0lBQ0osMERBQTBEO0lBQzFELE1BQU1DLGtCQUFrQkYsSUFBSUcsT0FBTztJQUNuQyxNQUFNQyxPQUFPLElBQUlDLEtBQUtILGtCQUFrQixNQUFNSSxXQUFXO0lBQ3pELDBEQUEwRDtJQUMxRCxJQUFJQyxRQUFRLENBQUNOLEtBQUtELElBQUlPLEtBQUssTUFBTSxRQUFRTixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdPLFFBQVEsR0FBR0MsUUFBUSxDQUFDLEdBQUc7SUFDNUYsbUVBQW1FO0lBQ25FLE1BQU9GLFNBQVNBLE1BQU1HLE1BQU0sR0FBRyxLQUFLSCxNQUFNSSxRQUFRLENBQUMsT0FBUTtRQUN2REosUUFBUUEsTUFBTUssS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUM1QjtJQUNBLE9BQU9SLEtBQUtTLE9BQU8sQ0FBQyxpQkFBaUIsTUFBTU47QUFDL0M7QUFDQVgsMkNBQTJDLEdBQUdHO0FBQzlDLFNBQVNELHNDQUFzQ2dCLElBQUk7SUFDL0MsTUFBTUMsUUFBUUQsS0FBS0MsS0FBSyxDQUFDO0lBQ3pCLElBQUksQ0FBQ0EsT0FBTztRQUNSLE1BQU0sSUFBSUMsTUFBTSxDQUFDLHNEQUFzRCxFQUFFRixLQUFLLG1DQUFtQyxDQUFDO0lBQ3RIO0lBQ0EsTUFBTVYsT0FBTyxJQUFJQyxLQUFLUztJQUN0QixNQUFNRyx5QkFBeUJiLEtBQUtjLE9BQU87SUFDM0MsTUFBTWYsVUFBVWdCLEtBQUtDLEtBQUssQ0FBQ0gseUJBQXlCO0lBQ3BELDRHQUE0RztJQUM1Ryx3RkFBd0Y7SUFDeEYsd0dBQXdHO0lBQ3hHLElBQUlWLFFBQVE7SUFDWixNQUFNYyxrQkFBa0JQLEtBQUtRLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUMxQyxJQUFJRCxpQkFBaUI7UUFDakJkLFFBQVFnQixTQUFTRixnQkFBZ0JULEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBR1ksTUFBTSxDQUFDLEdBQUc7SUFDNUQ7SUFDQSxNQUFNQyxTQUFTLENBQUM7SUFDaEIsSUFBSXRCLFlBQVksR0FBRztRQUNmc0IsT0FBT3RCLE9BQU8sR0FBR0E7SUFDckI7SUFDQSxJQUFJSSxVQUFVLEdBQUc7UUFDYmtCLE9BQU9sQixLQUFLLEdBQUdBO0lBQ25CO0lBQ0EsT0FBT2tCO0FBQ1g7QUFDQTdCLDZDQUE2QyxHQUFHRSx1Q0FDaEQscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL3Byb3RvMy1qc29uLXNlcmlhbGl6ZXIvYnVpbGQvc3JjL3RpbWVzdGFtcC5qcz9hODU5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ29vZ2xlUHJvdG9idWZUaW1lc3RhbXBGcm9tUHJvdG8zSlNPTiA9IGV4cG9ydHMuZ29vZ2xlUHJvdG9idWZUaW1lc3RhbXBUb1Byb3RvM0pTT04gPSB2b2lkIDA7XG5mdW5jdGlvbiBnb29nbGVQcm90b2J1ZlRpbWVzdGFtcFRvUHJvdG8zSlNPTihvYmopIHtcbiAgICB2YXIgX2E7XG4gICAgLy8gc2Vjb25kcyBpcyBhbiBpbnN0YW5jZSBvZiBMb25nIHNvIGl0IHdvbid0IGJlIHVuZGVmaW5lZFxuICAgIGNvbnN0IGR1cmF0aW9uU2Vjb25kcyA9IG9iai5zZWNvbmRzO1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkdXJhdGlvblNlY29uZHMgKiAxMDAwKS50b0lTT1N0cmluZygpO1xuICAgIC8vIFBhZCBsZWFkaW5nIHplcm9zIGlmIG5hbm8gc3RyaW5nIGxlbmd0aCBpcyBsZXNzIHRoYW4gOS5cbiAgICBsZXQgbmFub3MgPSAoX2EgPSBvYmoubmFub3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b1N0cmluZygpLnBhZFN0YXJ0KDksICcwJyk7XG4gICAgLy8gVHJpbSB0aGUgdW5zaWduaWZpY2FudCB6ZXJvcyBhbmQga2VlcCAzLCA2LCBvciA5IGRlY2ltYWwgZGlnaXRzLlxuICAgIHdoaWxlIChuYW5vcyAmJiBuYW5vcy5sZW5ndGggPiAzICYmIG5hbm9zLmVuZHNXaXRoKCcwMDAnKSkge1xuICAgICAgICBuYW5vcyA9IG5hbm9zLnNsaWNlKDAsIC0zKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGUucmVwbGFjZSgvKD86XFwuXFxkezAsOX0pLywgJy4nICsgbmFub3MpO1xufVxuZXhwb3J0cy5nb29nbGVQcm90b2J1ZlRpbWVzdGFtcFRvUHJvdG8zSlNPTiA9IGdvb2dsZVByb3RvYnVmVGltZXN0YW1wVG9Qcm90bzNKU09OO1xuZnVuY3Rpb24gZ29vZ2xlUHJvdG9idWZUaW1lc3RhbXBGcm9tUHJvdG8zSlNPTihqc29uKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBqc29uLm1hdGNoKC9eXFxkezR9LVxcZHsyfS1cXGR7Mn1UXFxkezJ9OlxcZHsyfTpcXGR7Mn0oPzpcXC5cXGQrKT8vKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZ29vZ2xlUHJvdG9idWZEdXJhdGlvbkZyb21Qcm90bzNKU09OOiBpbmNvcnJlY3QgdmFsdWUgJHtqc29ufSBwYXNzZWQgYXMgZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uYCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShqc29uKTtcbiAgICBjb25zdCBtaWxsaXNlY29uZHNTaW5jZUVwb2NoID0gZGF0ZS5nZXRUaW1lKCk7XG4gICAgY29uc3Qgc2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzU2luY2VFcG9jaCAvIDEwMDApO1xuICAgIC8vIFRoZSBmcmFjdGlvbmFsIHNlY29uZHMgaW4gdGhlIEpTT04gdGltZXN0YW1wcyBjYW4gZ28gdXAgdG8gOSBkaWdpdHMgKGkuZS4gdXAgdG8gMSBuYW5vc2Vjb25kIHJlc29sdXRpb24pLlxuICAgIC8vIEhvd2V2ZXIsIEphdmFzY3JpcHQgRGF0ZSBvYmplY3QgcmVwcmVzZW50IGFueSBkYXRlIGFuZCB0aW1lIHRvIG1pbGxpc2Vjb25kIHByZWNpc2lvbi5cbiAgICAvLyBUbyBrZWVwIHRoZSBwcmVjaXNpb24sIHdlIGV4dHJhY3QgdGhlIGZyYWN0aW9uYWwgc2Vjb25kcyBhbmQgYXBwZW5kIDAgdW50aWwgdGhlIGxlbmd0aCBpcyBlcXVhbCB0byA5LlxuICAgIGxldCBuYW5vcyA9IDA7XG4gICAgY29uc3Qgc2Vjb25kc0Zyb21EYXRlID0ganNvbi5zcGxpdCgnLicpWzFdO1xuICAgIGlmIChzZWNvbmRzRnJvbURhdGUpIHtcbiAgICAgICAgbmFub3MgPSBwYXJzZUludChzZWNvbmRzRnJvbURhdGUuc2xpY2UoMCwgLTEpLnBhZEVuZCg5LCAnMCcpKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgaWYgKHNlY29uZHMgIT09IDApIHtcbiAgICAgICAgcmVzdWx0LnNlY29uZHMgPSBzZWNvbmRzO1xuICAgIH1cbiAgICBpZiAobmFub3MgIT09IDApIHtcbiAgICAgICAgcmVzdWx0Lm5hbm9zID0gbmFub3M7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmdvb2dsZVByb3RvYnVmVGltZXN0YW1wRnJvbVByb3RvM0pTT04gPSBnb29nbGVQcm90b2J1ZlRpbWVzdGFtcEZyb21Qcm90bzNKU09OO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXN0YW1wLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdvb2dsZVByb3RvYnVmVGltZXN0YW1wRnJvbVByb3RvM0pTT04iLCJnb29nbGVQcm90b2J1ZlRpbWVzdGFtcFRvUHJvdG8zSlNPTiIsIm9iaiIsIl9hIiwiZHVyYXRpb25TZWNvbmRzIiwic2Vjb25kcyIsImRhdGUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJuYW5vcyIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJsZW5ndGgiLCJlbmRzV2l0aCIsInNsaWNlIiwicmVwbGFjZSIsImpzb24iLCJtYXRjaCIsIkVycm9yIiwibWlsbGlzZWNvbmRzU2luY2VFcG9jaCIsImdldFRpbWUiLCJNYXRoIiwiZmxvb3IiLCJzZWNvbmRzRnJvbURhdGUiLCJzcGxpdCIsInBhcnNlSW50IiwicGFkRW5kIiwicmVzdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/timestamp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/toproto3json.js":
/*!***********************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/toproto3json.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toProto3JSON = void 0;\nconst any_1 = __webpack_require__(/*! ./any */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/any.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/bytes.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/util.js\");\nconst enum_1 = __webpack_require__(/*! ./enum */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/enum.js\");\nconst value_1 = __webpack_require__(/*! ./value */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/value.js\");\nconst duration_1 = __webpack_require__(/*! ./duration */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/duration.js\");\nconst timestamp_1 = __webpack_require__(/*! ./timestamp */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/timestamp.js\");\nconst wrappers_1 = __webpack_require__(/*! ./wrappers */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/wrappers.js\");\nconst fieldmask_1 = __webpack_require__(/*! ./fieldmask */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/fieldmask.js\");\n// Convert a single value, which might happen to be an instance of Long, to JSONValue\nfunction convertSingleValue(value) {\n    var _a;\n    if (typeof value === \"object\") {\n        if (((_a = value === null || value === void 0 ? void 0 : value.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"Long\") {\n            return value.toString();\n        }\n        throw new Error(`toProto3JSON: don't know how to convert value ${value}`);\n    }\n    return value;\n}\nfunction toProto3JSON(obj, options) {\n    const objType = obj.$type;\n    if (!objType) {\n        throw new Error(\"Cannot serialize object to proto3 JSON since its .$type is unknown. Use Type.fromObject(obj) before calling toProto3JSON.\");\n    }\n    objType.resolveAll();\n    const typeName = (0, util_1.getFullyQualifiedTypeName)(objType);\n    // Types that require special handling according to\n    // https://developers.google.com/protocol-buffers/docs/proto3#json\n    if (typeName === \".google.protobuf.Any\") {\n        return (0, any_1.googleProtobufAnyToProto3JSON)(obj, options);\n    }\n    if (typeName === \".google.protobuf.Value\") {\n        return (0, value_1.googleProtobufValueToProto3JSON)(obj);\n    }\n    if (typeName === \".google.protobuf.Struct\") {\n        return (0, value_1.googleProtobufStructToProto3JSON)(obj);\n    }\n    if (typeName === \".google.protobuf.ListValue\") {\n        return (0, value_1.googleProtobufListValueToProto3JSON)(obj);\n    }\n    if (typeName === \".google.protobuf.Duration\") {\n        return (0, duration_1.googleProtobufDurationToProto3JSON)(obj);\n    }\n    if (typeName === \".google.protobuf.Timestamp\") {\n        return (0, timestamp_1.googleProtobufTimestampToProto3JSON)(obj);\n    }\n    if (typeName === \".google.protobuf.FieldMask\") {\n        return (0, fieldmask_1.googleProtobufFieldMaskToProto3JSON)(obj);\n    }\n    if (util_1.wrapperTypes.has(typeName)) {\n        return (0, wrappers_1.wrapperToProto3JSON)(obj);\n    }\n    const result = {};\n    for (const [key, value] of Object.entries(obj)){\n        const field = objType.fields[key];\n        const fieldResolvedType = field.resolvedType;\n        const fieldFullyQualifiedTypeName = fieldResolvedType ? (0, util_1.getFullyQualifiedTypeName)(fieldResolvedType) : null;\n        if (value === null) {\n            result[key] = null;\n            continue;\n        }\n        if (Array.isArray(value)) {\n            if (value.length === 0) {\n                continue;\n            }\n            // if the repeated value has a complex type, convert it to proto3 JSON, otherwise use as is\n            result[key] = value.map(fieldResolvedType ? (element)=>{\n                return toProto3JSON(element, options);\n            } : convertSingleValue);\n            continue;\n        }\n        if (field.map) {\n            const map = {};\n            for (const [mapKey, mapValue] of Object.entries(value)){\n                // if the map value has a complex type, convert it to proto3 JSON, otherwise use as is\n                map[mapKey] = fieldResolvedType ? toProto3JSON(mapValue, options) : convertSingleValue(mapValue);\n            }\n            result[key] = map;\n            continue;\n        }\n        if (fieldFullyQualifiedTypeName === \".google.protobuf.NullValue\") {\n            result[key] = null;\n            continue;\n        }\n        if (fieldResolvedType && \"values\" in fieldResolvedType && value !== null) {\n            if (options === null || options === void 0 ? void 0 : options.numericEnums) {\n                result[key] = (0, enum_1.resolveEnumValueToNumber)(fieldResolvedType, value);\n            } else {\n                result[key] = (0, enum_1.resolveEnumValueToString)(fieldResolvedType, value);\n            }\n            continue;\n        }\n        if (fieldResolvedType) {\n            result[key] = toProto3JSON(value, options);\n            continue;\n        }\n        if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || value === null) {\n            if (typeof value === \"number\" && !Number.isFinite(value)) {\n                result[key] = value.toString();\n                continue;\n            }\n            result[key] = value;\n            continue;\n        }\n        if (Buffer.isBuffer(value) || value instanceof Uint8Array) {\n            result[key] = (0, bytes_1.bytesToProto3JSON)(value);\n            continue;\n        }\n        result[key] = convertSingleValue(value);\n        continue;\n    }\n    return result;\n}\nexports.toProto3JSON = toProto3JSON; //# sourceMappingURL=toproto3json.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/toproto3json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/util.js":
/*!***************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/util.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.assert = exports.wrapperTypes = exports.getFullyQualifiedTypeName = void 0;\nfunction getFullyQualifiedTypeName(type) {\n    // We assume that the protobuf package tree cannot have cycles.\n    let fullyQualifiedTypeName = \"\";\n    while(type.parent){\n        fullyQualifiedTypeName = `.${type.name}${fullyQualifiedTypeName}`;\n        type = type.parent;\n    }\n    return fullyQualifiedTypeName;\n}\nexports.getFullyQualifiedTypeName = getFullyQualifiedTypeName;\nexports.wrapperTypes = new Set([\n    \".google.protobuf.DoubleValue\",\n    \".google.protobuf.FloatValue\",\n    \".google.protobuf.Int64Value\",\n    \".google.protobuf.UInt64Value\",\n    \".google.protobuf.Int32Value\",\n    \".google.protobuf.UInt32Value\",\n    \".google.protobuf.BoolValue\",\n    \".google.protobuf.StringValue\",\n    \".google.protobuf.BytesValue\"\n]);\nfunction assert(assertion, message) {\n    if (!assertion) {\n        throw new Error(message);\n    }\n}\nexports.assert = assert; //# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcHJvdG8zLWpzb24tc2VyaWFsaXplci9idWlsZC9zcmMvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBR0Esb0JBQW9CLEdBQUdBLGlDQUFpQyxHQUFHLEtBQUs7QUFDakYsU0FBU0ksMEJBQTBCQyxJQUFJO0lBQ25DLCtEQUErRDtJQUMvRCxJQUFJQyx5QkFBeUI7SUFDN0IsTUFBT0QsS0FBS0UsTUFBTSxDQUFFO1FBQ2hCRCx5QkFBeUIsQ0FBQyxDQUFDLEVBQUVELEtBQUtHLElBQUksQ0FBQyxFQUFFRix1QkFBdUIsQ0FBQztRQUNqRUQsT0FBT0EsS0FBS0UsTUFBTTtJQUN0QjtJQUNBLE9BQU9EO0FBQ1g7QUFDQU4saUNBQWlDLEdBQUdJO0FBQ3BDSixvQkFBb0IsR0FBRyxJQUFJUyxJQUFJO0lBQzNCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsU0FBU1AsT0FBT1EsU0FBUyxFQUFFQyxPQUFPO0lBQzlCLElBQUksQ0FBQ0QsV0FBVztRQUNaLE1BQU0sSUFBSUUsTUFBTUQ7SUFDcEI7QUFDSjtBQUNBWCxjQUFjLEdBQUdFLFFBQ2pCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9wcm90bzMtanNvbi1zZXJpYWxpemVyL2J1aWxkL3NyYy91dGlsLmpzPzY3YzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hc3NlcnQgPSBleHBvcnRzLndyYXBwZXJUeXBlcyA9IGV4cG9ydHMuZ2V0RnVsbHlRdWFsaWZpZWRUeXBlTmFtZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGdldEZ1bGx5UXVhbGlmaWVkVHlwZU5hbWUodHlwZSkge1xuICAgIC8vIFdlIGFzc3VtZSB0aGF0IHRoZSBwcm90b2J1ZiBwYWNrYWdlIHRyZWUgY2Fubm90IGhhdmUgY3ljbGVzLlxuICAgIGxldCBmdWxseVF1YWxpZmllZFR5cGVOYW1lID0gJyc7XG4gICAgd2hpbGUgKHR5cGUucGFyZW50KSB7XG4gICAgICAgIGZ1bGx5UXVhbGlmaWVkVHlwZU5hbWUgPSBgLiR7dHlwZS5uYW1lfSR7ZnVsbHlRdWFsaWZpZWRUeXBlTmFtZX1gO1xuICAgICAgICB0eXBlID0gdHlwZS5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBmdWxseVF1YWxpZmllZFR5cGVOYW1lO1xufVxuZXhwb3J0cy5nZXRGdWxseVF1YWxpZmllZFR5cGVOYW1lID0gZ2V0RnVsbHlRdWFsaWZpZWRUeXBlTmFtZTtcbmV4cG9ydHMud3JhcHBlclR5cGVzID0gbmV3IFNldChbXG4gICAgJy5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUnLFxuICAgICcuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUnLFxuICAgICcuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUnLFxuICAgICcuZ29vZ2xlLnByb3RvYnVmLlVJbnQ2NFZhbHVlJyxcbiAgICAnLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlJyxcbiAgICAnLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZScsXG4gICAgJy5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlJyxcbiAgICAnLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZScsXG4gICAgJy5nb29nbGUucHJvdG9idWYuQnl0ZXNWYWx1ZScsXG5dKTtcbmZ1bmN0aW9uIGFzc2VydChhc3NlcnRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoIWFzc2VydGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfVxufVxuZXhwb3J0cy5hc3NlcnQgPSBhc3NlcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFzc2VydCIsIndyYXBwZXJUeXBlcyIsImdldEZ1bGx5UXVhbGlmaWVkVHlwZU5hbWUiLCJ0eXBlIiwiZnVsbHlRdWFsaWZpZWRUeXBlTmFtZSIsInBhcmVudCIsIm5hbWUiLCJTZXQiLCJhc3NlcnRpb24iLCJtZXNzYWdlIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/value.js":
/*!****************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/value.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.googleProtobufValueFromProto3JSON = exports.googleProtobufListValueFromProto3JSON = exports.googleProtobufStructFromProto3JSON = exports.googleProtobufValueToProto3JSON = exports.googleProtobufListValueToProto3JSON = exports.googleProtobufStructToProto3JSON = void 0;\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/util.js\");\nfunction googleProtobufStructToProto3JSON(obj) {\n    const result = {};\n    const fields = obj.fields;\n    for (const [key, value] of Object.entries(fields)){\n        result[key] = googleProtobufValueToProto3JSON(value);\n    }\n    return result;\n}\nexports.googleProtobufStructToProto3JSON = googleProtobufStructToProto3JSON;\nfunction googleProtobufListValueToProto3JSON(obj) {\n    (0, util_1.assert)(Array.isArray(obj.values), \"ListValue internal representation must contain array of values\");\n    return obj.values.map(googleProtobufValueToProto3JSON);\n}\nexports.googleProtobufListValueToProto3JSON = googleProtobufListValueToProto3JSON;\nfunction googleProtobufValueToProto3JSON(obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, \"nullValue\")) {\n        return null;\n    }\n    if (Object.prototype.hasOwnProperty.call(obj, \"numberValue\") && typeof obj.numberValue === \"number\") {\n        if (!Number.isFinite(obj.numberValue)) {\n            return obj.numberValue.toString();\n        }\n        return obj.numberValue;\n    }\n    if (Object.prototype.hasOwnProperty.call(obj, \"stringValue\") && typeof obj.stringValue === \"string\") {\n        return obj.stringValue;\n    }\n    if (Object.prototype.hasOwnProperty.call(obj, \"boolValue\") && typeof obj.boolValue === \"boolean\") {\n        return obj.boolValue;\n    }\n    if (Object.prototype.hasOwnProperty.call(obj, \"structValue\") && typeof obj.structValue === \"object\") {\n        return googleProtobufStructToProto3JSON(obj.structValue);\n    }\n    if (Object.prototype.hasOwnProperty.call(obj, \"listValue\") && typeof obj === \"object\" && typeof obj.listValue === \"object\") {\n        return googleProtobufListValueToProto3JSON(obj.listValue);\n    }\n    // Assuming empty Value to be null\n    return null;\n}\nexports.googleProtobufValueToProto3JSON = googleProtobufValueToProto3JSON;\nfunction googleProtobufStructFromProto3JSON(json) {\n    const fields = {};\n    for (const [key, value] of Object.entries(json)){\n        fields[key] = googleProtobufValueFromProto3JSON(value);\n    }\n    return {\n        fields\n    };\n}\nexports.googleProtobufStructFromProto3JSON = googleProtobufStructFromProto3JSON;\nfunction googleProtobufListValueFromProto3JSON(json) {\n    return {\n        values: json.map((element)=>googleProtobufValueFromProto3JSON(element))\n    };\n}\nexports.googleProtobufListValueFromProto3JSON = googleProtobufListValueFromProto3JSON;\nfunction googleProtobufValueFromProto3JSON(json) {\n    if (json === null) {\n        return {\n            nullValue: \"NULL_VALUE\"\n        };\n    }\n    if (typeof json === \"number\") {\n        return {\n            numberValue: json\n        };\n    }\n    if (typeof json === \"string\") {\n        return {\n            stringValue: json\n        };\n    }\n    if (typeof json === \"boolean\") {\n        return {\n            boolValue: json\n        };\n    }\n    if (Array.isArray(json)) {\n        return {\n            listValue: googleProtobufListValueFromProto3JSON(json)\n        };\n    }\n    if (typeof json === \"object\") {\n        return {\n            structValue: googleProtobufStructFromProto3JSON(json)\n        };\n    }\n    throw new Error(`googleProtobufValueFromProto3JSON: incorrect parameter type: ${typeof json}`);\n}\nexports.googleProtobufValueFromProto3JSON = googleProtobufValueFromProto3JSON; //# sourceMappingURL=value.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/value.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/proto3-json-serializer/build/src/wrappers.js":
/*!*******************************************************************!*\
  !*** ./node_modules/proto3-json-serializer/build/src/wrappers.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.wrapperFromProto3JSON = exports.wrapperToProto3JSON = void 0;\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/bytes.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/util.js\");\nfunction wrapperToProto3JSON(obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, \"value\")) {\n        return null;\n    }\n    if (Buffer.isBuffer(obj.value) || obj.value instanceof Uint8Array) {\n        return (0, bytes_1.bytesToProto3JSON)(obj.value);\n    }\n    if (typeof obj.value === \"object\") {\n        (0, util_1.assert)(obj.value.constructor.name === \"Long\", `wrapperToProto3JSON: expected to see a number, a string, a boolean, or a Long, but got ${obj.value}`);\n        return obj.value.toString();\n    }\n    // JSON accept special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n    if (typeof obj.value === \"number\" && !Number.isFinite(obj.value)) {\n        return obj.value.toString();\n    }\n    return obj.value;\n}\nexports.wrapperToProto3JSON = wrapperToProto3JSON;\nfunction wrapperFromProto3JSON(typeName, json) {\n    if (json === null) {\n        return {\n            value: null\n        };\n    }\n    if (typeName === \".google.protobuf.BytesValue\") {\n        if (typeof json !== \"string\") {\n            throw new Error(`numberWrapperFromProto3JSON: expected to get a string for google.protobuf.BytesValue but got ${typeof json}`);\n        }\n        return {\n            value: (0, bytes_1.bytesFromProto3JSON)(json)\n        };\n    }\n    return {\n        value: json\n    };\n}\nexports.wrapperFromProto3JSON = wrapperFromProto3JSON; //# sourceMappingURL=wrappers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcHJvdG8zLWpzb24tc2VyaWFsaXplci9idWlsZC9zcmMvd3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixpREFBaUQ7QUFDakQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBR0EsMkJBQTJCLEdBQUcsS0FBSztBQUNuRSxNQUFNSSxVQUFVQyxtQkFBT0EsQ0FBQywrRUFBUztBQUNqQyxNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyw2RUFBUTtBQUMvQixTQUFTRixvQkFBb0JJLEdBQUc7SUFDNUIsSUFBSSxDQUFDVCxPQUFPVSxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSCxLQUFLLFVBQVU7UUFDckQsT0FBTztJQUNYO0lBQ0EsSUFBSUksT0FBT0MsUUFBUSxDQUFDTCxJQUFJTixLQUFLLEtBQUtNLElBQUlOLEtBQUssWUFBWVksWUFBWTtRQUMvRCxPQUFPLENBQUMsR0FBR1QsUUFBUVUsaUJBQWlCLEVBQUVQLElBQUlOLEtBQUs7SUFDbkQ7SUFDQSxJQUFJLE9BQU9NLElBQUlOLEtBQUssS0FBSyxVQUFVO1FBQzlCLElBQUdLLE9BQU9TLE1BQU0sRUFBRVIsSUFBSU4sS0FBSyxDQUFDZSxXQUFXLENBQUNDLElBQUksS0FBSyxRQUFRLENBQUMsdUZBQXVGLEVBQUVWLElBQUlOLEtBQUssQ0FBQyxDQUFDO1FBQy9KLE9BQU9NLElBQUlOLEtBQUssQ0FBQ2lCLFFBQVE7SUFDN0I7SUFDQSx3RUFBd0U7SUFDeEUsSUFBSSxPQUFPWCxJQUFJTixLQUFLLEtBQUssWUFBWSxDQUFDa0IsT0FBT0MsUUFBUSxDQUFDYixJQUFJTixLQUFLLEdBQUc7UUFDOUQsT0FBT00sSUFBSU4sS0FBSyxDQUFDaUIsUUFBUTtJQUM3QjtJQUNBLE9BQU9YLElBQUlOLEtBQUs7QUFDcEI7QUFDQUQsMkJBQTJCLEdBQUdHO0FBQzlCLFNBQVNELHNCQUFzQm1CLFFBQVEsRUFBRUMsSUFBSTtJQUN6QyxJQUFJQSxTQUFTLE1BQU07UUFDZixPQUFPO1lBQ0hyQixPQUFPO1FBQ1g7SUFDSjtJQUNBLElBQUlvQixhQUFhLCtCQUErQjtRQUM1QyxJQUFJLE9BQU9DLFNBQVMsVUFBVTtZQUMxQixNQUFNLElBQUlDLE1BQU0sQ0FBQyw2RkFBNkYsRUFBRSxPQUFPRCxLQUFLLENBQUM7UUFDakk7UUFDQSxPQUFPO1lBQ0hyQixPQUFPLENBQUMsR0FBR0csUUFBUW9CLG1CQUFtQixFQUFFRjtRQUM1QztJQUNKO0lBQ0EsT0FBTztRQUNIckIsT0FBT3FCO0lBQ1g7QUFDSjtBQUNBdEIsNkJBQTZCLEdBQUdFLHVCQUNoQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvcHJvdG8zLWpzb24tc2VyaWFsaXplci9idWlsZC9zcmMvd3JhcHBlcnMuanM/NTBlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndyYXBwZXJGcm9tUHJvdG8zSlNPTiA9IGV4cG9ydHMud3JhcHBlclRvUHJvdG8zSlNPTiA9IHZvaWQgMDtcbmNvbnN0IGJ5dGVzXzEgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5mdW5jdGlvbiB3cmFwcGVyVG9Qcm90bzNKU09OKG9iaikge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgJ3ZhbHVlJykpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqLnZhbHVlKSB8fCBvYmoudmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiAoMCwgYnl0ZXNfMS5ieXRlc1RvUHJvdG8zSlNPTikob2JqLnZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmoudmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICgwLCB1dGlsXzEuYXNzZXJ0KShvYmoudmFsdWUuY29uc3RydWN0b3IubmFtZSA9PT0gJ0xvbmcnLCBgd3JhcHBlclRvUHJvdG8zSlNPTjogZXhwZWN0ZWQgdG8gc2VlIGEgbnVtYmVyLCBhIHN0cmluZywgYSBib29sZWFuLCBvciBhIExvbmcsIGJ1dCBnb3QgJHtvYmoudmFsdWV9YCk7XG4gICAgICAgIHJldHVybiBvYmoudmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgLy8gSlNPTiBhY2NlcHQgc3BlY2lhbCBzdHJpbmcgdmFsdWVzIFwiTmFOXCIsIFwiSW5maW5pdHlcIiwgYW5kIFwiLUluZmluaXR5XCIuXG4gICAgaWYgKHR5cGVvZiBvYmoudmFsdWUgPT09ICdudW1iZXInICYmICFOdW1iZXIuaXNGaW5pdGUob2JqLnZhbHVlKSkge1xuICAgICAgICByZXR1cm4gb2JqLnZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBvYmoudmFsdWU7XG59XG5leHBvcnRzLndyYXBwZXJUb1Byb3RvM0pTT04gPSB3cmFwcGVyVG9Qcm90bzNKU09OO1xuZnVuY3Rpb24gd3JhcHBlckZyb21Qcm90bzNKU09OKHR5cGVOYW1lLCBqc29uKSB7XG4gICAgaWYgKGpzb24gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodHlwZU5hbWUgPT09ICcuZ29vZ2xlLnByb3RvYnVmLkJ5dGVzVmFsdWUnKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbnVtYmVyV3JhcHBlckZyb21Qcm90bzNKU09OOiBleHBlY3RlZCB0byBnZXQgYSBzdHJpbmcgZm9yIGdvb2dsZS5wcm90b2J1Zi5CeXRlc1ZhbHVlIGJ1dCBnb3QgJHt0eXBlb2YganNvbn1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6ICgwLCBieXRlc18xLmJ5dGVzRnJvbVByb3RvM0pTT04pKGpzb24pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZToganNvbixcbiAgICB9O1xufVxuZXhwb3J0cy53cmFwcGVyRnJvbVByb3RvM0pTT04gPSB3cmFwcGVyRnJvbVByb3RvM0pTT047XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwcGVycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3cmFwcGVyRnJvbVByb3RvM0pTT04iLCJ3cmFwcGVyVG9Qcm90bzNKU09OIiwiYnl0ZXNfMSIsInJlcXVpcmUiLCJ1dGlsXzEiLCJvYmoiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJCdWZmZXIiLCJpc0J1ZmZlciIsIlVpbnQ4QXJyYXkiLCJieXRlc1RvUHJvdG8zSlNPTiIsImFzc2VydCIsImNvbnN0cnVjdG9yIiwibmFtZSIsInRvU3RyaW5nIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJ0eXBlTmFtZSIsImpzb24iLCJFcnJvciIsImJ5dGVzRnJvbVByb3RvM0pTT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/proto3-json-serializer/build/src/wrappers.js\n");

/***/ })

};
;