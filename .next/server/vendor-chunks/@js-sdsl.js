"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@js-sdsl";
exports.ids = ["vendor-chunks/@js-sdsl"];
exports.modules = {

/***/ "(rsc)/./node_modules/@js-sdsl/ordered-map/dist/esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@js-sdsl/ordered-map/dist/esm/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrderedMap: () => (/* binding */ OrderedMap)\n/* harmony export */ });\nvar extendStatics = function(e, r) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(e, r) {\n        e.__proto__ = r;\n    } || function(e, r) {\n        for(var t in r)if (Object.prototype.hasOwnProperty.call(r, t)) e[t] = r[t];\n    };\n    return extendStatics(e, r);\n};\nfunction __extends(e, r) {\n    if (typeof r !== \"function\" && r !== null) throw new TypeError(\"Class extends value \" + String(r) + \" is not a constructor or null\");\n    extendStatics(e, r);\n    function __() {\n        this.constructor = e;\n    }\n    e.prototype = r === null ? Object.create(r) : (__.prototype = r.prototype, new __);\n}\nfunction __generator(e, r) {\n    var t = {\n        label: 0,\n        sent: function() {\n            if (s[0] & 1) throw s[1];\n            return s[1];\n        },\n        trys: [],\n        ops: []\n    }, i, n, s, h;\n    return h = {\n        next: verb(0),\n        throw: verb(1),\n        return: verb(2)\n    }, typeof Symbol === \"function\" && (h[Symbol.iterator] = function() {\n        return this;\n    }), h;\n    function verb(e) {\n        return function(r) {\n            return step([\n                e,\n                r\n            ]);\n        };\n    }\n    function step(a) {\n        if (i) throw new TypeError(\"Generator is already executing.\");\n        while(h && (h = 0, a[0] && (t = 0)), t)try {\n            if (i = 1, n && (s = a[0] & 2 ? n[\"return\"] : a[0] ? n[\"throw\"] || ((s = n[\"return\"]) && s.call(n), 0) : n.next) && !(s = s.call(n, a[1])).done) return s;\n            if (n = 0, s) a = [\n                a[0] & 2,\n                s.value\n            ];\n            switch(a[0]){\n                case 0:\n                case 1:\n                    s = a;\n                    break;\n                case 4:\n                    t.label++;\n                    return {\n                        value: a[1],\n                        done: false\n                    };\n                case 5:\n                    t.label++;\n                    n = a[1];\n                    a = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    a = t.ops.pop();\n                    t.trys.pop();\n                    continue;\n                default:\n                    if (!(s = t.trys, s = s.length > 0 && s[s.length - 1]) && (a[0] === 6 || a[0] === 2)) {\n                        t = 0;\n                        continue;\n                    }\n                    if (a[0] === 3 && (!s || a[1] > s[0] && a[1] < s[3])) {\n                        t.label = a[1];\n                        break;\n                    }\n                    if (a[0] === 6 && t.label < s[1]) {\n                        t.label = s[1];\n                        s = a;\n                        break;\n                    }\n                    if (s && t.label < s[2]) {\n                        t.label = s[2];\n                        t.ops.push(a);\n                        break;\n                    }\n                    if (s[2]) t.ops.pop();\n                    t.trys.pop();\n                    continue;\n            }\n            a = r.call(e, t);\n        } catch (e) {\n            a = [\n                6,\n                e\n            ];\n            n = 0;\n        } finally{\n            i = s = 0;\n        }\n        if (a[0] & 5) throw a[1];\n        return {\n            value: a[0] ? a[1] : void 0,\n            done: true\n        };\n    }\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(e, r, t) {\n    var i = new Error(t);\n    return i.name = \"SuppressedError\", i.error = e, i.suppressed = r, i;\n};\nvar TreeNode = function() {\n    function TreeNode(e, r, t) {\n        if (t === void 0) {\n            t = 1;\n        }\n        this.t = undefined;\n        this.i = undefined;\n        this.h = undefined;\n        this.u = e;\n        this.o = r;\n        this.l = t;\n    }\n    TreeNode.prototype.v = function() {\n        var e = this;\n        var r = e.h.h === e;\n        if (r && e.l === 1) {\n            e = e.i;\n        } else if (e.t) {\n            e = e.t;\n            while(e.i){\n                e = e.i;\n            }\n        } else {\n            if (r) {\n                return e.h;\n            }\n            var t = e.h;\n            while(t.t === e){\n                e = t;\n                t = e.h;\n            }\n            e = t;\n        }\n        return e;\n    };\n    TreeNode.prototype.p = function() {\n        var e = this;\n        if (e.i) {\n            e = e.i;\n            while(e.t){\n                e = e.t;\n            }\n            return e;\n        } else {\n            var r = e.h;\n            while(r.i === e){\n                e = r;\n                r = e.h;\n            }\n            if (e.i !== r) {\n                return r;\n            } else return e;\n        }\n    };\n    TreeNode.prototype.T = function() {\n        var e = this.h;\n        var r = this.i;\n        var t = r.t;\n        if (e.h === this) e.h = r;\n        else if (e.t === this) e.t = r;\n        else e.i = r;\n        r.h = e;\n        r.t = this;\n        this.h = r;\n        this.i = t;\n        if (t) t.h = this;\n        return r;\n    };\n    TreeNode.prototype.I = function() {\n        var e = this.h;\n        var r = this.t;\n        var t = r.i;\n        if (e.h === this) e.h = r;\n        else if (e.t === this) e.t = r;\n        else e.i = r;\n        r.h = e;\n        r.i = this;\n        this.h = r;\n        this.t = t;\n        if (t) t.h = this;\n        return r;\n    };\n    return TreeNode;\n}();\nvar TreeNodeEnableIndex = function(e) {\n    __extends(TreeNodeEnableIndex, e);\n    function TreeNodeEnableIndex() {\n        var r = e !== null && e.apply(this, arguments) || this;\n        r.O = 1;\n        return r;\n    }\n    TreeNodeEnableIndex.prototype.T = function() {\n        var r = e.prototype.T.call(this);\n        this.M();\n        r.M();\n        return r;\n    };\n    TreeNodeEnableIndex.prototype.I = function() {\n        var r = e.prototype.I.call(this);\n        this.M();\n        r.M();\n        return r;\n    };\n    TreeNodeEnableIndex.prototype.M = function() {\n        this.O = 1;\n        if (this.t) {\n            this.O += this.t.O;\n        }\n        if (this.i) {\n            this.O += this.i.O;\n        }\n    };\n    return TreeNodeEnableIndex;\n}(TreeNode);\nvar ContainerIterator = function() {\n    function ContainerIterator(e) {\n        if (e === void 0) {\n            e = 0;\n        }\n        this.iteratorType = e;\n    }\n    ContainerIterator.prototype.equals = function(e) {\n        return this.C === e.C;\n    };\n    return ContainerIterator;\n}();\nvar Base = function() {\n    function Base() {\n        this._ = 0;\n    }\n    Object.defineProperty(Base.prototype, \"length\", {\n        get: function() {\n            return this._;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Base.prototype.size = function() {\n        return this._;\n    };\n    Base.prototype.empty = function() {\n        return this._ === 0;\n    };\n    return Base;\n}();\nvar Container = function(e) {\n    __extends(Container, e);\n    function Container() {\n        return e !== null && e.apply(this, arguments) || this;\n    }\n    return Container;\n}(Base);\nfunction throwIteratorAccessError() {\n    throw new RangeError(\"Iterator access denied!\");\n}\nvar TreeContainer = function(e) {\n    __extends(TreeContainer, e);\n    function TreeContainer(r, t) {\n        if (r === void 0) {\n            r = function(e, r) {\n                if (e < r) return -1;\n                if (e > r) return 1;\n                return 0;\n            };\n        }\n        if (t === void 0) {\n            t = false;\n        }\n        var i = e.call(this) || this;\n        i.N = undefined;\n        i.g = r;\n        i.enableIndex = t;\n        i.S = t ? TreeNodeEnableIndex : TreeNode;\n        i.A = new i.S;\n        return i;\n    }\n    TreeContainer.prototype.m = function(e, r) {\n        var t = this.A;\n        while(e){\n            var i = this.g(e.u, r);\n            if (i < 0) {\n                e = e.i;\n            } else if (i > 0) {\n                t = e;\n                e = e.t;\n            } else return e;\n        }\n        return t;\n    };\n    TreeContainer.prototype.B = function(e, r) {\n        var t = this.A;\n        while(e){\n            var i = this.g(e.u, r);\n            if (i <= 0) {\n                e = e.i;\n            } else {\n                t = e;\n                e = e.t;\n            }\n        }\n        return t;\n    };\n    TreeContainer.prototype.j = function(e, r) {\n        var t = this.A;\n        while(e){\n            var i = this.g(e.u, r);\n            if (i < 0) {\n                t = e;\n                e = e.i;\n            } else if (i > 0) {\n                e = e.t;\n            } else return e;\n        }\n        return t;\n    };\n    TreeContainer.prototype.k = function(e, r) {\n        var t = this.A;\n        while(e){\n            var i = this.g(e.u, r);\n            if (i < 0) {\n                t = e;\n                e = e.i;\n            } else {\n                e = e.t;\n            }\n        }\n        return t;\n    };\n    TreeContainer.prototype.R = function(e) {\n        while(true){\n            var r = e.h;\n            if (r === this.A) return;\n            if (e.l === 1) {\n                e.l = 0;\n                return;\n            }\n            if (e === r.t) {\n                var t = r.i;\n                if (t.l === 1) {\n                    t.l = 0;\n                    r.l = 1;\n                    if (r === this.N) {\n                        this.N = r.T();\n                    } else r.T();\n                } else {\n                    if (t.i && t.i.l === 1) {\n                        t.l = r.l;\n                        r.l = 0;\n                        t.i.l = 0;\n                        if (r === this.N) {\n                            this.N = r.T();\n                        } else r.T();\n                        return;\n                    } else if (t.t && t.t.l === 1) {\n                        t.l = 1;\n                        t.t.l = 0;\n                        t.I();\n                    } else {\n                        t.l = 1;\n                        e = r;\n                    }\n                }\n            } else {\n                var t = r.t;\n                if (t.l === 1) {\n                    t.l = 0;\n                    r.l = 1;\n                    if (r === this.N) {\n                        this.N = r.I();\n                    } else r.I();\n                } else {\n                    if (t.t && t.t.l === 1) {\n                        t.l = r.l;\n                        r.l = 0;\n                        t.t.l = 0;\n                        if (r === this.N) {\n                            this.N = r.I();\n                        } else r.I();\n                        return;\n                    } else if (t.i && t.i.l === 1) {\n                        t.l = 1;\n                        t.i.l = 0;\n                        t.T();\n                    } else {\n                        t.l = 1;\n                        e = r;\n                    }\n                }\n            }\n        }\n    };\n    TreeContainer.prototype.G = function(e) {\n        if (this._ === 1) {\n            this.clear();\n            return;\n        }\n        var r = e;\n        while(r.t || r.i){\n            if (r.i) {\n                r = r.i;\n                while(r.t)r = r.t;\n            } else {\n                r = r.t;\n            }\n            var t = e.u;\n            e.u = r.u;\n            r.u = t;\n            var i = e.o;\n            e.o = r.o;\n            r.o = i;\n            e = r;\n        }\n        if (this.A.t === r) {\n            this.A.t = r.h;\n        } else if (this.A.i === r) {\n            this.A.i = r.h;\n        }\n        this.R(r);\n        var n = r.h;\n        if (r === n.t) {\n            n.t = undefined;\n        } else n.i = undefined;\n        this._ -= 1;\n        this.N.l = 0;\n        if (this.enableIndex) {\n            while(n !== this.A){\n                n.O -= 1;\n                n = n.h;\n            }\n        }\n    };\n    TreeContainer.prototype.P = function(e) {\n        var r = typeof e === \"number\" ? e : undefined;\n        var t = typeof e === \"function\" ? e : undefined;\n        var i = typeof e === \"undefined\" ? [] : undefined;\n        var n = 0;\n        var s = this.N;\n        var h = [];\n        while(h.length || s){\n            if (s) {\n                h.push(s);\n                s = s.t;\n            } else {\n                s = h.pop();\n                if (n === r) return s;\n                i && i.push(s);\n                t && t(s, n, this);\n                n += 1;\n                s = s.i;\n            }\n        }\n        return i;\n    };\n    TreeContainer.prototype.q = function(e) {\n        while(true){\n            var r = e.h;\n            if (r.l === 0) return;\n            var t = r.h;\n            if (r === t.t) {\n                var i = t.i;\n                if (i && i.l === 1) {\n                    i.l = r.l = 0;\n                    if (t === this.N) return;\n                    t.l = 1;\n                    e = t;\n                    continue;\n                } else if (e === r.i) {\n                    e.l = 0;\n                    if (e.t) {\n                        e.t.h = r;\n                    }\n                    if (e.i) {\n                        e.i.h = t;\n                    }\n                    r.i = e.t;\n                    t.t = e.i;\n                    e.t = r;\n                    e.i = t;\n                    if (t === this.N) {\n                        this.N = e;\n                        this.A.h = e;\n                    } else {\n                        var n = t.h;\n                        if (n.t === t) {\n                            n.t = e;\n                        } else n.i = e;\n                    }\n                    e.h = t.h;\n                    r.h = e;\n                    t.h = e;\n                    t.l = 1;\n                } else {\n                    r.l = 0;\n                    if (t === this.N) {\n                        this.N = t.I();\n                    } else t.I();\n                    t.l = 1;\n                    return;\n                }\n            } else {\n                var i = t.t;\n                if (i && i.l === 1) {\n                    i.l = r.l = 0;\n                    if (t === this.N) return;\n                    t.l = 1;\n                    e = t;\n                    continue;\n                } else if (e === r.t) {\n                    e.l = 0;\n                    if (e.t) {\n                        e.t.h = t;\n                    }\n                    if (e.i) {\n                        e.i.h = r;\n                    }\n                    t.i = e.t;\n                    r.t = e.i;\n                    e.t = t;\n                    e.i = r;\n                    if (t === this.N) {\n                        this.N = e;\n                        this.A.h = e;\n                    } else {\n                        var n = t.h;\n                        if (n.t === t) {\n                            n.t = e;\n                        } else n.i = e;\n                    }\n                    e.h = t.h;\n                    r.h = e;\n                    t.h = e;\n                    t.l = 1;\n                } else {\n                    r.l = 0;\n                    if (t === this.N) {\n                        this.N = t.T();\n                    } else t.T();\n                    t.l = 1;\n                    return;\n                }\n            }\n            if (this.enableIndex) {\n                r.M();\n                t.M();\n                e.M();\n            }\n            return;\n        }\n    };\n    TreeContainer.prototype.D = function(e, r, t) {\n        if (this.N === undefined) {\n            this._ += 1;\n            this.N = new this.S(e, r, 0);\n            this.N.h = this.A;\n            this.A.h = this.A.t = this.A.i = this.N;\n            return this._;\n        }\n        var i;\n        var n = this.A.t;\n        var s = this.g(n.u, e);\n        if (s === 0) {\n            n.o = r;\n            return this._;\n        } else if (s > 0) {\n            n.t = new this.S(e, r);\n            n.t.h = n;\n            i = n.t;\n            this.A.t = i;\n        } else {\n            var h = this.A.i;\n            var a = this.g(h.u, e);\n            if (a === 0) {\n                h.o = r;\n                return this._;\n            } else if (a < 0) {\n                h.i = new this.S(e, r);\n                h.i.h = h;\n                i = h.i;\n                this.A.i = i;\n            } else {\n                if (t !== undefined) {\n                    var u = t.C;\n                    if (u !== this.A) {\n                        var f = this.g(u.u, e);\n                        if (f === 0) {\n                            u.o = r;\n                            return this._;\n                        } else if (f > 0) {\n                            var o = u.v();\n                            var d = this.g(o.u, e);\n                            if (d === 0) {\n                                o.o = r;\n                                return this._;\n                            } else if (d < 0) {\n                                i = new this.S(e, r);\n                                if (o.i === undefined) {\n                                    o.i = i;\n                                    i.h = o;\n                                } else {\n                                    u.t = i;\n                                    i.h = u;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (i === undefined) {\n                    i = this.N;\n                    while(true){\n                        var c = this.g(i.u, e);\n                        if (c > 0) {\n                            if (i.t === undefined) {\n                                i.t = new this.S(e, r);\n                                i.t.h = i;\n                                i = i.t;\n                                break;\n                            }\n                            i = i.t;\n                        } else if (c < 0) {\n                            if (i.i === undefined) {\n                                i.i = new this.S(e, r);\n                                i.i.h = i;\n                                i = i.i;\n                                break;\n                            }\n                            i = i.i;\n                        } else {\n                            i.o = r;\n                            return this._;\n                        }\n                    }\n                }\n            }\n        }\n        if (this.enableIndex) {\n            var l = i.h;\n            while(l !== this.A){\n                l.O += 1;\n                l = l.h;\n            }\n        }\n        this.q(i);\n        this._ += 1;\n        return this._;\n    };\n    TreeContainer.prototype.F = function(e, r) {\n        while(e){\n            var t = this.g(e.u, r);\n            if (t < 0) {\n                e = e.i;\n            } else if (t > 0) {\n                e = e.t;\n            } else return e;\n        }\n        return e || this.A;\n    };\n    TreeContainer.prototype.clear = function() {\n        this._ = 0;\n        this.N = undefined;\n        this.A.h = undefined;\n        this.A.t = this.A.i = undefined;\n    };\n    TreeContainer.prototype.updateKeyByIterator = function(e, r) {\n        var t = e.C;\n        if (t === this.A) {\n            throwIteratorAccessError();\n        }\n        if (this._ === 1) {\n            t.u = r;\n            return true;\n        }\n        var i = t.p().u;\n        if (t === this.A.t) {\n            if (this.g(i, r) > 0) {\n                t.u = r;\n                return true;\n            }\n            return false;\n        }\n        var n = t.v().u;\n        if (t === this.A.i) {\n            if (this.g(n, r) < 0) {\n                t.u = r;\n                return true;\n            }\n            return false;\n        }\n        if (this.g(n, r) >= 0 || this.g(i, r) <= 0) return false;\n        t.u = r;\n        return true;\n    };\n    TreeContainer.prototype.eraseElementByPos = function(e) {\n        if (e < 0 || e > this._ - 1) {\n            throw new RangeError;\n        }\n        var r = this.P(e);\n        this.G(r);\n        return this._;\n    };\n    TreeContainer.prototype.eraseElementByKey = function(e) {\n        if (this._ === 0) return false;\n        var r = this.F(this.N, e);\n        if (r === this.A) return false;\n        this.G(r);\n        return true;\n    };\n    TreeContainer.prototype.eraseElementByIterator = function(e) {\n        var r = e.C;\n        if (r === this.A) {\n            throwIteratorAccessError();\n        }\n        var t = r.i === undefined;\n        var i = e.iteratorType === 0;\n        if (i) {\n            if (t) e.next();\n        } else {\n            if (!t || r.t === undefined) e.next();\n        }\n        this.G(r);\n        return e;\n    };\n    TreeContainer.prototype.getHeight = function() {\n        if (this._ === 0) return 0;\n        function traversal(e) {\n            if (!e) return 0;\n            return Math.max(traversal(e.t), traversal(e.i)) + 1;\n        }\n        return traversal(this.N);\n    };\n    return TreeContainer;\n}(Container);\nvar TreeIterator = function(e) {\n    __extends(TreeIterator, e);\n    function TreeIterator(r, t, i) {\n        var n = e.call(this, i) || this;\n        n.C = r;\n        n.A = t;\n        if (n.iteratorType === 0) {\n            n.pre = function() {\n                if (this.C === this.A.t) {\n                    throwIteratorAccessError();\n                }\n                this.C = this.C.v();\n                return this;\n            };\n            n.next = function() {\n                if (this.C === this.A) {\n                    throwIteratorAccessError();\n                }\n                this.C = this.C.p();\n                return this;\n            };\n        } else {\n            n.pre = function() {\n                if (this.C === this.A.i) {\n                    throwIteratorAccessError();\n                }\n                this.C = this.C.p();\n                return this;\n            };\n            n.next = function() {\n                if (this.C === this.A) {\n                    throwIteratorAccessError();\n                }\n                this.C = this.C.v();\n                return this;\n            };\n        }\n        return n;\n    }\n    Object.defineProperty(TreeIterator.prototype, \"index\", {\n        get: function() {\n            var e = this.C;\n            var r = this.A.h;\n            if (e === this.A) {\n                if (r) {\n                    return r.O - 1;\n                }\n                return 0;\n            }\n            var t = 0;\n            if (e.t) {\n                t += e.t.O;\n            }\n            while(e !== r){\n                var i = e.h;\n                if (e === i.i) {\n                    t += 1;\n                    if (i.t) {\n                        t += i.t.O;\n                    }\n                }\n                e = i;\n            }\n            return t;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TreeIterator.prototype.isAccessible = function() {\n        return this.C !== this.A;\n    };\n    return TreeIterator;\n}(ContainerIterator);\nvar OrderedMapIterator = function(e) {\n    __extends(OrderedMapIterator, e);\n    function OrderedMapIterator(r, t, i, n) {\n        var s = e.call(this, r, t, n) || this;\n        s.container = i;\n        return s;\n    }\n    Object.defineProperty(OrderedMapIterator.prototype, \"pointer\", {\n        get: function() {\n            if (this.C === this.A) {\n                throwIteratorAccessError();\n            }\n            var e = this;\n            return new Proxy([], {\n                get: function(r, t) {\n                    if (t === \"0\") return e.C.u;\n                    else if (t === \"1\") return e.C.o;\n                    r[0] = e.C.u;\n                    r[1] = e.C.o;\n                    return r[t];\n                },\n                set: function(r, t, i) {\n                    if (t !== \"1\") {\n                        throw new TypeError(\"prop must be 1\");\n                    }\n                    e.C.o = i;\n                    return true;\n                }\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    OrderedMapIterator.prototype.copy = function() {\n        return new OrderedMapIterator(this.C, this.A, this.container, this.iteratorType);\n    };\n    return OrderedMapIterator;\n}(TreeIterator);\nvar OrderedMap = function(e) {\n    __extends(OrderedMap, e);\n    function OrderedMap(r, t, i) {\n        if (r === void 0) {\n            r = [];\n        }\n        var n = e.call(this, t, i) || this;\n        var s = n;\n        r.forEach(function(e) {\n            s.setElement(e[0], e[1]);\n        });\n        return n;\n    }\n    OrderedMap.prototype.begin = function() {\n        return new OrderedMapIterator(this.A.t || this.A, this.A, this);\n    };\n    OrderedMap.prototype.end = function() {\n        return new OrderedMapIterator(this.A, this.A, this);\n    };\n    OrderedMap.prototype.rBegin = function() {\n        return new OrderedMapIterator(this.A.i || this.A, this.A, this, 1);\n    };\n    OrderedMap.prototype.rEnd = function() {\n        return new OrderedMapIterator(this.A, this.A, this, 1);\n    };\n    OrderedMap.prototype.front = function() {\n        if (this._ === 0) return;\n        var e = this.A.t;\n        return [\n            e.u,\n            e.o\n        ];\n    };\n    OrderedMap.prototype.back = function() {\n        if (this._ === 0) return;\n        var e = this.A.i;\n        return [\n            e.u,\n            e.o\n        ];\n    };\n    OrderedMap.prototype.lowerBound = function(e) {\n        var r = this.m(this.N, e);\n        return new OrderedMapIterator(r, this.A, this);\n    };\n    OrderedMap.prototype.upperBound = function(e) {\n        var r = this.B(this.N, e);\n        return new OrderedMapIterator(r, this.A, this);\n    };\n    OrderedMap.prototype.reverseLowerBound = function(e) {\n        var r = this.j(this.N, e);\n        return new OrderedMapIterator(r, this.A, this);\n    };\n    OrderedMap.prototype.reverseUpperBound = function(e) {\n        var r = this.k(this.N, e);\n        return new OrderedMapIterator(r, this.A, this);\n    };\n    OrderedMap.prototype.forEach = function(e) {\n        this.P(function(r, t, i) {\n            e([\n                r.u,\n                r.o\n            ], t, i);\n        });\n    };\n    OrderedMap.prototype.setElement = function(e, r, t) {\n        return this.D(e, r, t);\n    };\n    OrderedMap.prototype.getElementByPos = function(e) {\n        if (e < 0 || e > this._ - 1) {\n            throw new RangeError;\n        }\n        var r = this.P(e);\n        return [\n            r.u,\n            r.o\n        ];\n    };\n    OrderedMap.prototype.find = function(e) {\n        var r = this.F(this.N, e);\n        return new OrderedMapIterator(r, this.A, this);\n    };\n    OrderedMap.prototype.getElementByKey = function(e) {\n        var r = this.F(this.N, e);\n        return r.o;\n    };\n    OrderedMap.prototype.union = function(e) {\n        var r = this;\n        e.forEach(function(e) {\n            r.setElement(e[0], e[1]);\n        });\n        return this._;\n    };\n    OrderedMap.prototype[Symbol.iterator] = function() {\n        var e, r, t, i;\n        return __generator(this, function(n) {\n            switch(n.label){\n                case 0:\n                    e = this._;\n                    r = this.P();\n                    t = 0;\n                    n.label = 1;\n                case 1:\n                    if (!(t < e)) return [\n                        3,\n                        4\n                    ];\n                    i = r[t];\n                    return [\n                        4,\n                        [\n                            i.u,\n                            i.o\n                        ]\n                    ];\n                case 2:\n                    n.sent();\n                    n.label = 3;\n                case 3:\n                    ++t;\n                    return [\n                        3,\n                        1\n                    ];\n                case 4:\n                    return [\n                        2\n                    ];\n            }\n        });\n    };\n    return OrderedMap;\n}(TreeContainer);\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@js-sdsl/ordered-map/dist/esm/index.js\n");

/***/ })

};
;