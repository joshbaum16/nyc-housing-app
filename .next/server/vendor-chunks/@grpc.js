"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@grpc";
exports.ids = ["vendor-chunks/@grpc"];
exports.modules = {

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/admin.js":
/*!*******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/admin.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.registerAdminService = registerAdminService;\nexports.addAdminServicesToServer = addAdminServicesToServer;\nconst registeredAdminServices = [];\nfunction registerAdminService(getServiceDefinition, getHandlers) {\n    registeredAdminServices.push({\n        getServiceDefinition,\n        getHandlers\n    });\n}\nfunction addAdminServicesToServer(server) {\n    for (const { getServiceDefinition, getHandlers } of registeredAdminServices){\n        server.addService(getServiceDefinition(), getHandlers());\n    }\n} //# sourceMappingURL=admin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvYWRtaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDRCQUE0QixHQUFHRTtBQUMvQkYsZ0NBQWdDLEdBQUdHO0FBQ25DLE1BQU1DLDBCQUEwQixFQUFFO0FBQ2xDLFNBQVNGLHFCQUFxQkcsb0JBQW9CLEVBQUVDLFdBQVc7SUFDM0RGLHdCQUF3QkcsSUFBSSxDQUFDO1FBQUVGO1FBQXNCQztJQUFZO0FBQ3JFO0FBQ0EsU0FBU0gseUJBQXlCSyxNQUFNO0lBQ3BDLEtBQUssTUFBTSxFQUFFSCxvQkFBb0IsRUFBRUMsV0FBVyxFQUFFLElBQUlGLHdCQUF5QjtRQUN6RUksT0FBT0MsVUFBVSxDQUFDSix3QkFBd0JDO0lBQzlDO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvYWRtaW4uanM/OTg0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWdpc3RlckFkbWluU2VydmljZSA9IHJlZ2lzdGVyQWRtaW5TZXJ2aWNlO1xuZXhwb3J0cy5hZGRBZG1pblNlcnZpY2VzVG9TZXJ2ZXIgPSBhZGRBZG1pblNlcnZpY2VzVG9TZXJ2ZXI7XG5jb25zdCByZWdpc3RlcmVkQWRtaW5TZXJ2aWNlcyA9IFtdO1xuZnVuY3Rpb24gcmVnaXN0ZXJBZG1pblNlcnZpY2UoZ2V0U2VydmljZURlZmluaXRpb24sIGdldEhhbmRsZXJzKSB7XG4gICAgcmVnaXN0ZXJlZEFkbWluU2VydmljZXMucHVzaCh7IGdldFNlcnZpY2VEZWZpbml0aW9uLCBnZXRIYW5kbGVycyB9KTtcbn1cbmZ1bmN0aW9uIGFkZEFkbWluU2VydmljZXNUb1NlcnZlcihzZXJ2ZXIpIHtcbiAgICBmb3IgKGNvbnN0IHsgZ2V0U2VydmljZURlZmluaXRpb24sIGdldEhhbmRsZXJzIH0gb2YgcmVnaXN0ZXJlZEFkbWluU2VydmljZXMpIHtcbiAgICAgICAgc2VydmVyLmFkZFNlcnZpY2UoZ2V0U2VydmljZURlZmluaXRpb24oKSwgZ2V0SGFuZGxlcnMoKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRtaW4uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVnaXN0ZXJBZG1pblNlcnZpY2UiLCJhZGRBZG1pblNlcnZpY2VzVG9TZXJ2ZXIiLCJyZWdpc3RlcmVkQWRtaW5TZXJ2aWNlcyIsImdldFNlcnZpY2VEZWZpbml0aW9uIiwiZ2V0SGFuZGxlcnMiLCJwdXNoIiwic2VydmVyIiwiYWRkU2VydmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/admin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BackoffTimeout = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = \"backoff\";\nconst INITIAL_BACKOFF_MS = 1000;\nconst BACKOFF_MULTIPLIER = 1.6;\nconst MAX_BACKOFF_MS = 120000;\nconst BACKOFF_JITTER = 0.2;\n/**\n * Get a number uniformly at random in the range [min, max)\n * @param min\n * @param max\n */ function uniformRandom(min, max) {\n    return Math.random() * (max - min) + min;\n}\nclass BackoffTimeout {\n    constructor(callback, options){\n        this.callback = callback;\n        /**\n         * The delay time at the start, and after each reset.\n         */ this.initialDelay = INITIAL_BACKOFF_MS;\n        /**\n         * The exponential backoff multiplier.\n         */ this.multiplier = BACKOFF_MULTIPLIER;\n        /**\n         * The maximum delay time\n         */ this.maxDelay = MAX_BACKOFF_MS;\n        /**\n         * The maximum fraction by which the delay time can randomly vary after\n         * applying the multiplier.\n         */ this.jitter = BACKOFF_JITTER;\n        /**\n         * Indicates whether the timer is currently running.\n         */ this.running = false;\n        /**\n         * Indicates whether the timer should keep the Node process running if no\n         * other async operation is doing so.\n         */ this.hasRef = true;\n        /**\n         * The time that the currently running timer was started. Only valid if\n         * running is true.\n         */ this.startTime = new Date();\n        /**\n         * The approximate time that the currently running timer will end. Only valid\n         * if running is true.\n         */ this.endTime = new Date();\n        this.id = BackoffTimeout.getNextId();\n        if (options) {\n            if (options.initialDelay) {\n                this.initialDelay = options.initialDelay;\n            }\n            if (options.multiplier) {\n                this.multiplier = options.multiplier;\n            }\n            if (options.jitter) {\n                this.jitter = options.jitter;\n            }\n            if (options.maxDelay) {\n                this.maxDelay = options.maxDelay;\n            }\n        }\n        this.trace(\"constructed initialDelay=\" + this.initialDelay + \" multiplier=\" + this.multiplier + \" jitter=\" + this.jitter + \" maxDelay=\" + this.maxDelay);\n        this.nextDelay = this.initialDelay;\n        this.timerId = setTimeout(()=>{}, 0);\n        clearTimeout(this.timerId);\n    }\n    static getNextId() {\n        return this.nextId++;\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, \"{\" + this.id + \"} \" + text);\n    }\n    runTimer(delay) {\n        var _a, _b;\n        this.trace(\"runTimer(delay=\" + delay + \")\");\n        this.endTime = this.startTime;\n        this.endTime.setMilliseconds(this.endTime.getMilliseconds() + delay);\n        clearTimeout(this.timerId);\n        this.timerId = setTimeout(()=>{\n            this.trace(\"timer fired\");\n            this.callback();\n            this.running = false;\n        }, delay);\n        if (!this.hasRef) {\n            (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n    }\n    /**\n     * Call the callback after the current amount of delay time\n     */ runOnce() {\n        this.trace(\"runOnce()\");\n        this.running = true;\n        this.startTime = new Date();\n        this.runTimer(this.nextDelay);\n        const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);\n        const jitterMagnitude = nextBackoff * this.jitter;\n        this.nextDelay = nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);\n    }\n    /**\n     * Stop the timer. The callback will not be called until `runOnce` is called\n     * again.\n     */ stop() {\n        this.trace(\"stop()\");\n        clearTimeout(this.timerId);\n        this.running = false;\n    }\n    /**\n     * Reset the delay time to its initial value. If the timer is still running,\n     * retroactively apply that reset to the current timer.\n     */ reset() {\n        this.trace(\"reset() running=\" + this.running);\n        this.nextDelay = this.initialDelay;\n        if (this.running) {\n            const now = new Date();\n            const newEndTime = this.startTime;\n            newEndTime.setMilliseconds(newEndTime.getMilliseconds() + this.nextDelay);\n            clearTimeout(this.timerId);\n            if (now < newEndTime) {\n                this.runTimer(newEndTime.getTime() - now.getTime());\n            } else {\n                this.running = false;\n            }\n        }\n    }\n    /**\n     * Check whether the timer is currently running.\n     */ isRunning() {\n        return this.running;\n    }\n    /**\n     * Set that while the timer is running, it should keep the Node process\n     * running.\n     */ ref() {\n        var _a, _b;\n        this.hasRef = true;\n        (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * Set that while the timer is running, it should not keep the Node process\n     * running.\n     */ unref() {\n        var _a, _b;\n        this.hasRef = false;\n        (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * Get the approximate timestamp of when the timer will fire. Only valid if\n     * this.isRunning() is true.\n     */ getEndTime() {\n        return this.endTime;\n    }\n}\nexports.BackoffTimeout = BackoffTimeout;\nBackoffTimeout.nextId = 0; //# sourceMappingURL=backoff-timeout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js":
/*!******************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-credentials.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CallCredentials = void 0;\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nfunction isCurrentOauth2Client(client) {\n    return \"getRequestHeaders\" in client && typeof client.getRequestHeaders === \"function\";\n}\n/**\n * A class that represents a generic method of adding authentication-related\n * metadata on a per-request basis.\n */ class CallCredentials {\n    /**\n     * Creates a new CallCredentials object from a given function that generates\n     * Metadata objects.\n     * @param metadataGenerator A function that accepts a set of options, and\n     * generates a Metadata object based on these options, which is passed back\n     * to the caller via a supplied (err, metadata) callback.\n     */ static createFromMetadataGenerator(metadataGenerator) {\n        return new SingleCallCredentials(metadataGenerator);\n    }\n    /**\n     * Create a gRPC credential from a Google credential object.\n     * @param googleCredentials The authentication client to use.\n     * @return The resulting CallCredentials object.\n     */ static createFromGoogleCredential(googleCredentials) {\n        return CallCredentials.createFromMetadataGenerator((options, callback)=>{\n            let getHeaders;\n            if (isCurrentOauth2Client(googleCredentials)) {\n                getHeaders = googleCredentials.getRequestHeaders(options.service_url);\n            } else {\n                getHeaders = new Promise((resolve, reject)=>{\n                    googleCredentials.getRequestMetadata(options.service_url, (err, headers)=>{\n                        if (err) {\n                            reject(err);\n                            return;\n                        }\n                        if (!headers) {\n                            reject(new Error(\"Headers not set by metadata plugin\"));\n                            return;\n                        }\n                        resolve(headers);\n                    });\n                });\n            }\n            getHeaders.then((headers)=>{\n                const metadata = new metadata_1.Metadata();\n                for (const key of Object.keys(headers)){\n                    metadata.add(key, headers[key]);\n                }\n                callback(null, metadata);\n            }, (err)=>{\n                callback(err);\n            });\n        });\n    }\n    static createEmpty() {\n        return new EmptyCallCredentials();\n    }\n}\nexports.CallCredentials = CallCredentials;\nclass ComposedCallCredentials extends CallCredentials {\n    constructor(creds){\n        super();\n        this.creds = creds;\n    }\n    async generateMetadata(options) {\n        const base = new metadata_1.Metadata();\n        const generated = await Promise.all(this.creds.map((cred)=>cred.generateMetadata(options)));\n        for (const gen of generated){\n            base.merge(gen);\n        }\n        return base;\n    }\n    compose(other) {\n        return new ComposedCallCredentials(this.creds.concat([\n            other\n        ]));\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ComposedCallCredentials) {\n            return this.creds.every((value, index)=>value._equals(other.creds[index]));\n        } else {\n            return false;\n        }\n    }\n}\nclass SingleCallCredentials extends CallCredentials {\n    constructor(metadataGenerator){\n        super();\n        this.metadataGenerator = metadataGenerator;\n    }\n    generateMetadata(options) {\n        return new Promise((resolve, reject)=>{\n            this.metadataGenerator(options, (err, metadata)=>{\n                if (metadata !== undefined) {\n                    resolve(metadata);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    }\n    compose(other) {\n        return new ComposedCallCredentials([\n            this,\n            other\n        ]);\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof SingleCallCredentials) {\n            return this.metadataGenerator === other.metadataGenerator;\n        } else {\n            return false;\n        }\n    }\n}\nclass EmptyCallCredentials extends CallCredentials {\n    generateMetadata(options) {\n        return Promise.resolve(new metadata_1.Metadata());\n    }\n    compose(other) {\n        return other;\n    }\n    _equals(other) {\n        return other instanceof EmptyCallCredentials;\n    }\n} //# sourceMappingURL=call-credentials.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/call-interface.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-interface.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InterceptingListenerImpl = void 0;\nexports.isInterceptingListener = isInterceptingListener;\nfunction isInterceptingListener(listener) {\n    return listener.onReceiveMetadata !== undefined && listener.onReceiveMetadata.length === 1;\n}\nclass InterceptingListenerImpl {\n    constructor(listener, nextListener){\n        this.listener = listener;\n        this.nextListener = nextListener;\n        this.processingMetadata = false;\n        this.hasPendingMessage = false;\n        this.processingMessage = false;\n        this.pendingStatus = null;\n    }\n    processPendingMessage() {\n        if (this.hasPendingMessage) {\n            this.nextListener.onReceiveMessage(this.pendingMessage);\n            this.pendingMessage = null;\n            this.hasPendingMessage = false;\n        }\n    }\n    processPendingStatus() {\n        if (this.pendingStatus) {\n            this.nextListener.onReceiveStatus(this.pendingStatus);\n        }\n    }\n    onReceiveMetadata(metadata) {\n        this.processingMetadata = true;\n        this.listener.onReceiveMetadata(metadata, (metadata)=>{\n            this.processingMetadata = false;\n            this.nextListener.onReceiveMetadata(metadata);\n            this.processPendingMessage();\n            this.processPendingStatus();\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onReceiveMessage(message) {\n        /* If this listener processes messages asynchronously, the last message may\n         * be reordered with respect to the status */ this.processingMessage = true;\n        this.listener.onReceiveMessage(message, (msg)=>{\n            this.processingMessage = false;\n            if (this.processingMetadata) {\n                this.pendingMessage = msg;\n                this.hasPendingMessage = true;\n            } else {\n                this.nextListener.onReceiveMessage(msg);\n                this.processPendingStatus();\n            }\n        });\n    }\n    onReceiveStatus(status) {\n        this.listener.onReceiveStatus(status, (processedStatus)=>{\n            if (this.processingMetadata || this.processingMessage) {\n                this.pendingStatus = processedStatus;\n            } else {\n                this.nextListener.onReceiveStatus(processedStatus);\n            }\n        });\n    }\n}\nexports.InterceptingListenerImpl = InterceptingListenerImpl; //# sourceMappingURL=call-interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHLEtBQUs7QUFDeENBLDhCQUE4QixHQUFHRztBQUNqQyxTQUFTQSx1QkFBdUJDLFFBQVE7SUFDcEMsT0FBUUEsU0FBU0MsaUJBQWlCLEtBQUtDLGFBQ25DRixTQUFTQyxpQkFBaUIsQ0FBQ0UsTUFBTSxLQUFLO0FBQzlDO0FBQ0EsTUFBTUw7SUFDRk0sWUFBWUosUUFBUSxFQUFFSyxZQUFZLENBQUU7UUFDaEMsSUFBSSxDQUFDTCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0ssWUFBWSxHQUFHQTtRQUNwQixJQUFJLENBQUNDLGtCQUFrQixHQUFHO1FBQzFCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUc7UUFDekIsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRztRQUN6QixJQUFJLENBQUNDLGFBQWEsR0FBRztJQUN6QjtJQUNBQyx3QkFBd0I7UUFDcEIsSUFBSSxJQUFJLENBQUNILGlCQUFpQixFQUFFO1lBQ3hCLElBQUksQ0FBQ0YsWUFBWSxDQUFDTSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUNDLGNBQWM7WUFDdEQsSUFBSSxDQUFDQSxjQUFjLEdBQUc7WUFDdEIsSUFBSSxDQUFDTCxpQkFBaUIsR0FBRztRQUM3QjtJQUNKO0lBQ0FNLHVCQUF1QjtRQUNuQixJQUFJLElBQUksQ0FBQ0osYUFBYSxFQUFFO1lBQ3BCLElBQUksQ0FBQ0osWUFBWSxDQUFDUyxlQUFlLENBQUMsSUFBSSxDQUFDTCxhQUFhO1FBQ3hEO0lBQ0o7SUFDQVIsa0JBQWtCYyxRQUFRLEVBQUU7UUFDeEIsSUFBSSxDQUFDVCxrQkFBa0IsR0FBRztRQUMxQixJQUFJLENBQUNOLFFBQVEsQ0FBQ0MsaUJBQWlCLENBQUNjLFVBQVVBLENBQUFBO1lBQ3RDLElBQUksQ0FBQ1Qsa0JBQWtCLEdBQUc7WUFDMUIsSUFBSSxDQUFDRCxZQUFZLENBQUNKLGlCQUFpQixDQUFDYztZQUNwQyxJQUFJLENBQUNMLHFCQUFxQjtZQUMxQixJQUFJLENBQUNHLG9CQUFvQjtRQUM3QjtJQUNKO0lBQ0EsOERBQThEO0lBQzlERixpQkFBaUJLLE9BQU8sRUFBRTtRQUN0QjttREFDMkMsR0FDM0MsSUFBSSxDQUFDUixpQkFBaUIsR0FBRztRQUN6QixJQUFJLENBQUNSLFFBQVEsQ0FBQ1csZ0JBQWdCLENBQUNLLFNBQVNDLENBQUFBO1lBQ3BDLElBQUksQ0FBQ1QsaUJBQWlCLEdBQUc7WUFDekIsSUFBSSxJQUFJLENBQUNGLGtCQUFrQixFQUFFO2dCQUN6QixJQUFJLENBQUNNLGNBQWMsR0FBR0s7Z0JBQ3RCLElBQUksQ0FBQ1YsaUJBQWlCLEdBQUc7WUFDN0IsT0FDSztnQkFDRCxJQUFJLENBQUNGLFlBQVksQ0FBQ00sZ0JBQWdCLENBQUNNO2dCQUNuQyxJQUFJLENBQUNKLG9CQUFvQjtZQUM3QjtRQUNKO0lBQ0o7SUFDQUMsZ0JBQWdCSSxNQUFNLEVBQUU7UUFDcEIsSUFBSSxDQUFDbEIsUUFBUSxDQUFDYyxlQUFlLENBQUNJLFFBQVFDLENBQUFBO1lBQ2xDLElBQUksSUFBSSxDQUFDYixrQkFBa0IsSUFBSSxJQUFJLENBQUNFLGlCQUFpQixFQUFFO2dCQUNuRCxJQUFJLENBQUNDLGFBQWEsR0FBR1U7WUFDekIsT0FDSztnQkFDRCxJQUFJLENBQUNkLFlBQVksQ0FBQ1MsZUFBZSxDQUFDSztZQUN0QztRQUNKO0lBQ0o7QUFDSjtBQUNBdkIsZ0NBQWdDLEdBQUdFLDBCQUNuQywwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1pbnRlcmZhY2UuanM/OGIzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMiBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbnRlcmNlcHRpbmdMaXN0ZW5lckltcGwgPSB2b2lkIDA7XG5leHBvcnRzLmlzSW50ZXJjZXB0aW5nTGlzdGVuZXIgPSBpc0ludGVyY2VwdGluZ0xpc3RlbmVyO1xuZnVuY3Rpb24gaXNJbnRlcmNlcHRpbmdMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIHJldHVybiAobGlzdGVuZXIub25SZWNlaXZlTWV0YWRhdGEgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBsaXN0ZW5lci5vblJlY2VpdmVNZXRhZGF0YS5sZW5ndGggPT09IDEpO1xufVxuY2xhc3MgSW50ZXJjZXB0aW5nTGlzdGVuZXJJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihsaXN0ZW5lciwgbmV4dExpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICAgICAgdGhpcy5uZXh0TGlzdGVuZXIgPSBuZXh0TGlzdGVuZXI7XG4gICAgICAgIHRoaXMucHJvY2Vzc2luZ01ldGFkYXRhID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzUGVuZGluZ01lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcm9jZXNzaW5nTWVzc2FnZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBlbmRpbmdTdGF0dXMgPSBudWxsO1xuICAgIH1cbiAgICBwcm9jZXNzUGVuZGluZ01lc3NhZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc1BlbmRpbmdNZXNzYWdlKSB7XG4gICAgICAgICAgICB0aGlzLm5leHRMaXN0ZW5lci5vblJlY2VpdmVNZXNzYWdlKHRoaXMucGVuZGluZ01lc3NhZ2UpO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nTWVzc2FnZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmhhc1BlbmRpbmdNZXNzYWdlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc1BlbmRpbmdTdGF0dXMoKSB7XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdTdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dExpc3RlbmVyLm9uUmVjZWl2ZVN0YXR1cyh0aGlzLnBlbmRpbmdTdGF0dXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uUmVjZWl2ZU1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gICAgICAgIHRoaXMucHJvY2Vzc2luZ01ldGFkYXRhID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5saXN0ZW5lci5vblJlY2VpdmVNZXRhZGF0YShtZXRhZGF0YSwgbWV0YWRhdGEgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzaW5nTWV0YWRhdGEgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMubmV4dExpc3RlbmVyLm9uUmVjZWl2ZU1ldGFkYXRhKG1ldGFkYXRhKTtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc1BlbmRpbmdNZXNzYWdlKCk7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NQZW5kaW5nU3RhdHVzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIG9uUmVjZWl2ZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICAvKiBJZiB0aGlzIGxpc3RlbmVyIHByb2Nlc3NlcyBtZXNzYWdlcyBhc3luY2hyb25vdXNseSwgdGhlIGxhc3QgbWVzc2FnZSBtYXlcbiAgICAgICAgICogYmUgcmVvcmRlcmVkIHdpdGggcmVzcGVjdCB0byB0aGUgc3RhdHVzICovXG4gICAgICAgIHRoaXMucHJvY2Vzc2luZ01lc3NhZ2UgPSB0cnVlO1xuICAgICAgICB0aGlzLmxpc3RlbmVyLm9uUmVjZWl2ZU1lc3NhZ2UobWVzc2FnZSwgbXNnID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc2luZ01lc3NhZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2Nlc3NpbmdNZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ01lc3NhZ2UgPSBtc2c7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNQZW5kaW5nTWVzc2FnZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRMaXN0ZW5lci5vblJlY2VpdmVNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzUGVuZGluZ1N0YXR1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25SZWNlaXZlU3RhdHVzKHN0YXR1cykge1xuICAgICAgICB0aGlzLmxpc3RlbmVyLm9uUmVjZWl2ZVN0YXR1cyhzdGF0dXMsIHByb2Nlc3NlZFN0YXR1cyA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9jZXNzaW5nTWV0YWRhdGEgfHwgdGhpcy5wcm9jZXNzaW5nTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ1N0YXR1cyA9IHByb2Nlc3NlZFN0YXR1cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dExpc3RlbmVyLm9uUmVjZWl2ZVN0YXR1cyhwcm9jZXNzZWRTdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkludGVyY2VwdGluZ0xpc3RlbmVySW1wbCA9IEludGVyY2VwdGluZ0xpc3RlbmVySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhbGwtaW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkludGVyY2VwdGluZ0xpc3RlbmVySW1wbCIsImlzSW50ZXJjZXB0aW5nTGlzdGVuZXIiLCJsaXN0ZW5lciIsIm9uUmVjZWl2ZU1ldGFkYXRhIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwiY29uc3RydWN0b3IiLCJuZXh0TGlzdGVuZXIiLCJwcm9jZXNzaW5nTWV0YWRhdGEiLCJoYXNQZW5kaW5nTWVzc2FnZSIsInByb2Nlc3NpbmdNZXNzYWdlIiwicGVuZGluZ1N0YXR1cyIsInByb2Nlc3NQZW5kaW5nTWVzc2FnZSIsIm9uUmVjZWl2ZU1lc3NhZ2UiLCJwZW5kaW5nTWVzc2FnZSIsInByb2Nlc3NQZW5kaW5nU3RhdHVzIiwib25SZWNlaXZlU3RhdHVzIiwibWV0YWRhdGEiLCJtZXNzYWdlIiwibXNnIiwic3RhdHVzIiwicHJvY2Vzc2VkU3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/call-interface.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/call-number.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-number.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getNextCallNumber = getNextCallNumber;\nlet nextCallNumber = 0;\nfunction getNextCallNumber() {\n    return nextCallNumber++;\n} //# sourceMappingURL=call-number.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1udW1iZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHRTtBQUM1QixJQUFJQyxpQkFBaUI7QUFDckIsU0FBU0Q7SUFDTCxPQUFPQztBQUNYLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NhbGwtbnVtYmVyLmpzP2QzZDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMjIgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0TmV4dENhbGxOdW1iZXIgPSBnZXROZXh0Q2FsbE51bWJlcjtcbmxldCBuZXh0Q2FsbE51bWJlciA9IDA7XG5mdW5jdGlvbiBnZXROZXh0Q2FsbE51bWJlcigpIHtcbiAgICByZXR1cm4gbmV4dENhbGxOdW1iZXIrKztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhbGwtbnVtYmVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldE5leHRDYWxsTnVtYmVyIiwibmV4dENhbGxOdW1iZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/call-number.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/call.js":
/*!******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ClientDuplexStreamImpl = exports.ClientWritableStreamImpl = exports.ClientReadableStreamImpl = exports.ClientUnaryCallImpl = void 0;\nexports.callErrorFromStatus = callErrorFromStatus;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\n/**\n * Construct a ServiceError from a StatusObject. This function exists primarily\n * as an attempt to make the error stack trace clearly communicate that the\n * error is not necessarily a problem in gRPC itself.\n * @param status\n */ function callErrorFromStatus(status, callerStack) {\n    const message = `${status.code} ${constants_1.Status[status.code]}: ${status.details}`;\n    const error = new Error(message);\n    const stack = `${error.stack}\\nfor call at\\n${callerStack}`;\n    return Object.assign(new Error(message), status, {\n        stack\n    });\n}\nclass ClientUnaryCallImpl extends events_1.EventEmitter {\n    constructor(){\n        super();\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, \"Cancelled on client\");\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : \"unknown\";\n    }\n}\nexports.ClientUnaryCallImpl = ClientUnaryCallImpl;\nclass ClientReadableStreamImpl extends stream_1.Readable {\n    constructor(deserialize){\n        super({\n            objectMode: true\n        });\n        this.deserialize = deserialize;\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, \"Cancelled on client\");\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : \"unknown\";\n    }\n    _read(_size) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n    }\n}\nexports.ClientReadableStreamImpl = ClientReadableStreamImpl;\nclass ClientWritableStreamImpl extends stream_1.Writable {\n    constructor(serialize){\n        super({\n            objectMode: true\n        });\n        this.serialize = serialize;\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, \"Cancelled on client\");\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : \"unknown\";\n    }\n    _write(chunk, encoding, cb) {\n        var _a;\n        const context = {\n            callback: cb\n        };\n        const flags = Number(encoding);\n        if (!Number.isNaN(flags)) {\n            context.flags = flags;\n        }\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n    }\n    _final(cb) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n        cb();\n    }\n}\nexports.ClientWritableStreamImpl = ClientWritableStreamImpl;\nclass ClientDuplexStreamImpl extends stream_1.Duplex {\n    constructor(serialize, deserialize){\n        super({\n            objectMode: true\n        });\n        this.serialize = serialize;\n        this.deserialize = deserialize;\n    }\n    cancel() {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, \"Cancelled on client\");\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : \"unknown\";\n    }\n    _read(_size) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n    }\n    _write(chunk, encoding, cb) {\n        var _a;\n        const context = {\n            callback: cb\n        };\n        const flags = Number(encoding);\n        if (!Number.isNaN(flags)) {\n            context.flags = flags;\n        }\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n    }\n    _final(cb) {\n        var _a;\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n        cb();\n    }\n}\nexports.ClientDuplexStreamImpl = ClientDuplexStreamImpl; //# sourceMappingURL=call.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/certificate-provider.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/certificate-provider.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2024 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FileWatcherCertificateProvider = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst TRACER_NAME = \"certificate_provider\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst readFilePromise = (0, util_1.promisify)(fs.readFile);\nclass FileWatcherCertificateProvider {\n    constructor(config){\n        this.config = config;\n        this.refreshTimer = null;\n        this.fileResultPromise = null;\n        this.latestCaUpdate = undefined;\n        this.caListeners = new Set();\n        this.latestIdentityUpdate = undefined;\n        this.identityListeners = new Set();\n        this.lastUpdateTime = null;\n        if (config.certificateFile === undefined !== (config.privateKeyFile === undefined)) {\n            throw new Error(\"certificateFile and privateKeyFile must be set or unset together\");\n        }\n        if (config.certificateFile === undefined && config.caCertificateFile === undefined) {\n            throw new Error(\"At least one of certificateFile and caCertificateFile must be set\");\n        }\n        trace(\"File watcher constructed with config \" + JSON.stringify(config));\n    }\n    updateCertificates() {\n        if (this.fileResultPromise) {\n            return;\n        }\n        this.fileResultPromise = Promise.allSettled([\n            this.config.certificateFile ? readFilePromise(this.config.certificateFile) : Promise.reject(),\n            this.config.privateKeyFile ? readFilePromise(this.config.privateKeyFile) : Promise.reject(),\n            this.config.caCertificateFile ? readFilePromise(this.config.caCertificateFile) : Promise.reject()\n        ]);\n        this.fileResultPromise.then(([certificateResult, privateKeyResult, caCertificateResult])=>{\n            if (!this.refreshTimer) {\n                return;\n            }\n            trace(\"File watcher read certificates certificate \" + certificateResult.status + \", privateKey \" + privateKeyResult.status + \", CA certificate \" + caCertificateResult.status);\n            this.lastUpdateTime = new Date();\n            this.fileResultPromise = null;\n            if (certificateResult.status === \"fulfilled\" && privateKeyResult.status === \"fulfilled\") {\n                this.latestIdentityUpdate = {\n                    certificate: certificateResult.value,\n                    privateKey: privateKeyResult.value\n                };\n            } else {\n                this.latestIdentityUpdate = null;\n            }\n            if (caCertificateResult.status === \"fulfilled\") {\n                this.latestCaUpdate = {\n                    caCertificate: caCertificateResult.value\n                };\n            } else {\n                this.latestCaUpdate = null;\n            }\n            for (const listener of this.identityListeners){\n                listener(this.latestIdentityUpdate);\n            }\n            for (const listener of this.caListeners){\n                listener(this.latestCaUpdate);\n            }\n        });\n        trace(\"File watcher initiated certificate update\");\n    }\n    maybeStartWatchingFiles() {\n        if (!this.refreshTimer) {\n            /* Perform the first read immediately, but only if there was not already\n             * a recent read, to avoid reading from the filesystem significantly more\n             * frequently than configured if the provider quickly switches between\n             * used and unused. */ const timeSinceLastUpdate = this.lastUpdateTime ? new Date().getTime() - this.lastUpdateTime.getTime() : Infinity;\n            if (timeSinceLastUpdate > this.config.refreshIntervalMs) {\n                this.updateCertificates();\n            }\n            if (timeSinceLastUpdate > this.config.refreshIntervalMs * 2) {\n                // Clear out old updates if they are definitely stale\n                this.latestCaUpdate = undefined;\n                this.latestIdentityUpdate = undefined;\n            }\n            this.refreshTimer = setInterval(()=>this.updateCertificates(), this.config.refreshIntervalMs);\n            trace(\"File watcher started watching\");\n        }\n    }\n    maybeStopWatchingFiles() {\n        if (this.caListeners.size === 0 && this.identityListeners.size === 0) {\n            this.fileResultPromise = null;\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                this.refreshTimer = null;\n            }\n        }\n    }\n    addCaCertificateListener(listener) {\n        this.caListeners.add(listener);\n        this.maybeStartWatchingFiles();\n        if (this.latestCaUpdate !== undefined) {\n            process.nextTick(listener, this.latestCaUpdate);\n        }\n    }\n    removeCaCertificateListener(listener) {\n        this.caListeners.delete(listener);\n        this.maybeStopWatchingFiles();\n    }\n    addIdentityCertificateListener(listener) {\n        this.identityListeners.add(listener);\n        this.maybeStartWatchingFiles();\n        if (this.latestIdentityUpdate !== undefined) {\n            process.nextTick(listener, this.latestIdentityUpdate);\n        }\n    }\n    removeIdentityCertificateListener(listener) {\n        this.identityListeners.delete(listener);\n        this.maybeStopWatchingFiles();\n    }\n}\nexports.FileWatcherCertificateProvider = FileWatcherCertificateProvider; //# sourceMappingURL=certificate-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2VydGlmaWNhdGUtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNDQUFzQyxHQUFHLEtBQUs7QUFDOUMsTUFBTUcsS0FBS0MsbUJBQU9BLENBQUMsY0FBSTtBQUN2QixNQUFNQyxVQUFVRCxtQkFBT0EsQ0FBQywwRUFBVztBQUNuQyxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyw4RUFBYTtBQUN6QyxNQUFNRyxTQUFTSCxtQkFBT0EsQ0FBQyxrQkFBTTtBQUM3QixNQUFNSSxjQUFjO0FBQ3BCLFNBQVNDLE1BQU1DLElBQUk7SUFDZkwsUUFBUUksS0FBSyxDQUFDSCxZQUFZSyxZQUFZLENBQUNDLEtBQUssRUFBRUosYUFBYUU7QUFDL0Q7QUFDQSxNQUFNRyxrQkFBa0IsQ0FBQyxHQUFHTixPQUFPTyxTQUFTLEVBQUVYLEdBQUdZLFFBQVE7QUFDekQsTUFBTWI7SUFDRmMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsWUFBWSxHQUFHO1FBQ3BCLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUc7UUFDekIsSUFBSSxDQUFDQyxjQUFjLEdBQUdDO1FBQ3RCLElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlDO1FBQ3ZCLElBQUksQ0FBQ0Msb0JBQW9CLEdBQUdIO1FBQzVCLElBQUksQ0FBQ0ksaUJBQWlCLEdBQUcsSUFBSUY7UUFDN0IsSUFBSSxDQUFDRyxjQUFjLEdBQUc7UUFDdEIsSUFBSSxPQUFRQyxlQUFlLEtBQUtOLGNBQWdCSixDQUFBQSxPQUFPVyxjQUFjLEtBQUtQLFNBQVEsR0FBSTtZQUNsRixNQUFNLElBQUlRLE1BQU07UUFDcEI7UUFDQSxJQUFJWixPQUFPVSxlQUFlLEtBQUtOLGFBQWFKLE9B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X21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2VydGlmaWNhdGUtcHJvdmlkZXIuanM/ZDRlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyNCBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GaWxlV2F0Y2hlckNlcnRpZmljYXRlUHJvdmlkZXIgPSB2b2lkIDA7XG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IGxvZ2dpbmcgPSByZXF1aXJlKFwiLi9sb2dnaW5nXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IFRSQUNFUl9OQU1FID0gJ2NlcnRpZmljYXRlX3Byb3ZpZGVyJztcbmZ1bmN0aW9uIHRyYWNlKHRleHQpIHtcbiAgICBsb2dnaW5nLnRyYWNlKGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5ERUJVRywgVFJBQ0VSX05BTUUsIHRleHQpO1xufVxuY29uc3QgcmVhZEZpbGVQcm9taXNlID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKGZzLnJlYWRGaWxlKTtcbmNsYXNzIEZpbGVXYXRjaGVyQ2VydGlmaWNhdGVQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLnJlZnJlc2hUaW1lciA9IG51bGw7XG4gICAgICAgIHRoaXMuZmlsZVJlc3VsdFByb21pc2UgPSBudWxsO1xuICAgICAgICB0aGlzLmxhdGVzdENhVXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNhTGlzdGVuZXJzID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLmxhdGVzdElkZW50aXR5VXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmlkZW50aXR5TGlzdGVuZXJzID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLmxhc3RVcGRhdGVUaW1lID0gbnVsbDtcbiAgICAgICAgaWYgKChjb25maWcuY2VydGlmaWNhdGVGaWxlID09PSB1bmRlZmluZWQpICE9PSAoY29uZmlnLnByaXZhdGVLZXlGaWxlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NlcnRpZmljYXRlRmlsZSBhbmQgcHJpdmF0ZUtleUZpbGUgbXVzdCBiZSBzZXQgb3IgdW5zZXQgdG9nZXRoZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLmNlcnRpZmljYXRlRmlsZSA9PT0gdW5kZWZpbmVkICYmIGNvbmZpZy5jYUNlcnRpZmljYXRlRmlsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0IGxlYXN0IG9uZSBvZiBjZXJ0aWZpY2F0ZUZpbGUgYW5kIGNhQ2VydGlmaWNhdGVGaWxlIG11c3QgYmUgc2V0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2UoJ0ZpbGUgd2F0Y2hlciBjb25zdHJ1Y3RlZCB3aXRoIGNvbmZpZyAnICsgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XG4gICAgfVxuICAgIHVwZGF0ZUNlcnRpZmljYXRlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuZmlsZVJlc3VsdFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbGVSZXN1bHRQcm9taXNlID0gUHJvbWlzZS5hbGxTZXR0bGVkKFtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmNlcnRpZmljYXRlRmlsZSA/IHJlYWRGaWxlUHJvbWlzZSh0aGlzLmNvbmZpZy5jZXJ0aWZpY2F0ZUZpbGUpIDogUHJvbWlzZS5yZWplY3QoKSxcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnByaXZhdGVLZXlGaWxlID8gcmVhZEZpbGVQcm9taXNlKHRoaXMuY29uZmlnLnByaXZhdGVLZXlGaWxlKSA6IFByb21pc2UucmVqZWN0KCksXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5jYUNlcnRpZmljYXRlRmlsZSA/IHJlYWRGaWxlUHJvbWlzZSh0aGlzLmNvbmZpZy5jYUNlcnRpZmljYXRlRmlsZSkgOiBQcm9taXNlLnJlamVjdCgpXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLmZpbGVSZXN1bHRQcm9taXNlLnRoZW4oKFtjZXJ0aWZpY2F0ZVJlc3VsdCwgcHJpdmF0ZUtleVJlc3VsdCwgY2FDZXJ0aWZpY2F0ZVJlc3VsdF0pID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5yZWZyZXNoVGltZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZSgnRmlsZSB3YXRjaGVyIHJlYWQgY2VydGlmaWNhdGVzIGNlcnRpZmljYXRlICcgKyBjZXJ0aWZpY2F0ZVJlc3VsdC5zdGF0dXMgKyAnLCBwcml2YXRlS2V5ICcgKyBwcml2YXRlS2V5UmVzdWx0LnN0YXR1cyArICcsIENBIGNlcnRpZmljYXRlICcgKyBjYUNlcnRpZmljYXRlUmVzdWx0LnN0YXR1cyk7XG4gICAgICAgICAgICB0aGlzLmxhc3RVcGRhdGVUaW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuZmlsZVJlc3VsdFByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGNlcnRpZmljYXRlUmVzdWx0LnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcgJiYgcHJpdmF0ZUtleVJlc3VsdC5zdGF0dXMgPT09ICdmdWxmaWxsZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXRlc3RJZGVudGl0eVVwZGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY2VydGlmaWNhdGU6IGNlcnRpZmljYXRlUmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBwcml2YXRlS2V5OiBwcml2YXRlS2V5UmVzdWx0LnZhbHVlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubGF0ZXN0SWRlbnRpdHlVcGRhdGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhQ2VydGlmaWNhdGVSZXN1bHQuc3RhdHVzID09PSAnZnVsZmlsbGVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMubGF0ZXN0Q2FVcGRhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNhQ2VydGlmaWNhdGU6IGNhQ2VydGlmaWNhdGVSZXN1bHQudmFsdWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXRlc3RDYVVwZGF0ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIHRoaXMuaWRlbnRpdHlMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcih0aGlzLmxhdGVzdElkZW50aXR5VXBkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5jYUxpc3RlbmVycykge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyKHRoaXMubGF0ZXN0Q2FVcGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdHJhY2UoJ0ZpbGUgd2F0Y2hlciBpbml0aWF0ZWQgY2VydGlmaWNhdGUgdXBkYXRlJyk7XG4gICAgfVxuICAgIG1heWJlU3RhcnRXYXRjaGluZ0ZpbGVzKCkge1xuICAgICAgICBpZiAoIXRoaXMucmVmcmVzaFRpbWVyKSB7XG4gICAgICAgICAgICAvKiBQZXJmb3JtIHRoZSBmaXJzdCByZWFkIGltbWVkaWF0ZWx5LCBidXQgb25seSBpZiB0aGVyZSB3YXMgbm90IGFscmVhZHlcbiAgICAgICAgICAgICAqIGEgcmVjZW50IHJlYWQsIHRvIGF2b2lkIHJlYWRpbmcgZnJvbSB0aGUgZmlsZXN5c3RlbSBzaWduaWZpY2FudGx5IG1vcmVcbiAgICAgICAgICAgICAqIGZyZXF1ZW50bHkgdGhhbiBjb25maWd1cmVkIGlmIHRoZSBwcm92aWRlciBxdWlja2x5IHN3aXRjaGVzIGJldHdlZW5cbiAgICAgICAgICAgICAqIHVzZWQgYW5kIHVudXNlZC4gKi9cbiAgICAgICAgICAgIGNvbnN0IHRpbWVTaW5jZUxhc3RVcGRhdGUgPSB0aGlzLmxhc3RVcGRhdGVUaW1lID8gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAtIHRoaXMubGFzdFVwZGF0ZVRpbWUuZ2V0VGltZSgpIDogSW5maW5pdHk7XG4gICAgICAgICAgICBpZiAodGltZVNpbmNlTGFzdFVwZGF0ZSA+IHRoaXMuY29uZmlnLnJlZnJlc2hJbnRlcnZhbE1zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDZXJ0aWZpY2F0ZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aW1lU2luY2VMYXN0VXBkYXRlID4gdGhpcy5jb25maWcucmVmcmVzaEludGVydmFsTXMgKiAyKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgb3V0IG9sZCB1cGRhdGVzIGlmIHRoZXkgYXJlIGRlZmluaXRlbHkgc3RhbGVcbiAgICAgICAgICAgICAgICB0aGlzLmxhdGVzdENhVXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRoaXMubGF0ZXN0SWRlbnRpdHlVcGRhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hUaW1lciA9IHNldEludGVydmFsKCgpID0+IHRoaXMudXBkYXRlQ2VydGlmaWNhdGVzKCksIHRoaXMuY29uZmlnLnJlZnJlc2hJbnRlcnZhbE1zKTtcbiAgICAgICAgICAgIHRyYWNlKCdGaWxlIHdhdGNoZXIgc3RhcnRlZCB3YXRjaGluZycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1heWJlU3RvcFdhdGNoaW5nRmlsZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhTGlzdGVuZXJzLnNpemUgPT09IDAgJiYgdGhpcy5pZGVudGl0eUxpc3RlbmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmZpbGVSZXN1bHRQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlZnJlc2hUaW1lcikge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWZyZXNoVGltZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRDYUNlcnRpZmljYXRlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5jYUxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgICAgICB0aGlzLm1heWJlU3RhcnRXYXRjaGluZ0ZpbGVzKCk7XG4gICAgICAgIGlmICh0aGlzLmxhdGVzdENhVXBkYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2sobGlzdGVuZXIsIHRoaXMubGF0ZXN0Q2FVcGRhdGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZUNhQ2VydGlmaWNhdGVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmNhTGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgIHRoaXMubWF5YmVTdG9wV2F0Y2hpbmdGaWxlcygpO1xuICAgIH1cbiAgICBhZGRJZGVudGl0eUNlcnRpZmljYXRlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5pZGVudGl0eUxpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICAgICAgICB0aGlzLm1heWJlU3RhcnRXYXRjaGluZ0ZpbGVzKCk7XG4gICAgICAgIGlmICh0aGlzLmxhdGVzdElkZW50aXR5VXBkYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2sobGlzdGVuZXIsIHRoaXMubGF0ZXN0SWRlbnRpdHlVcGRhdGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZUlkZW50aXR5Q2VydGlmaWNhdGVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmlkZW50aXR5TGlzdGVuZXJzLmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgIHRoaXMubWF5YmVTdG9wV2F0Y2hpbmdGaWxlcygpO1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsZVdhdGNoZXJDZXJ0aWZpY2F0ZVByb3ZpZGVyID0gRmlsZVdhdGNoZXJDZXJ0aWZpY2F0ZVByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2VydGlmaWNhdGUtcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRmlsZVdhdGNoZXJDZXJ0aWZpY2F0ZVByb3ZpZGVyIiwiZnMiLCJyZXF1aXJlIiwibG9nZ2luZyIsImNvbnN0YW50c18xIiwidXRpbF8xIiwiVFJBQ0VSX05BTUUiLCJ0cmFjZSIsInRleHQiLCJMb2dWZXJib3NpdHkiLCJERUJVRyIsInJlYWRGaWxlUHJvbWlzZSIsInByb21pc2lmeSIsInJlYWRGaWxlIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJyZWZyZXNoVGltZXIiLCJmaWxlUmVzdWx0UHJvbWlzZSIsImxhdGVzdENhVXBkYXRlIiwidW5kZWZpbmVkIiwiY2FMaXN0ZW5lcnMiLCJTZXQiLCJsYXRlc3RJZGVudGl0eVVwZGF0ZSIsImlkZW50aXR5TGlzdGVuZXJzIiwibGFzdFVwZGF0ZVRpbWUiLCJjZXJ0aWZpY2F0ZUZpbGUiLCJwcml2YXRlS2V5RmlsZSIsIkVycm9yIiwiY2FDZXJ0aWZpY2F0ZUZpbGUiLCJKU09OIiwic3RyaW5naWZ5IiwidXBkYXRlQ2VydGlmaWNhdGVzIiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJyZWplY3QiLCJ0aGVuIiwiY2VydGlmaWNhdGVSZXN1bHQiLCJwcml2YXRlS2V5UmVzdWx0IiwiY2FDZXJ0aWZpY2F0ZVJlc3VsdCIsInN0YXR1cyIsIkRhdGUiLCJjZXJ0aWZpY2F0ZSIsInByaXZhdGVLZXkiLCJjYUNlcnRpZmljYXRlIiwibGlzdGVuZXIiLCJtYXliZVN0YXJ0V2F0Y2hpbmdGaWxlcyIsInRpbWVTaW5jZUxhc3RVcGRhdGUiLCJnZXRUaW1lIiwiSW5maW5pdHkiLCJyZWZyZXNoSW50ZXJ2YWxNcyIsInNldEludGVydmFsIiwibWF5YmVTdG9wV2F0Y2hpbmdGaWxlcyIsInNpemUiLCJjbGVhckludGVydmFsIiwiYWRkQ2FDZXJ0aWZpY2F0ZUxpc3RlbmVyIiwiYWRkIiwicHJvY2VzcyIsIm5leHRUaWNrIiwicmVtb3ZlQ2FDZXJ0aWZpY2F0ZUxpc3RlbmVyIiwiZGVsZXRlIiwiYWRkSWRlbnRpdHlDZXJ0aWZpY2F0ZUxpc3RlbmVyIiwicmVtb3ZlSWRlbnRpdHlDZXJ0aWZpY2F0ZUxpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/certificate-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel-credentials.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChannelCredentials = void 0;\nexports.createCertificateProviderChannelCredentials = createCertificateProviderChannelCredentials;\nconst tls_1 = __webpack_require__(/*! tls */ \"tls\");\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\nconst tls_helpers_1 = __webpack_require__(/*! ./tls-helpers */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n    if (obj && !(obj instanceof Buffer)) {\n        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\n    }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */ class ChannelCredentials {\n    /**\n     * Returns a copy of this object with the included set of per-call credentials\n     * expanded to include callCredentials.\n     * @param callCredentials A CallCredentials object to associate with this\n     * instance.\n     */ compose(callCredentials) {\n        return new ComposedChannelCredentialsImpl(this, callCredentials);\n    }\n    /**\n     * Return a new ChannelCredentials instance with a given set of credentials.\n     * The resulting instance can be used to construct a Channel that communicates\n     * over TLS.\n     * @param rootCerts The root certificate data.\n     * @param privateKey The client certificate private key, if available.\n     * @param certChain The client certificate key chain, if available.\n     * @param verifyOptions Additional options to modify certificate verification\n     */ static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n        var _a;\n        verifyIsBufferOrNull(rootCerts, \"Root certificate\");\n        verifyIsBufferOrNull(privateKey, \"Private key\");\n        verifyIsBufferOrNull(certChain, \"Certificate chain\");\n        if (privateKey && !certChain) {\n            throw new Error(\"Private key must be given with accompanying certificate chain\");\n        }\n        if (!privateKey && certChain) {\n            throw new Error(\"Certificate chain must be given with accompanying private key\");\n        }\n        const secureContext = (0, tls_1.createSecureContext)({\n            ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,\n            key: privateKey !== null && privateKey !== void 0 ? privateKey : undefined,\n            cert: certChain !== null && certChain !== void 0 ? certChain : undefined,\n            ciphers: tls_helpers_1.CIPHER_SUITES\n        });\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n    }\n    /**\n     * Return a new ChannelCredentials instance with credentials created using\n     * the provided secureContext. The resulting instances can be used to\n     * construct a Channel that communicates over TLS. gRPC will not override\n     * anything in the provided secureContext, so the environment variables\n     * GRPC_SSL_CIPHER_SUITES and GRPC_DEFAULT_SSL_ROOTS_FILE_PATH will\n     * not be applied.\n     * @param secureContext The return value of tls.createSecureContext()\n     * @param verifyOptions Additional options to modify certificate verification\n     */ static createFromSecureContext(secureContext, verifyOptions) {\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n    }\n    /**\n     * Return a new ChannelCredentials instance with no credentials.\n     */ static createInsecure() {\n        return new InsecureChannelCredentialsImpl();\n    }\n}\nexports.ChannelCredentials = ChannelCredentials;\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor(){\n        super();\n    }\n    compose(callCredentials) {\n        throw new Error(\"Cannot compose insecure credentials\");\n    }\n    _isSecure() {\n        return false;\n    }\n    _equals(other) {\n        return other instanceof InsecureChannelCredentialsImpl;\n    }\n    _createSecureConnector(channelTarget, options, callCredentials) {\n        return {\n            connect (socket) {\n                return Promise.resolve({\n                    socket,\n                    secure: false\n                });\n            },\n            waitForReady: ()=>{\n                return Promise.resolve();\n            },\n            getCallCredentials: ()=>{\n                return callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty();\n            },\n            destroy () {}\n        };\n    }\n}\nfunction getConnectionOptions(secureContext, verifyOptions, channelTarget, options) {\n    var _a, _b, _c, _d;\n    const connectionOptions = {\n        secureContext: secureContext\n    };\n    if (verifyOptions.checkServerIdentity) {\n        connectionOptions.checkServerIdentity = verifyOptions.checkServerIdentity;\n    }\n    if (verifyOptions.rejectUnauthorized !== undefined) {\n        connectionOptions.rejectUnauthorized = verifyOptions.rejectUnauthorized;\n    }\n    connectionOptions.ALPNProtocols = [\n        \"h2\"\n    ];\n    if (options[\"grpc.ssl_target_name_override\"]) {\n        const sslTargetNameOverride = options[\"grpc.ssl_target_name_override\"];\n        const originalCheckServerIdentity = (_a = connectionOptions.checkServerIdentity) !== null && _a !== void 0 ? _a : tls_1.checkServerIdentity;\n        connectionOptions.checkServerIdentity = (host, cert)=>{\n            return originalCheckServerIdentity(sslTargetNameOverride, cert);\n        };\n        connectionOptions.servername = sslTargetNameOverride;\n    } else {\n        if (\"grpc.http_connect_target\" in options) {\n            /* This is more or less how servername will be set in createSession\n             * if a connection is successfully established through the proxy.\n             * If the proxy is not used, these connectionOptions are discarded\n             * anyway */ const targetPath = (0, resolver_1.getDefaultAuthority)((_b = (0, uri_parser_1.parseUri)(options[\"grpc.http_connect_target\"])) !== null && _b !== void 0 ? _b : {\n                path: \"localhost\"\n            });\n            const hostPort = (0, uri_parser_1.splitHostPort)(targetPath);\n            connectionOptions.servername = (_c = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _c !== void 0 ? _c : targetPath;\n        }\n    }\n    if (options[\"grpc-node.tls_enable_trace\"]) {\n        connectionOptions.enableTrace = true;\n    }\n    let realTarget = channelTarget;\n    if (\"grpc.http_connect_target\" in options) {\n        const parsedTarget = (0, uri_parser_1.parseUri)(options[\"grpc.http_connect_target\"]);\n        if (parsedTarget) {\n            realTarget = parsedTarget;\n        }\n    }\n    const targetPath = (0, resolver_1.getDefaultAuthority)(realTarget);\n    const hostPort = (0, uri_parser_1.splitHostPort)(targetPath);\n    const remoteHost = (_d = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _d !== void 0 ? _d : targetPath;\n    connectionOptions.host = remoteHost;\n    connectionOptions.servername = remoteHost;\n    return connectionOptions;\n}\nclass SecureConnectorImpl {\n    constructor(connectionOptions, callCredentials){\n        this.connectionOptions = connectionOptions;\n        this.callCredentials = callCredentials;\n    }\n    connect(socket) {\n        const tlsConnectOptions = Object.assign({\n            socket: socket\n        }, this.connectionOptions);\n        return new Promise((resolve, reject)=>{\n            const tlsSocket = (0, tls_1.connect)(tlsConnectOptions, ()=>{\n                if (!tlsSocket.authorized) {\n                    reject(tlsSocket.authorizationError);\n                    return;\n                }\n                resolve({\n                    socket: tlsSocket,\n                    secure: true\n                });\n            });\n            tlsSocket.on(\"error\", (error)=>{\n                reject(error);\n            });\n        });\n    }\n    waitForReady() {\n        return Promise.resolve();\n    }\n    getCallCredentials() {\n        return this.callCredentials;\n    }\n    destroy() {}\n}\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor(secureContext, verifyOptions){\n        super();\n        this.secureContext = secureContext;\n        this.verifyOptions = verifyOptions;\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof SecureChannelCredentialsImpl) {\n            return this.secureContext === other.secureContext && this.verifyOptions.checkServerIdentity === other.verifyOptions.checkServerIdentity;\n        } else {\n            return false;\n        }\n    }\n    _createSecureConnector(channelTarget, options, callCredentials) {\n        const connectionOptions = getConnectionOptions(this.secureContext, this.verifyOptions, channelTarget, options);\n        return new SecureConnectorImpl(connectionOptions, callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty());\n    }\n}\nclass CertificateProviderChannelCredentialsImpl extends ChannelCredentials {\n    constructor(caCertificateProvider, identityCertificateProvider, verifyOptions){\n        super();\n        this.caCertificateProvider = caCertificateProvider;\n        this.identityCertificateProvider = identityCertificateProvider;\n        this.verifyOptions = verifyOptions;\n        this.refcount = 0;\n        /**\n         * `undefined` means that the certificates have not yet been loaded. `null`\n         * means that an attempt to load them has completed, and has failed.\n         */ this.latestCaUpdate = undefined;\n        /**\n         * `undefined` means that the certificates have not yet been loaded. `null`\n         * means that an attempt to load them has completed, and has failed.\n         */ this.latestIdentityUpdate = undefined;\n        this.caCertificateUpdateListener = this.handleCaCertificateUpdate.bind(this);\n        this.identityCertificateUpdateListener = this.handleIdentityCertitificateUpdate.bind(this);\n        this.secureContextWatchers = [];\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        var _a, _b;\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof CertificateProviderChannelCredentialsImpl) {\n            return this.caCertificateProvider === other.caCertificateProvider && this.identityCertificateProvider === other.identityCertificateProvider && ((_a = this.verifyOptions) === null || _a === void 0 ? void 0 : _a.checkServerIdentity) === ((_b = other.verifyOptions) === null || _b === void 0 ? void 0 : _b.checkServerIdentity);\n        } else {\n            return false;\n        }\n    }\n    ref() {\n        var _a;\n        if (this.refcount === 0) {\n            this.caCertificateProvider.addCaCertificateListener(this.caCertificateUpdateListener);\n            (_a = this.identityCertificateProvider) === null || _a === void 0 ? void 0 : _a.addIdentityCertificateListener(this.identityCertificateUpdateListener);\n        }\n        this.refcount += 1;\n    }\n    unref() {\n        var _a;\n        this.refcount -= 1;\n        if (this.refcount === 0) {\n            this.caCertificateProvider.removeCaCertificateListener(this.caCertificateUpdateListener);\n            (_a = this.identityCertificateProvider) === null || _a === void 0 ? void 0 : _a.removeIdentityCertificateListener(this.identityCertificateUpdateListener);\n        }\n    }\n    _createSecureConnector(channelTarget, options, callCredentials) {\n        this.ref();\n        return new CertificateProviderChannelCredentialsImpl.SecureConnectorImpl(this, channelTarget, options, callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty());\n    }\n    maybeUpdateWatchers() {\n        if (this.hasReceivedUpdates()) {\n            for (const watcher of this.secureContextWatchers){\n                watcher(this.getLatestSecureContext());\n            }\n            this.secureContextWatchers = [];\n        }\n    }\n    handleCaCertificateUpdate(update) {\n        this.latestCaUpdate = update;\n        this.maybeUpdateWatchers();\n    }\n    handleIdentityCertitificateUpdate(update) {\n        this.latestIdentityUpdate = update;\n        this.maybeUpdateWatchers();\n    }\n    hasReceivedUpdates() {\n        if (this.latestCaUpdate === undefined) {\n            return false;\n        }\n        if (this.identityCertificateProvider && this.latestIdentityUpdate === undefined) {\n            return false;\n        }\n        return true;\n    }\n    getSecureContext() {\n        if (this.hasReceivedUpdates()) {\n            return Promise.resolve(this.getLatestSecureContext());\n        } else {\n            return new Promise((resolve)=>{\n                this.secureContextWatchers.push(resolve);\n            });\n        }\n    }\n    getLatestSecureContext() {\n        var _a, _b;\n        if (!this.latestCaUpdate) {\n            return null;\n        }\n        if (this.identityCertificateProvider !== null && !this.latestIdentityUpdate) {\n            return null;\n        }\n        try {\n            return (0, tls_1.createSecureContext)({\n                ca: this.latestCaUpdate.caCertificate,\n                key: (_a = this.latestIdentityUpdate) === null || _a === void 0 ? void 0 : _a.privateKey,\n                cert: (_b = this.latestIdentityUpdate) === null || _b === void 0 ? void 0 : _b.certificate,\n                ciphers: tls_helpers_1.CIPHER_SUITES\n            });\n        } catch (e) {\n            (0, logging_1.log)(constants_1.LogVerbosity.ERROR, \"Failed to createSecureContext with error \" + e.message);\n            return null;\n        }\n    }\n}\nCertificateProviderChannelCredentialsImpl.SecureConnectorImpl = class {\n    constructor(parent, channelTarget, options, callCredentials){\n        this.parent = parent;\n        this.channelTarget = channelTarget;\n        this.options = options;\n        this.callCredentials = callCredentials;\n    }\n    connect(socket) {\n        return new Promise((resolve, reject)=>{\n            const secureContext = this.parent.getLatestSecureContext();\n            if (!secureContext) {\n                reject(new Error(\"Failed to load credentials\"));\n                return;\n            }\n            if (socket.closed) {\n                reject(new Error(\"Socket closed while loading credentials\"));\n            }\n            const connnectionOptions = getConnectionOptions(secureContext, this.parent.verifyOptions, this.channelTarget, this.options);\n            const tlsConnectOptions = Object.assign({\n                socket: socket\n            }, connnectionOptions);\n            const closeCallback = ()=>{\n                reject(new Error(\"Socket closed\"));\n            };\n            const errorCallback = (error)=>{\n                reject(error);\n            };\n            const tlsSocket = (0, tls_1.connect)(tlsConnectOptions, ()=>{\n                tlsSocket.removeListener(\"close\", closeCallback);\n                tlsSocket.removeListener(\"error\", errorCallback);\n                if (!tlsSocket.authorized) {\n                    reject(tlsSocket.authorizationError);\n                    return;\n                }\n                resolve({\n                    socket: tlsSocket,\n                    secure: true\n                });\n            });\n            tlsSocket.once(\"close\", closeCallback);\n            tlsSocket.once(\"error\", errorCallback);\n        });\n    }\n    async waitForReady() {\n        await this.parent.getSecureContext();\n    }\n    getCallCredentials() {\n        return this.callCredentials;\n    }\n    destroy() {\n        this.parent.unref();\n    }\n};\nfunction createCertificateProviderChannelCredentials(caCertificateProvider, identityCertificateProvider, verifyOptions) {\n    return new CertificateProviderChannelCredentialsImpl(caCertificateProvider, identityCertificateProvider, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n}\nclass ComposedChannelCredentialsImpl extends ChannelCredentials {\n    constructor(channelCredentials, callCredentials){\n        super();\n        this.channelCredentials = channelCredentials;\n        this.callCredentials = callCredentials;\n        if (!channelCredentials._isSecure()) {\n            throw new Error(\"Cannot compose insecure credentials\");\n        }\n    }\n    compose(callCredentials) {\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n        return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ComposedChannelCredentialsImpl) {\n            return this.channelCredentials._equals(other.channelCredentials) && this.callCredentials._equals(other.callCredentials);\n        } else {\n            return false;\n        }\n    }\n    _createSecureConnector(channelTarget, options, callCredentials) {\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty());\n        return this.channelCredentials._createSecureConnector(channelTarget, options, combinedCallCredentials);\n    }\n} //# sourceMappingURL=channel-credentials.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel-options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.recognizedOptions = void 0;\nexports.channelOptionsEqual = channelOptionsEqual;\n/**\n * This is for checking provided options at runtime. This is an object for\n * easier membership checking.\n */ exports.recognizedOptions = {\n    \"grpc.ssl_target_name_override\": true,\n    \"grpc.primary_user_agent\": true,\n    \"grpc.secondary_user_agent\": true,\n    \"grpc.default_authority\": true,\n    \"grpc.keepalive_time_ms\": true,\n    \"grpc.keepalive_timeout_ms\": true,\n    \"grpc.keepalive_permit_without_calls\": true,\n    \"grpc.service_config\": true,\n    \"grpc.max_concurrent_streams\": true,\n    \"grpc.initial_reconnect_backoff_ms\": true,\n    \"grpc.max_reconnect_backoff_ms\": true,\n    \"grpc.use_local_subchannel_pool\": true,\n    \"grpc.max_send_message_length\": true,\n    \"grpc.max_receive_message_length\": true,\n    \"grpc.enable_http_proxy\": true,\n    \"grpc.enable_channelz\": true,\n    \"grpc.dns_min_time_between_resolutions_ms\": true,\n    \"grpc.enable_retries\": true,\n    \"grpc.per_rpc_retry_buffer_size\": true,\n    \"grpc.retry_buffer_size\": true,\n    \"grpc.max_connection_age_ms\": true,\n    \"grpc.max_connection_age_grace_ms\": true,\n    \"grpc-node.max_session_memory\": true,\n    \"grpc.service_config_disable_resolution\": true,\n    \"grpc.client_idle_timeout_ms\": true,\n    \"grpc-node.tls_enable_trace\": true,\n    \"grpc.lb.ring_hash.ring_size_cap\": true,\n    \"grpc-node.retry_max_attempts_limit\": true,\n    \"grpc-node.flow_control_window\": true\n};\nfunction channelOptionsEqual(options1, options2) {\n    const keys1 = Object.keys(options1).sort();\n    const keys2 = Object.keys(options2).sort();\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for(let i = 0; i < keys1.length; i += 1){\n        if (keys1[i] !== keys2[i]) {\n            return false;\n        }\n        if (options1[keys1[i]] !== options2[keys2[i]]) {\n            return false;\n        }\n    }\n    return true;\n} //# sourceMappingURL=channel-options.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx5QkFBeUIsR0FBRyxLQUFLO0FBQ2pDQSwyQkFBMkIsR0FBR0c7QUFDOUI7OztDQUdDLEdBQ0RILHlCQUF5QixHQUFHO0lBQ3hCLGlDQUFpQztJQUNqQywyQkFBMkI7SUFDM0IsNkJBQTZCO0lBQzdCLDBCQUEwQjtJQUMxQiwwQkFBMEI7SUFDMUIsNkJBQTZCO0lBQzdCLHVDQUF1QztJQUN2Qyx1QkFBdUI7SUFDdkIsK0JBQStCO0lBQy9CLHFDQUFxQztJQUNyQyxpQ0FBaUM7SUFDakMsa0NBQWtDO0lBQ2xDLGdDQUFnQztJQUNoQyxtQ0FBbUM7SUFDbkMsMEJBQTBCO0lBQzFCLHdCQUF3QjtJQUN4Qiw0Q0FBNEM7SUFDNUMsdUJBQXVCO0lBQ3ZCLGtDQUFrQztJQUNsQywwQkFBMEI7SUFDMUIsOEJBQThCO0lBQzlCLG9DQUFvQztJQUNwQyxnQ0FBZ0M7SUFDaEMsMENBQTBDO0lBQzFDLCtCQUErQjtJQUMvQiw4QkFBOEI7SUFDOUIsbUNBQW1DO0lBQ25DLHNDQUFzQztJQUN0QyxpQ0FBaUM7QUFDckM7QUFDQSxTQUFTRyxvQkFBb0JDLFFBQVEsRUFBRUMsUUFBUTtJQUMzQyxNQUFNQyxRQUFRUixPQUFPUyxJQUFJLENBQUNILFVBQVVJLElBQUk7SUFDeEMsTUFBTUMsUUFBUVgsT0FBT1MsSUFBSSxDQUFDRixVQUFVRyxJQUFJO0lBQ3hDLElBQUlGLE1BQU1JLE1BQU0sS0FBS0QsTUFBTUMsTUFBTSxFQUFFO1FBQy9CLE9BQU87SUFDWDtJQUNBLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxNQUFNSSxNQUFNLEVBQUVDLEtBQUssRUFBRztRQUN0QyxJQUFJTCxLQUFLLENBQUNLLEVBQUUsS0FBS0YsS0FBSyxDQUFDRSxFQUFFLEVBQUU7WUFDdkIsT0FBTztRQUNYO1FBQ0EsSUFBSVAsUUFBUSxDQUFDRSxLQUFLLENBQUNLLEVBQUUsQ0FBQyxLQUFLTixRQUFRLENBQUNJLEtBQUssQ0FBQ0UsRUFBRSxDQUFDLEVBQUU7WUFDM0MsT0FBTztRQUNYO0lBQ0o7SUFDQSxPQUFPO0FBQ1gsRUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC1vcHRpb25zLmpzPzc3NmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVjb2duaXplZE9wdGlvbnMgPSB2b2lkIDA7XG5leHBvcnRzLmNoYW5uZWxPcHRpb25zRXF1YWwgPSBjaGFubmVsT3B0aW9uc0VxdWFsO1xuLyoqXG4gKiBUaGlzIGlzIGZvciBjaGVja2luZyBwcm92aWRlZCBvcHRpb25zIGF0IHJ1bnRpbWUuIFRoaXMgaXMgYW4gb2JqZWN0IGZvclxuICogZWFzaWVyIG1lbWJlcnNoaXAgY2hlY2tpbmcuXG4gKi9cbmV4cG9ydHMucmVjb2duaXplZE9wdGlvbnMgPSB7XG4gICAgJ2dycGMuc3NsX3RhcmdldF9uYW1lX292ZXJyaWRlJzogdHJ1ZSxcbiAgICAnZ3JwYy5wcmltYXJ5X3VzZXJfYWdlbnQnOiB0cnVlLFxuICAgICdncnBjLnNlY29uZGFyeV91c2VyX2FnZW50JzogdHJ1ZSxcbiAgICAnZ3JwYy5kZWZhdWx0X2F1dGhvcml0eSc6IHRydWUsXG4gICAgJ2dycGMua2VlcGFsaXZlX3RpbWVfbXMnOiB0cnVlLFxuICAgICdncnBjLmtlZXBhbGl2ZV90aW1lb3V0X21zJzogdHJ1ZSxcbiAgICAnZ3JwYy5rZWVwYWxpdmVfcGVybWl0X3dpdGhvdXRfY2FsbHMnOiB0cnVlLFxuICAgICdncnBjLnNlcnZpY2VfY29uZmlnJzogdHJ1ZSxcbiAgICAnZ3JwYy5tYXhfY29uY3VycmVudF9zdHJlYW1zJzogdHJ1ZSxcbiAgICAnZ3JwYy5pbml0aWFsX3JlY29ubmVjdF9iYWNrb2ZmX21zJzogdHJ1ZSxcbiAgICAnZ3JwYy5tYXhfcmVjb25uZWN0X2JhY2tvZmZfbXMnOiB0cnVlLFxuICAgICdncnBjLnVzZV9sb2NhbF9zdWJjaGFubmVsX3Bvb2wnOiB0cnVlLFxuICAgICdncnBjLm1heF9zZW5kX21lc3NhZ2VfbGVuZ3RoJzogdHJ1ZSxcbiAgICAnZ3JwYy5tYXhfcmVjZWl2ZV9tZXNzYWdlX2xlbmd0aCc6IHRydWUsXG4gICAgJ2dycGMuZW5hYmxlX2h0dHBfcHJveHknOiB0cnVlLFxuICAgICdncnBjLmVuYWJsZV9jaGFubmVseic6IHRydWUsXG4gICAgJ2dycGMuZG5zX21pbl90aW1lX2JldHdlZW5fcmVzb2x1dGlvbnNfbXMnOiB0cnVlLFxuICAgICdncnBjLmVuYWJsZV9yZXRyaWVzJzogdHJ1ZSxcbiAgICAnZ3JwYy5wZXJfcnBjX3JldHJ5X2J1ZmZlcl9zaXplJzogdHJ1ZSxcbiAgICAnZ3JwYy5yZXRyeV9idWZmZXJfc2l6ZSc6IHRydWUsXG4gICAgJ2dycGMubWF4X2Nvbm5lY3Rpb25fYWdlX21zJzogdHJ1ZSxcbiAgICAnZ3JwYy5tYXhfY29ubmVjdGlvbl9hZ2VfZ3JhY2VfbXMnOiB0cnVlLFxuICAgICdncnBjLW5vZGUubWF4X3Nlc3Npb25fbWVtb3J5JzogdHJ1ZSxcbiAgICAnZ3JwYy5zZXJ2aWNlX2NvbmZpZ19kaXNhYmxlX3Jlc29sdXRpb24nOiB0cnVlLFxuICAgICdncnBjLmNsaWVudF9pZGxlX3RpbWVvdXRfbXMnOiB0cnVlLFxuICAgICdncnBjLW5vZGUudGxzX2VuYWJsZV90cmFjZSc6IHRydWUsXG4gICAgJ2dycGMubGIucmluZ19oYXNoLnJpbmdfc2l6ZV9jYXAnOiB0cnVlLFxuICAgICdncnBjLW5vZGUucmV0cnlfbWF4X2F0dGVtcHRzX2xpbWl0JzogdHJ1ZSxcbiAgICAnZ3JwYy1ub2RlLmZsb3dfY29udHJvbF93aW5kb3cnOiB0cnVlLFxufTtcbmZ1bmN0aW9uIGNoYW5uZWxPcHRpb25zRXF1YWwob3B0aW9uczEsIG9wdGlvbnMyKSB7XG4gICAgY29uc3Qga2V5czEgPSBPYmplY3Qua2V5cyhvcHRpb25zMSkuc29ydCgpO1xuICAgIGNvbnN0IGtleXMyID0gT2JqZWN0LmtleXMob3B0aW9uczIpLnNvcnQoKTtcbiAgICBpZiAoa2V5czEubGVuZ3RoICE9PSBrZXlzMi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMxLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChrZXlzMVtpXSAhPT0ga2V5czJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9uczFba2V5czFbaV1dICE9PSBvcHRpb25zMltrZXlzMltpXV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYW5uZWwtb3B0aW9ucy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZWNvZ25pemVkT3B0aW9ucyIsImNoYW5uZWxPcHRpb25zRXF1YWwiLCJvcHRpb25zMSIsIm9wdGlvbnMyIiwia2V5czEiLCJrZXlzIiwic29ydCIsImtleXMyIiwibGVuZ3RoIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/channel.js":
/*!*********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChannelImplementation = void 0;\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\nconst internal_channel_1 = __webpack_require__(/*! ./internal-channel */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/internal-channel.js\");\nclass ChannelImplementation {\n    constructor(target, credentials, options){\n        if (typeof target !== \"string\") {\n            throw new TypeError(\"Channel target must be a string\");\n        }\n        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\n            throw new TypeError(\"Channel credentials must be a ChannelCredentials object\");\n        }\n        if (options) {\n            if (typeof options !== \"object\") {\n                throw new TypeError(\"Channel options must be an object\");\n            }\n        }\n        this.internalChannel = new internal_channel_1.InternalChannel(target, credentials, options);\n    }\n    close() {\n        this.internalChannel.close();\n    }\n    getTarget() {\n        return this.internalChannel.getTarget();\n    }\n    getConnectivityState(tryToConnect) {\n        return this.internalChannel.getConnectivityState(tryToConnect);\n    }\n    watchConnectivityState(currentState, deadline, callback) {\n        this.internalChannel.watchConnectivityState(currentState, deadline, callback);\n    }\n    /**\n     * Get the channelz reference object for this channel. The returned value is\n     * garbage if channelz is disabled for this channel.\n     * @returns\n     */ getChannelzRef() {\n        return this.internalChannel.getChannelzRef();\n    }\n    createCall(method, deadline, host, parentCall, propagateFlags) {\n        if (typeof method !== \"string\") {\n            throw new TypeError(\"Channel#createCall: method must be a string\");\n        }\n        if (!(typeof deadline === \"number\" || deadline instanceof Date)) {\n            throw new TypeError(\"Channel#createCall: deadline must be a number or Date\");\n        }\n        return this.internalChannel.createCall(method, deadline, host, parentCall, propagateFlags);\n    }\n}\nexports.ChannelImplementation = ChannelImplementation; //# sourceMappingURL=channel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7Ozs7Q0FlQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUcsS0FBSztBQUNyQyxNQUFNRyx3QkFBd0JDLG1CQUFPQSxDQUFDLGtHQUF1QjtBQUM3RCxNQUFNQyxxQkFBcUJELG1CQUFPQSxDQUFDLDRGQUFvQjtBQUN2RCxNQUFNRjtJQUNGSSxZQUFZQyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxDQUFFO1FBQ3RDLElBQUksT0FBT0YsV0FBVyxVQUFVO1lBQzVCLE1BQU0sSUFBSUcsVUFBVTtRQUN4QjtRQUNBLElBQUksQ0FBRUYsQ0FBQUEsdUJBQXVCTCxzQkFBc0JRLGtCQUFrQixHQUFHO1lBQ3BFLE1BQU0sSUFBSUQsVUFBVTtRQUN4QjtRQUNBLElBQUlELFNBQVM7WUFDVCxJQUFJLE9BQU9BLFlBQVksVUFBVTtnQkFDN0IsTUFBTSxJQUFJQyxVQUFVO1lBQ3hCO1FBQ0o7UUFDQSxJQUFJLENBQUNFLGVBQWUsR0FBRyxJQUFJUCxtQkFBbUJRLGVBQWUsQ0FBQ04sUUFBUUMsYUFBYUM7SUFDdkY7SUFDQUssUUFBUTtRQUNKLElBQUksQ0FBQ0YsZUFBZSxDQUFDRSxLQUFLO0lBQzlCO0lBQ0FDLFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQ0gsZUFBZSxDQUFDRyxTQUFTO0lBQ3pDO0lBQ0FDLHFCQUFxQkMsWUFBWSxFQUFFO1FBQy9CLE9BQU8sSUFBSSxDQUFDTCxlQUFlLENBQUNJLG9CQUFvQixDQUFDQztJQUNyRDtJQUNBQyx1QkFBdUJDLFlBQVksRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUU7UUFDckQsSUFBSSxDQUFDVCxlQUFlLENBQUNNLHNCQUFzQixDQUFDQyxjQUFjQyxVQUFVQztJQUN4RTtJQUNBOzs7O0tBSUMsR0FDREMsaUJBQWlCO1FBQ2IsT0FBTyxJQUFJLENBQUNWLGVBQWUsQ0FBQ1UsY0FBYztJQUM5QztJQUNBQyxXQUFXQyxNQUFNLEVBQUVKLFFBQVEsRUFBRUssSUFBSSxFQUFFQyxVQUFVLEVBQUVDLGNBQWMsRUFBRTtRQUMzRCxJQUFJLE9BQU9ILFdBQVcsVUFBVTtZQUM1QixNQUFNLElBQUlkLFVBQVU7UUFDeEI7UUFDQSxJQUFJLENBQUUsUUFBT1UsYUFBYSxZQUFZQSxvQkFBb0JRLElBQUcsR0FBSTtZQUM3RCxNQUFNLElBQUlsQixVQUFVO1FBQ3hCO1FBQ0EsT0FBTyxJQUFJLENBQUNFLGVBQWUsQ0FBQ1csVUFBVSxDQUFDQyxRQUFRSixVQUFVSyxNQUFNQyxZQUFZQztJQUMvRTtBQUNKO0FBQ0EzQiw2QkFBNkIsR0FBR0UsdUJBQ2hDLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jaGFubmVsLmpzP2NkOGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2hhbm5lbEltcGxlbWVudGF0aW9uID0gdm9pZCAwO1xuY29uc3QgY2hhbm5lbF9jcmVkZW50aWFsc18xID0gcmVxdWlyZShcIi4vY2hhbm5lbC1jcmVkZW50aWFsc1wiKTtcbmNvbnN0IGludGVybmFsX2NoYW5uZWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsLWNoYW5uZWxcIik7XG5jbGFzcyBDaGFubmVsSW1wbGVtZW50YXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgY3JlZGVudGlhbHMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDaGFubmVsIHRhcmdldCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoY3JlZGVudGlhbHMgaW5zdGFuY2VvZiBjaGFubmVsX2NyZWRlbnRpYWxzXzEuQ2hhbm5lbENyZWRlbnRpYWxzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2hhbm5lbCBjcmVkZW50aWFscyBtdXN0IGJlIGEgQ2hhbm5lbENyZWRlbnRpYWxzIG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2hhbm5lbCBvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnRlcm5hbENoYW5uZWwgPSBuZXcgaW50ZXJuYWxfY2hhbm5lbF8xLkludGVybmFsQ2hhbm5lbCh0YXJnZXQsIGNyZWRlbnRpYWxzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxDaGFubmVsLmNsb3NlKCk7XG4gICAgfVxuICAgIGdldFRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxDaGFubmVsLmdldFRhcmdldCgpO1xuICAgIH1cbiAgICBnZXRDb25uZWN0aXZpdHlTdGF0ZSh0cnlUb0Nvbm5lY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxDaGFubmVsLmdldENvbm5lY3Rpdml0eVN0YXRlKHRyeVRvQ29ubmVjdCk7XG4gICAgfVxuICAgIHdhdGNoQ29ubmVjdGl2aXR5U3RhdGUoY3VycmVudFN0YXRlLCBkZWFkbGluZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5pbnRlcm5hbENoYW5uZWwud2F0Y2hDb25uZWN0aXZpdHlTdGF0ZShjdXJyZW50U3RhdGUsIGRlYWRsaW5lLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY2hhbm5lbHogcmVmZXJlbmNlIG9iamVjdCBmb3IgdGhpcyBjaGFubmVsLiBUaGUgcmV0dXJuZWQgdmFsdWUgaXNcbiAgICAgKiBnYXJiYWdlIGlmIGNoYW5uZWx6IGlzIGRpc2FibGVkIGZvciB0aGlzIGNoYW5uZWwuXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBnZXRDaGFubmVselJlZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxDaGFubmVsLmdldENoYW5uZWx6UmVmKCk7XG4gICAgfVxuICAgIGNyZWF0ZUNhbGwobWV0aG9kLCBkZWFkbGluZSwgaG9zdCwgcGFyZW50Q2FsbCwgcHJvcGFnYXRlRmxhZ3MpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDaGFubmVsI2NyZWF0ZUNhbGw6IG1ldGhvZCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodHlwZW9mIGRlYWRsaW5lID09PSAnbnVtYmVyJyB8fCBkZWFkbGluZSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDaGFubmVsI2NyZWF0ZUNhbGw6IGRlYWRsaW5lIG11c3QgYmUgYSBudW1iZXIgb3IgRGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsQ2hhbm5lbC5jcmVhdGVDYWxsKG1ldGhvZCwgZGVhZGxpbmUsIGhvc3QsIHBhcmVudENhbGwsIHByb3BhZ2F0ZUZsYWdzKTtcbiAgICB9XG59XG5leHBvcnRzLkNoYW5uZWxJbXBsZW1lbnRhdGlvbiA9IENoYW5uZWxJbXBsZW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYW5uZWwuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ2hhbm5lbEltcGxlbWVudGF0aW9uIiwiY2hhbm5lbF9jcmVkZW50aWFsc18xIiwicmVxdWlyZSIsImludGVybmFsX2NoYW5uZWxfMSIsImNvbnN0cnVjdG9yIiwidGFyZ2V0IiwiY3JlZGVudGlhbHMiLCJvcHRpb25zIiwiVHlwZUVycm9yIiwiQ2hhbm5lbENyZWRlbnRpYWxzIiwiaW50ZXJuYWxDaGFubmVsIiwiSW50ZXJuYWxDaGFubmVsIiwiY2xvc2UiLCJnZXRUYXJnZXQiLCJnZXRDb25uZWN0aXZpdHlTdGF0ZSIsInRyeVRvQ29ubmVjdCIsIndhdGNoQ29ubmVjdGl2aXR5U3RhdGUiLCJjdXJyZW50U3RhdGUiLCJkZWFkbGluZSIsImNhbGxiYWNrIiwiZ2V0Q2hhbm5lbHpSZWYiLCJjcmVhdGVDYWxsIiwibWV0aG9kIiwiaG9zdCIsInBhcmVudENhbGwiLCJwcm9wYWdhdGVGbGFncyIsIkRhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/channel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channelz.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.registerChannelzSocket = exports.registerChannelzServer = exports.registerChannelzSubchannel = exports.registerChannelzChannel = exports.ChannelzCallTrackerStub = exports.ChannelzCallTracker = exports.ChannelzChildrenTrackerStub = exports.ChannelzChildrenTracker = exports.ChannelzTrace = exports.ChannelzTraceStub = void 0;\nexports.unregisterChannelzRef = unregisterChannelzRef;\nexports.getChannelzHandlers = getChannelzHandlers;\nexports.getChannelzServiceDefinition = getChannelzServiceDefinition;\nexports.setup = setup;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst ordered_map_1 = __webpack_require__(/*! @js-sdsl/ordered-map */ \"(rsc)/./node_modules/@js-sdsl/ordered-map/dist/esm/index.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\nconst make_client_1 = __webpack_require__(/*! ./make-client */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/make-client.js\");\nfunction channelRefToMessage(ref) {\n    return {\n        channel_id: ref.id,\n        name: ref.name\n    };\n}\nfunction subchannelRefToMessage(ref) {\n    return {\n        subchannel_id: ref.id,\n        name: ref.name\n    };\n}\nfunction serverRefToMessage(ref) {\n    return {\n        server_id: ref.id\n    };\n}\nfunction socketRefToMessage(ref) {\n    return {\n        socket_id: ref.id,\n        name: ref.name\n    };\n}\n/**\n * The loose upper bound on the number of events that should be retained in a\n * trace. This may be exceeded by up to a factor of 2. Arbitrarily chosen as a\n * number that should be large enough to contain the recent relevant\n * information, but small enough to not use excessive memory.\n */ const TARGET_RETAINED_TRACES = 32;\n/**\n * Default number of sockets/servers/channels/subchannels to return\n */ const DEFAULT_MAX_RESULTS = 100;\nclass ChannelzTraceStub {\n    constructor(){\n        this.events = [];\n        this.creationTimestamp = new Date();\n        this.eventsLogged = 0;\n    }\n    addTrace() {}\n    getTraceMessage() {\n        return {\n            creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\n            num_events_logged: this.eventsLogged,\n            events: []\n        };\n    }\n}\nexports.ChannelzTraceStub = ChannelzTraceStub;\nclass ChannelzTrace {\n    constructor(){\n        this.events = [];\n        this.eventsLogged = 0;\n        this.creationTimestamp = new Date();\n    }\n    addTrace(severity, description, child) {\n        const timestamp = new Date();\n        this.events.push({\n            description: description,\n            severity: severity,\n            timestamp: timestamp,\n            childChannel: (child === null || child === void 0 ? void 0 : child.kind) === \"channel\" ? child : undefined,\n            childSubchannel: (child === null || child === void 0 ? void 0 : child.kind) === \"subchannel\" ? child : undefined\n        });\n        // Whenever the trace array gets too large, discard the first half\n        if (this.events.length >= TARGET_RETAINED_TRACES * 2) {\n            this.events = this.events.slice(TARGET_RETAINED_TRACES);\n        }\n        this.eventsLogged += 1;\n    }\n    getTraceMessage() {\n        return {\n            creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\n            num_events_logged: this.eventsLogged,\n            events: this.events.map((event)=>{\n                return {\n                    description: event.description,\n                    severity: event.severity,\n                    timestamp: dateToProtoTimestamp(event.timestamp),\n                    channel_ref: event.childChannel ? channelRefToMessage(event.childChannel) : null,\n                    subchannel_ref: event.childSubchannel ? subchannelRefToMessage(event.childSubchannel) : null\n                };\n            })\n        };\n    }\n}\nexports.ChannelzTrace = ChannelzTrace;\nclass ChannelzChildrenTracker {\n    constructor(){\n        this.channelChildren = new ordered_map_1.OrderedMap();\n        this.subchannelChildren = new ordered_map_1.OrderedMap();\n        this.socketChildren = new ordered_map_1.OrderedMap();\n        this.trackerMap = {\n            [\"channel\" /* EntityTypes.channel */ ]: this.channelChildren,\n            [\"subchannel\" /* EntityTypes.subchannel */ ]: this.subchannelChildren,\n            [\"socket\" /* EntityTypes.socket */ ]: this.socketChildren\n        };\n    }\n    refChild(child) {\n        const tracker = this.trackerMap[child.kind];\n        const trackedChild = tracker.find(child.id);\n        if (trackedChild.equals(tracker.end())) {\n            tracker.setElement(child.id, {\n                ref: child,\n                count: 1\n            }, trackedChild);\n        } else {\n            trackedChild.pointer[1].count += 1;\n        }\n    }\n    unrefChild(child) {\n        const tracker = this.trackerMap[child.kind];\n        const trackedChild = tracker.getElementByKey(child.id);\n        if (trackedChild !== undefined) {\n            trackedChild.count -= 1;\n            if (trackedChild.count === 0) {\n                tracker.eraseElementByKey(child.id);\n            }\n        }\n    }\n    getChildLists() {\n        return {\n            channels: this.channelChildren,\n            subchannels: this.subchannelChildren,\n            sockets: this.socketChildren\n        };\n    }\n}\nexports.ChannelzChildrenTracker = ChannelzChildrenTracker;\nclass ChannelzChildrenTrackerStub extends ChannelzChildrenTracker {\n    refChild() {}\n    unrefChild() {}\n}\nexports.ChannelzChildrenTrackerStub = ChannelzChildrenTrackerStub;\nclass ChannelzCallTracker {\n    constructor(){\n        this.callsStarted = 0;\n        this.callsSucceeded = 0;\n        this.callsFailed = 0;\n        this.lastCallStartedTimestamp = null;\n    }\n    addCallStarted() {\n        this.callsStarted += 1;\n        this.lastCallStartedTimestamp = new Date();\n    }\n    addCallSucceeded() {\n        this.callsSucceeded += 1;\n    }\n    addCallFailed() {\n        this.callsFailed += 1;\n    }\n}\nexports.ChannelzCallTracker = ChannelzCallTracker;\nclass ChannelzCallTrackerStub extends ChannelzCallTracker {\n    addCallStarted() {}\n    addCallSucceeded() {}\n    addCallFailed() {}\n}\nexports.ChannelzCallTrackerStub = ChannelzCallTrackerStub;\nconst entityMaps = {\n    [\"channel\" /* EntityTypes.channel */ ]: new ordered_map_1.OrderedMap(),\n    [\"subchannel\" /* EntityTypes.subchannel */ ]: new ordered_map_1.OrderedMap(),\n    [\"server\" /* EntityTypes.server */ ]: new ordered_map_1.OrderedMap(),\n    [\"socket\" /* EntityTypes.socket */ ]: new ordered_map_1.OrderedMap()\n};\nconst generateRegisterFn = (kind)=>{\n    let nextId = 1;\n    function getNextId() {\n        return nextId++;\n    }\n    const entityMap = entityMaps[kind];\n    return (name, getInfo, channelzEnabled)=>{\n        const id = getNextId();\n        const ref = {\n            id,\n            name,\n            kind\n        };\n        if (channelzEnabled) {\n            entityMap.setElement(id, {\n                ref,\n                getInfo\n            });\n        }\n        return ref;\n    };\n};\nexports.registerChannelzChannel = generateRegisterFn(\"channel\" /* EntityTypes.channel */ );\nexports.registerChannelzSubchannel = generateRegisterFn(\"subchannel\" /* EntityTypes.subchannel */ );\nexports.registerChannelzServer = generateRegisterFn(\"server\" /* EntityTypes.server */ );\nexports.registerChannelzSocket = generateRegisterFn(\"socket\" /* EntityTypes.socket */ );\nfunction unregisterChannelzRef(ref) {\n    entityMaps[ref.kind].eraseElementByKey(ref.id);\n}\n/**\n * Parse a single section of an IPv6 address as two bytes\n * @param addressSection A hexadecimal string of length up to 4\n * @returns The pair of bytes representing this address section\n */ function parseIPv6Section(addressSection) {\n    const numberValue = Number.parseInt(addressSection, 16);\n    return [\n        numberValue / 256 | 0,\n        numberValue % 256\n    ];\n}\n/**\n * Parse a chunk of an IPv6 address string to some number of bytes\n * @param addressChunk Some number of segments of up to 4 hexadecimal\n *   characters each, joined by colons.\n * @returns The list of bytes representing this address chunk\n */ function parseIPv6Chunk(addressChunk) {\n    if (addressChunk === \"\") {\n        return [];\n    }\n    const bytePairs = addressChunk.split(\":\").map((section)=>parseIPv6Section(section));\n    const result = [];\n    return result.concat(...bytePairs);\n}\nfunction isIPv6MappedIPv4(ipAddress) {\n    return (0, net_1.isIPv6)(ipAddress) && ipAddress.toLowerCase().startsWith(\"::ffff:\") && (0, net_1.isIPv4)(ipAddress.substring(7));\n}\n/**\n * Prerequisite: isIPv4(ipAddress)\n * @param ipAddress\n * @returns\n */ function ipv4AddressStringToBuffer(ipAddress) {\n    return Buffer.from(Uint8Array.from(ipAddress.split(\".\").map((segment)=>Number.parseInt(segment))));\n}\n/**\n * Converts an IPv4 or IPv6 address from string representation to binary\n * representation\n * @param ipAddress an IP address in standard IPv4 or IPv6 text format\n * @returns\n */ function ipAddressStringToBuffer(ipAddress) {\n    if ((0, net_1.isIPv4)(ipAddress)) {\n        return ipv4AddressStringToBuffer(ipAddress);\n    } else if (isIPv6MappedIPv4(ipAddress)) {\n        return ipv4AddressStringToBuffer(ipAddress.substring(7));\n    } else if ((0, net_1.isIPv6)(ipAddress)) {\n        let leftSection;\n        let rightSection;\n        const doubleColonIndex = ipAddress.indexOf(\"::\");\n        if (doubleColonIndex === -1) {\n            leftSection = ipAddress;\n            rightSection = \"\";\n        } else {\n            leftSection = ipAddress.substring(0, doubleColonIndex);\n            rightSection = ipAddress.substring(doubleColonIndex + 2);\n        }\n        const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));\n        const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));\n        const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);\n        return Buffer.concat([\n            leftBuffer,\n            middleBuffer,\n            rightBuffer\n        ]);\n    } else {\n        return null;\n    }\n}\nfunction connectivityStateToMessage(state) {\n    switch(state){\n        case connectivity_state_1.ConnectivityState.CONNECTING:\n            return {\n                state: \"CONNECTING\"\n            };\n        case connectivity_state_1.ConnectivityState.IDLE:\n            return {\n                state: \"IDLE\"\n            };\n        case connectivity_state_1.ConnectivityState.READY:\n            return {\n                state: \"READY\"\n            };\n        case connectivity_state_1.ConnectivityState.SHUTDOWN:\n            return {\n                state: \"SHUTDOWN\"\n            };\n        case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\n            return {\n                state: \"TRANSIENT_FAILURE\"\n            };\n        default:\n            return {\n                state: \"UNKNOWN\"\n            };\n    }\n}\nfunction dateToProtoTimestamp(date) {\n    if (!date) {\n        return null;\n    }\n    const millisSinceEpoch = date.getTime();\n    return {\n        seconds: millisSinceEpoch / 1000 | 0,\n        nanos: millisSinceEpoch % 1000 * 1000000\n    };\n}\nfunction getChannelMessage(channelEntry) {\n    const resolvedInfo = channelEntry.getInfo();\n    const channelRef = [];\n    const subchannelRef = [];\n    resolvedInfo.children.channels.forEach((el)=>{\n        channelRef.push(channelRefToMessage(el[1].ref));\n    });\n    resolvedInfo.children.subchannels.forEach((el)=>{\n        subchannelRef.push(subchannelRefToMessage(el[1].ref));\n    });\n    return {\n        ref: channelRefToMessage(channelEntry.ref),\n        data: {\n            target: resolvedInfo.target,\n            state: connectivityStateToMessage(resolvedInfo.state),\n            calls_started: resolvedInfo.callTracker.callsStarted,\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n            calls_failed: resolvedInfo.callTracker.callsFailed,\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n            trace: resolvedInfo.trace.getTraceMessage()\n        },\n        channel_ref: channelRef,\n        subchannel_ref: subchannelRef\n    };\n}\nfunction GetChannel(call, callback) {\n    const channelId = parseInt(call.request.channel_id, 10);\n    const channelEntry = entityMaps[\"channel\" /* EntityTypes.channel */ ].getElementByKey(channelId);\n    if (channelEntry === undefined) {\n        callback({\n            code: constants_1.Status.NOT_FOUND,\n            details: \"No channel data found for id \" + channelId\n        });\n        return;\n    }\n    callback(null, {\n        channel: getChannelMessage(channelEntry)\n    });\n}\nfunction GetTopChannels(call, callback) {\n    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;\n    const resultList = [];\n    const startId = parseInt(call.request.start_channel_id, 10);\n    const channelEntries = entityMaps[\"channel\" /* EntityTypes.channel */ ];\n    let i;\n    for(i = channelEntries.lowerBound(startId); !i.equals(channelEntries.end()) && resultList.length < maxResults; i = i.next()){\n        resultList.push(getChannelMessage(i.pointer[1]));\n    }\n    callback(null, {\n        channel: resultList,\n        end: i.equals(channelEntries.end())\n    });\n}\nfunction getServerMessage(serverEntry) {\n    const resolvedInfo = serverEntry.getInfo();\n    const listenSocket = [];\n    resolvedInfo.listenerChildren.sockets.forEach((el)=>{\n        listenSocket.push(socketRefToMessage(el[1].ref));\n    });\n    return {\n        ref: serverRefToMessage(serverEntry.ref),\n        data: {\n            calls_started: resolvedInfo.callTracker.callsStarted,\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n            calls_failed: resolvedInfo.callTracker.callsFailed,\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n            trace: resolvedInfo.trace.getTraceMessage()\n        },\n        listen_socket: listenSocket\n    };\n}\nfunction GetServer(call, callback) {\n    const serverId = parseInt(call.request.server_id, 10);\n    const serverEntries = entityMaps[\"server\" /* EntityTypes.server */ ];\n    const serverEntry = serverEntries.getElementByKey(serverId);\n    if (serverEntry === undefined) {\n        callback({\n            code: constants_1.Status.NOT_FOUND,\n            details: \"No server data found for id \" + serverId\n        });\n        return;\n    }\n    callback(null, {\n        server: getServerMessage(serverEntry)\n    });\n}\nfunction GetServers(call, callback) {\n    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;\n    const startId = parseInt(call.request.start_server_id, 10);\n    const serverEntries = entityMaps[\"server\" /* EntityTypes.server */ ];\n    const resultList = [];\n    let i;\n    for(i = serverEntries.lowerBound(startId); !i.equals(serverEntries.end()) && resultList.length < maxResults; i = i.next()){\n        resultList.push(getServerMessage(i.pointer[1]));\n    }\n    callback(null, {\n        server: resultList,\n        end: i.equals(serverEntries.end())\n    });\n}\nfunction GetSubchannel(call, callback) {\n    const subchannelId = parseInt(call.request.subchannel_id, 10);\n    const subchannelEntry = entityMaps[\"subchannel\" /* EntityTypes.subchannel */ ].getElementByKey(subchannelId);\n    if (subchannelEntry === undefined) {\n        callback({\n            code: constants_1.Status.NOT_FOUND,\n            details: \"No subchannel data found for id \" + subchannelId\n        });\n        return;\n    }\n    const resolvedInfo = subchannelEntry.getInfo();\n    const listenSocket = [];\n    resolvedInfo.children.sockets.forEach((el)=>{\n        listenSocket.push(socketRefToMessage(el[1].ref));\n    });\n    const subchannelMessage = {\n        ref: subchannelRefToMessage(subchannelEntry.ref),\n        data: {\n            target: resolvedInfo.target,\n            state: connectivityStateToMessage(resolvedInfo.state),\n            calls_started: resolvedInfo.callTracker.callsStarted,\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n            calls_failed: resolvedInfo.callTracker.callsFailed,\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n            trace: resolvedInfo.trace.getTraceMessage()\n        },\n        socket_ref: listenSocket\n    };\n    callback(null, {\n        subchannel: subchannelMessage\n    });\n}\nfunction subchannelAddressToAddressMessage(subchannelAddress) {\n    var _a;\n    if ((0, subchannel_address_1.isTcpSubchannelAddress)(subchannelAddress)) {\n        return {\n            address: \"tcpip_address\",\n            tcpip_address: {\n                ip_address: (_a = ipAddressStringToBuffer(subchannelAddress.host)) !== null && _a !== void 0 ? _a : undefined,\n                port: subchannelAddress.port\n            }\n        };\n    } else {\n        return {\n            address: \"uds_address\",\n            uds_address: {\n                filename: subchannelAddress.path\n            }\n        };\n    }\n}\nfunction GetSocket(call, callback) {\n    var _a, _b, _c, _d, _e;\n    const socketId = parseInt(call.request.socket_id, 10);\n    const socketEntry = entityMaps[\"socket\" /* EntityTypes.socket */ ].getElementByKey(socketId);\n    if (socketEntry === undefined) {\n        callback({\n            code: constants_1.Status.NOT_FOUND,\n            details: \"No socket data found for id \" + socketId\n        });\n        return;\n    }\n    const resolvedInfo = socketEntry.getInfo();\n    const securityMessage = resolvedInfo.security ? {\n        model: \"tls\",\n        tls: {\n            cipher_suite: resolvedInfo.security.cipherSuiteStandardName ? \"standard_name\" : \"other_name\",\n            standard_name: (_a = resolvedInfo.security.cipherSuiteStandardName) !== null && _a !== void 0 ? _a : undefined,\n            other_name: (_b = resolvedInfo.security.cipherSuiteOtherName) !== null && _b !== void 0 ? _b : undefined,\n            local_certificate: (_c = resolvedInfo.security.localCertificate) !== null && _c !== void 0 ? _c : undefined,\n            remote_certificate: (_d = resolvedInfo.security.remoteCertificate) !== null && _d !== void 0 ? _d : undefined\n        }\n    } : null;\n    const socketMessage = {\n        ref: socketRefToMessage(socketEntry.ref),\n        local: resolvedInfo.localAddress ? subchannelAddressToAddressMessage(resolvedInfo.localAddress) : null,\n        remote: resolvedInfo.remoteAddress ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress) : null,\n        remote_name: (_e = resolvedInfo.remoteName) !== null && _e !== void 0 ? _e : undefined,\n        security: securityMessage,\n        data: {\n            keep_alives_sent: resolvedInfo.keepAlivesSent,\n            streams_started: resolvedInfo.streamsStarted,\n            streams_succeeded: resolvedInfo.streamsSucceeded,\n            streams_failed: resolvedInfo.streamsFailed,\n            last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),\n            last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),\n            messages_received: resolvedInfo.messagesReceived,\n            messages_sent: resolvedInfo.messagesSent,\n            last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),\n            last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),\n            local_flow_control_window: resolvedInfo.localFlowControlWindow ? {\n                value: resolvedInfo.localFlowControlWindow\n            } : null,\n            remote_flow_control_window: resolvedInfo.remoteFlowControlWindow ? {\n                value: resolvedInfo.remoteFlowControlWindow\n            } : null\n        }\n    };\n    callback(null, {\n        socket: socketMessage\n    });\n}\nfunction GetServerSockets(call, callback) {\n    const serverId = parseInt(call.request.server_id, 10);\n    const serverEntry = entityMaps[\"server\" /* EntityTypes.server */ ].getElementByKey(serverId);\n    if (serverEntry === undefined) {\n        callback({\n            code: constants_1.Status.NOT_FOUND,\n            details: \"No server data found for id \" + serverId\n        });\n        return;\n    }\n    const startId = parseInt(call.request.start_socket_id, 10);\n    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;\n    const resolvedInfo = serverEntry.getInfo();\n    // If we wanted to include listener sockets in the result, this line would\n    // instead say\n    // const allSockets = resolvedInfo.listenerChildren.sockets.concat(resolvedInfo.sessionChildren.sockets).sort((ref1, ref2) => ref1.id - ref2.id);\n    const allSockets = resolvedInfo.sessionChildren.sockets;\n    const resultList = [];\n    let i;\n    for(i = allSockets.lowerBound(startId); !i.equals(allSockets.end()) && resultList.length < maxResults; i = i.next()){\n        resultList.push(socketRefToMessage(i.pointer[1].ref));\n    }\n    callback(null, {\n        socket_ref: resultList,\n        end: i.equals(allSockets.end())\n    });\n}\nfunction getChannelzHandlers() {\n    return {\n        GetChannel,\n        GetTopChannels,\n        GetServer,\n        GetServers,\n        GetSubchannel,\n        GetSocket,\n        GetServerSockets\n    };\n}\nlet loadedChannelzDefinition = null;\nfunction getChannelzServiceDefinition() {\n    if (loadedChannelzDefinition) {\n        return loadedChannelzDefinition;\n    }\n    /* The purpose of this complexity is to avoid loading @grpc/proto-loader at\n     * runtime for users who will not use/enable channelz. */ const loaderLoadSync = (__webpack_require__(/*! @grpc/proto-loader */ \"(rsc)/./node_modules/@grpc/proto-loader/build/src/index.js\").loadSync);\n    const loadedProto = loaderLoadSync(\"channelz.proto\", {\n        keepCase: true,\n        longs: String,\n        enums: String,\n        defaults: true,\n        oneofs: true,\n        includeDirs: [\n            `${__dirname}/../../proto`\n        ]\n    });\n    const channelzGrpcObject = (0, make_client_1.loadPackageDefinition)(loadedProto);\n    loadedChannelzDefinition = channelzGrpcObject.grpc.channelz.v1.Channelz.service;\n    return loadedChannelzDefinition;\n}\nfunction setup() {\n    (0, admin_1.registerAdminService)(getChannelzServiceDefinition, getChannelzHandlers);\n} //# sourceMappingURL=channelz.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/client-interceptors.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.InterceptorConfigurationError = void 0;\nexports.getInterceptingCall = getInterceptingCall;\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst call_interface_1 = __webpack_require__(/*! ./call-interface */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-interface.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/error.js\");\n/**\n * Error class associated with passing both interceptors and interceptor\n * providers to a client constructor or as call options.\n */ class InterceptorConfigurationError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"InterceptorConfigurationError\";\n        Error.captureStackTrace(this, InterceptorConfigurationError);\n    }\n}\nexports.InterceptorConfigurationError = InterceptorConfigurationError;\nclass ListenerBuilder {\n    constructor(){\n        this.metadata = undefined;\n        this.message = undefined;\n        this.status = undefined;\n    }\n    withOnReceiveMetadata(onReceiveMetadata) {\n        this.metadata = onReceiveMetadata;\n        return this;\n    }\n    withOnReceiveMessage(onReceiveMessage) {\n        this.message = onReceiveMessage;\n        return this;\n    }\n    withOnReceiveStatus(onReceiveStatus) {\n        this.status = onReceiveStatus;\n        return this;\n    }\n    build() {\n        return {\n            onReceiveMetadata: this.metadata,\n            onReceiveMessage: this.message,\n            onReceiveStatus: this.status\n        };\n    }\n}\nexports.ListenerBuilder = ListenerBuilder;\nclass RequesterBuilder {\n    constructor(){\n        this.start = undefined;\n        this.message = undefined;\n        this.halfClose = undefined;\n        this.cancel = undefined;\n    }\n    withStart(start) {\n        this.start = start;\n        return this;\n    }\n    withSendMessage(sendMessage) {\n        this.message = sendMessage;\n        return this;\n    }\n    withHalfClose(halfClose) {\n        this.halfClose = halfClose;\n        return this;\n    }\n    withCancel(cancel) {\n        this.cancel = cancel;\n        return this;\n    }\n    build() {\n        return {\n            start: this.start,\n            sendMessage: this.message,\n            halfClose: this.halfClose,\n            cancel: this.cancel\n        };\n    }\n}\nexports.RequesterBuilder = RequesterBuilder;\n/**\n * A Listener with a default pass-through implementation of each method. Used\n * for filling out Listeners with some methods omitted.\n */ const defaultListener = {\n    onReceiveMetadata: (metadata, next)=>{\n        next(metadata);\n    },\n    onReceiveMessage: (message, next)=>{\n        next(message);\n    },\n    onReceiveStatus: (status, next)=>{\n        next(status);\n    }\n};\n/**\n * A Requester with a default pass-through implementation of each method. Used\n * for filling out Requesters with some methods omitted.\n */ const defaultRequester = {\n    start: (metadata, listener, next)=>{\n        next(metadata, listener);\n    },\n    sendMessage: (message, next)=>{\n        next(message);\n    },\n    halfClose: (next)=>{\n        next();\n    },\n    cancel: (next)=>{\n        next();\n    }\n};\nclass InterceptingCall {\n    constructor(nextCall, requester){\n        var _a, _b, _c, _d;\n        this.nextCall = nextCall;\n        /**\n         * Indicates that metadata has been passed to the requester's start\n         * method but it has not been passed to the corresponding next callback\n         */ this.processingMetadata = false;\n        /**\n         * Message context for a pending message that is waiting for\n         */ this.pendingMessageContext = null;\n        /**\n         * Indicates that a message has been passed to the requester's sendMessage\n         * method but it has not been passed to the corresponding next callback\n         */ this.processingMessage = false;\n        /**\n         * Indicates that a status was received but could not be propagated because\n         * a message was still being processed.\n         */ this.pendingHalfClose = false;\n        if (requester) {\n            this.requester = {\n                start: (_a = requester.start) !== null && _a !== void 0 ? _a : defaultRequester.start,\n                sendMessage: (_b = requester.sendMessage) !== null && _b !== void 0 ? _b : defaultRequester.sendMessage,\n                halfClose: (_c = requester.halfClose) !== null && _c !== void 0 ? _c : defaultRequester.halfClose,\n                cancel: (_d = requester.cancel) !== null && _d !== void 0 ? _d : defaultRequester.cancel\n            };\n        } else {\n            this.requester = defaultRequester;\n        }\n    }\n    cancelWithStatus(status, details) {\n        this.requester.cancel(()=>{\n            this.nextCall.cancelWithStatus(status, details);\n        });\n    }\n    getPeer() {\n        return this.nextCall.getPeer();\n    }\n    processPendingMessage() {\n        if (this.pendingMessageContext) {\n            this.nextCall.sendMessageWithContext(this.pendingMessageContext, this.pendingMessage);\n            this.pendingMessageContext = null;\n            this.pendingMessage = null;\n        }\n    }\n    processPendingHalfClose() {\n        if (this.pendingHalfClose) {\n            this.nextCall.halfClose();\n        }\n    }\n    start(metadata, interceptingListener) {\n        var _a, _b, _c, _d, _e, _f;\n        const fullInterceptingListener = {\n            onReceiveMetadata: (_b = (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(interceptingListener)) !== null && _b !== void 0 ? _b : (metadata)=>{},\n            onReceiveMessage: (_d = (_c = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _c === void 0 ? void 0 : _c.bind(interceptingListener)) !== null && _d !== void 0 ? _d : (message)=>{},\n            onReceiveStatus: (_f = (_e = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _e === void 0 ? void 0 : _e.bind(interceptingListener)) !== null && _f !== void 0 ? _f : (status)=>{}\n        };\n        this.processingMetadata = true;\n        this.requester.start(metadata, fullInterceptingListener, (md, listener)=>{\n            var _a, _b, _c;\n            this.processingMetadata = false;\n            let finalInterceptingListener;\n            if ((0, call_interface_1.isInterceptingListener)(listener)) {\n                finalInterceptingListener = listener;\n            } else {\n                const fullListener = {\n                    onReceiveMetadata: (_a = listener.onReceiveMetadata) !== null && _a !== void 0 ? _a : defaultListener.onReceiveMetadata,\n                    onReceiveMessage: (_b = listener.onReceiveMessage) !== null && _b !== void 0 ? _b : defaultListener.onReceiveMessage,\n                    onReceiveStatus: (_c = listener.onReceiveStatus) !== null && _c !== void 0 ? _c : defaultListener.onReceiveStatus\n                };\n                finalInterceptingListener = new call_interface_1.InterceptingListenerImpl(fullListener, fullInterceptingListener);\n            }\n            this.nextCall.start(md, finalInterceptingListener);\n            this.processPendingMessage();\n            this.processPendingHalfClose();\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessageWithContext(context, message) {\n        this.processingMessage = true;\n        this.requester.sendMessage(message, (finalMessage)=>{\n            this.processingMessage = false;\n            if (this.processingMetadata) {\n                this.pendingMessageContext = context;\n                this.pendingMessage = message;\n            } else {\n                this.nextCall.sendMessageWithContext(context, finalMessage);\n                this.processPendingHalfClose();\n            }\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessage(message) {\n        this.sendMessageWithContext({}, message);\n    }\n    startRead() {\n        this.nextCall.startRead();\n    }\n    halfClose() {\n        this.requester.halfClose(()=>{\n            if (this.processingMetadata || this.processingMessage) {\n                this.pendingHalfClose = true;\n            } else {\n                this.nextCall.halfClose();\n            }\n        });\n    }\n}\nexports.InterceptingCall = InterceptingCall;\nfunction getCall(channel, path, options) {\n    var _a, _b;\n    const deadline = (_a = options.deadline) !== null && _a !== void 0 ? _a : Infinity;\n    const host = options.host;\n    const parent = (_b = options.parent) !== null && _b !== void 0 ? _b : null;\n    const propagateFlags = options.propagate_flags;\n    const credentials = options.credentials;\n    const call = channel.createCall(path, deadline, host, parent, propagateFlags);\n    if (credentials) {\n        call.setCredentials(credentials);\n    }\n    return call;\n}\n/**\n * InterceptingCall implementation that directly owns the underlying Call\n * object and handles serialization and deseraizliation.\n */ class BaseInterceptingCall {\n    constructor(call, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    methodDefinition){\n        this.call = call;\n        this.methodDefinition = methodDefinition;\n    }\n    cancelWithStatus(status, details) {\n        this.call.cancelWithStatus(status, details);\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessageWithContext(context, message) {\n        let serialized;\n        try {\n            serialized = this.methodDefinition.requestSerialize(message);\n        } catch (e) {\n            this.call.cancelWithStatus(constants_1.Status.INTERNAL, `Request message serialization failure: ${(0, error_1.getErrorMessage)(e)}`);\n            return;\n        }\n        this.call.sendMessageWithContext(context, serialized);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sendMessage(message) {\n        this.sendMessageWithContext({}, message);\n    }\n    start(metadata, interceptingListener) {\n        let readError = null;\n        this.call.start(metadata, {\n            onReceiveMetadata: (metadata)=>{\n                var _a;\n                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, metadata);\n            },\n            onReceiveMessage: (message)=>{\n                var _a;\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let deserialized;\n                try {\n                    deserialized = this.methodDefinition.responseDeserialize(message);\n                } catch (e) {\n                    readError = {\n                        code: constants_1.Status.INTERNAL,\n                        details: `Response message parsing error: ${(0, error_1.getErrorMessage)(e)}`,\n                        metadata: new metadata_1.Metadata()\n                    };\n                    this.call.cancelWithStatus(readError.code, readError.details);\n                    return;\n                }\n                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, deserialized);\n            },\n            onReceiveStatus: (status)=>{\n                var _a, _b;\n                if (readError) {\n                    (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, readError);\n                } else {\n                    (_b = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(interceptingListener, status);\n                }\n            }\n        });\n    }\n    startRead() {\n        this.call.startRead();\n    }\n    halfClose() {\n        this.call.halfClose();\n    }\n}\n/**\n * BaseInterceptingCall with special-cased behavior for methods with unary\n * responses.\n */ class BaseUnaryInterceptingCall extends BaseInterceptingCall {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(call, methodDefinition){\n        super(call, methodDefinition);\n    }\n    start(metadata, listener) {\n        var _a, _b;\n        let receivedMessage = false;\n        const wrapperListener = {\n            onReceiveMetadata: (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(listener)) !== null && _b !== void 0 ? _b : (metadata)=>{},\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage: (message)=>{\n                var _a;\n                receivedMessage = true;\n                (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, message);\n            },\n            onReceiveStatus: (status)=>{\n                var _a, _b;\n                if (!receivedMessage) {\n                    (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, null);\n                }\n                (_b = listener === null || listener === void 0 ? void 0 : listener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(listener, status);\n            }\n        };\n        super.start(metadata, wrapperListener);\n        this.call.startRead();\n    }\n}\n/**\n * BaseInterceptingCall with special-cased behavior for methods with streaming\n * responses.\n */ class BaseStreamingInterceptingCall extends BaseInterceptingCall {\n}\nfunction getBottomInterceptingCall(channel, options, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nmethodDefinition) {\n    const call = getCall(channel, methodDefinition.path, options);\n    if (methodDefinition.responseStream) {\n        return new BaseStreamingInterceptingCall(call, methodDefinition);\n    } else {\n        return new BaseUnaryInterceptingCall(call, methodDefinition);\n    }\n}\nfunction getInterceptingCall(interceptorArgs, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nmethodDefinition, options, channel) {\n    if (interceptorArgs.clientInterceptors.length > 0 && interceptorArgs.clientInterceptorProviders.length > 0) {\n        throw new InterceptorConfigurationError(\"Both interceptors and interceptor_providers were passed as options \" + \"to the client constructor. Only one of these is allowed.\");\n    }\n    if (interceptorArgs.callInterceptors.length > 0 && interceptorArgs.callInterceptorProviders.length > 0) {\n        throw new InterceptorConfigurationError(\"Both interceptors and interceptor_providers were passed as call \" + \"options. Only one of these is allowed.\");\n    }\n    let interceptors = [];\n    // Interceptors passed to the call override interceptors passed to the client constructor\n    if (interceptorArgs.callInterceptors.length > 0 || interceptorArgs.callInterceptorProviders.length > 0) {\n        interceptors = [].concat(interceptorArgs.callInterceptors, interceptorArgs.callInterceptorProviders.map((provider)=>provider(methodDefinition))).filter((interceptor)=>interceptor);\n    // Filter out falsy values when providers return nothing\n    } else {\n        interceptors = [].concat(interceptorArgs.clientInterceptors, interceptorArgs.clientInterceptorProviders.map((provider)=>provider(methodDefinition))).filter((interceptor)=>interceptor);\n    // Filter out falsy values when providers return nothing\n    }\n    const interceptorOptions = Object.assign({}, options, {\n        method_definition: methodDefinition\n    });\n    /* For each interceptor in the list, the nextCall function passed to it is\n     * based on the next interceptor in the list, using a nextCall function\n     * constructed with the following interceptor in the list, and so on. The\n     * initialValue, which is effectively at the end of the list, is a nextCall\n     * function that invokes getBottomInterceptingCall, the result of which\n     * handles (de)serialization and also gets the underlying call from the\n     * channel. */ const getCall = interceptors.reduceRight((nextCall, nextInterceptor)=>{\n        return (currentOptions)=>nextInterceptor(currentOptions, nextCall);\n    }, (finalOptions)=>getBottomInterceptingCall(channel, finalOptions, methodDefinition));\n    return getCall(interceptorOptions);\n} //# sourceMappingURL=client-interceptors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/client.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/client.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Client = void 0;\nconst call_1 = __webpack_require__(/*! ./call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call.js\");\nconst channel_1 = __webpack_require__(/*! ./channel */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst client_interceptors_1 = __webpack_require__(/*! ./client-interceptors */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\");\nconst CHANNEL_SYMBOL = Symbol();\nconst INTERCEPTOR_SYMBOL = Symbol();\nconst INTERCEPTOR_PROVIDER_SYMBOL = Symbol();\nconst CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();\nfunction isFunction(arg) {\n    return typeof arg === \"function\";\n}\nfunction getErrorStackString(error) {\n    var _a;\n    return ((_a = error.stack) === null || _a === void 0 ? void 0 : _a.split(\"\\n\").slice(1).join(\"\\n\")) || \"no stack trace available\";\n}\n/**\n * A generic gRPC client. Primarily useful as a base class for all generated\n * clients.\n */ class Client {\n    constructor(address, credentials, options = {}){\n        var _a, _b;\n        options = Object.assign({}, options);\n        this[INTERCEPTOR_SYMBOL] = (_a = options.interceptors) !== null && _a !== void 0 ? _a : [];\n        delete options.interceptors;\n        this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options.interceptor_providers) !== null && _b !== void 0 ? _b : [];\n        delete options.interceptor_providers;\n        if (this[INTERCEPTOR_SYMBOL].length > 0 && this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {\n            throw new Error(\"Both interceptors and interceptor_providers were passed as options \" + \"to the client constructor. Only one of these is allowed.\");\n        }\n        this[CALL_INVOCATION_TRANSFORMER_SYMBOL] = options.callInvocationTransformer;\n        delete options.callInvocationTransformer;\n        if (options.channelOverride) {\n            this[CHANNEL_SYMBOL] = options.channelOverride;\n        } else if (options.channelFactoryOverride) {\n            const channelFactoryOverride = options.channelFactoryOverride;\n            delete options.channelFactoryOverride;\n            this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options);\n        } else {\n            this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options);\n        }\n    }\n    close() {\n        this[CHANNEL_SYMBOL].close();\n    }\n    getChannel() {\n        return this[CHANNEL_SYMBOL];\n    }\n    waitForReady(deadline, callback) {\n        const checkState = (err)=>{\n            if (err) {\n                callback(new Error(\"Failed to connect before the deadline\"));\n                return;\n            }\n            let newState;\n            try {\n                newState = this[CHANNEL_SYMBOL].getConnectivityState(true);\n            } catch (e) {\n                callback(new Error(\"The channel has been closed\"));\n                return;\n            }\n            if (newState === connectivity_state_1.ConnectivityState.READY) {\n                callback();\n            } else {\n                try {\n                    this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);\n                } catch (e) {\n                    callback(new Error(\"The channel has been closed\"));\n                }\n            }\n        };\n        setImmediate(checkState);\n    }\n    checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {\n        if (isFunction(arg1)) {\n            return {\n                metadata: new metadata_1.Metadata(),\n                options: {},\n                callback: arg1\n            };\n        } else if (isFunction(arg2)) {\n            if (arg1 instanceof metadata_1.Metadata) {\n                return {\n                    metadata: arg1,\n                    options: {},\n                    callback: arg2\n                };\n            } else {\n                return {\n                    metadata: new metadata_1.Metadata(),\n                    options: arg1,\n                    callback: arg2\n                };\n            }\n        } else {\n            if (!(arg1 instanceof metadata_1.Metadata && arg2 instanceof Object && isFunction(arg3))) {\n                throw new Error(\"Incorrect arguments passed\");\n            }\n            return {\n                metadata: arg1,\n                options: arg2,\n                callback: arg3\n            };\n        }\n    }\n    makeUnaryRequest(method, serialize, deserialize, argument, metadata, options, callback) {\n        var _a, _b;\n        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n        const methodDefinition = {\n            path: method,\n            requestStream: false,\n            responseStream: false,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize\n        };\n        let callProperties = {\n            argument: argument,\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientUnaryCallImpl(),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options,\n            callback: checkedArguments.callback\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const emitter = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n        };\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */ emitter.call = call;\n        let responseMessage = null;\n        let receivedStatus = false;\n        let callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata: (metadata)=>{\n                emitter.emit(\"metadata\", metadata);\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage (message) {\n                if (responseMessage !== null) {\n                    call.cancelWithStatus(constants_1.Status.UNIMPLEMENTED, \"Too many responses received\");\n                }\n                responseMessage = message;\n            },\n            onReceiveStatus (status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                if (status.code === constants_1.Status.OK) {\n                    if (responseMessage === null) {\n                        const callerStack = getErrorStackString(callerStackError);\n                        callProperties.callback((0, call_1.callErrorFromStatus)({\n                            code: constants_1.Status.UNIMPLEMENTED,\n                            details: \"No message received\",\n                            metadata: status.metadata\n                        }, callerStack));\n                    } else {\n                        callProperties.callback(null, responseMessage);\n                    }\n                } else {\n                    const callerStack = getErrorStackString(callerStackError);\n                    callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\n                }\n                /* Avoid retaining the callerStackError object in the call context of\n                 * the status event handler. */ callerStackError = null;\n                emitter.emit(\"status\", status);\n            }\n        });\n        call.sendMessage(argument);\n        call.halfClose();\n        return emitter;\n    }\n    makeClientStreamRequest(method, serialize, deserialize, metadata, options, callback) {\n        var _a, _b;\n        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n        const methodDefinition = {\n            path: method,\n            requestStream: true,\n            responseStream: false,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize\n        };\n        let callProperties = {\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientWritableStreamImpl(serialize),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options,\n            callback: checkedArguments.callback\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const emitter = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n        };\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */ emitter.call = call;\n        let responseMessage = null;\n        let receivedStatus = false;\n        let callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata: (metadata)=>{\n                emitter.emit(\"metadata\", metadata);\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage (message) {\n                if (responseMessage !== null) {\n                    call.cancelWithStatus(constants_1.Status.UNIMPLEMENTED, \"Too many responses received\");\n                }\n                responseMessage = message;\n                call.startRead();\n            },\n            onReceiveStatus (status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                if (status.code === constants_1.Status.OK) {\n                    if (responseMessage === null) {\n                        const callerStack = getErrorStackString(callerStackError);\n                        callProperties.callback((0, call_1.callErrorFromStatus)({\n                            code: constants_1.Status.UNIMPLEMENTED,\n                            details: \"No message received\",\n                            metadata: status.metadata\n                        }, callerStack));\n                    } else {\n                        callProperties.callback(null, responseMessage);\n                    }\n                } else {\n                    const callerStack = getErrorStackString(callerStackError);\n                    callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\n                }\n                /* Avoid retaining the callerStackError object in the call context of\n                 * the status event handler. */ callerStackError = null;\n                emitter.emit(\"status\", status);\n            }\n        });\n        return emitter;\n    }\n    checkMetadataAndOptions(arg1, arg2) {\n        let metadata;\n        let options;\n        if (arg1 instanceof metadata_1.Metadata) {\n            metadata = arg1;\n            if (arg2) {\n                options = arg2;\n            } else {\n                options = {};\n            }\n        } else {\n            if (arg1) {\n                options = arg1;\n            } else {\n                options = {};\n            }\n            metadata = new metadata_1.Metadata();\n        }\n        return {\n            metadata,\n            options\n        };\n    }\n    makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options) {\n        var _a, _b;\n        const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n        const methodDefinition = {\n            path: method,\n            requestStream: false,\n            responseStream: true,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize\n        };\n        let callProperties = {\n            argument: argument,\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientReadableStreamImpl(deserialize),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const stream = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n        };\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */ stream.call = call;\n        let receivedStatus = false;\n        let callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata (metadata) {\n                stream.emit(\"metadata\", metadata);\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onReceiveMessage (message) {\n                stream.push(message);\n            },\n            onReceiveStatus (status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                stream.push(null);\n                if (status.code !== constants_1.Status.OK) {\n                    const callerStack = getErrorStackString(callerStackError);\n                    stream.emit(\"error\", (0, call_1.callErrorFromStatus)(status, callerStack));\n                }\n                /* Avoid retaining the callerStackError object in the call context of\n                 * the status event handler. */ callerStackError = null;\n                stream.emit(\"status\", status);\n            }\n        });\n        call.sendMessage(argument);\n        call.halfClose();\n        return stream;\n    }\n    makeBidiStreamRequest(method, serialize, deserialize, metadata, options) {\n        var _a, _b;\n        const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n        const methodDefinition = {\n            path: method,\n            requestStream: true,\n            responseStream: true,\n            requestSerialize: serialize,\n            responseDeserialize: deserialize\n        };\n        let callProperties = {\n            metadata: checkedArguments.metadata,\n            call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),\n            channel: this[CHANNEL_SYMBOL],\n            methodDefinition: methodDefinition,\n            callOptions: checkedArguments.options\n        };\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n        }\n        const stream = callProperties.call;\n        const interceptorArgs = {\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n        };\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n        /* This needs to happen before the emitter is used. Unfortunately we can't\n         * enforce this with the type system. We need to construct this emitter\n         * before calling the CallInvocationTransformer, and we need to create the\n         * call after that. */ stream.call = call;\n        let receivedStatus = false;\n        let callerStackError = new Error();\n        call.start(callProperties.metadata, {\n            onReceiveMetadata (metadata) {\n                stream.emit(\"metadata\", metadata);\n            },\n            onReceiveMessage (message) {\n                stream.push(message);\n            },\n            onReceiveStatus (status) {\n                if (receivedStatus) {\n                    return;\n                }\n                receivedStatus = true;\n                stream.push(null);\n                if (status.code !== constants_1.Status.OK) {\n                    const callerStack = getErrorStackString(callerStackError);\n                    stream.emit(\"error\", (0, call_1.callErrorFromStatus)(status, callerStack));\n                }\n                /* Avoid retaining the callerStackError object in the call context of\n                 * the status event handler. */ callerStackError = null;\n                stream.emit(\"status\", status);\n            }\n        });\n        return stream;\n    }\n}\nexports.Client = Client; //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js":
/*!************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CompressionAlgorithms = void 0;\nvar CompressionAlgorithms;\n(function(CompressionAlgorithms) {\n    CompressionAlgorithms[CompressionAlgorithms[\"identity\"] = 0] = \"identity\";\n    CompressionAlgorithms[CompressionAlgorithms[\"deflate\"] = 1] = \"deflate\";\n    CompressionAlgorithms[CompressionAlgorithms[\"gzip\"] = 2] = \"gzip\";\n})(CompressionAlgorithms || (exports.CompressionAlgorithms = CompressionAlgorithms = {})); //# sourceMappingURL=compression-algorithms.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29tcHJlc3Npb24tYWxnb3JpdGhtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7Ozs7Q0FlQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUcsS0FBSztBQUNyQyxJQUFJRTtBQUNILFVBQVVBLHFCQUFxQjtJQUM1QkEscUJBQXFCLENBQUNBLHFCQUFxQixDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUc7SUFDL0RBLHFCQUFxQixDQUFDQSxxQkFBcUIsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQzlEQSxxQkFBcUIsQ0FBQ0EscUJBQXFCLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRztBQUMvRCxHQUFHQSx5QkFBMEJGLENBQUFBLDZCQUE2QixHQUFHRSx3QkFBd0IsQ0FBQyxLQUN0RixrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29tcHJlc3Npb24tYWxnb3JpdGhtcy5qcz8yOTI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIxIGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXByZXNzaW9uQWxnb3JpdGhtcyA9IHZvaWQgMDtcbnZhciBDb21wcmVzc2lvbkFsZ29yaXRobXM7XG4oZnVuY3Rpb24gKENvbXByZXNzaW9uQWxnb3JpdGhtcykge1xuICAgIENvbXByZXNzaW9uQWxnb3JpdGhtc1tDb21wcmVzc2lvbkFsZ29yaXRobXNbXCJpZGVudGl0eVwiXSA9IDBdID0gXCJpZGVudGl0eVwiO1xuICAgIENvbXByZXNzaW9uQWxnb3JpdGhtc1tDb21wcmVzc2lvbkFsZ29yaXRobXNbXCJkZWZsYXRlXCJdID0gMV0gPSBcImRlZmxhdGVcIjtcbiAgICBDb21wcmVzc2lvbkFsZ29yaXRobXNbQ29tcHJlc3Npb25BbGdvcml0aG1zW1wiZ3ppcFwiXSA9IDJdID0gXCJnemlwXCI7XG59KShDb21wcmVzc2lvbkFsZ29yaXRobXMgfHwgKGV4cG9ydHMuQ29tcHJlc3Npb25BbGdvcml0aG1zID0gQ29tcHJlc3Npb25BbGdvcml0aG1zID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXByZXNzaW9uLWFsZ29yaXRobXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ29tcHJlc3Npb25BbGdvcml0aG1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/compression-filter.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CompressionFilterFactory = exports.CompressionFilter = void 0;\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst compression_algorithms_1 = __webpack_require__(/*! ./compression-algorithms */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst filter_1 = __webpack_require__(/*! ./filter */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst isCompressionAlgorithmKey = (key)=>{\n    return typeof key === \"number\" && typeof compression_algorithms_1.CompressionAlgorithms[key] === \"string\";\n};\nclass CompressionHandler {\n    /**\n     * @param message Raw uncompressed message bytes\n     * @param compress Indicates whether the message should be compressed\n     * @return Framed message, compressed if applicable\n     */ async writeMessage(message, compress) {\n        let messageBuffer = message;\n        if (compress) {\n            messageBuffer = await this.compressMessage(messageBuffer);\n        }\n        const output = Buffer.allocUnsafe(messageBuffer.length + 5);\n        output.writeUInt8(compress ? 1 : 0, 0);\n        output.writeUInt32BE(messageBuffer.length, 1);\n        messageBuffer.copy(output, 5);\n        return output;\n    }\n    /**\n     * @param data Framed message, possibly compressed\n     * @return Uncompressed message\n     */ async readMessage(data) {\n        const compressed = data.readUInt8(0) === 1;\n        let messageBuffer = data.slice(5);\n        if (compressed) {\n            messageBuffer = await this.decompressMessage(messageBuffer);\n        }\n        return messageBuffer;\n    }\n}\nclass IdentityHandler extends CompressionHandler {\n    async compressMessage(message) {\n        return message;\n    }\n    async writeMessage(message, compress) {\n        const output = Buffer.allocUnsafe(message.length + 5);\n        /* With \"identity\" compression, messages should always be marked as\n         * uncompressed */ output.writeUInt8(0, 0);\n        output.writeUInt32BE(message.length, 1);\n        message.copy(output, 5);\n        return output;\n    }\n    decompressMessage(message) {\n        return Promise.reject(new Error('Received compressed message but \"grpc-encoding\" header was identity'));\n    }\n}\nclass DeflateHandler extends CompressionHandler {\n    constructor(maxRecvMessageLength){\n        super();\n        this.maxRecvMessageLength = maxRecvMessageLength;\n    }\n    compressMessage(message) {\n        return new Promise((resolve, reject)=>{\n            zlib.deflate(message, (err, output)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(output);\n                }\n            });\n        });\n    }\n    decompressMessage(message) {\n        return new Promise((resolve, reject)=>{\n            let totalLength = 0;\n            const messageParts = [];\n            const decompresser = zlib.createInflate();\n            decompresser.on(\"data\", (chunk)=>{\n                messageParts.push(chunk);\n                totalLength += chunk.byteLength;\n                if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\n                    decompresser.destroy();\n                    reject({\n                        code: constants_1.Status.RESOURCE_EXHAUSTED,\n                        details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\n                    });\n                }\n            });\n            decompresser.on(\"end\", ()=>{\n                resolve(Buffer.concat(messageParts));\n            });\n            decompresser.write(message);\n            decompresser.end();\n        });\n    }\n}\nclass GzipHandler extends CompressionHandler {\n    constructor(maxRecvMessageLength){\n        super();\n        this.maxRecvMessageLength = maxRecvMessageLength;\n    }\n    compressMessage(message) {\n        return new Promise((resolve, reject)=>{\n            zlib.gzip(message, (err, output)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(output);\n                }\n            });\n        });\n    }\n    decompressMessage(message) {\n        return new Promise((resolve, reject)=>{\n            let totalLength = 0;\n            const messageParts = [];\n            const decompresser = zlib.createGunzip();\n            decompresser.on(\"data\", (chunk)=>{\n                messageParts.push(chunk);\n                totalLength += chunk.byteLength;\n                if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\n                    decompresser.destroy();\n                    reject({\n                        code: constants_1.Status.RESOURCE_EXHAUSTED,\n                        details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\n                    });\n                }\n            });\n            decompresser.on(\"end\", ()=>{\n                resolve(Buffer.concat(messageParts));\n            });\n            decompresser.write(message);\n            decompresser.end();\n        });\n    }\n}\nclass UnknownHandler extends CompressionHandler {\n    constructor(compressionName){\n        super();\n        this.compressionName = compressionName;\n    }\n    compressMessage(message) {\n        return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));\n    }\n    decompressMessage(message) {\n        // This should be unreachable\n        return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));\n    }\n}\nfunction getCompressionHandler(compressionName, maxReceiveMessageSize) {\n    switch(compressionName){\n        case \"identity\":\n            return new IdentityHandler();\n        case \"deflate\":\n            return new DeflateHandler(maxReceiveMessageSize);\n        case \"gzip\":\n            return new GzipHandler(maxReceiveMessageSize);\n        default:\n            return new UnknownHandler(compressionName);\n    }\n}\nclass CompressionFilter extends filter_1.BaseFilter {\n    constructor(channelOptions, sharedFilterConfig){\n        var _a, _b, _c;\n        super();\n        this.sharedFilterConfig = sharedFilterConfig;\n        this.sendCompression = new IdentityHandler();\n        this.receiveCompression = new IdentityHandler();\n        this.currentCompressionAlgorithm = \"identity\";\n        const compressionAlgorithmKey = channelOptions[\"grpc.default_compression_algorithm\"];\n        this.maxReceiveMessageLength = (_a = channelOptions[\"grpc.max_receive_message_length\"]) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n        this.maxSendMessageLength = (_b = channelOptions[\"grpc.max_send_message_length\"]) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n        if (compressionAlgorithmKey !== undefined) {\n            if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {\n                const clientSelectedEncoding = compression_algorithms_1.CompressionAlgorithms[compressionAlgorithmKey];\n                const serverSupportedEncodings = (_c = sharedFilterConfig.serverSupportedEncodingHeader) === null || _c === void 0 ? void 0 : _c.split(\",\");\n                /**\n                 * There are two possible situations here:\n                 * 1) We don't have any info yet from the server about what compression it supports\n                 *    In that case we should just use what the client tells us to use\n                 * 2) We've previously received a response from the server including a grpc-accept-encoding header\n                 *    In that case we only want to use the encoding chosen by the client if the server supports it\n                 */ if (!serverSupportedEncodings || serverSupportedEncodings.includes(clientSelectedEncoding)) {\n                    this.currentCompressionAlgorithm = clientSelectedEncoding;\n                    this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm, -1);\n                }\n            } else {\n                logging.log(constants_1.LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);\n            }\n        }\n    }\n    async sendMetadata(metadata) {\n        const headers = await metadata;\n        headers.set(\"grpc-accept-encoding\", \"identity,deflate,gzip\");\n        headers.set(\"accept-encoding\", \"identity\");\n        // No need to send the header if it's \"identity\" -  behavior is identical; save the bandwidth\n        if (this.currentCompressionAlgorithm === \"identity\") {\n            headers.remove(\"grpc-encoding\");\n        } else {\n            headers.set(\"grpc-encoding\", this.currentCompressionAlgorithm);\n        }\n        return headers;\n    }\n    receiveMetadata(metadata) {\n        const receiveEncoding = metadata.get(\"grpc-encoding\");\n        if (receiveEncoding.length > 0) {\n            const encoding = receiveEncoding[0];\n            if (typeof encoding === \"string\") {\n                this.receiveCompression = getCompressionHandler(encoding, this.maxReceiveMessageLength);\n            }\n        }\n        metadata.remove(\"grpc-encoding\");\n        /* Check to see if the compression we're using to send messages is supported by the server\n         * If not, reset the sendCompression filter and have it use the default IdentityHandler */ const serverSupportedEncodingsHeader = metadata.get(\"grpc-accept-encoding\")[0];\n        if (serverSupportedEncodingsHeader) {\n            this.sharedFilterConfig.serverSupportedEncodingHeader = serverSupportedEncodingsHeader;\n            const serverSupportedEncodings = serverSupportedEncodingsHeader.split(\",\");\n            if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {\n                this.sendCompression = new IdentityHandler();\n                this.currentCompressionAlgorithm = \"identity\";\n            }\n        }\n        metadata.remove(\"grpc-accept-encoding\");\n        return metadata;\n    }\n    async sendMessage(message) {\n        var _a;\n        /* This filter is special. The input message is the bare message bytes,\n         * and the output is a framed and possibly compressed message. For this\n         * reason, this filter should be at the bottom of the filter stack */ const resolvedMessage = await message;\n        if (this.maxSendMessageLength !== -1 && resolvedMessage.message.length > this.maxSendMessageLength) {\n            throw {\n                code: constants_1.Status.RESOURCE_EXHAUSTED,\n                details: `Attempted to send message with a size larger than ${this.maxSendMessageLength}`\n            };\n        }\n        let compress;\n        if (this.sendCompression instanceof IdentityHandler) {\n            compress = false;\n        } else {\n            compress = (((_a = resolvedMessage.flags) !== null && _a !== void 0 ? _a : 0) & 2 /* WriteFlags.NoCompress */ ) === 0;\n        }\n        return {\n            message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),\n            flags: resolvedMessage.flags\n        };\n    }\n    async receiveMessage(message) {\n        /* This filter is also special. The input message is framed and possibly\n         * compressed, and the output message is deframed and uncompressed. So\n         * this is another reason that this filter should be at the bottom of the\n         * filter stack. */ return this.receiveCompression.readMessage(await message);\n    }\n}\nexports.CompressionFilter = CompressionFilter;\nclass CompressionFilterFactory {\n    constructor(channel, options){\n        this.options = options;\n        this.sharedFilterConfig = {};\n    }\n    createFilter() {\n        return new CompressionFilter(this.options, this.sharedFilterConfig);\n    }\n}\nexports.CompressionFilterFactory = CompressionFilterFactory; //# sourceMappingURL=compression-filter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/connectivity-state.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ConnectivityState = void 0;\nvar ConnectivityState;\n(function(ConnectivityState) {\n    ConnectivityState[ConnectivityState[\"IDLE\"] = 0] = \"IDLE\";\n    ConnectivityState[ConnectivityState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n    ConnectivityState[ConnectivityState[\"READY\"] = 2] = \"READY\";\n    ConnectivityState[ConnectivityState[\"TRANSIENT_FAILURE\"] = 3] = \"TRANSIENT_FAILURE\";\n    ConnectivityState[ConnectivityState[\"SHUTDOWN\"] = 4] = \"SHUTDOWN\";\n})(ConnectivityState || (exports.ConnectivityState = ConnectivityState = {})); //# sourceMappingURL=connectivity-state.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29ubmVjdGl2aXR5LXN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx5QkFBeUIsR0FBRyxLQUFLO0FBQ2pDLElBQUlFO0FBQ0gsVUFBVUEsaUJBQWlCO0lBQ3hCQSxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRztJQUNuREEsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDekRBLGlCQUFpQixDQUFDQSxpQkFBaUIsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQ3BEQSxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxHQUFHO0lBQ2hFQSxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUMsV0FBVyxHQUFHLEVBQUUsR0FBRztBQUMzRCxHQUFHQSxxQkFBc0JGLENBQUFBLHlCQUF5QixHQUFHRSxvQkFBb0IsQ0FBQyxLQUMxRSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29ubmVjdGl2aXR5LXN0YXRlLmpzPzRlZTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMjEgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29ubmVjdGl2aXR5U3RhdGUgPSB2b2lkIDA7XG52YXIgQ29ubmVjdGl2aXR5U3RhdGU7XG4oZnVuY3Rpb24gKENvbm5lY3Rpdml0eVN0YXRlKSB7XG4gICAgQ29ubmVjdGl2aXR5U3RhdGVbQ29ubmVjdGl2aXR5U3RhdGVbXCJJRExFXCJdID0gMF0gPSBcIklETEVcIjtcbiAgICBDb25uZWN0aXZpdHlTdGF0ZVtDb25uZWN0aXZpdHlTdGF0ZVtcIkNPTk5FQ1RJTkdcIl0gPSAxXSA9IFwiQ09OTkVDVElOR1wiO1xuICAgIENvbm5lY3Rpdml0eVN0YXRlW0Nvbm5lY3Rpdml0eVN0YXRlW1wiUkVBRFlcIl0gPSAyXSA9IFwiUkVBRFlcIjtcbiAgICBDb25uZWN0aXZpdHlTdGF0ZVtDb25uZWN0aXZpdHlTdGF0ZVtcIlRSQU5TSUVOVF9GQUlMVVJFXCJdID0gM10gPSBcIlRSQU5TSUVOVF9GQUlMVVJFXCI7XG4gICAgQ29ubmVjdGl2aXR5U3RhdGVbQ29ubmVjdGl2aXR5U3RhdGVbXCJTSFVURE9XTlwiXSA9IDRdID0gXCJTSFVURE9XTlwiO1xufSkoQ29ubmVjdGl2aXR5U3RhdGUgfHwgKGV4cG9ydHMuQ29ubmVjdGl2aXR5U3RhdGUgPSBDb25uZWN0aXZpdHlTdGF0ZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uZWN0aXZpdHktc3RhdGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ29ubmVjdGl2aXR5U3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js":
/*!***********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/constants.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = exports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = exports.Propagate = exports.LogVerbosity = exports.Status = void 0;\nvar Status;\n(function(Status) {\n    Status[Status[\"OK\"] = 0] = \"OK\";\n    Status[Status[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    Status[Status[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    Status[Status[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    Status[Status[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    Status[Status[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    Status[Status[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    Status[Status[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    Status[Status[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    Status[Status[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    Status[Status[\"ABORTED\"] = 10] = \"ABORTED\";\n    Status[Status[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    Status[Status[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    Status[Status[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    Status[Status[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    Status[Status[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    Status[Status[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(Status || (exports.Status = Status = {}));\nvar LogVerbosity;\n(function(LogVerbosity) {\n    LogVerbosity[LogVerbosity[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogVerbosity[LogVerbosity[\"INFO\"] = 1] = \"INFO\";\n    LogVerbosity[LogVerbosity[\"ERROR\"] = 2] = \"ERROR\";\n    LogVerbosity[LogVerbosity[\"NONE\"] = 3] = \"NONE\";\n})(LogVerbosity || (exports.LogVerbosity = LogVerbosity = {}));\n/**\n * NOTE: This enum is not currently used in any implemented API in this\n * library. It is included only for type parity with the other implementation.\n */ var Propagate;\n(function(Propagate) {\n    Propagate[Propagate[\"DEADLINE\"] = 1] = \"DEADLINE\";\n    Propagate[Propagate[\"CENSUS_STATS_CONTEXT\"] = 2] = \"CENSUS_STATS_CONTEXT\";\n    Propagate[Propagate[\"CENSUS_TRACING_CONTEXT\"] = 4] = \"CENSUS_TRACING_CONTEXT\";\n    Propagate[Propagate[\"CANCELLATION\"] = 8] = \"CANCELLATION\";\n    // https://github.com/grpc/grpc/blob/master/include/grpc/impl/codegen/propagation_bits.h#L43\n    Propagate[Propagate[\"DEFAULTS\"] = 65535] = \"DEFAULTS\";\n})(Propagate || (exports.Propagate = Propagate = {}));\n// -1 means unlimited\nexports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = -1;\n// 4 MB default\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQ0FBMEMsR0FBR0EsdUNBQXVDLEdBQUdBLGlCQUFpQixHQUFHQSxvQkFBb0IsR0FBR0EsY0FBYyxHQUFHLEtBQUs7QUFDeEosSUFBSU07QUFDSCxVQUFVQSxNQUFNO0lBQ2JBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUc7SUFDM0JBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLFlBQVksR0FBRyxFQUFFLEdBQUc7SUFDbENBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDaENBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLG1CQUFtQixHQUFHLEVBQUUsR0FBRztJQUN6Q0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxHQUFHO0lBQzFDQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHO0lBQ2xDQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsR0FBRztJQUMxQ0EsTUFBTSxDQUFDQSxNQUFNLENBQUMscUJBQXFCLEdBQUcsRUFBRSxHQUFHO0lBQzNDQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEdBQUc7SUFDNUNBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUc7SUFDakNBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLGVBQWUsR0FBRyxHQUFHLEdBQUc7SUFDdENBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsR0FBRztJQUN2Q0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRztJQUNsQ0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsY0FBYyxHQUFHLEdBQUcsR0FBRztJQUNyQ0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRztJQUNuQ0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxHQUFHO0FBQzdDLEdBQUdBLFVBQVdOLENBQUFBLGNBQWMsR0FBR00sU0FBUyxDQUFDO0FBQ3pDLElBQUlEO0FBQ0gsVUFBVUEsWUFBWTtJQUNuQkEsWUFBWSxDQUFDQSxZQUFZLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRztJQUMxQ0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRztJQUN6Q0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRztJQUMxQ0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRztBQUM3QyxHQUFHQSxnQkFBaUJMLENBQUFBLG9CQUFvQixHQUFHSyxlQUFlLENBQUM7QUFDM0Q7OztDQUdDLEdBQ0QsSUFBSUQ7QUFDSCxVQUFVQSxTQUFTO0lBQ2hCQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHO0lBQ3ZDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyx1QkFBdUIsR0FBRyxFQUFFLEdBQUc7SUFDbkRBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLHlCQUF5QixHQUFHLEVBQUUsR0FBRztJQUNyREEsU0FBUyxDQUFDQSxTQUFTLENBQUMsZUFBZSxHQUFHLEVBQUUsR0FBRztJQUMzQyw0RkFBNEY7SUFDNUZBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLFdBQVcsR0FBRyxNQUFNLEdBQUc7QUFDL0MsR0FBR0EsYUFBY0osQ0FBQUEsaUJBQWlCLEdBQUdJLFlBQVksQ0FBQztBQUNsRCxxQkFBcUI7QUFDckJKLHVDQUF1QyxHQUFHLENBQUM7QUFDM0MsZUFBZTtBQUNmQSwwQ0FBMEMsR0FBRyxJQUFJLE9BQU8sTUFDeEQscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NvbnN0YW50cy5qcz8xYzJkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRFRkFVTFRfTUFYX1JFQ0VJVkVfTUVTU0FHRV9MRU5HVEggPSBleHBvcnRzLkRFRkFVTFRfTUFYX1NFTkRfTUVTU0FHRV9MRU5HVEggPSBleHBvcnRzLlByb3BhZ2F0ZSA9IGV4cG9ydHMuTG9nVmVyYm9zaXR5ID0gZXhwb3J0cy5TdGF0dXMgPSB2b2lkIDA7XG52YXIgU3RhdHVzO1xuKGZ1bmN0aW9uIChTdGF0dXMpIHtcbiAgICBTdGF0dXNbU3RhdHVzW1wiT0tcIl0gPSAwXSA9IFwiT0tcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQ0FOQ0VMTEVEXCJdID0gMV0gPSBcIkNBTkNFTExFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTktOT1dOXCJdID0gMl0gPSBcIlVOS05PV05cIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIkRFQURMSU5FX0VYQ0VFREVEXCJdID0gNF0gPSBcIkRFQURMSU5FX0VYQ0VFREVEXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIk5PVF9GT1VORFwiXSA9IDVdID0gXCJOT1RfRk9VTkRcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUxSRUFEWV9FWElTVFNcIl0gPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiUEVSTUlTU0lPTl9ERU5JRURcIl0gPSA3XSA9IFwiUEVSTUlTU0lPTl9ERU5JRURcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiUkVTT1VSQ0VfRVhIQVVTVEVEXCJdID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJGQUlMRURfUFJFQ09ORElUSU9OXCJdID0gOV0gPSBcIkZBSUxFRF9QUkVDT05ESVRJT05cIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUJPUlRFRFwiXSA9IDEwXSA9IFwiQUJPUlRFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJPVVRfT0ZfUkFOR0VcIl0gPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTklNUExFTUVOVEVEXCJdID0gMTJdID0gXCJVTklNUExFTUVOVEVEXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIklOVEVSTkFMXCJdID0gMTNdID0gXCJJTlRFUk5BTFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTkFWQUlMQUJMRVwiXSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiREFUQV9MT1NTXCJdID0gMTVdID0gXCJEQVRBX0xPU1NcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5BVVRIRU5USUNBVEVEXCJdID0gMTZdID0gXCJVTkFVVEhFTlRJQ0FURURcIjtcbn0pKFN0YXR1cyB8fCAoZXhwb3J0cy5TdGF0dXMgPSBTdGF0dXMgPSB7fSkpO1xudmFyIExvZ1ZlcmJvc2l0eTtcbihmdW5jdGlvbiAoTG9nVmVyYm9zaXR5KSB7XG4gICAgTG9nVmVyYm9zaXR5W0xvZ1ZlcmJvc2l0eVtcIkRFQlVHXCJdID0gMF0gPSBcIkRFQlVHXCI7XG4gICAgTG9nVmVyYm9zaXR5W0xvZ1ZlcmJvc2l0eVtcIklORk9cIl0gPSAxXSA9IFwiSU5GT1wiO1xuICAgIExvZ1ZlcmJvc2l0eVtMb2dWZXJib3NpdHlbXCJFUlJPUlwiXSA9IDJdID0gXCJFUlJPUlwiO1xuICAgIExvZ1ZlcmJvc2l0eVtMb2dWZXJib3NpdHlbXCJOT05FXCJdID0gM10gPSBcIk5PTkVcIjtcbn0pKExvZ1ZlcmJvc2l0eSB8fCAoZXhwb3J0cy5Mb2dWZXJib3NpdHkgPSBMb2dWZXJib3NpdHkgPSB7fSkpO1xuLyoqXG4gKiBOT1RFOiBUaGlzIGVudW0gaXMgbm90IGN1cnJlbnRseSB1c2VkIGluIGFueSBpbXBsZW1lbnRlZCBBUEkgaW4gdGhpc1xuICogbGlicmFyeS4gSXQgaXMgaW5jbHVkZWQgb25seSBmb3IgdHlwZSBwYXJpdHkgd2l0aCB0aGUgb3RoZXIgaW1wbGVtZW50YXRpb24uXG4gKi9cbnZhciBQcm9wYWdhdGU7XG4oZnVuY3Rpb24gKFByb3BhZ2F0ZSkge1xuICAgIFByb3BhZ2F0ZVtQcm9wYWdhdGVbXCJERUFETElORVwiXSA9IDFdID0gXCJERUFETElORVwiO1xuICAgIFByb3BhZ2F0ZVtQcm9wYWdhdGVbXCJDRU5TVVNfU1RBVFNfQ09OVEVYVFwiXSA9IDJdID0gXCJDRU5TVVNfU1RBVFNfQ09OVEVYVFwiO1xuICAgIFByb3BhZ2F0ZVtQcm9wYWdhdGVbXCJDRU5TVVNfVFJBQ0lOR19DT05URVhUXCJdID0gNF0gPSBcIkNFTlNVU19UUkFDSU5HX0NPTlRFWFRcIjtcbiAgICBQcm9wYWdhdGVbUHJvcGFnYXRlW1wiQ0FOQ0VMTEFUSU9OXCJdID0gOF0gPSBcIkNBTkNFTExBVElPTlwiO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9tYXN0ZXIvaW5jbHVkZS9ncnBjL2ltcGwvY29kZWdlbi9wcm9wYWdhdGlvbl9iaXRzLmgjTDQzXG4gICAgUHJvcGFnYXRlW1Byb3BhZ2F0ZVtcIkRFRkFVTFRTXCJdID0gNjU1MzVdID0gXCJERUZBVUxUU1wiO1xufSkoUHJvcGFnYXRlIHx8IChleHBvcnRzLlByb3BhZ2F0ZSA9IFByb3BhZ2F0ZSA9IHt9KSk7XG4vLyAtMSBtZWFucyB1bmxpbWl0ZWRcbmV4cG9ydHMuREVGQVVMVF9NQVhfU0VORF9NRVNTQUdFX0xFTkdUSCA9IC0xO1xuLy8gNCBNQiBkZWZhdWx0XG5leHBvcnRzLkRFRkFVTFRfTUFYX1JFQ0VJVkVfTUVTU0FHRV9MRU5HVEggPSA0ICogMTAyNCAqIDEwMjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiREVGQVVMVF9NQVhfUkVDRUlWRV9NRVNTQUdFX0xFTkdUSCIsIkRFRkFVTFRfTUFYX1NFTkRfTUVTU0FHRV9MRU5HVEgiLCJQcm9wYWdhdGUiLCJMb2dWZXJib3NpdHkiLCJTdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/control-plane-status.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.restrictControlPlaneStatusCode = restrictControlPlaneStatusCode;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst INAPPROPRIATE_CONTROL_PLANE_CODES = [\n    constants_1.Status.OK,\n    constants_1.Status.INVALID_ARGUMENT,\n    constants_1.Status.NOT_FOUND,\n    constants_1.Status.ALREADY_EXISTS,\n    constants_1.Status.FAILED_PRECONDITION,\n    constants_1.Status.ABORTED,\n    constants_1.Status.OUT_OF_RANGE,\n    constants_1.Status.DATA_LOSS\n];\nfunction restrictControlPlaneStatusCode(code, details) {\n    if (INAPPROPRIATE_CONTROL_PLANE_CODES.includes(code)) {\n        return {\n            code: constants_1.Status.INTERNAL,\n            details: `Invalid status from control plane: ${code} ${constants_1.Status[code]} ${details}`\n        };\n    } else {\n        return {\n            code,\n            details\n        };\n    }\n} //# sourceMappingURL=control-plane-status.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29udHJvbC1wbGFuZS1zdGF0dXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNDQUFzQyxHQUFHRTtBQUN6QyxNQUFNQyxjQUFjQyxtQkFBT0EsQ0FBQyw4RUFBYTtBQUN6QyxNQUFNQyxvQ0FBb0M7SUFDdENGLFlBQVlHLE1BQU0sQ0FBQ0MsRUFBRTtJQUNyQkosWUFBWUcsTUFBTSxDQUFDRSxnQkFBZ0I7SUFDbkNMLFlBQVlHLE1BQU0sQ0FBQ0csU0FBUztJQUM1Qk4sWUFBWUcsTUFBTSxDQUFDSSxjQUFjO0lBQ2pDUCxZQUFZRyxNQUFNLENBQUNLLG1CQUFtQjtJQUN0Q1IsWUFBWUcsTUFBTSxDQUFDTSxPQUFPO0lBQzFCVCxZQUFZRyxNQUFNLENBQUNPLFlBQVk7SUFDL0JWLFlBQVlHLE1BQU0sQ0FBQ1EsU0FBUztDQUMvQjtBQUNELFNBQVNaLCtCQUErQmEsSUFBSSxFQUFFQyxPQUFPO0lBQ2pELElBQUlYLGtDQUFrQ1ksUUFBUSxDQUFDRixPQUFPO1FBQ2xELE9BQU87WUFDSEEsTUFBTVosWUFBWUcsTUFBTSxDQUFDWSxRQUFRO1lBQ2pDRixTQUFTLENBQUMsbUNBQW1DLEVBQUVELEtBQUssQ0FBQyxFQUFFWixZQUFZRyxNQUFNLENBQUNTLEtBQUssQ0FBQyxDQUFDLEVBQUVDLFFBQVEsQ0FBQztRQUNoRztJQUNKLE9BQ0s7UUFDRCxPQUFPO1lBQUVEO1lBQU1DO1FBQVE7SUFDM0I7QUFDSixFQUNBLGdEQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jb250cm9sLXBsYW5lLXN0YXR1cy5qcz83NTQyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIyIGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlc3RyaWN0Q29udHJvbFBsYW5lU3RhdHVzQ29kZSA9IHJlc3RyaWN0Q29udHJvbFBsYW5lU3RhdHVzQ29kZTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgSU5BUFBST1BSSUFURV9DT05UUk9MX1BMQU5FX0NPREVTID0gW1xuICAgIGNvbnN0YW50c18xLlN0YXR1cy5PSyxcbiAgICBjb25zdGFudHNfMS5TdGF0dXMuSU5WQUxJRF9BUkdVTUVOVCxcbiAgICBjb25zdGFudHNfMS5TdGF0dXMuTk9UX0ZPVU5ELFxuICAgIGNvbnN0YW50c18xLlN0YXR1cy5BTFJFQURZX0VYSVNUUyxcbiAgICBjb25zdGFudHNfMS5TdGF0dXMuRkFJTEVEX1BSRUNPTkRJVElPTixcbiAgICBjb25zdGFudHNfMS5TdGF0dXMuQUJPUlRFRCxcbiAgICBjb25zdGFudHNfMS5TdGF0dXMuT1VUX09GX1JBTkdFLFxuICAgIGNvbnN0YW50c18xLlN0YXR1cy5EQVRBX0xPU1MsXG5dO1xuZnVuY3Rpb24gcmVzdHJpY3RDb250cm9sUGxhbmVTdGF0dXNDb2RlKGNvZGUsIGRldGFpbHMpIHtcbiAgICBpZiAoSU5BUFBST1BSSUFURV9DT05UUk9MX1BMQU5FX0NPREVTLmluY2x1ZGVzKGNvZGUpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2RlOiBjb25zdGFudHNfMS5TdGF0dXMuSU5URVJOQUwsXG4gICAgICAgICAgICBkZXRhaWxzOiBgSW52YWxpZCBzdGF0dXMgZnJvbSBjb250cm9sIHBsYW5lOiAke2NvZGV9ICR7Y29uc3RhbnRzXzEuU3RhdHVzW2NvZGVdfSAke2RldGFpbHN9YCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7IGNvZGUsIGRldGFpbHMgfTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250cm9sLXBsYW5lLXN0YXR1cy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZXN0cmljdENvbnRyb2xQbGFuZVN0YXR1c0NvZGUiLCJjb25zdGFudHNfMSIsInJlcXVpcmUiLCJJTkFQUFJPUFJJQVRFX0NPTlRST0xfUExBTkVfQ09ERVMiLCJTdGF0dXMiLCJPSyIsIklOVkFMSURfQVJHVU1FTlQiLCJOT1RfRk9VTkQiLCJBTFJFQURZX0VYSVNUUyIsIkZBSUxFRF9QUkVDT05ESVRJT04iLCJBQk9SVEVEIiwiT1VUX09GX1JBTkdFIiwiREFUQV9MT1NTIiwiY29kZSIsImRldGFpbHMiLCJpbmNsdWRlcyIsIklOVEVSTkFMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/deadline.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.minDeadline = minDeadline;\nexports.getDeadlineTimeoutString = getDeadlineTimeoutString;\nexports.getRelativeTimeout = getRelativeTimeout;\nexports.deadlineToString = deadlineToString;\nexports.formatDateDifference = formatDateDifference;\nfunction minDeadline(...deadlineList) {\n    let minValue = Infinity;\n    for (const deadline of deadlineList){\n        const deadlineMsecs = deadline instanceof Date ? deadline.getTime() : deadline;\n        if (deadlineMsecs < minValue) {\n            minValue = deadlineMsecs;\n        }\n    }\n    return minValue;\n}\nconst units = [\n    [\n        \"m\",\n        1\n    ],\n    [\n        \"S\",\n        1000\n    ],\n    [\n        \"M\",\n        60 * 1000\n    ],\n    [\n        \"H\",\n        60 * 60 * 1000\n    ]\n];\nfunction getDeadlineTimeoutString(deadline) {\n    const now = new Date().getTime();\n    if (deadline instanceof Date) {\n        deadline = deadline.getTime();\n    }\n    const timeoutMs = Math.max(deadline - now, 0);\n    for (const [unit, factor] of units){\n        const amount = timeoutMs / factor;\n        if (amount < 1e8) {\n            return String(Math.ceil(amount)) + unit;\n        }\n    }\n    throw new Error(\"Deadline is too far in the future\");\n}\n/**\n * See https://nodejs.org/api/timers.html#settimeoutcallback-delay-args\n * In particular, \"When delay is larger than 2147483647 or less than 1, the\n * delay will be set to 1. Non-integer delays are truncated to an integer.\"\n * This number of milliseconds is almost 25 days.\n */ const MAX_TIMEOUT_TIME = 2147483647;\n/**\n * Get the timeout value that should be passed to setTimeout now for the timer\n * to end at the deadline. For any deadline before now, the timer should end\n * immediately, represented by a value of 0. For any deadline more than\n * MAX_TIMEOUT_TIME milliseconds in the future, a timer cannot be set that will\n * end at that time, so it is treated as infinitely far in the future.\n * @param deadline\n * @returns\n */ function getRelativeTimeout(deadline) {\n    const deadlineMs = deadline instanceof Date ? deadline.getTime() : deadline;\n    const now = new Date().getTime();\n    const timeout = deadlineMs - now;\n    if (timeout < 0) {\n        return 0;\n    } else if (timeout > MAX_TIMEOUT_TIME) {\n        return Infinity;\n    } else {\n        return timeout;\n    }\n}\nfunction deadlineToString(deadline) {\n    if (deadline instanceof Date) {\n        return deadline.toISOString();\n    } else {\n        const dateDeadline = new Date(deadline);\n        if (Number.isNaN(dateDeadline.getTime())) {\n            return \"\" + deadline;\n        } else {\n            return dateDeadline.toISOString();\n        }\n    }\n}\n/**\n * Calculate the difference between two dates as a number of seconds and format\n * it as a string.\n * @param startDate\n * @param endDate\n * @returns\n */ function formatDateDifference(startDate, endDate) {\n    return ((endDate.getTime() - startDate.getTime()) / 1000).toFixed(3) + \"s\";\n} //# sourceMappingURL=deadline.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZGVhZGxpbmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHRTtBQUN0QkYsZ0NBQWdDLEdBQUdHO0FBQ25DSCwwQkFBMEIsR0FBR0k7QUFDN0JKLHdCQUF3QixHQUFHSztBQUMzQkwsNEJBQTRCLEdBQUdNO0FBQy9CLFNBQVNKLFlBQVksR0FBR0ssWUFBWTtJQUNoQyxJQUFJQyxXQUFXQztJQUNmLEtBQUssTUFBTUMsWUFBWUgsYUFBYztRQUNqQyxNQUFNSSxnQkFBZ0JELG9CQUFvQkUsT0FBT0YsU0FBU0csT0FBTyxLQUFLSDtRQUN0RSxJQUFJQyxnQkFBZ0JILFVBQVU7WUFDMUJBLFdBQVdHO1FBQ2Y7SUFDSjtJQUNBLE9BQU9IO0FBQ1g7QUFDQSxNQUFNTSxRQUFRO0lBQ1Y7UUFBQztRQUFLO0tBQUU7SUFDUjtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSyxLQUFLO0tBQUs7SUFDaEI7UUFBQztRQUFLLEtBQUssS0FBSztLQUFLO0NBQ3hCO0FBQ0QsU0FBU1gseUJBQXlCTyxRQUFRO0lBQ3RDLE1BQU1LLE1BQU0sSUFBSUgsT0FBT0MsT0FBTztJQUM5QixJQUFJSCxvQkFBb0JFLE1BQU07UUFDMUJGLFdBQVdBLFNBQVNHLE9BQU87SUFDL0I7SUFDQSxNQUFNRyxZQUFZQyxLQUFLQyxHQUFHLENBQUNSLFdBQVdLLEtBQUs7SUFDM0MsS0FBSyxNQUFNLENBQUNJLE1BQU1DLE9BQU8sSUFBSU4sTUFBTztRQUNoQyxNQUFNTyxTQUFTTCxZQUFZSTtRQUMzQixJQUFJQyxTQUFTLEtBQUs7WUFDZCxPQUFPQyxPQUFPTCxLQUFLTSxJQUFJLENBQUNGLFdBQVdGO1FBQ3ZDO0lBQ0o7SUFDQSxNQUFNLElBQUlLLE1BQU07QUFDcEI7QUFDQTs7Ozs7Q0FLQyxHQUNELE1BQU1DLG1CQUFtQjtBQUN6Qjs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNyQixtQkFBbUJNLFFBQVE7SUFDaEMsTUFBTWdCLGFBQWFoQixvQkFBb0JFLE9BQU9GLFNBQVNHLE9BQU8sS0FBS0g7SUFDbkUsTUFBTUssTUFBTSxJQUFJSCxPQUFPQyxPQUFPO0lBQzlCLE1BQU1jLFVBQVVELGFBQWFYO0lBQzdCLElBQUlZLFVBQVUsR0FBRztRQUNiLE9BQU87SUFDWCxPQUNLLElBQUlBLFVBQVVGLGtCQUFrQjtRQUNqQyxPQUFPaEI7SUFDWCxPQUNLO1FBQ0QsT0FBT2tCO0lBQ1g7QUFDSjtBQUNBLFNBQVN0QixpQkFBaUJLLFFBQVE7SUFDOUIsSUFBSUEsb0JBQW9CRSxNQUFNO1FBQzFCLE9BQU9GLFNBQVNrQixXQUFXO0lBQy9CLE9BQ0s7UUFDRCxNQUFNQyxlQUFlLElBQUlqQixLQUFLRjtRQUM5QixJQUFJb0IsT0FBT0MsS0FBSyxDQUFDRixhQUFhaEIsT0FBTyxLQUFLO1lBQ3RDLE9BQU8sS0FBS0g7UUFDaEIsT0FDSztZQUNELE9BQU9tQixhQUFhRCxXQUFXO1FBQ25DO0lBQ0o7QUFDSjtBQUNBOzs7Ozs7Q0FNQyxHQUNELFNBQVN0QixxQkFBcUIwQixTQUFTLEVBQUVDLE9BQU87SUFDNUMsT0FBTyxDQUFDLENBQUNBLFFBQVFwQixPQUFPLEtBQUttQixVQUFVbkIsT0FBTyxFQUFDLElBQUssSUFBRyxFQUFHcUIsT0FBTyxDQUFDLEtBQUs7QUFDM0UsRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZGVhZGxpbmUuanM/ZGVjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5taW5EZWFkbGluZSA9IG1pbkRlYWRsaW5lO1xuZXhwb3J0cy5nZXREZWFkbGluZVRpbWVvdXRTdHJpbmcgPSBnZXREZWFkbGluZVRpbWVvdXRTdHJpbmc7XG5leHBvcnRzLmdldFJlbGF0aXZlVGltZW91dCA9IGdldFJlbGF0aXZlVGltZW91dDtcbmV4cG9ydHMuZGVhZGxpbmVUb1N0cmluZyA9IGRlYWRsaW5lVG9TdHJpbmc7XG5leHBvcnRzLmZvcm1hdERhdGVEaWZmZXJlbmNlID0gZm9ybWF0RGF0ZURpZmZlcmVuY2U7XG5mdW5jdGlvbiBtaW5EZWFkbGluZSguLi5kZWFkbGluZUxpc3QpIHtcbiAgICBsZXQgbWluVmFsdWUgPSBJbmZpbml0eTtcbiAgICBmb3IgKGNvbnN0IGRlYWRsaW5lIG9mIGRlYWRsaW5lTGlzdCkge1xuICAgICAgICBjb25zdCBkZWFkbGluZU1zZWNzID0gZGVhZGxpbmUgaW5zdGFuY2VvZiBEYXRlID8gZGVhZGxpbmUuZ2V0VGltZSgpIDogZGVhZGxpbmU7XG4gICAgICAgIGlmIChkZWFkbGluZU1zZWNzIDwgbWluVmFsdWUpIHtcbiAgICAgICAgICAgIG1pblZhbHVlID0gZGVhZGxpbmVNc2VjcztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWluVmFsdWU7XG59XG5jb25zdCB1bml0cyA9IFtcbiAgICBbJ20nLCAxXSxcbiAgICBbJ1MnLCAxMDAwXSxcbiAgICBbJ00nLCA2MCAqIDEwMDBdLFxuICAgIFsnSCcsIDYwICogNjAgKiAxMDAwXSxcbl07XG5mdW5jdGlvbiBnZXREZWFkbGluZVRpbWVvdXRTdHJpbmcoZGVhZGxpbmUpIHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAoZGVhZGxpbmUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIGRlYWRsaW5lID0gZGVhZGxpbmUuZ2V0VGltZSgpO1xuICAgIH1cbiAgICBjb25zdCB0aW1lb3V0TXMgPSBNYXRoLm1heChkZWFkbGluZSAtIG5vdywgMCk7XG4gICAgZm9yIChjb25zdCBbdW5pdCwgZmFjdG9yXSBvZiB1bml0cykge1xuICAgICAgICBjb25zdCBhbW91bnQgPSB0aW1lb3V0TXMgLyBmYWN0b3I7XG4gICAgICAgIGlmIChhbW91bnQgPCAxZTgpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoTWF0aC5jZWlsKGFtb3VudCkpICsgdW5pdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlYWRsaW5lIGlzIHRvbyBmYXIgaW4gdGhlIGZ1dHVyZScpO1xufVxuLyoqXG4gKiBTZWUgaHR0cHM6Ly9ub2RlanMub3JnL2FwaS90aW1lcnMuaHRtbCNzZXR0aW1lb3V0Y2FsbGJhY2stZGVsYXktYXJnc1xuICogSW4gcGFydGljdWxhciwgXCJXaGVuIGRlbGF5IGlzIGxhcmdlciB0aGFuIDIxNDc0ODM2NDcgb3IgbGVzcyB0aGFuIDEsIHRoZVxuICogZGVsYXkgd2lsbCBiZSBzZXQgdG8gMS4gTm9uLWludGVnZXIgZGVsYXlzIGFyZSB0cnVuY2F0ZWQgdG8gYW4gaW50ZWdlci5cIlxuICogVGhpcyBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGlzIGFsbW9zdCAyNSBkYXlzLlxuICovXG5jb25zdCBNQVhfVElNRU9VVF9USU1FID0gMjE0NzQ4MzY0Nztcbi8qKlxuICogR2V0IHRoZSB0aW1lb3V0IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCB0byBzZXRUaW1lb3V0IG5vdyBmb3IgdGhlIHRpbWVyXG4gKiB0byBlbmQgYXQgdGhlIGRlYWRsaW5lLiBGb3IgYW55IGRlYWRsaW5lIGJlZm9yZSBub3csIHRoZSB0aW1lciBzaG91bGQgZW5kXG4gKiBpbW1lZGlhdGVseSwgcmVwcmVzZW50ZWQgYnkgYSB2YWx1ZSBvZiAwLiBGb3IgYW55IGRlYWRsaW5lIG1vcmUgdGhhblxuICogTUFYX1RJTUVPVVRfVElNRSBtaWxsaXNlY29uZHMgaW4gdGhlIGZ1dHVyZSwgYSB0aW1lciBjYW5ub3QgYmUgc2V0IHRoYXQgd2lsbFxuICogZW5kIGF0IHRoYXQgdGltZSwgc28gaXQgaXMgdHJlYXRlZCBhcyBpbmZpbml0ZWx5IGZhciBpbiB0aGUgZnV0dXJlLlxuICogQHBhcmFtIGRlYWRsaW5lXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBnZXRSZWxhdGl2ZVRpbWVvdXQoZGVhZGxpbmUpIHtcbiAgICBjb25zdCBkZWFkbGluZU1zID0gZGVhZGxpbmUgaW5zdGFuY2VvZiBEYXRlID8gZGVhZGxpbmUuZ2V0VGltZSgpIDogZGVhZGxpbmU7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgY29uc3QgdGltZW91dCA9IGRlYWRsaW5lTXMgLSBub3c7XG4gICAgaWYgKHRpbWVvdXQgPCAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aW1lb3V0ID4gTUFYX1RJTUVPVVRfVElNRSkge1xuICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdGltZW91dDtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWFkbGluZVRvU3RyaW5nKGRlYWRsaW5lKSB7XG4gICAgaWYgKGRlYWRsaW5lIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gZGVhZGxpbmUudG9JU09TdHJpbmcoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGRhdGVEZWFkbGluZSA9IG5ldyBEYXRlKGRlYWRsaW5lKTtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihkYXRlRGVhZGxpbmUuZ2V0VGltZSgpKSkge1xuICAgICAgICAgICAgcmV0dXJuICcnICsgZGVhZGxpbmU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZURlYWRsaW5lLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBkYXRlcyBhcyBhIG51bWJlciBvZiBzZWNvbmRzIGFuZCBmb3JtYXRcbiAqIGl0IGFzIGEgc3RyaW5nLlxuICogQHBhcmFtIHN0YXJ0RGF0ZVxuICogQHBhcmFtIGVuZERhdGVcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdERhdGVEaWZmZXJlbmNlKHN0YXJ0RGF0ZSwgZW5kRGF0ZSkge1xuICAgIHJldHVybiAoKGVuZERhdGUuZ2V0VGltZSgpIC0gc3RhcnREYXRlLmdldFRpbWUoKSkgLyAxMDAwKS50b0ZpeGVkKDMpICsgJ3MnO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVhZGxpbmUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWluRGVhZGxpbmUiLCJnZXREZWFkbGluZVRpbWVvdXRTdHJpbmciLCJnZXRSZWxhdGl2ZVRpbWVvdXQiLCJkZWFkbGluZVRvU3RyaW5nIiwiZm9ybWF0RGF0ZURpZmZlcmVuY2UiLCJkZWFkbGluZUxpc3QiLCJtaW5WYWx1ZSIsIkluZmluaXR5IiwiZGVhZGxpbmUiLCJkZWFkbGluZU1zZWNzIiwiRGF0ZSIsImdldFRpbWUiLCJ1bml0cyIsIm5vdyIsInRpbWVvdXRNcyIsIk1hdGgiLCJtYXgiLCJ1bml0IiwiZmFjdG9yIiwiYW1vdW50IiwiU3RyaW5nIiwiY2VpbCIsIkVycm9yIiwiTUFYX1RJTUVPVVRfVElNRSIsImRlYWRsaW5lTXMiLCJ0aW1lb3V0IiwidG9JU09TdHJpbmciLCJkYXRlRGVhZGxpbmUiLCJOdW1iZXIiLCJpc05hTiIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJ0b0ZpeGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/duration.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/duration.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.msToDuration = msToDuration;\nexports.durationToMs = durationToMs;\nexports.isDuration = isDuration;\nexports.parseDuration = parseDuration;\nfunction msToDuration(millis) {\n    return {\n        seconds: millis / 1000 | 0,\n        nanos: millis % 1000 * 1000000 | 0\n    };\n}\nfunction durationToMs(duration) {\n    return duration.seconds * 1000 + duration.nanos / 1000000 | 0;\n}\nfunction isDuration(value) {\n    return typeof value.seconds === \"number\" && typeof value.nanos === \"number\";\n}\nconst durationRegex = /^(\\d+)(?:\\.(\\d+))?s$/;\nfunction parseDuration(value) {\n    const match = value.match(durationRegex);\n    if (!match) {\n        return null;\n    }\n    return {\n        seconds: Number.parseInt(match[1], 10),\n        nanos: match[2] ? Number.parseInt(match[2].padEnd(9, \"0\"), 10) : 0\n    };\n} //# sourceMappingURL=duration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZHVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHRTtBQUN2QkYsb0JBQW9CLEdBQUdHO0FBQ3ZCSCxrQkFBa0IsR0FBR0k7QUFDckJKLHFCQUFxQixHQUFHSztBQUN4QixTQUFTSCxhQUFhSSxNQUFNO0lBQ3hCLE9BQU87UUFDSEMsU0FBUyxTQUFVLE9BQVE7UUFDM0JDLE9BQU8sU0FBVyxPQUFRLFVBQVc7SUFDekM7QUFDSjtBQUNBLFNBQVNMLGFBQWFNLFFBQVE7SUFDMUIsT0FBTyxTQUFVRixPQUFPLEdBQUcsT0FBT0UsU0FBU0QsS0FBSyxHQUFHLFVBQVc7QUFDbEU7QUFDQSxTQUFTSixXQUFXSCxLQUFLO0lBQ3JCLE9BQU8sT0FBT0EsTUFBTU0sT0FBTyxLQUFLLFlBQVksT0FBT04sTUFBTU8sS0FBSyxLQUFLO0FBQ3ZFO0FBQ0EsTUFBTUUsZ0JBQWdCO0FBQ3RCLFNBQVNMLGNBQWNKLEtBQUs7SUFDeEIsTUFBTVUsUUFBUVYsTUFBTVUsS0FBSyxDQUFDRDtJQUMxQixJQUFJLENBQUNDLE9BQU87UUFDUixPQUFPO0lBQ1g7SUFDQSxPQUFPO1FBQ0hKLFNBQVNLLE9BQU9DLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUNuQ0gsT0FBT0csS0FBSyxDQUFDLEVBQUUsR0FBR0MsT0FBT0MsUUFBUSxDQUFDRixLQUFLLENBQUMsRUFBRSxDQUFDRyxNQUFNLENBQUMsR0FBRyxNQUFNLE1BQU07SUFDckU7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9kdXJhdGlvbi5qcz9kMTEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIyIGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1zVG9EdXJhdGlvbiA9IG1zVG9EdXJhdGlvbjtcbmV4cG9ydHMuZHVyYXRpb25Ub01zID0gZHVyYXRpb25Ub01zO1xuZXhwb3J0cy5pc0R1cmF0aW9uID0gaXNEdXJhdGlvbjtcbmV4cG9ydHMucGFyc2VEdXJhdGlvbiA9IHBhcnNlRHVyYXRpb247XG5mdW5jdGlvbiBtc1RvRHVyYXRpb24obWlsbGlzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2Vjb25kczogKG1pbGxpcyAvIDEwMDApIHwgMCxcbiAgICAgICAgbmFub3M6ICgobWlsbGlzICUgMTAwMCkgKiAxMDAwMDAwKSB8IDAsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGR1cmF0aW9uVG9NcyhkdXJhdGlvbikge1xuICAgIHJldHVybiAoZHVyYXRpb24uc2Vjb25kcyAqIDEwMDAgKyBkdXJhdGlvbi5uYW5vcyAvIDEwMDAwMDApIHwgMDtcbn1cbmZ1bmN0aW9uIGlzRHVyYXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlLnNlY29uZHMgPT09ICdudW1iZXInICYmIHR5cGVvZiB2YWx1ZS5uYW5vcyA9PT0gJ251bWJlcic7XG59XG5jb25zdCBkdXJhdGlvblJlZ2V4ID0gL14oXFxkKykoPzpcXC4oXFxkKykpP3MkLztcbmZ1bmN0aW9uIHBhcnNlRHVyYXRpb24odmFsdWUpIHtcbiAgICBjb25zdCBtYXRjaCA9IHZhbHVlLm1hdGNoKGR1cmF0aW9uUmVnZXgpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNlY29uZHM6IE51bWJlci5wYXJzZUludChtYXRjaFsxXSwgMTApLFxuICAgICAgICBuYW5vczogbWF0Y2hbMl0gPyBOdW1iZXIucGFyc2VJbnQobWF0Y2hbMl0ucGFkRW5kKDksICcwJyksIDEwKSA6IDBcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibXNUb0R1cmF0aW9uIiwiZHVyYXRpb25Ub01zIiwiaXNEdXJhdGlvbiIsInBhcnNlRHVyYXRpb24iLCJtaWxsaXMiLCJzZWNvbmRzIiwibmFub3MiLCJkdXJhdGlvbiIsImR1cmF0aW9uUmVnZXgiLCJtYXRjaCIsIk51bWJlciIsInBhcnNlSW50IiwicGFkRW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/duration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/environment.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/environment.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2024 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ var _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GRPC_NODE_USE_ALTERNATIVE_RESOLVER = void 0;\nexports.GRPC_NODE_USE_ALTERNATIVE_RESOLVER = ((_a = process.env.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) !== null && _a !== void 0 ? _a : \"false\") === \"true\"; //# sourceMappingURL=environment.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZW52aXJvbm1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDRCxJQUFJQTtBQUNKQyw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMENBQTBDLEdBQUcsS0FBSztBQUNsREEsMENBQTBDLEdBQUcsQ0FBQyxDQUFDSCxLQUFLTSxRQUFRQyxHQUFHLENBQUNGLGtDQUFrQyxNQUFNLFFBQVFMLE9BQU8sS0FBSyxJQUFJQSxLQUFLLE9BQU0sTUFBTyxRQUNsSix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZW52aXJvbm1lbnQuanM/OGU4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyNCBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xudmFyIF9hO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HUlBDX05PREVfVVNFX0FMVEVSTkFUSVZFX1JFU09MVkVSID0gdm9pZCAwO1xuZXhwb3J0cy5HUlBDX05PREVfVVNFX0FMVEVSTkFUSVZFX1JFU09MVkVSID0gKChfYSA9IHByb2Nlc3MuZW52LkdSUENfTk9ERV9VU0VfQUxURVJOQVRJVkVfUkVTT0xWRVIpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICdmYWxzZScpID09PSAndHJ1ZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnZpcm9ubWVudC5qcy5tYXAiXSwibmFtZXMiOlsiX2EiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkdSUENfTk9ERV9VU0VfQUxURVJOQVRJVkVfUkVTT0xWRVIiLCJwcm9jZXNzIiwiZW52Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/environment.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/error.js":
/*!*******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/error.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getErrorMessage = getErrorMessage;\nexports.getErrorCode = getErrorCode;\nfunction getErrorMessage(error) {\n    if (error instanceof Error) {\n        return error.message;\n    } else {\n        return String(error);\n    }\n}\nfunction getErrorCode(error) {\n    if (typeof error === \"object\" && error !== null && \"code\" in error && typeof error.code === \"number\") {\n        return error.code;\n    } else {\n        return null;\n    }\n} //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHRTtBQUMxQkYsb0JBQW9CLEdBQUdHO0FBQ3ZCLFNBQVNELGdCQUFnQkUsS0FBSztJQUMxQixJQUFJQSxpQkFBaUJDLE9BQU87UUFDeEIsT0FBT0QsTUFBTUUsT0FBTztJQUN4QixPQUNLO1FBQ0QsT0FBT0MsT0FBT0g7SUFDbEI7QUFDSjtBQUNBLFNBQVNELGFBQWFDLEtBQUs7SUFDdkIsSUFBSSxPQUFPQSxVQUFVLFlBQ2pCQSxVQUFVLFFBQ1YsVUFBVUEsU0FDVixPQUFPQSxNQUFNSSxJQUFJLEtBQUssVUFBVTtRQUNoQyxPQUFPSixNQUFNSSxJQUFJO0lBQ3JCLE9BQ0s7UUFDRCxPQUFPO0lBQ1g7QUFDSixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9lcnJvci5qcz9lYzk0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDIyIGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEVycm9yTWVzc2FnZSA9IGdldEVycm9yTWVzc2FnZTtcbmV4cG9ydHMuZ2V0RXJyb3JDb2RlID0gZ2V0RXJyb3JDb2RlO1xuZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gU3RyaW5nKGVycm9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRFcnJvckNvZGUoZXJyb3IpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBlcnJvciAhPT0gbnVsbCAmJlxuICAgICAgICAnY29kZScgaW4gZXJyb3IgJiZcbiAgICAgICAgdHlwZW9mIGVycm9yLmNvZGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBlcnJvci5jb2RlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0RXJyb3JNZXNzYWdlIiwiZ2V0RXJyb3JDb2RlIiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJTdHJpbmciLCJjb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/experimental.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/experimental.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = exports.createCertificateProviderChannelCredentials = exports.FileWatcherCertificateProvider = exports.createCertificateProviderServerCredentials = exports.createServerCredentialsWithInterceptors = exports.BaseSubchannelWrapper = exports.registerAdminService = exports.FilterStackFactory = exports.BaseFilter = exports.PickResultType = exports.QueuePicker = exports.UnavailablePicker = exports.ChildLoadBalancerHandler = exports.EndpointMap = exports.endpointHasAddress = exports.endpointToString = exports.subchannelAddressToString = exports.LeafLoadBalancer = exports.isLoadBalancerNameRegistered = exports.parseLoadBalancingConfig = exports.selectLbConfigFromList = exports.registerLoadBalancerType = exports.createChildChannelControlHelper = exports.BackoffTimeout = exports.parseDuration = exports.durationToMs = exports.splitHostPort = exports.uriToString = exports.createResolver = exports.registerResolver = exports.log = exports.trace = void 0;\nvar logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nObject.defineProperty(exports, \"trace\", ({\n    enumerable: true,\n    get: function() {\n        return logging_1.trace;\n    }\n}));\nObject.defineProperty(exports, \"log\", ({\n    enumerable: true,\n    get: function() {\n        return logging_1.log;\n    }\n}));\nvar resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nObject.defineProperty(exports, \"registerResolver\", ({\n    enumerable: true,\n    get: function() {\n        return resolver_1.registerResolver;\n    }\n}));\nObject.defineProperty(exports, \"createResolver\", ({\n    enumerable: true,\n    get: function() {\n        return resolver_1.createResolver;\n    }\n}));\nvar uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nObject.defineProperty(exports, \"uriToString\", ({\n    enumerable: true,\n    get: function() {\n        return uri_parser_1.uriToString;\n    }\n}));\nObject.defineProperty(exports, \"splitHostPort\", ({\n    enumerable: true,\n    get: function() {\n        return uri_parser_1.splitHostPort;\n    }\n}));\nvar duration_1 = __webpack_require__(/*! ./duration */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/duration.js\");\nObject.defineProperty(exports, \"durationToMs\", ({\n    enumerable: true,\n    get: function() {\n        return duration_1.durationToMs;\n    }\n}));\nObject.defineProperty(exports, \"parseDuration\", ({\n    enumerable: true,\n    get: function() {\n        return duration_1.parseDuration;\n    }\n}));\nvar backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nObject.defineProperty(exports, \"BackoffTimeout\", ({\n    enumerable: true,\n    get: function() {\n        return backoff_timeout_1.BackoffTimeout;\n    }\n}));\nvar load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nObject.defineProperty(exports, \"createChildChannelControlHelper\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_1.createChildChannelControlHelper;\n    }\n}));\nObject.defineProperty(exports, \"registerLoadBalancerType\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_1.registerLoadBalancerType;\n    }\n}));\nObject.defineProperty(exports, \"selectLbConfigFromList\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_1.selectLbConfigFromList;\n    }\n}));\nObject.defineProperty(exports, \"parseLoadBalancingConfig\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_1.parseLoadBalancingConfig;\n    }\n}));\nObject.defineProperty(exports, \"isLoadBalancerNameRegistered\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_1.isLoadBalancerNameRegistered;\n    }\n}));\nvar load_balancer_pick_first_1 = __webpack_require__(/*! ./load-balancer-pick-first */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\");\nObject.defineProperty(exports, \"LeafLoadBalancer\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_pick_first_1.LeafLoadBalancer;\n    }\n}));\nvar subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nObject.defineProperty(exports, \"subchannelAddressToString\", ({\n    enumerable: true,\n    get: function() {\n        return subchannel_address_1.subchannelAddressToString;\n    }\n}));\nObject.defineProperty(exports, \"endpointToString\", ({\n    enumerable: true,\n    get: function() {\n        return subchannel_address_1.endpointToString;\n    }\n}));\nObject.defineProperty(exports, \"endpointHasAddress\", ({\n    enumerable: true,\n    get: function() {\n        return subchannel_address_1.endpointHasAddress;\n    }\n}));\nObject.defineProperty(exports, \"EndpointMap\", ({\n    enumerable: true,\n    get: function() {\n        return subchannel_address_1.EndpointMap;\n    }\n}));\nvar load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\nObject.defineProperty(exports, \"ChildLoadBalancerHandler\", ({\n    enumerable: true,\n    get: function() {\n        return load_balancer_child_handler_1.ChildLoadBalancerHandler;\n    }\n}));\nvar picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nObject.defineProperty(exports, \"UnavailablePicker\", ({\n    enumerable: true,\n    get: function() {\n        return picker_1.UnavailablePicker;\n    }\n}));\nObject.defineProperty(exports, \"QueuePicker\", ({\n    enumerable: true,\n    get: function() {\n        return picker_1.QueuePicker;\n    }\n}));\nObject.defineProperty(exports, \"PickResultType\", ({\n    enumerable: true,\n    get: function() {\n        return picker_1.PickResultType;\n    }\n}));\nvar filter_1 = __webpack_require__(/*! ./filter */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\nObject.defineProperty(exports, \"BaseFilter\", ({\n    enumerable: true,\n    get: function() {\n        return filter_1.BaseFilter;\n    }\n}));\nvar filter_stack_1 = __webpack_require__(/*! ./filter-stack */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\");\nObject.defineProperty(exports, \"FilterStackFactory\", ({\n    enumerable: true,\n    get: function() {\n        return filter_stack_1.FilterStackFactory;\n    }\n}));\nvar admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\nObject.defineProperty(exports, \"registerAdminService\", ({\n    enumerable: true,\n    get: function() {\n        return admin_1.registerAdminService;\n    }\n}));\nvar subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\nObject.defineProperty(exports, \"BaseSubchannelWrapper\", ({\n    enumerable: true,\n    get: function() {\n        return subchannel_interface_1.BaseSubchannelWrapper;\n    }\n}));\nvar server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\nObject.defineProperty(exports, \"createServerCredentialsWithInterceptors\", ({\n    enumerable: true,\n    get: function() {\n        return server_credentials_1.createServerCredentialsWithInterceptors;\n    }\n}));\nObject.defineProperty(exports, \"createCertificateProviderServerCredentials\", ({\n    enumerable: true,\n    get: function() {\n        return server_credentials_1.createCertificateProviderServerCredentials;\n    }\n}));\nvar certificate_provider_1 = __webpack_require__(/*! ./certificate-provider */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/certificate-provider.js\");\nObject.defineProperty(exports, \"FileWatcherCertificateProvider\", ({\n    enumerable: true,\n    get: function() {\n        return certificate_provider_1.FileWatcherCertificateProvider;\n    }\n}));\nvar channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\nObject.defineProperty(exports, \"createCertificateProviderChannelCredentials\", ({\n    enumerable: true,\n    get: function() {\n        return channel_credentials_1.createCertificateProviderChannelCredentials;\n    }\n}));\nvar internal_channel_1 = __webpack_require__(/*! ./internal-channel */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/internal-channel.js\");\nObject.defineProperty(exports, \"SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX\", ({\n    enumerable: true,\n    get: function() {\n        return internal_channel_1.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX;\n    }\n})); //# sourceMappingURL=experimental.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/experimental.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/filter-stack.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FilterStackFactory = exports.FilterStack = void 0;\nclass FilterStack {\n    constructor(filters){\n        this.filters = filters;\n    }\n    sendMetadata(metadata) {\n        let result = metadata;\n        for(let i = 0; i < this.filters.length; i++){\n            result = this.filters[i].sendMetadata(result);\n        }\n        return result;\n    }\n    receiveMetadata(metadata) {\n        let result = metadata;\n        for(let i = this.filters.length - 1; i >= 0; i--){\n            result = this.filters[i].receiveMetadata(result);\n        }\n        return result;\n    }\n    sendMessage(message) {\n        let result = message;\n        for(let i = 0; i < this.filters.length; i++){\n            result = this.filters[i].sendMessage(result);\n        }\n        return result;\n    }\n    receiveMessage(message) {\n        let result = message;\n        for(let i = this.filters.length - 1; i >= 0; i--){\n            result = this.filters[i].receiveMessage(result);\n        }\n        return result;\n    }\n    receiveTrailers(status) {\n        let result = status;\n        for(let i = this.filters.length - 1; i >= 0; i--){\n            result = this.filters[i].receiveTrailers(result);\n        }\n        return result;\n    }\n    push(filters) {\n        this.filters.unshift(...filters);\n    }\n    getFilters() {\n        return this.filters;\n    }\n}\nexports.FilterStack = FilterStack;\nclass FilterStackFactory {\n    constructor(factories){\n        this.factories = factories;\n    }\n    push(filterFactories) {\n        this.factories.unshift(...filterFactories);\n    }\n    clone() {\n        return new FilterStackFactory([\n            ...this.factories\n        ]);\n    }\n    createFilter() {\n        return new FilterStack(this.factories.map((factory)=>factory.createFilter()));\n    }\n}\nexports.FilterStackFactory = FilterStackFactory; //# sourceMappingURL=filter-stack.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLXN0YWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBR0EsbUJBQW1CLEdBQUcsS0FBSztBQUN4RCxNQUFNRztJQUNGQyxZQUFZQyxPQUFPLENBQUU7UUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0lBQ25CO0lBQ0FDLGFBQWFDLFFBQVEsRUFBRTtRQUNuQixJQUFJQyxTQUFTRDtRQUNiLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxNQUFNLEVBQUVELElBQUs7WUFDMUNELFNBQVMsSUFBSSxDQUFDSCxPQUFPLENBQUNJLEVBQUUsQ0FBQ0gsWUFBWSxDQUFDRTtRQUMxQztRQUNBLE9BQU9BO0lBQ1g7SUFDQUcsZ0JBQWdCSixRQUFRLEVBQUU7UUFDdEIsSUFBSUMsU0FBU0Q7UUFDYixJQUFLLElBQUlFLElBQUksSUFBSSxDQUFDSixPQUFPLENBQUNLLE1BQU0sR0FBRyxHQUFHRCxLQUFLLEdBQUdBLElBQUs7WUFDL0NELFNBQVMsSUFBSSxDQUFDSCxPQUFPLENBQUNJLEVBQUUsQ0FBQ0UsZUFBZSxDQUFDSDtRQUM3QztRQUNBLE9BQU9BO0lBQ1g7SUFDQUksWUFBWUMsT0FBTyxFQUFFO1FBQ2pCLElBQUlMLFNBQVNLO1FBQ2IsSUFBSyxJQUFJSixJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDSixPQUFPLENBQUNLLE1BQU0sRUFBRUQsSUFBSztZQUMxQ0QsU0FBUyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksRUFBRSxDQUFDRyxXQUFXLENBQUNKO1FBQ3pDO1FBQ0EsT0FBT0E7SUFDWDtJQUNBTSxlQUFlRCxPQUFPLEVBQUU7UUFDcEIsSUFBSUwsU0FBU0s7UUFDYixJQUFLLElBQUlKLElBQUksSUFBSSxDQUFDSixPQUFPLENBQUNLLE1BQU0sR0FBRyxHQUFHRCxLQUFLLEdBQUdBLElBQUs7WUFDL0NELFNBQVMsSUFBSSxDQUFDSCxPQUFPLENBQUNJLEVBQUUsQ0FBQ0ssY0FBYyxDQUFDTjtRQUM1QztRQUNBLE9BQU9BO0lBQ1g7SUFDQU8sZ0JBQWdCQyxNQUFNLEVBQUU7UUFDcEIsSUFBSVIsU0FBU1E7UUFDYixJQUFLLElBQUlQLElBQUksSUFBSSxDQUFDSixPQUFPLENBQUNLLE1BQU0sR0FBRyxHQUFHRCxLQUFLLEdBQUdBLElBQUs7WUFDL0NELFNBQVMsSUFBSSxDQUFDSCxPQUFPLENBQUNJLEVBQUUsQ0FBQ00sZUFBZSxDQUFDUDtRQUM3QztRQUNBLE9BQU9BO0lBQ1g7SUFDQVMsS0FBS1osT0FBTyxFQUFFO1FBQ1YsSUFBSSxDQUFDQSxPQUFPLENBQUNhLE9BQU8sSUFBSWI7SUFDNUI7SUFDQWMsYUFBYTtRQUNULE9BQU8sSUFBSSxDQUFDZCxPQUFPO0lBQ3ZCO0FBQ0o7QUFDQUwsbUJBQW1CLEdBQUdHO0FBQ3RCLE1BQU1EO0lBQ0ZFLFlBQVlnQixTQUFTLENBQUU7UUFDbkIsSUFBSSxDQUFDQSxTQUFTLEdBQUdBO0lBQ3JCO0lBQ0FILEtBQUtJLGVBQWUsRUFBRTtRQUNsQixJQUFJLENBQUNELFNBQVMsQ0FBQ0YsT0FBTyxJQUFJRztJQUM5QjtJQUNBQyxRQUFRO1FBQ0osT0FBTyxJQUFJcEIsbUJBQW1CO2VBQUksSUFBSSxDQUFDa0IsU0FBUztTQUFDO0lBQ3JEO0lBQ0FHLGVBQWU7UUFDWCxPQUFPLElBQUlwQixZQUFZLElBQUksQ0FBQ2lCLFNBQVMsQ0FBQ0ksR0FBRyxDQUFDQyxDQUFBQSxVQUFXQSxRQUFRRixZQUFZO0lBQzdFO0FBQ0o7QUFDQXZCLDBCQUEwQixHQUFHRSxvQkFDN0Isd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2ZpbHRlci1zdGFjay5qcz83NTMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbHRlclN0YWNrRmFjdG9yeSA9IGV4cG9ydHMuRmlsdGVyU3RhY2sgPSB2b2lkIDA7XG5jbGFzcyBGaWx0ZXJTdGFjayB7XG4gICAgY29uc3RydWN0b3IoZmlsdGVycykge1xuICAgICAgICB0aGlzLmZpbHRlcnMgPSBmaWx0ZXJzO1xuICAgIH1cbiAgICBzZW5kTWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG1ldGFkYXRhO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5maWx0ZXJzW2ldLnNlbmRNZXRhZGF0YShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJlY2VpdmVNZXRhZGF0YShtZXRhZGF0YSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbWV0YWRhdGE7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZmlsdGVyc1tpXS5yZWNlaXZlTWV0YWRhdGEocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBzZW5kTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBtZXNzYWdlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5maWx0ZXJzW2ldLnNlbmRNZXNzYWdlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmVjZWl2ZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbWVzc2FnZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuZmlsdGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5maWx0ZXJzW2ldLnJlY2VpdmVNZXNzYWdlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmVjZWl2ZVRyYWlsZXJzKHN0YXR1cykge1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3RhdHVzO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbHRlcnNbaV0ucmVjZWl2ZVRyYWlsZXJzKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcHVzaChmaWx0ZXJzKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycy51bnNoaWZ0KC4uLmZpbHRlcnMpO1xuICAgIH1cbiAgICBnZXRGaWx0ZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJzO1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsdGVyU3RhY2sgPSBGaWx0ZXJTdGFjaztcbmNsYXNzIEZpbHRlclN0YWNrRmFjdG9yeSB7XG4gICAgY29uc3RydWN0b3IoZmFjdG9yaWVzKSB7XG4gICAgICAgIHRoaXMuZmFjdG9yaWVzID0gZmFjdG9yaWVzO1xuICAgIH1cbiAgICBwdXNoKGZpbHRlckZhY3Rvcmllcykge1xuICAgICAgICB0aGlzLmZhY3Rvcmllcy51bnNoaWZ0KC4uLmZpbHRlckZhY3Rvcmllcyk7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IEZpbHRlclN0YWNrRmFjdG9yeShbLi4udGhpcy5mYWN0b3JpZXNdKTtcbiAgICB9XG4gICAgY3JlYXRlRmlsdGVyKCkge1xuICAgICAgICByZXR1cm4gbmV3IEZpbHRlclN0YWNrKHRoaXMuZmFjdG9yaWVzLm1hcChmYWN0b3J5ID0+IGZhY3RvcnkuY3JlYXRlRmlsdGVyKCkpKTtcbiAgICB9XG59XG5leHBvcnRzLkZpbHRlclN0YWNrRmFjdG9yeSA9IEZpbHRlclN0YWNrRmFjdG9yeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci1zdGFjay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJGaWx0ZXJTdGFja0ZhY3RvcnkiLCJGaWx0ZXJTdGFjayIsImNvbnN0cnVjdG9yIiwiZmlsdGVycyIsInNlbmRNZXRhZGF0YSIsIm1ldGFkYXRhIiwicmVzdWx0IiwiaSIsImxlbmd0aCIsInJlY2VpdmVNZXRhZGF0YSIsInNlbmRNZXNzYWdlIiwibWVzc2FnZSIsInJlY2VpdmVNZXNzYWdlIiwicmVjZWl2ZVRyYWlsZXJzIiwic3RhdHVzIiwicHVzaCIsInVuc2hpZnQiLCJnZXRGaWx0ZXJzIiwiZmFjdG9yaWVzIiwiZmlsdGVyRmFjdG9yaWVzIiwiY2xvbmUiLCJjcmVhdGVGaWx0ZXIiLCJtYXAiLCJmYWN0b3J5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/filter.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/filter.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseFilter = void 0;\nclass BaseFilter {\n    async sendMetadata(metadata) {\n        return metadata;\n    }\n    receiveMetadata(metadata) {\n        return metadata;\n    }\n    async sendMessage(message) {\n        return message;\n    }\n    async receiveMessage(message) {\n        return message;\n    }\n    receiveTrailers(status) {\n        return status;\n    }\n}\nexports.BaseFilter = BaseFilter; //# sourceMappingURL=filter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1FO0lBQ0YsTUFBTUMsYUFBYUMsUUFBUSxFQUFFO1FBQ3pCLE9BQU9BO0lBQ1g7SUFDQUMsZ0JBQWdCRCxRQUFRLEVBQUU7UUFDdEIsT0FBT0E7SUFDWDtJQUNBLE1BQU1FLFlBQVlDLE9BQU8sRUFBRTtRQUN2QixPQUFPQTtJQUNYO0lBQ0EsTUFBTUMsZUFBZUQsT0FBTyxFQUFFO1FBQzFCLE9BQU9BO0lBQ1g7SUFDQUUsZ0JBQWdCQyxNQUFNLEVBQUU7UUFDcEIsT0FBT0E7SUFDWDtBQUNKO0FBQ0FWLGtCQUFrQixHQUFHRSxZQUNyQixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLmpzPzBmMzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFzZUZpbHRlciA9IHZvaWQgMDtcbmNsYXNzIEJhc2VGaWx0ZXIge1xuICAgIGFzeW5jIHNlbmRNZXRhZGF0YShtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gbWV0YWRhdGE7XG4gICAgfVxuICAgIHJlY2VpdmVNZXRhZGF0YShtZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gbWV0YWRhdGE7XG4gICAgfVxuICAgIGFzeW5jIHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIGFzeW5jIHJlY2VpdmVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIHJlY2VpdmVUcmFpbGVycyhzdGF0dXMpIHtcbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9XG59XG5leHBvcnRzLkJhc2VGaWx0ZXIgPSBCYXNlRmlsdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJhc2VGaWx0ZXIiLCJzZW5kTWV0YWRhdGEiLCJtZXRhZGF0YSIsInJlY2VpdmVNZXRhZGF0YSIsInNlbmRNZXNzYWdlIiwibWVzc2FnZSIsInJlY2VpdmVNZXNzYWdlIiwicmVjZWl2ZVRyYWlsZXJzIiwic3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/filter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/http_proxy.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseCIDR = parseCIDR;\nexports.mapProxyName = mapProxyName;\nexports.getProxiedConnection = getProxiedConnection;\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst resolver_dns_1 = __webpack_require__(/*! ./resolver-dns */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js\");\nconst TRACER_NAME = \"proxy\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nfunction getProxyInfo() {\n    let proxyEnv = \"\";\n    let envVar = \"\";\n    /* Prefer using 'grpc_proxy'. Fallback on 'http_proxy' if it is not set.\n     * Also prefer using 'https_proxy' with fallback on 'http_proxy'. The\n     * fallback behavior can be removed if there's a demand for it.\n     */ if (process.env.grpc_proxy) {\n        envVar = \"grpc_proxy\";\n        proxyEnv = process.env.grpc_proxy;\n    } else if (process.env.https_proxy) {\n        envVar = \"https_proxy\";\n        proxyEnv = process.env.https_proxy;\n    } else if (process.env.http_proxy) {\n        envVar = \"http_proxy\";\n        proxyEnv = process.env.http_proxy;\n    } else {\n        return {};\n    }\n    let proxyUrl;\n    try {\n        proxyUrl = new url_1.URL(proxyEnv);\n    } catch (e) {\n        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `cannot parse value of \"${envVar}\" env var`);\n        return {};\n    }\n    if (proxyUrl.protocol !== \"http:\") {\n        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `\"${proxyUrl.protocol}\" scheme not supported in proxy URI`);\n        return {};\n    }\n    let userCred = null;\n    if (proxyUrl.username) {\n        if (proxyUrl.password) {\n            (0, logging_1.log)(constants_1.LogVerbosity.INFO, \"userinfo found in proxy URI\");\n            userCred = decodeURIComponent(`${proxyUrl.username}:${proxyUrl.password}`);\n        } else {\n            userCred = proxyUrl.username;\n        }\n    }\n    const hostname = proxyUrl.hostname;\n    let port = proxyUrl.port;\n    /* The proxy URL uses the scheme \"http:\", which has a default port number of\n     * 80. We need to set that explicitly here if it is omitted because otherwise\n     * it will use gRPC's default port 443. */ if (port === \"\") {\n        port = \"80\";\n    }\n    const result = {\n        address: `${hostname}:${port}`\n    };\n    if (userCred) {\n        result.creds = userCred;\n    }\n    trace(\"Proxy server \" + result.address + \" set by environment variable \" + envVar);\n    return result;\n}\nfunction getNoProxyHostList() {\n    /* Prefer using 'no_grpc_proxy'. Fallback on 'no_proxy' if it is not set. */ let noProxyStr = process.env.no_grpc_proxy;\n    let envVar = \"no_grpc_proxy\";\n    if (!noProxyStr) {\n        noProxyStr = process.env.no_proxy;\n        envVar = \"no_proxy\";\n    }\n    if (noProxyStr) {\n        trace(\"No proxy server list set by environment variable \" + envVar);\n        return noProxyStr.split(\",\");\n    } else {\n        return [];\n    }\n}\n/*\n * The groups correspond to CIDR parts as follows:\n * 1. ip\n * 2. prefixLength\n */ function parseCIDR(cidrString) {\n    const splitRange = cidrString.split(\"/\");\n    if (splitRange.length !== 2) {\n        return null;\n    }\n    const prefixLength = parseInt(splitRange[1], 10);\n    if (!(0, net_1.isIPv4)(splitRange[0]) || Number.isNaN(prefixLength) || prefixLength < 0 || prefixLength > 32) {\n        return null;\n    }\n    return {\n        ip: ipToInt(splitRange[0]),\n        prefixLength: prefixLength\n    };\n}\nfunction ipToInt(ip) {\n    return ip.split(\".\").reduce((acc, octet)=>(acc << 8) + parseInt(octet, 10), 0);\n}\nfunction isIpInCIDR(cidr, serverHost) {\n    const ip = cidr.ip;\n    const mask = -1 << 32 - cidr.prefixLength;\n    const hostIP = ipToInt(serverHost);\n    return (hostIP & mask) === (ip & mask);\n}\nfunction hostMatchesNoProxyList(serverHost) {\n    for (const host of getNoProxyHostList()){\n        const parsedCIDR = parseCIDR(host);\n        // host is a CIDR and serverHost is an IP address\n        if ((0, net_1.isIPv4)(serverHost) && parsedCIDR && isIpInCIDR(parsedCIDR, serverHost)) {\n            return true;\n        } else if (serverHost.endsWith(host)) {\n            // host is a single IP or a domain name suffix\n            return true;\n        }\n    }\n    return false;\n}\nfunction mapProxyName(target, options) {\n    var _a;\n    const noProxyResult = {\n        target: target,\n        extraOptions: {}\n    };\n    if (((_a = options[\"grpc.enable_http_proxy\"]) !== null && _a !== void 0 ? _a : 1) === 0) {\n        return noProxyResult;\n    }\n    if (target.scheme === \"unix\") {\n        return noProxyResult;\n    }\n    const proxyInfo = getProxyInfo();\n    if (!proxyInfo.address) {\n        return noProxyResult;\n    }\n    const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\n    if (!hostPort) {\n        return noProxyResult;\n    }\n    const serverHost = hostPort.host;\n    if (hostMatchesNoProxyList(serverHost)) {\n        trace(\"Not using proxy for target in no_proxy list: \" + (0, uri_parser_1.uriToString)(target));\n        return noProxyResult;\n    }\n    const extraOptions = {\n        \"grpc.http_connect_target\": (0, uri_parser_1.uriToString)(target)\n    };\n    if (proxyInfo.creds) {\n        extraOptions[\"grpc.http_connect_creds\"] = proxyInfo.creds;\n    }\n    return {\n        target: {\n            scheme: \"dns\",\n            path: proxyInfo.address\n        },\n        extraOptions: extraOptions\n    };\n}\nfunction getProxiedConnection(address, channelOptions) {\n    var _a;\n    if (!(\"grpc.http_connect_target\" in channelOptions)) {\n        return Promise.resolve(null);\n    }\n    const realTarget = channelOptions[\"grpc.http_connect_target\"];\n    const parsedTarget = (0, uri_parser_1.parseUri)(realTarget);\n    if (parsedTarget === null) {\n        return Promise.resolve(null);\n    }\n    const splitHostPost = (0, uri_parser_1.splitHostPort)(parsedTarget.path);\n    if (splitHostPost === null) {\n        return Promise.resolve(null);\n    }\n    const hostPort = `${splitHostPost.host}:${(_a = splitHostPost.port) !== null && _a !== void 0 ? _a : resolver_dns_1.DEFAULT_PORT}`;\n    const options = {\n        method: \"CONNECT\",\n        path: hostPort\n    };\n    const headers = {\n        Host: hostPort\n    };\n    // Connect to the subchannel address as a proxy\n    if ((0, subchannel_address_1.isTcpSubchannelAddress)(address)) {\n        options.host = address.host;\n        options.port = address.port;\n    } else {\n        options.socketPath = address.path;\n    }\n    if (\"grpc.http_connect_creds\" in channelOptions) {\n        headers[\"Proxy-Authorization\"] = \"Basic \" + Buffer.from(channelOptions[\"grpc.http_connect_creds\"]).toString(\"base64\");\n    }\n    options.headers = headers;\n    const proxyAddressString = (0, subchannel_address_1.subchannelAddressToString)(address);\n    trace(\"Using proxy \" + proxyAddressString + \" to connect to \" + options.path);\n    return new Promise((resolve, reject)=>{\n        const request = http.request(options);\n        request.once(\"connect\", (res, socket, head)=>{\n            request.removeAllListeners();\n            socket.removeAllListeners();\n            if (res.statusCode === 200) {\n                trace(\"Successfully connected to \" + options.path + \" through proxy \" + proxyAddressString);\n                // The HTTP client may have already read a few bytes of the proxied\n                // connection. If that's the case, put them back into the socket.\n                // See https://github.com/grpc/grpc-node/issues/2744.\n                if (head.length > 0) {\n                    socket.unshift(head);\n                }\n                trace(\"Successfully established a plaintext connection to \" + options.path + \" through proxy \" + proxyAddressString);\n                resolve(socket);\n            } else {\n                (0, logging_1.log)(constants_1.LogVerbosity.ERROR, \"Failed to connect to \" + options.path + \" through proxy \" + proxyAddressString + \" with status \" + res.statusCode);\n                reject();\n            }\n        });\n        request.once(\"error\", (err)=>{\n            request.removeAllListeners();\n            (0, logging_1.log)(constants_1.LogVerbosity.ERROR, \"Failed to connect to proxy \" + proxyAddressString + \" with error \" + err.message);\n            reject();\n        });\n        request.end();\n    });\n} //# sourceMappingURL=http_proxy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvaHR0cF9wcm94eS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7Ozs7Q0FlQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdFO0FBQ3BCRixvQkFBb0IsR0FBR0c7QUFDdkJILDRCQUE0QixHQUFHSTtBQUMvQixNQUFNQyxZQUFZQyxtQkFBT0EsQ0FBQywwRUFBVztBQUNyQyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQyw4RUFBYTtBQUN6QyxNQUFNRSxRQUFRRixtQkFBT0EsQ0FBQyxnQkFBSztBQUMzQixNQUFNRyxPQUFPSCxtQkFBT0EsQ0FBQyxrQkFBTTtBQUMzQixNQUFNSSxVQUFVSixtQkFBT0EsQ0FBQywwRUFBVztBQUNuQyxNQUFNSyx1QkFBdUJMLG1CQUFPQSxDQUFDLGdHQUFzQjtBQUMzRCxNQUFNTSxlQUFlTixtQkFBT0EsQ0FBQyxnRkFBYztBQUMzQyxNQUFNTyxRQUFRUCxtQkFBT0EsQ0FBQyxnQkFBSztBQUMzQixNQUFNUSxpQkFBaUJSLG1CQUFPQSxDQUFDLG9GQUFnQjtBQUMvQyxNQUFNUyxjQUFjO0FBQ3BCLFNBQVNDLE1BQU1DLElBQUk7SUFDZlAsUUFBUU0sS0FBSyxDQUFDVCxZQUFZVyxZQUFZLENBQUNDLEtBQUssRUFBRUosYUFBYUU7QUFDL0Q7QUFDQSxTQUFTRztJQUNMLElBQUlDLFdBQVc7SUFDZixJQUFJQyxTQUFTO0lBQ2I7OztLQUdDLEdBQ0QsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQyxVQUFVLEVBQUU7UUFDeEJILFNBQVM7UUFDVEQsV0FBV0UsUUFBUUMsR0FBRyxDQUFDQyxVQUFVO0lBQ3JDLE9BQ0ssSUFBSUYsUUFBUUMsR0FBRyxDQUFDRSxXQUFXLEVBQUU7UUFDOUJKLFNBQVM7UUFDVEQsV0FBV0UsUUFBUUMsR0FBRyxDQUFDRSxXQUFXO0lBQ3RDLE9BQ0ssSUFBSUgs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SUksVUFBVTtnQkFDbEJQO1lBQ0o7UUFDSjtRQUNBQyxRQUFRQyxJQUFJLENBQUMsU0FBU08sQ0FBQUE7WUFDbEJSLFFBQVFLLGtCQUFrQjtZQUN6QixJQUFHckcsVUFBVTBCLEdBQUcsRUFBRXhCLFlBQVlXLFlBQVksQ0FBQ2MsS0FBSyxFQUFFLGdDQUMvQ2tFLHFCQUNBLGlCQUNBVyxJQUFJQyxPQUFPO1lBQ2ZWO1FBQ0o7UUFDQUMsUUFBUVUsR0FBRztJQUNmO0FBQ0osRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvaHR0cF9wcm94eS5qcz8yOGUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlQ0lEUiA9IHBhcnNlQ0lEUjtcbmV4cG9ydHMubWFwUHJveHlOYW1lID0gbWFwUHJveHlOYW1lO1xuZXhwb3J0cy5nZXRQcm94aWVkQ29ubmVjdGlvbiA9IGdldFByb3hpZWRDb25uZWN0aW9uO1xuY29uc3QgbG9nZ2luZ18xID0gcmVxdWlyZShcIi4vbG9nZ2luZ1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgbmV0XzEgPSByZXF1aXJlKFwibmV0XCIpO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xuY29uc3QgbG9nZ2luZyA9IHJlcXVpcmUoXCIuL2xvZ2dpbmdcIik7XG5jb25zdCBzdWJjaGFubmVsX2FkZHJlc3NfMSA9IHJlcXVpcmUoXCIuL3N1YmNoYW5uZWwtYWRkcmVzc1wiKTtcbmNvbnN0IHVyaV9wYXJzZXJfMSA9IHJlcXVpcmUoXCIuL3VyaS1wYXJzZXJcIik7XG5jb25zdCB1cmxfMSA9IHJlcXVpcmUoXCJ1cmxcIik7XG5jb25zdCByZXNvbHZlcl9kbnNfMSA9IHJlcXVpcmUoXCIuL3Jlc29sdmVyLWRuc1wiKTtcbmNvbnN0IFRSQUNFUl9OQU1FID0gJ3Byb3h5JztcbmZ1bmN0aW9uIHRyYWNlKHRleHQpIHtcbiAgICBsb2dnaW5nLnRyYWNlKGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5ERUJVRywgVFJBQ0VSX05BTUUsIHRleHQpO1xufVxuZnVuY3Rpb24gZ2V0UHJveHlJbmZvKCkge1xuICAgIGxldCBwcm94eUVudiA9ICcnO1xuICAgIGxldCBlbnZWYXIgPSAnJztcbiAgICAvKiBQcmVmZXIgdXNpbmcgJ2dycGNfcHJveHknLiBGYWxsYmFjayBvbiAnaHR0cF9wcm94eScgaWYgaXQgaXMgbm90IHNldC5cbiAgICAgKiBBbHNvIHByZWZlciB1c2luZyAnaHR0cHNfcHJveHknIHdpdGggZmFsbGJhY2sgb24gJ2h0dHBfcHJveHknLiBUaGVcbiAgICAgKiBmYWxsYmFjayBiZWhhdmlvciBjYW4gYmUgcmVtb3ZlZCBpZiB0aGVyZSdzIGEgZGVtYW5kIGZvciBpdC5cbiAgICAgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuZ3JwY19wcm94eSkge1xuICAgICAgICBlbnZWYXIgPSAnZ3JwY19wcm94eSc7XG4gICAgICAgIHByb3h5RW52ID0gcHJvY2Vzcy5lbnYuZ3JwY19wcm94eTtcbiAgICB9XG4gICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuaHR0cHNfcHJveHkpIHtcbiAgICAgICAgZW52VmFyID0gJ2h0dHBzX3Byb3h5JztcbiAgICAgICAgcHJveHlFbnYgPSBwcm9jZXNzLmVudi5odHRwc19wcm94eTtcbiAgICB9XG4gICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuaHR0cF9wcm94eSkge1xuICAgICAgICBlbnZWYXIgPSAnaHR0cF9wcm94eSc7XG4gICAgICAgIHByb3h5RW52ID0gcHJvY2Vzcy5lbnYuaHR0cF9wcm94eTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgbGV0IHByb3h5VXJsO1xuICAgIHRyeSB7XG4gICAgICAgIHByb3h5VXJsID0gbmV3IHVybF8xLlVSTChwcm94eUVudik7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgICgwLCBsb2dnaW5nXzEubG9nKShjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuRVJST1IsIGBjYW5ub3QgcGFyc2UgdmFsdWUgb2YgXCIke2VudlZhcn1cIiBlbnYgdmFyYCk7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKHByb3h5VXJsLnByb3RvY29sICE9PSAnaHR0cDonKSB7XG4gICAgICAgICgwLCBsb2dnaW5nXzEubG9nKShjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuRVJST1IsIGBcIiR7cHJveHlVcmwucHJvdG9jb2x9XCIgc2NoZW1lIG5vdCBzdXBwb3J0ZWQgaW4gcHJveHkgVVJJYCk7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgbGV0IHVzZXJDcmVkID0gbnVsbDtcbiAgICBpZiAocHJveHlVcmwudXNlcm5hbWUpIHtcbiAgICAgICAgaWYgKHByb3h5VXJsLnBhc3N3b3JkKSB7XG4gICAgICAgICAgICAoMCwgbG9nZ2luZ18xLmxvZykoY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LklORk8sICd1c2VyaW5mbyBmb3VuZCBpbiBwcm94eSBVUkknKTtcbiAgICAgICAgICAgIHVzZXJDcmVkID0gZGVjb2RlVVJJQ29tcG9uZW50KGAke3Byb3h5VXJsLnVzZXJuYW1lfToke3Byb3h5VXJsLnBhc3N3b3JkfWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdXNlckNyZWQgPSBwcm94eVVybC51c2VybmFtZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBob3N0bmFtZSA9IHByb3h5VXJsLmhvc3RuYW1lO1xuICAgIGxldCBwb3J0ID0gcHJveHlVcmwucG9ydDtcbiAgICAvKiBUaGUgcHJveHkgVVJMIHVzZXMgdGhlIHNjaGVtZSBcImh0dHA6XCIsIHdoaWNoIGhhcyBhIGRlZmF1bHQgcG9ydCBudW1iZXIgb2ZcbiAgICAgKiA4MC4gV2UgbmVlZCB0byBzZXQgdGhhdCBleHBsaWNpdGx5IGhlcmUgaWYgaXQgaXMgb21pdHRlZCBiZWNhdXNlIG90aGVyd2lzZVxuICAgICAqIGl0IHdpbGwgdXNlIGdSUEMncyBkZWZhdWx0IHBvcnQgNDQzLiAqL1xuICAgIGlmIChwb3J0ID09PSAnJykge1xuICAgICAgICBwb3J0ID0gJzgwJztcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICBhZGRyZXNzOiBgJHtob3N0bmFtZX06JHtwb3J0fWAsXG4gICAgfTtcbiAgICBpZiAodXNlckNyZWQpIHtcbiAgICAgICAgcmVzdWx0LmNyZWRzID0gdXNlckNyZWQ7XG4gICAgfVxuICAgIHRyYWNlKCdQcm94eSBzZXJ2ZXIgJyArIHJlc3VsdC5hZGRyZXNzICsgJyBzZXQgYnkgZW52aXJvbm1lbnQgdmFyaWFibGUgJyArIGVudlZhcik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldE5vUHJveHlIb3N0TGlzdCgpIHtcbiAgICAvKiBQcmVmZXIgdXNpbmcgJ25vX2dycGNfcHJveHknLiBGYWxsYmFjayBvbiAnbm9fcHJveHknIGlmIGl0IGlzIG5vdCBzZXQuICovXG4gICAgbGV0IG5vUHJveHlTdHIgPSBwcm9jZXNzLmVudi5ub19ncnBjX3Byb3h5O1xuICAgIGxldCBlbnZWYXIgPSAnbm9fZ3JwY19wcm94eSc7XG4gICAgaWYgKCFub1Byb3h5U3RyKSB7XG4gICAgICAgIG5vUHJveHlTdHIgPSBwcm9jZXNzLmVudi5ub19wcm94eTtcbiAgICAgICAgZW52VmFyID0gJ25vX3Byb3h5JztcbiAgICB9XG4gICAgaWYgKG5vUHJveHlTdHIpIHtcbiAgICAgICAgdHJhY2UoJ05vIHByb3h5IHNlcnZlciBsaXN0IHNldCBieSBlbnZpcm9ubWVudCB2YXJpYWJsZSAnICsgZW52VmFyKTtcbiAgICAgICAgcmV0dXJuIG5vUHJveHlTdHIuc3BsaXQoJywnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG4vKlxuICogVGhlIGdyb3VwcyBjb3JyZXNwb25kIHRvIENJRFIgcGFydHMgYXMgZm9sbG93czpcbiAqIDEuIGlwXG4gKiAyLiBwcmVmaXhMZW5ndGhcbiAqL1xuZnVuY3Rpb24gcGFyc2VDSURSKGNpZHJTdHJpbmcpIHtcbiAgICBjb25zdCBzcGxpdFJhbmdlID0gY2lkclN0cmluZy5zcGxpdCgnLycpO1xuICAgIGlmIChzcGxpdFJhbmdlLmxlbmd0aCAhPT0gMikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcHJlZml4TGVuZ3RoID0gcGFyc2VJbnQoc3BsaXRSYW5nZVsxXSwgMTApO1xuICAgIGlmICghKDAsIG5ldF8xLmlzSVB2NCkoc3BsaXRSYW5nZVswXSkgfHwgTnVtYmVyLmlzTmFOKHByZWZpeExlbmd0aCkgfHwgcHJlZml4TGVuZ3RoIDwgMCB8fCBwcmVmaXhMZW5ndGggPiAzMikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXA6IGlwVG9JbnQoc3BsaXRSYW5nZVswXSksXG4gICAgICAgIHByZWZpeExlbmd0aDogcHJlZml4TGVuZ3RoXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGlwVG9JbnQoaXApIHtcbiAgICByZXR1cm4gaXAuc3BsaXQoXCIuXCIpLnJlZHVjZSgoYWNjLCBvY3RldCkgPT4gKGFjYyA8PCA4KSArIHBhcnNlSW50KG9jdGV0LCAxMCksIDApO1xufVxuZnVuY3Rpb24gaXNJcEluQ0lEUihjaWRyLCBzZXJ2ZXJIb3N0KSB7XG4gICAgY29uc3QgaXAgPSBjaWRyLmlwO1xuICAgIGNvbnN0IG1hc2sgPSAtMSA8PCAoMzIgLSBjaWRyLnByZWZpeExlbmd0aCk7XG4gICAgY29uc3QgaG9zdElQID0gaXBUb0ludChzZXJ2ZXJIb3N0KTtcbiAgICByZXR1cm4gKGhvc3RJUCAmIG1hc2spID09PSAoaXAgJiBtYXNrKTtcbn1cbmZ1bmN0aW9uIGhvc3RNYXRjaGVzTm9Qcm94eUxpc3Qoc2VydmVySG9zdCkge1xuICAgIGZvciAoY29uc3QgaG9zdCBvZiBnZXROb1Byb3h5SG9zdExpc3QoKSkge1xuICAgICAgICBjb25zdCBwYXJzZWRDSURSID0gcGFyc2VDSURSKGhvc3QpO1xuICAgICAgICAvLyBob3N0IGlzIGEgQ0lEUiBhbmQgc2VydmVySG9zdCBpcyBhbiBJUCBhZGRyZXNzXG4gICAgICAgIGlmICgoMCwgbmV0XzEuaXNJUHY0KShzZXJ2ZXJIb3N0KSAmJiBwYXJzZWRDSURSICYmIGlzSXBJbkNJRFIocGFyc2VkQ0lEUiwgc2VydmVySG9zdCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNlcnZlckhvc3QuZW5kc1dpdGgoaG9zdCkpIHtcbiAgICAgICAgICAgIC8vIGhvc3QgaXMgYSBzaW5nbGUgSVAgb3IgYSBkb21haW4gbmFtZSBzdWZmaXhcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIG1hcFByb3h5TmFtZSh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3Qgbm9Qcm94eVJlc3VsdCA9IHtcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgIGV4dHJhT3B0aW9uczoge30sXG4gICAgfTtcbiAgICBpZiAoKChfYSA9IG9wdGlvbnNbJ2dycGMuZW5hYmxlX2h0dHBfcHJveHknXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMSkgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG5vUHJveHlSZXN1bHQ7XG4gICAgfVxuICAgIGlmICh0YXJnZXQuc2NoZW1lID09PSAndW5peCcpIHtcbiAgICAgICAgcmV0dXJuIG5vUHJveHlSZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IHByb3h5SW5mbyA9IGdldFByb3h5SW5mbygpO1xuICAgIGlmICghcHJveHlJbmZvLmFkZHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIG5vUHJveHlSZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IGhvc3RQb3J0ID0gKDAsIHVyaV9wYXJzZXJfMS5zcGxpdEhvc3RQb3J0KSh0YXJnZXQucGF0aCk7XG4gICAgaWYgKCFob3N0UG9ydCkge1xuICAgICAgICByZXR1cm4gbm9Qcm94eVJlc3VsdDtcbiAgICB9XG4gICAgY29uc3Qgc2VydmVySG9zdCA9IGhvc3RQb3J0Lmhvc3Q7XG4gICAgaWYgKGhvc3RNYXRjaGVzTm9Qcm94eUxpc3Qoc2VydmVySG9zdCkpIHtcbiAgICAgICAgdHJhY2UoJ05vdCB1c2luZyBwcm94eSBmb3IgdGFyZ2V0IGluIG5vX3Byb3h5IGxpc3Q6ICcgKyAoMCwgdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKSh0YXJnZXQpKTtcbiAgICAgICAgcmV0dXJuIG5vUHJveHlSZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IGV4dHJhT3B0aW9ucyA9IHtcbiAgICAgICAgJ2dycGMuaHR0cF9jb25uZWN0X3RhcmdldCc6ICgwLCB1cmlfcGFyc2VyXzEudXJpVG9TdHJpbmcpKHRhcmdldCksXG4gICAgfTtcbiAgICBpZiAocHJveHlJbmZvLmNyZWRzKSB7XG4gICAgICAgIGV4dHJhT3B0aW9uc1snZ3JwYy5odHRwX2Nvbm5lY3RfY3JlZHMnXSA9IHByb3h5SW5mby5jcmVkcztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFyZ2V0OiB7XG4gICAgICAgICAgICBzY2hlbWU6ICdkbnMnLFxuICAgICAgICAgICAgcGF0aDogcHJveHlJbmZvLmFkZHJlc3MsXG4gICAgICAgIH0sXG4gICAgICAgIGV4dHJhT3B0aW9uczogZXh0cmFPcHRpb25zLFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRQcm94aWVkQ29ubmVjdGlvbihhZGRyZXNzLCBjaGFubmVsT3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBpZiAoISgnZ3JwYy5odHRwX2Nvbm5lY3RfdGFyZ2V0JyBpbiBjaGFubmVsT3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gICAgY29uc3QgcmVhbFRhcmdldCA9IGNoYW5uZWxPcHRpb25zWydncnBjLmh0dHBfY29ubmVjdF90YXJnZXQnXTtcbiAgICBjb25zdCBwYXJzZWRUYXJnZXQgPSAoMCwgdXJpX3BhcnNlcl8xLnBhcnNlVXJpKShyZWFsVGFyZ2V0KTtcbiAgICBpZiAocGFyc2VkVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGNvbnN0IHNwbGl0SG9zdFBvc3QgPSAoMCwgdXJpX3BhcnNlcl8xLnNwbGl0SG9zdFBvcnQpKHBhcnNlZFRhcmdldC5wYXRoKTtcbiAgICBpZiAoc3BsaXRIb3N0UG9zdCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBjb25zdCBob3N0UG9ydCA9IGAke3NwbGl0SG9zdFBvc3QuaG9zdH06JHsoX2EgPSBzcGxpdEhvc3RQb3N0LnBvcnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHJlc29sdmVyX2Ruc18xLkRFRkFVTFRfUE9SVH1gO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1ldGhvZDogJ0NPTk5FQ1QnLFxuICAgICAgICBwYXRoOiBob3N0UG9ydCxcbiAgICB9O1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgIEhvc3Q6IGhvc3RQb3J0LFxuICAgIH07XG4gICAgLy8gQ29ubmVjdCB0byB0aGUgc3ViY2hhbm5lbCBhZGRyZXNzIGFzIGEgcHJveHlcbiAgICBpZiAoKDAsIHN1YmNoYW5uZWxfYWRkcmVzc18xLmlzVGNwU3ViY2hhbm5lbEFkZHJlc3MpKGFkZHJlc3MpKSB7XG4gICAgICAgIG9wdGlvbnMuaG9zdCA9IGFkZHJlc3MuaG9zdDtcbiAgICAgICAgb3B0aW9ucy5wb3J0ID0gYWRkcmVzcy5wb3J0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5zb2NrZXRQYXRoID0gYWRkcmVzcy5wYXRoO1xuICAgIH1cbiAgICBpZiAoJ2dycGMuaHR0cF9jb25uZWN0X2NyZWRzJyBpbiBjaGFubmVsT3B0aW9ucykge1xuICAgICAgICBoZWFkZXJzWydQcm94eS1BdXRob3JpemF0aW9uJ10gPVxuICAgICAgICAgICAgJ0Jhc2ljICcgK1xuICAgICAgICAgICAgICAgIEJ1ZmZlci5mcm9tKGNoYW5uZWxPcHRpb25zWydncnBjLmh0dHBfY29ubmVjdF9jcmVkcyddKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfVxuICAgIG9wdGlvbnMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgY29uc3QgcHJveHlBZGRyZXNzU3RyaW5nID0gKDAsIHN1YmNoYW5uZWxfYWRkcmVzc18xLnN1YmNoYW5uZWxBZGRyZXNzVG9TdHJpbmcpKGFkZHJlc3MpO1xuICAgIHRyYWNlKCdVc2luZyBwcm94eSAnICsgcHJveHlBZGRyZXNzU3RyaW5nICsgJyB0byBjb25uZWN0IHRvICcgKyBvcHRpb25zLnBhdGgpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBodHRwLnJlcXVlc3Qob3B0aW9ucyk7XG4gICAgICAgIHJlcXVlc3Qub25jZSgnY29ubmVjdCcsIChyZXMsIHNvY2tldCwgaGVhZCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHNvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgdHJhY2UoJ1N1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucGF0aCArXG4gICAgICAgICAgICAgICAgICAgICcgdGhyb3VnaCBwcm94eSAnICtcbiAgICAgICAgICAgICAgICAgICAgcHJveHlBZGRyZXNzU3RyaW5nKTtcbiAgICAgICAgICAgICAgICAvLyBUaGUgSFRUUCBjbGllbnQgbWF5IGhhdmUgYWxyZWFkeSByZWFkIGEgZmV3IGJ5dGVzIG9mIHRoZSBwcm94aWVkXG4gICAgICAgICAgICAgICAgLy8gY29ubmVjdGlvbi4gSWYgdGhhdCdzIHRoZSBjYXNlLCBwdXQgdGhlbSBiYWNrIGludG8gdGhlIHNvY2tldC5cbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dycGMvZ3JwYy1ub2RlL2lzc3Vlcy8yNzQ0LlxuICAgICAgICAgICAgICAgIGlmIChoZWFkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc29ja2V0LnVuc2hpZnQoaGVhZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyYWNlKCdTdWNjZXNzZnVsbHkgZXN0YWJsaXNoZWQgYSBwbGFpbnRleHQgY29ubmVjdGlvbiB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wYXRoICtcbiAgICAgICAgICAgICAgICAgICAgJyB0aHJvdWdoIHByb3h5ICcgK1xuICAgICAgICAgICAgICAgICAgICBwcm94eUFkZHJlc3NTdHJpbmcpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoc29ja2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICgwLCBsb2dnaW5nXzEubG9nKShjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuRVJST1IsICdGYWlsZWQgdG8gY29ubmVjdCB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wYXRoICtcbiAgICAgICAgICAgICAgICAgICAgJyB0aHJvdWdoIHByb3h5ICcgK1xuICAgICAgICAgICAgICAgICAgICBwcm94eUFkZHJlc3NTdHJpbmcgK1xuICAgICAgICAgICAgICAgICAgICAnIHdpdGggc3RhdHVzICcgK1xuICAgICAgICAgICAgICAgICAgICByZXMuc3RhdHVzQ29kZSk7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXF1ZXN0Lm9uY2UoJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAoMCwgbG9nZ2luZ18xLmxvZykoY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LkVSUk9SLCAnRmFpbGVkIHRvIGNvbm5lY3QgdG8gcHJveHkgJyArXG4gICAgICAgICAgICAgICAgcHJveHlBZGRyZXNzU3RyaW5nICtcbiAgICAgICAgICAgICAgICAnIHdpdGggZXJyb3IgJyArXG4gICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXF1ZXN0LmVuZCgpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cF9wcm94eS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZUNJRFIiLCJtYXBQcm94eU5hbWUiLCJnZXRQcm94aWVkQ29ubmVjdGlvbiIsImxvZ2dpbmdfMSIsInJlcXVpcmUiLCJjb25zdGFudHNfMSIsIm5ldF8xIiwiaHR0cCIsImxvZ2dpbmciLCJzdWJjaGFubmVsX2FkZHJlc3NfMSIsInVyaV9wYXJzZXJfMSIsInVybF8xIiwicmVzb2x2ZXJfZG5zXzEiLCJUUkFDRVJfTkFNRSIsInRyYWNlIiwidGV4dCIsIkxvZ1ZlcmJvc2l0eSIsIkRFQlVHIiwiZ2V0UHJveHlJbmZvIiwicHJveHlFbnYiLCJlbnZWYXIiLCJwcm9jZXNzIiwiZW52IiwiZ3JwY19wcm94eSIsImh0dHBzX3Byb3h5IiwiaHR0cF9wcm94eSIsInByb3h5VXJsIiwiVVJMIiwiZSIsImxvZyIsIkVSUk9SIiwicHJvdG9jb2wiLCJ1c2VyQ3JlZCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJJTkZPIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaG9zdG5hbWUiLCJwb3J0IiwicmVzdWx0IiwiYWRkcmVzcyIsImNyZWRzIiwiZ2V0Tm9Qcm94eUhvc3RMaXN0Iiwibm9Qcm94eVN0ciIsIm5vX2dycGNfcHJveHkiLCJub19wcm94eSIsInNwbGl0IiwiY2lkclN0cmluZyIsInNwbGl0UmFuZ2UiLCJsZW5ndGgiLCJwcmVmaXhMZW5ndGgiLCJwYXJzZUludCIsImlzSVB2NCIsIk51bWJlciIsImlzTmFOIiwiaXAiLCJpcFRvSW50IiwicmVkdWNlIiwiYWNjIiwib2N0ZXQiLCJpc0lwSW5DSURSIiwiY2lkciIsInNlcnZlckhvc3QiLCJtYXNrIiwiaG9zdElQIiwiaG9zdE1hdGNoZXNOb1Byb3h5TGlzdCIsImhvc3QiLCJwYXJzZWRDSURSIiwiZW5kc1dpdGgiLCJ0YXJnZXQiLCJvcHRpb25zIiwiX2EiLCJub1Byb3h5UmVzdWx0IiwiZXh0cmFPcHRpb25zIiwic2NoZW1lIiwicHJveHlJbmZvIiwiaG9zdFBvcnQiLCJzcGxpdEhvc3RQb3J0IiwicGF0aCIsInVyaVRvU3RyaW5nIiwiY2hhbm5lbE9wdGlvbnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlYWxUYXJnZXQiLCJwYXJzZWRUYXJnZXQiLCJwYXJzZVVyaSIsInNwbGl0SG9zdFBvc3QiLCJERUZBVUxUX1BPUlQiLCJtZXRob2QiLCJoZWFkZXJzIiwiSG9zdCIsImlzVGNwU3ViY2hhbm5lbEFkZHJlc3MiLCJzb2NrZXRQYXRoIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwicHJveHlBZGRyZXNzU3RyaW5nIiwic3ViY2hhbm5lbEFkZHJlc3NUb1N0cmluZyIsInJlamVjdCIsInJlcXVlc3QiLCJvbmNlIiwicmVzIiwic29ja2V0IiwiaGVhZCIsInJlbW92ZUFsbExpc3RlbmVycyIsInN0YXR1c0NvZGUiLCJ1bnNoaWZ0IiwiZXJyIiwibWVzc2FnZSIsImVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.experimental = exports.ServerInterceptingCall = exports.ResponderBuilder = exports.ServerListenerBuilder = exports.addAdminServicesToServer = exports.getChannelzHandlers = exports.getChannelzServiceDefinition = exports.InterceptorConfigurationError = exports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.compressionAlgorithms = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\nObject.defineProperty(exports, \"CallCredentials\", ({\n    enumerable: true,\n    get: function() {\n        return call_credentials_1.CallCredentials;\n    }\n}));\nconst channel_1 = __webpack_require__(/*! ./channel */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel.js\");\nObject.defineProperty(exports, \"Channel\", ({\n    enumerable: true,\n    get: function() {\n        return channel_1.ChannelImplementation;\n    }\n}));\nconst compression_algorithms_1 = __webpack_require__(/*! ./compression-algorithms */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\");\nObject.defineProperty(exports, \"compressionAlgorithms\", ({\n    enumerable: true,\n    get: function() {\n        return compression_algorithms_1.CompressionAlgorithms;\n    }\n}));\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nObject.defineProperty(exports, \"connectivityState\", ({\n    enumerable: true,\n    get: function() {\n        return connectivity_state_1.ConnectivityState;\n    }\n}));\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\nObject.defineProperty(exports, \"ChannelCredentials\", ({\n    enumerable: true,\n    get: function() {\n        return channel_credentials_1.ChannelCredentials;\n    }\n}));\nconst client_1 = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/client.js\");\nObject.defineProperty(exports, \"Client\", ({\n    enumerable: true,\n    get: function() {\n        return client_1.Client;\n    }\n}));\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nObject.defineProperty(exports, \"logVerbosity\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.LogVerbosity;\n    }\n}));\nObject.defineProperty(exports, \"status\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.Status;\n    }\n}));\nObject.defineProperty(exports, \"propagate\", ({\n    enumerable: true,\n    get: function() {\n        return constants_1.Propagate;\n    }\n}));\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst make_client_1 = __webpack_require__(/*! ./make-client */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/make-client.js\");\nObject.defineProperty(exports, \"loadPackageDefinition\", ({\n    enumerable: true,\n    get: function() {\n        return make_client_1.loadPackageDefinition;\n    }\n}));\nObject.defineProperty(exports, \"makeClientConstructor\", ({\n    enumerable: true,\n    get: function() {\n        return make_client_1.makeClientConstructor;\n    }\n}));\nObject.defineProperty(exports, \"makeGenericClientConstructor\", ({\n    enumerable: true,\n    get: function() {\n        return make_client_1.makeClientConstructor;\n    }\n}));\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nObject.defineProperty(exports, \"Metadata\", ({\n    enumerable: true,\n    get: function() {\n        return metadata_1.Metadata;\n    }\n}));\nconst server_1 = __webpack_require__(/*! ./server */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server.js\");\nObject.defineProperty(exports, \"Server\", ({\n    enumerable: true,\n    get: function() {\n        return server_1.Server;\n    }\n}));\nconst server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\nObject.defineProperty(exports, \"ServerCredentials\", ({\n    enumerable: true,\n    get: function() {\n        return server_credentials_1.ServerCredentials;\n    }\n}));\nconst status_builder_1 = __webpack_require__(/*! ./status-builder */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/status-builder.js\");\nObject.defineProperty(exports, \"StatusBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return status_builder_1.StatusBuilder;\n    }\n}));\n/**** Client Credentials ****/ // Using assign only copies enumerable properties, which is what we want\nexports.credentials = {\n    /**\n     * Combine a ChannelCredentials with any number of CallCredentials into a\n     * single ChannelCredentials object.\n     * @param channelCredentials The ChannelCredentials object.\n     * @param callCredentials Any number of CallCredentials objects.\n     * @return The resulting ChannelCredentials object.\n     */ combineChannelCredentials: (channelCredentials, ...callCredentials)=>{\n        return callCredentials.reduce((acc, other)=>acc.compose(other), channelCredentials);\n    },\n    /**\n     * Combine any number of CallCredentials into a single CallCredentials\n     * object.\n     * @param first The first CallCredentials object.\n     * @param additional Any number of additional CallCredentials objects.\n     * @return The resulting CallCredentials object.\n     */ combineCallCredentials: (first, ...additional)=>{\n        return additional.reduce((acc, other)=>acc.compose(other), first);\n    },\n    // from channel-credentials.ts\n    createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,\n    createSsl: channel_credentials_1.ChannelCredentials.createSsl,\n    createFromSecureContext: channel_credentials_1.ChannelCredentials.createFromSecureContext,\n    // from call-credentials.ts\n    createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,\n    createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,\n    createEmpty: call_credentials_1.CallCredentials.createEmpty\n};\n/**\n * Close a Client object.\n * @param client The client to close.\n */ const closeClient = (client)=>client.close();\nexports.closeClient = closeClient;\nconst waitForClientReady = (client, deadline, callback)=>client.waitForReady(deadline, callback);\nexports.waitForClientReady = waitForClientReady;\n/* eslint-enable @typescript-eslint/no-explicit-any */ /**** Unimplemented function stubs ****/ /* eslint-disable @typescript-eslint/no-explicit-any */ const loadObject = (value, options)=>{\n    throw new Error(\"Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead\");\n};\nexports.loadObject = loadObject;\nconst load = (filename, format, options)=>{\n    throw new Error(\"Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead\");\n};\nexports.load = load;\nconst setLogger = (logger)=>{\n    logging.setLogger(logger);\n};\nexports.setLogger = setLogger;\nconst setLogVerbosity = (verbosity)=>{\n    logging.setLoggerVerbosity(verbosity);\n};\nexports.setLogVerbosity = setLogVerbosity;\nconst getClientChannel = (client)=>{\n    return client_1.Client.prototype.getChannel.call(client);\n};\nexports.getClientChannel = getClientChannel;\nvar client_interceptors_1 = __webpack_require__(/*! ./client-interceptors */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\");\nObject.defineProperty(exports, \"ListenerBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return client_interceptors_1.ListenerBuilder;\n    }\n}));\nObject.defineProperty(exports, \"RequesterBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return client_interceptors_1.RequesterBuilder;\n    }\n}));\nObject.defineProperty(exports, \"InterceptingCall\", ({\n    enumerable: true,\n    get: function() {\n        return client_interceptors_1.InterceptingCall;\n    }\n}));\nObject.defineProperty(exports, \"InterceptorConfigurationError\", ({\n    enumerable: true,\n    get: function() {\n        return client_interceptors_1.InterceptorConfigurationError;\n    }\n}));\nvar channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\nObject.defineProperty(exports, \"getChannelzServiceDefinition\", ({\n    enumerable: true,\n    get: function() {\n        return channelz_1.getChannelzServiceDefinition;\n    }\n}));\nObject.defineProperty(exports, \"getChannelzHandlers\", ({\n    enumerable: true,\n    get: function() {\n        return channelz_1.getChannelzHandlers;\n    }\n}));\nvar admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\nObject.defineProperty(exports, \"addAdminServicesToServer\", ({\n    enumerable: true,\n    get: function() {\n        return admin_1.addAdminServicesToServer;\n    }\n}));\nvar server_interceptors_1 = __webpack_require__(/*! ./server-interceptors */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-interceptors.js\");\nObject.defineProperty(exports, \"ServerListenerBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return server_interceptors_1.ServerListenerBuilder;\n    }\n}));\nObject.defineProperty(exports, \"ResponderBuilder\", ({\n    enumerable: true,\n    get: function() {\n        return server_interceptors_1.ResponderBuilder;\n    }\n}));\nObject.defineProperty(exports, \"ServerInterceptingCall\", ({\n    enumerable: true,\n    get: function() {\n        return server_interceptors_1.ServerInterceptingCall;\n    }\n}));\nconst experimental = __webpack_require__(/*! ./experimental */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/experimental.js\");\nexports.experimental = experimental;\nconst resolver_dns = __webpack_require__(/*! ./resolver-dns */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js\");\nconst resolver_uds = __webpack_require__(/*! ./resolver-uds */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js\");\nconst resolver_ip = __webpack_require__(/*! ./resolver-ip */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js\");\nconst load_balancer_pick_first = __webpack_require__(/*! ./load-balancer-pick-first */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\");\nconst load_balancer_round_robin = __webpack_require__(/*! ./load-balancer-round-robin */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js\");\nconst load_balancer_outlier_detection = __webpack_require__(/*! ./load-balancer-outlier-detection */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\");\nconst channelz = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\n(()=>{\n    resolver_dns.setup();\n    resolver_uds.setup();\n    resolver_ip.setup();\n    load_balancer_pick_first.setup();\n    load_balancer_round_robin.setup();\n    load_balancer_outlier_detection.setup();\n    channelz.setup();\n})(); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSw4QkFBOEIsR0FBR0Esd0JBQXdCLEdBQUdBLDZCQUE2QixHQUFHQSxnQ0FBZ0MsR0FBR0EsMkJBQTJCLEdBQUdBLG9DQUFvQyxHQUFHQSxxQ0FBcUMsR0FBR0Esd0JBQXdCLEdBQUdBLHdCQUF3QixHQUFHQSx1QkFBdUIsR0FBR0EscUJBQXFCLEdBQUdBLHdCQUF3QixHQUFHQSx5QkFBeUIsR0FBR0EsY0FBYyxHQUFHQSx1QkFBdUIsR0FBR0EsaUJBQWlCLEdBQUdBLFlBQVksR0FBR0Esa0JBQWtCLEdBQUdBLHVCQUF1QixHQUFHQSwwQkFBMEIsR0FBR0EsMEJBQTBCLEdBQUdBLG1CQUFtQixHQUFHQSxlQUFlLEdBQUdBLG9DQUFvQyxHQUFHQSw2QkFBNkIsR0FBR0EsNkJBQTZCLEdBQUdBLGNBQWMsR0FBR0EsNkJBQTZCLEdBQUdBLGlCQUFpQixHQUFHQSx5QkFBeUIsR0FBR0EsY0FBYyxHQUFHQSxvQkFBb0IsR0FBR0EsZ0JBQWdCLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDLzVCLE1BQU1xQyxxQkFBcUJDLG1CQUFPQSxDQUFDLDRGQUFvQjtBQUN2RHhDLG1EQUFrRDtJQUFFeUMsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsbUJBQW1CaEIsZUFBZTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3hJLE1BQU1vQixZQUFZSCxtQkFBT0EsQ0FBQywwRUFBVztBQUNyQ3hDLDJDQUEwQztJQUFFeUMsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsVUFBVUMscUJBQXFCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDN0gsTUFBTUMsMkJBQTJCTCxtQkFBT0EsQ0FBQyx3R0FBMEI7QUFDbkV4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REFBbUQ7SUFBRXlDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9xRCxzQkFBc0J6RixnQkFBZ0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM3SU4sMERBQXlEO0lBQUV5QyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPcUQsc0JBQXNCMUYsc0JBQXNCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDekosTUFBTUQsZUFBZW9DLG1CQUFPQSxDQUFDLG9GQUFnQjtBQUM3Q3RDLG9CQUFvQixHQUFHRTtBQUN2QixNQUFNNEYsZUFBZXhELG1CQUFPQSxDQUFDLG9GQUFnQjtBQUM3QyxNQUFNeUQsZUFBZXpELG1CQUFPQSxDQUFDLG9GQUFnQjtBQUM3QyxNQUFNMEQsY0FBYzFELG1CQUFPQSxDQUFDLGtGQUFlO0FBQzNDLE1BQU0yRCwyQkFBMkIzRCxtQkFBT0EsQ0FBQyw0R0FBNEI7QUFDckUsTUFBTTRELDRCQUE0QjVELG1CQUFPQSxDQUFDLDhHQUE2QjtBQUN2RSxNQUFNNkQsa0NBQWtDN0QsbUJBQU9BLENBQUMsMEhBQW1DO0FBQ25GLE1BQU04RCxXQUFXOUQsbUJBQU9BLENBQUMsNEVBQVk7QUFDcEM7SUFDR3dELGFBQWFPLEtBQUs7SUFDbEJOLGFBQWFNLEtBQUs7SUFDbEJMLFlBQVlLLEtBQUs7SUFDakJKLHlCQUF5QkksS0FBSztJQUM5QkgsMEJBQTBCRyxLQUFLO0lBQy9CRixnQ0FBZ0NFLEtBQUs7SUFDckNELFNBQVNDLEtBQUs7QUFDbEIsTUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvaW5kZXguanM/Mzk1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leHBlcmltZW50YWwgPSBleHBvcnRzLlNlcnZlckludGVyY2VwdGluZ0NhbGwgPSBleHBvcnRzLlJlc3BvbmRlckJ1aWxkZXIgPSBleHBvcnRzLlNlcnZlckxpc3RlbmVyQnVpbGRlciA9IGV4cG9ydHMuYWRkQWRtaW5TZXJ2aWNlc1RvU2VydmVyID0gZXhwb3J0cy5nZXRDaGFubmVsekhhbmRsZXJzID0gZXhwb3J0cy5nZXRDaGFubmVselNlcnZpY2VEZWZpbml0aW9uID0gZXhwb3J0cy5JbnRlcmNlcHRvckNvbmZpZ3VyYXRpb25FcnJvciA9IGV4cG9ydHMuSW50ZXJjZXB0aW5nQ2FsbCA9IGV4cG9ydHMuUmVxdWVzdGVyQnVpbGRlciA9IGV4cG9ydHMuTGlzdGVuZXJCdWlsZGVyID0gZXhwb3J0cy5TdGF0dXNCdWlsZGVyID0gZXhwb3J0cy5nZXRDbGllbnRDaGFubmVsID0gZXhwb3J0cy5TZXJ2ZXJDcmVkZW50aWFscyA9IGV4cG9ydHMuU2VydmVyID0gZXhwb3J0cy5zZXRMb2dWZXJib3NpdHkgPSBleHBvcnRzLnNldExvZ2dlciA9IGV4cG9ydHMubG9hZCA9IGV4cG9ydHMubG9hZE9iamVjdCA9IGV4cG9ydHMuQ2FsbENyZWRlbnRpYWxzID0gZXhwb3J0cy5DaGFubmVsQ3JlZGVudGlhbHMgPSBleHBvcnRzLndhaXRGb3JDbGllbnRSZWFkeSA9IGV4cG9ydHMuY2xvc2VDbGllbnQgPSBleHBvcnRzLkNoYW5uZWwgPSBleHBvcnRzLm1ha2VHZW5lcmljQ2xpZW50Q29uc3RydWN0b3IgPSBleHBvcnRzLm1ha2VDbGllbnRDb25zdHJ1Y3RvciA9IGV4cG9ydHMubG9hZFBhY2thZ2VEZWZpbml0aW9uID0gZXhwb3J0cy5DbGllbnQgPSBleHBvcnRzLmNvbXByZXNzaW9uQWxnb3JpdGhtcyA9IGV4cG9ydHMucHJvcGFnYXRlID0gZXhwb3J0cy5jb25uZWN0aXZpdHlTdGF0ZSA9IGV4cG9ydHMuc3RhdHVzID0gZXhwb3J0cy5sb2dWZXJib3NpdHkgPSBleHBvcnRzLk1ldGFkYXRhID0gZXhwb3J0cy5jcmVkZW50aWFscyA9IHZvaWQgMDtcbmNvbnN0IGNhbGxfY3JlZGVudGlhbHNfMSA9IHJlcXVpcmUoXCIuL2NhbGwtY3JlZGVudGlhbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDYWxsQ3JlZGVudGlhbHNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbGxfY3JlZGVudGlhbHNfMS5DYWxsQ3JlZGVudGlhbHM7IH0gfSk7XG5jb25zdCBjaGFubmVsXzEgPSByZXF1aXJlKFwiLi9jaGFubmVsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2hhbm5lbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2hhbm5lbF8xLkNoYW5uZWxJbXBsZW1lbnRhdGlvbjsgfSB9KTtcbmNvbnN0IGNvbXByZXNzaW9uX2FsZ29yaXRobXNfMSA9IHJlcXVpcmUoXCIuL2NvbXByZXNzaW9uLWFsZ29yaXRobXNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21wcmVzc2lvbkFsZ29yaXRobXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbXByZXNzaW9uX2FsZ29yaXRobXNfMS5Db21wcmVzc2lvbkFsZ29yaXRobXM7IH0gfSk7XG5jb25zdCBjb25uZWN0aXZpdHlfc3RhdGVfMSA9IHJlcXVpcmUoXCIuL2Nvbm5lY3Rpdml0eS1zdGF0ZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbm5lY3Rpdml0eVN0YXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aXZpdHlfc3RhdGVfMS5Db25uZWN0aXZpdHlTdGF0ZTsgfSB9KTtcbmNvbnN0IGNoYW5uZWxfY3JlZGVudGlhbHNfMSA9IHJlcXVpcmUoXCIuL2NoYW5uZWwtY3JlZGVudGlhbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDaGFubmVsQ3JlZGVudGlhbHNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoYW5uZWxfY3JlZGVudGlhbHNfMS5DaGFubmVsQ3JlZGVudGlhbHM7IH0gfSk7XG5jb25zdCBjbGllbnRfMSA9IHJlcXVpcmUoXCIuL2NsaWVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2xpZW50XzEuQ2xpZW50OyB9IH0pO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsb2dWZXJib3NpdHlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0YXR1c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uc3RhbnRzXzEuU3RhdHVzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHJvcGFnYXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25zdGFudHNfMS5Qcm9wYWdhdGU7IH0gfSk7XG5jb25zdCBsb2dnaW5nID0gcmVxdWlyZShcIi4vbG9nZ2luZ1wiKTtcbmNvbnN0IG1ha2VfY2xpZW50XzEgPSByZXF1aXJlKFwiLi9tYWtlLWNsaWVudFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxvYWRQYWNrYWdlRGVmaW5pdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFrZV9jbGllbnRfMS5sb2FkUGFja2FnZURlZmluaXRpb247IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYWtlQ2xpZW50Q29uc3RydWN0b3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1ha2VfY2xpZW50XzEubWFrZUNsaWVudENvbnN0cnVjdG9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWFrZUdlbmVyaWNDbGllbnRDb25zdHJ1Y3RvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFrZV9jbGllbnRfMS5tYWtlQ2xpZW50Q29uc3RydWN0b3I7IH0gfSk7XG5jb25zdCBtZXRhZGF0YV8xID0gcmVxdWlyZShcIi4vbWV0YWRhdGFcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNZXRhZGF0YVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWV0YWRhdGFfMS5NZXRhZGF0YTsgfSB9KTtcbmNvbnN0IHNlcnZlcl8xID0gcmVxdWlyZShcIi4vc2VydmVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VydmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXJ2ZXJfMS5TZXJ2ZXI7IH0gfSk7XG5jb25zdCBzZXJ2ZXJfY3JlZGVudGlhbHNfMSA9IHJlcXVpcmUoXCIuL3NlcnZlci1jcmVkZW50aWFsc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlcnZlckNyZWRlbnRpYWxzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXJ2ZXJfY3JlZGVudGlhbHNfMS5TZXJ2ZXJDcmVkZW50aWFsczsgfSB9KTtcbmNvbnN0IHN0YXR1c19idWlsZGVyXzEgPSByZXF1aXJlKFwiLi9zdGF0dXMtYnVpbGRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0YXR1c0J1aWxkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0YXR1c19idWlsZGVyXzEuU3RhdHVzQnVpbGRlcjsgfSB9KTtcbi8qKioqIENsaWVudCBDcmVkZW50aWFscyAqKioqL1xuLy8gVXNpbmcgYXNzaWduIG9ubHkgY29waWVzIGVudW1lcmFibGUgcHJvcGVydGllcywgd2hpY2ggaXMgd2hhdCB3ZSB3YW50XG5leHBvcnRzLmNyZWRlbnRpYWxzID0ge1xuICAgIC8qKlxuICAgICAqIENvbWJpbmUgYSBDaGFubmVsQ3JlZGVudGlhbHMgd2l0aCBhbnkgbnVtYmVyIG9mIENhbGxDcmVkZW50aWFscyBpbnRvIGFcbiAgICAgKiBzaW5nbGUgQ2hhbm5lbENyZWRlbnRpYWxzIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gY2hhbm5lbENyZWRlbnRpYWxzIFRoZSBDaGFubmVsQ3JlZGVudGlhbHMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBjYWxsQ3JlZGVudGlhbHMgQW55IG51bWJlciBvZiBDYWxsQ3JlZGVudGlhbHMgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJuIFRoZSByZXN1bHRpbmcgQ2hhbm5lbENyZWRlbnRpYWxzIG9iamVjdC5cbiAgICAgKi9cbiAgICBjb21iaW5lQ2hhbm5lbENyZWRlbnRpYWxzOiAoY2hhbm5lbENyZWRlbnRpYWxzLCAuLi5jYWxsQ3JlZGVudGlhbHMpID0+IHtcbiAgICAgICAgcmV0dXJuIGNhbGxDcmVkZW50aWFscy5yZWR1Y2UoKGFjYywgb3RoZXIpID0+IGFjYy5jb21wb3NlKG90aGVyKSwgY2hhbm5lbENyZWRlbnRpYWxzKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIENvbWJpbmUgYW55IG51bWJlciBvZiBDYWxsQ3JlZGVudGlhbHMgaW50byBhIHNpbmdsZSBDYWxsQ3JlZGVudGlhbHNcbiAgICAgKiBvYmplY3QuXG4gICAgICogQHBhcmFtIGZpcnN0IFRoZSBmaXJzdCBDYWxsQ3JlZGVudGlhbHMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSBhZGRpdGlvbmFsIEFueSBudW1iZXIgb2YgYWRkaXRpb25hbCBDYWxsQ3JlZGVudGlhbHMgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJuIFRoZSByZXN1bHRpbmcgQ2FsbENyZWRlbnRpYWxzIG9iamVjdC5cbiAgICAgKi9cbiAgICBjb21iaW5lQ2FsbENyZWRlbnRpYWxzOiAoZmlyc3QsIC4uLmFkZGl0aW9uYWwpID0+IHtcbiAgICAgICAgcmV0dXJuIGFkZGl0aW9uYWwucmVkdWNlKChhY2MsIG90aGVyKSA9PiBhY2MuY29tcG9zZShvdGhlciksIGZpcnN0KTtcbiAgICB9LFxuICAgIC8vIGZyb20gY2hhbm5lbC1jcmVkZW50aWFscy50c1xuICAgIGNyZWF0ZUluc2VjdXJlOiBjaGFubmVsX2NyZWRlbnRpYWxzXzEuQ2hhbm5lbENyZWRlbnRpYWxzLmNyZWF0ZUluc2VjdXJlLFxuICAgIGNyZWF0ZVNzbDogY2hhbm5lbF9jcmVkZW50aWFsc18xLkNoYW5uZWxDcmVkZW50aWFscy5jcmVhdGVTc2wsXG4gICAgY3JlYXRlRnJvbVNlY3VyZUNvbnRleHQ6IGNoYW5uZWxfY3JlZGVudGlhbHNfMS5DaGFubmVsQ3JlZGVudGlhbHMuY3JlYXRlRnJvbVNlY3VyZUNvbnRleHQsXG4gICAgLy8gZnJvbSBjYWxsLWNyZWRlbnRpYWxzLnRzXG4gICAgY3JlYXRlRnJvbU1ldGFkYXRhR2VuZXJhdG9yOiBjYWxsX2NyZWRlbnRpYWxzXzEuQ2FsbENyZWRlbnRpYWxzLmNyZWF0ZUZyb21NZXRhZGF0YUdlbmVyYXRvcixcbiAgICBjcmVhdGVGcm9tR29vZ2xlQ3JlZGVudGlhbDogY2FsbF9jcmVkZW50aWFsc18xLkNhbGxDcmVkZW50aWFscy5jcmVhdGVGcm9tR29vZ2xlQ3JlZGVudGlhbCxcbiAgICBjcmVhdGVFbXB0eTogY2FsbF9jcmVkZW50aWFsc18xLkNhbGxDcmVkZW50aWFscy5jcmVhdGVFbXB0eSxcbn07XG4vKipcbiAqIENsb3NlIGEgQ2xpZW50IG9iamVjdC5cbiAqIEBwYXJhbSBjbGllbnQgVGhlIGNsaWVudCB0byBjbG9zZS5cbiAqL1xuY29uc3QgY2xvc2VDbGllbnQgPSAoY2xpZW50KSA9PiBjbGllbnQuY2xvc2UoKTtcbmV4cG9ydHMuY2xvc2VDbGllbnQgPSBjbG9zZUNsaWVudDtcbmNvbnN0IHdhaXRGb3JDbGllbnRSZWFkeSA9IChjbGllbnQsIGRlYWRsaW5lLCBjYWxsYmFjaykgPT4gY2xpZW50LndhaXRGb3JSZWFkeShkZWFkbGluZSwgY2FsbGJhY2spO1xuZXhwb3J0cy53YWl0Rm9yQ2xpZW50UmVhZHkgPSB3YWl0Rm9yQ2xpZW50UmVhZHk7XG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbi8qKioqIFVuaW1wbGVtZW50ZWQgZnVuY3Rpb24gc3R1YnMgKioqKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmNvbnN0IGxvYWRPYmplY3QgPSAodmFsdWUsIG9wdGlvbnMpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhdmFpbGFibGUgaW4gdGhpcyBsaWJyYXJ5LiBVc2UgQGdycGMvcHJvdG8tbG9hZGVyIGFuZCBsb2FkUGFja2FnZURlZmluaXRpb24gaW5zdGVhZCcpO1xufTtcbmV4cG9ydHMubG9hZE9iamVjdCA9IGxvYWRPYmplY3Q7XG5jb25zdCBsb2FkID0gKGZpbGVuYW1lLCBmb3JtYXQsIG9wdGlvbnMpID0+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhdmFpbGFibGUgaW4gdGhpcyBsaWJyYXJ5LiBVc2UgQGdycGMvcHJvdG8tbG9hZGVyIGFuZCBsb2FkUGFja2FnZURlZmluaXRpb24gaW5zdGVhZCcpO1xufTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5jb25zdCBzZXRMb2dnZXIgPSAobG9nZ2VyKSA9PiB7XG4gICAgbG9nZ2luZy5zZXRMb2dnZXIobG9nZ2VyKTtcbn07XG5leHBvcnRzLnNldExvZ2dlciA9IHNldExvZ2dlcjtcbmNvbnN0IHNldExvZ1ZlcmJvc2l0eSA9ICh2ZXJib3NpdHkpID0+IHtcbiAgICBsb2dnaW5nLnNldExvZ2dlclZlcmJvc2l0eSh2ZXJib3NpdHkpO1xufTtcbmV4cG9ydHMuc2V0TG9nVmVyYm9zaXR5ID0gc2V0TG9nVmVyYm9zaXR5O1xuY29uc3QgZ2V0Q2xpZW50Q2hhbm5lbCA9IChjbGllbnQpID0+IHtcbiAgICByZXR1cm4gY2xpZW50XzEuQ2xpZW50LnByb3RvdHlwZS5nZXRDaGFubmVsLmNhbGwoY2xpZW50KTtcbn07XG5leHBvcnRzLmdldENsaWVudENoYW5uZWwgPSBnZXRDbGllbnRDaGFubmVsO1xudmFyIGNsaWVudF9pbnRlcmNlcHRvcnNfMSA9IHJlcXVpcmUoXCIuL2NsaWVudC1pbnRlcmNlcHRvcnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMaXN0ZW5lckJ1aWxkZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsaWVudF9pbnRlcmNlcHRvcnNfMS5MaXN0ZW5lckJ1aWxkZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0ZXJCdWlsZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjbGllbnRfaW50ZXJjZXB0b3JzXzEuUmVxdWVzdGVyQnVpbGRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkludGVyY2VwdGluZ0NhbGxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsaWVudF9pbnRlcmNlcHRvcnNfMS5JbnRlcmNlcHRpbmdDYWxsOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW50ZXJjZXB0b3JDb25maWd1cmF0aW9uRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsaWVudF9pbnRlcmNlcHRvcnNfMS5JbnRlcmNlcHRvckNvbmZpZ3VyYXRpb25FcnJvcjsgfSB9KTtcbnZhciBjaGFubmVsel8xID0gcmVxdWlyZShcIi4vY2hhbm5lbHpcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRDaGFubmVselNlcnZpY2VEZWZpbml0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjaGFubmVsel8xLmdldENoYW5uZWx6U2VydmljZURlZmluaXRpb247IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRDaGFubmVsekhhbmRsZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjaGFubmVsel8xLmdldENoYW5uZWx6SGFuZGxlcnM7IH0gfSk7XG52YXIgYWRtaW5fMSA9IHJlcXVpcmUoXCIuL2FkbWluXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkQWRtaW5TZXJ2aWNlc1RvU2VydmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhZG1pbl8xLmFkZEFkbWluU2VydmljZXNUb1NlcnZlcjsgfSB9KTtcbnZhciBzZXJ2ZXJfaW50ZXJjZXB0b3JzXzEgPSByZXF1aXJlKFwiLi9zZXJ2ZXItaW50ZXJjZXB0b3JzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VydmVyTGlzdGVuZXJCdWlsZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXJ2ZXJfaW50ZXJjZXB0b3JzXzEuU2VydmVyTGlzdGVuZXJCdWlsZGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVzcG9uZGVyQnVpbGRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VydmVyX2ludGVyY2VwdG9yc18xLlJlc3BvbmRlckJ1aWxkZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZXJ2ZXJJbnRlcmNlcHRpbmdDYWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZXJ2ZXJfaW50ZXJjZXB0b3JzXzEuU2VydmVySW50ZXJjZXB0aW5nQ2FsbDsgfSB9KTtcbmNvbnN0IGV4cGVyaW1lbnRhbCA9IHJlcXVpcmUoXCIuL2V4cGVyaW1lbnRhbFwiKTtcbmV4cG9ydHMuZXhwZXJpbWVudGFsID0gZXhwZXJpbWVudGFsO1xuY29uc3QgcmVzb2x2ZXJfZG5zID0gcmVxdWlyZShcIi4vcmVzb2x2ZXItZG5zXCIpO1xuY29uc3QgcmVzb2x2ZXJfdWRzID0gcmVxdWlyZShcIi4vcmVzb2x2ZXItdWRzXCIpO1xuY29uc3QgcmVzb2x2ZXJfaXAgPSByZXF1aXJlKFwiLi9yZXNvbHZlci1pcFwiKTtcbmNvbnN0IGxvYWRfYmFsYW5jZXJfcGlja19maXJzdCA9IHJlcXVpcmUoXCIuL2xvYWQtYmFsYW5jZXItcGljay1maXJzdFwiKTtcbmNvbnN0IGxvYWRfYmFsYW5jZXJfcm91bmRfcm9iaW4gPSByZXF1aXJlKFwiLi9sb2FkLWJhbGFuY2VyLXJvdW5kLXJvYmluXCIpO1xuY29uc3QgbG9hZF9iYWxhbmNlcl9vdXRsaWVyX2RldGVjdGlvbiA9IHJlcXVpcmUoXCIuL2xvYWQtYmFsYW5jZXItb3V0bGllci1kZXRlY3Rpb25cIik7XG5jb25zdCBjaGFubmVseiA9IHJlcXVpcmUoXCIuL2NoYW5uZWx6XCIpO1xuKCgpID0+IHtcbiAgICByZXNvbHZlcl9kbnMuc2V0dXAoKTtcbiAgICByZXNvbHZlcl91ZHMuc2V0dXAoKTtcbiAgICByZXNvbHZlcl9pcC5zZXR1cCgpO1xuICAgIGxvYWRfYmFsYW5jZXJfcGlja19maXJzdC5zZXR1cCgpO1xuICAgIGxvYWRfYmFsYW5jZXJfcm91bmRfcm9iaW4uc2V0dXAoKTtcbiAgICBsb2FkX2JhbGFuY2VyX291dGxpZXJfZGV0ZWN0aW9uLnNldHVwKCk7XG4gICAgY2hhbm5lbHouc2V0dXAoKTtcbn0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJleHBlcmltZW50YWwiLCJTZXJ2ZXJJbnRlcmNlcHRpbmdDYWxsIiwiUmVzcG9uZGVyQnVpbGRlciIsIlNlcnZlckxpc3RlbmVyQnVpbGRlciIsImFkZEFkbWluU2VydmljZXNUb1NlcnZlciIsImdldENoYW5uZWx6SGFuZGxlcnMiLCJnZXRDaGFubmVselNlcnZpY2VEZWZpbml0aW9uIiwiSW50ZXJjZXB0b3JDb25maWd1cmF0aW9uRXJyb3IiLCJJbnRlcmNlcHRpbmdDYWxsIiwiUmVxdWVzdGVyQnVpbGRlciIsIkxpc3RlbmVyQnVpbGRlciIsIlN0YXR1c0J1aWxkZXIiLCJnZXRDbGllbnRDaGFubmVsIiwiU2VydmVyQ3JlZGVudGlhbHMiLCJTZXJ2ZXIiLCJzZXRMb2dWZXJib3NpdHkiLCJzZXRMb2dnZXIiLCJsb2FkIiwibG9hZE9iamVjdCIsIkNhbGxDcmVkZW50aWFscyIsIkNoYW5uZWxDcmVkZW50aWFscyIsIndhaXRGb3JDbGllbnRSZWFkeSIsImNsb3NlQ2xpZW50IiwiQ2hhbm5lbCIsIm1ha2VHZW5lcmljQ2xpZW50Q29uc3RydWN0b3IiLCJtYWtlQ2xpZW50Q29uc3RydWN0b3IiLCJsb2FkUGFja2FnZURlZmluaXRpb24iLCJDbGllbnQiLCJjb21wcmVzc2lvbkFsZ29yaXRobXMiLCJwcm9wYWdhdGUiLCJjb25uZWN0aXZpdHlTdGF0ZSIsInN0YXR1cyIsImxvZ1ZlcmJvc2l0eSIsIk1ldGFkYXRhIiwiY3JlZGVudGlhbHMiLCJjYWxsX2NyZWRlbnRpYWxzXzEiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCIsImNoYW5uZWxfMSIsIkNoYW5uZWxJbXBsZW1lbnRhdGlvbiIsImNvbXByZXNzaW9uX2FsZ29yaXRobXNfMSIsIkNvbXByZXNzaW9uQWxnb3JpdGhtcyIsImNvbm5lY3Rpdml0eV9zdGF0ZV8xIiwiQ29ubmVjdGl2aXR5U3RhdGUiLCJjaGFubmVsX2NyZWRlbnRpYWxzXzEiLCJjbGllbnRfMSIsImNvbnN0YW50c18xIiwiTG9nVmVyYm9zaXR5IiwiU3RhdHVzIiwiUHJvcGFnYXRlIiwibG9nZ2luZyIsIm1ha2VfY2xpZW50XzEiLCJtZXRhZGF0YV8xIiwic2VydmVyXzEiLCJzZXJ2ZXJfY3JlZGVudGlhbHNfMSIsInN0YXR1c19idWlsZGVyXzEiLCJjb21iaW5lQ2hhbm5lbENyZWRlbnRpYWxzIiwiY2hhbm5lbENyZWRlbnRpYWxzIiwiY2FsbENyZWRlbnRpYWxzIiwicmVkdWNlIiwiYWNjIiwib3RoZXIiLCJjb21wb3NlIiwiY29tYmluZUNhbGxDcmVkZW50aWFscyIsImZpcnN0IiwiYWRkaXRpb25hbCIsImNyZWF0ZUluc2VjdXJlIiwiY3JlYXRlU3NsIiwiY3JlYXRlRnJvbVNlY3VyZUNvbnRleHQiLCJjcmVhdGVGcm9tTWV0YWRhdGFHZW5lcmF0b3IiLCJjcmVhdGVGcm9tR29vZ2xlQ3JlZGVudGlhbCIsImNyZWF0ZUVtcHR5IiwiY2xpZW50IiwiY2xvc2UiLCJkZWFkbGluZSIsImNhbGxiYWNrIiwid2FpdEZvclJlYWR5Iiwib3B0aW9ucyIsIkVycm9yIiwiZmlsZW5hbWUiLCJmb3JtYXQiLCJsb2dnZXIiLCJ2ZXJib3NpdHkiLCJzZXRMb2dnZXJWZXJib3NpdHkiLCJwcm90b3R5cGUiLCJnZXRDaGFubmVsIiwiY2FsbCIsImNsaWVudF9pbnRlcmNlcHRvcnNfMSIsImNoYW5uZWx6XzEiLCJhZG1pbl8xIiwic2VydmVyX2ludGVyY2VwdG9yc18xIiwicmVzb2x2ZXJfZG5zIiwicmVzb2x2ZXJfdWRzIiwicmVzb2x2ZXJfaXAiLCJsb2FkX2JhbGFuY2VyX3BpY2tfZmlyc3QiLCJsb2FkX2JhbGFuY2VyX3JvdW5kX3JvYmluIiwibG9hZF9iYWxhbmNlcl9vdXRsaWVyX2RldGVjdGlvbiIsImNoYW5uZWx6Iiwic2V0dXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/internal-channel.js":
/*!******************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/internal-channel.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InternalChannel = exports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = void 0;\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\nconst resolving_load_balancer_1 = __webpack_require__(/*! ./resolving-load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js\");\nconst subchannel_pool_1 = __webpack_require__(/*! ./subchannel-pool */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst filter_stack_1 = __webpack_require__(/*! ./filter-stack */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\");\nconst compression_filter_1 = __webpack_require__(/*! ./compression-filter */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst http_proxy_1 = __webpack_require__(/*! ./http_proxy */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst load_balancing_call_1 = __webpack_require__(/*! ./load-balancing-call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js\");\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js\");\nconst resolving_call_1 = __webpack_require__(/*! ./resolving-call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-call.js\");\nconst call_number_1 = __webpack_require__(/*! ./call-number */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-number.js\");\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\nconst retrying_call_1 = __webpack_require__(/*! ./retrying-call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/retrying-call.js\");\nconst subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\n/**\n * See https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_args\n */ const MAX_TIMEOUT_TIME = 2147483647;\nconst MIN_IDLE_TIMEOUT_MS = 1000;\n// 30 minutes\nconst DEFAULT_IDLE_TIMEOUT_MS = 30 * 60 * 1000;\nconst RETRY_THROTTLER_MAP = new Map();\nconst DEFAULT_RETRY_BUFFER_SIZE_BYTES = 1 << 24; // 16 MB\nconst DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES = 1 << 20; // 1 MB\nclass ChannelSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\n    constructor(childSubchannel, channel){\n        super(childSubchannel);\n        this.channel = channel;\n        this.refCount = 0;\n        this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime)=>{\n            channel.throttleKeepalive(keepaliveTime);\n        };\n    }\n    ref() {\n        if (this.refCount === 0) {\n            this.child.addConnectivityStateListener(this.subchannelStateListener);\n            this.channel.addWrappedSubchannel(this);\n        }\n        this.child.ref();\n        this.refCount += 1;\n    }\n    unref() {\n        this.child.unref();\n        this.refCount -= 1;\n        if (this.refCount <= 0) {\n            this.child.removeConnectivityStateListener(this.subchannelStateListener);\n            this.channel.removeWrappedSubchannel(this);\n        }\n    }\n}\nclass ShutdownPicker {\n    pick(pickArgs) {\n        return {\n            pickResultType: picker_1.PickResultType.DROP,\n            status: {\n                code: constants_1.Status.UNAVAILABLE,\n                details: \"Channel closed before call started\",\n                metadata: new metadata_1.Metadata()\n            },\n            subchannel: null,\n            onCallStarted: null,\n            onCallEnded: null\n        };\n    }\n}\nexports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = \"grpc.internal.no_subchannel\";\nclass ChannelzInfoTracker {\n    constructor(target){\n        this.target = target;\n        this.trace = new channelz_1.ChannelzTrace();\n        this.callTracker = new channelz_1.ChannelzCallTracker();\n        this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\n        this.state = connectivity_state_1.ConnectivityState.IDLE;\n    }\n    getChannelzInfoCallback() {\n        return ()=>{\n            return {\n                target: this.target,\n                state: this.state,\n                trace: this.trace,\n                callTracker: this.callTracker,\n                children: this.childrenTracker.getChildLists()\n            };\n        };\n    }\n}\nclass InternalChannel {\n    constructor(target, credentials, options){\n        var _a, _b, _c, _d, _e, _f;\n        this.credentials = credentials;\n        this.options = options;\n        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\n        this.currentPicker = new picker_1.UnavailablePicker();\n        /**\n         * Calls queued up to get a call config. Should only be populated before the\n         * first time the resolver returns a result, which includes the ConfigSelector.\n         */ this.configSelectionQueue = [];\n        this.pickQueue = [];\n        this.connectivityStateWatchers = [];\n        /**\n         * This timer does not do anything on its own. Its purpose is to hold the\n         * event loop open while there are any pending calls for the channel that\n         * have not yet been assigned to specific subchannels. In other words,\n         * the invariant is that callRefTimer is reffed if and only if pickQueue\n         * is non-empty. In addition, the timer is null while the state is IDLE or\n         * SHUTDOWN and there are no pending calls.\n         */ this.callRefTimer = null;\n        this.configSelector = null;\n        /**\n         * This is the error from the name resolver if it failed most recently. It\n         * is only used to end calls that start while there is no config selector\n         * and the name resolver is in backoff, so it should be nulled if\n         * configSelector becomes set or the channel state becomes anything other\n         * than TRANSIENT_FAILURE.\n         */ this.currentResolutionError = null;\n        this.wrappedSubchannels = new Set();\n        this.callCount = 0;\n        this.idleTimer = null;\n        // Channelz info\n        this.channelzEnabled = true;\n        /**\n         * Randomly generated ID to be passed to the config selector, for use by\n         * ring_hash in xDS. An integer distributed approximately uniformly between\n         * 0 and MAX_SAFE_INTEGER.\n         */ this.randomChannelId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n        if (typeof target !== \"string\") {\n            throw new TypeError(\"Channel target must be a string\");\n        }\n        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\n            throw new TypeError(\"Channel credentials must be a ChannelCredentials object\");\n        }\n        if (options) {\n            if (typeof options !== \"object\") {\n                throw new TypeError(\"Channel options must be an object\");\n            }\n        }\n        this.channelzInfoTracker = new ChannelzInfoTracker(target);\n        const originalTargetUri = (0, uri_parser_1.parseUri)(target);\n        if (originalTargetUri === null) {\n            throw new Error(`Could not parse target name \"${target}\"`);\n        }\n        /* This ensures that the target has a scheme that is registered with the\n         * resolver */ const defaultSchemeMapResult = (0, resolver_1.mapUriDefaultScheme)(originalTargetUri);\n        if (defaultSchemeMapResult === null) {\n            throw new Error(`Could not find a default scheme for target name \"${target}\"`);\n        }\n        if (this.options[\"grpc.enable_channelz\"] === 0) {\n            this.channelzEnabled = false;\n        }\n        this.channelzRef = (0, channelz_1.registerChannelzChannel)(target, this.channelzInfoTracker.getChannelzInfoCallback(), this.channelzEnabled);\n        if (this.channelzEnabled) {\n            this.channelzInfoTracker.trace.addTrace(\"CT_INFO\", \"Channel created\");\n        }\n        if (this.options[\"grpc.default_authority\"]) {\n            this.defaultAuthority = this.options[\"grpc.default_authority\"];\n        } else {\n            this.defaultAuthority = (0, resolver_1.getDefaultAuthority)(defaultSchemeMapResult);\n        }\n        const proxyMapResult = (0, http_proxy_1.mapProxyName)(defaultSchemeMapResult, options);\n        this.target = proxyMapResult.target;\n        this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);\n        /* The global boolean parameter to getSubchannelPool has the inverse meaning to what\n         * the grpc.use_local_subchannel_pool channel option means. */ this.subchannelPool = (0, subchannel_pool_1.getSubchannelPool)(((_a = options[\"grpc.use_local_subchannel_pool\"]) !== null && _a !== void 0 ? _a : 0) === 0);\n        this.retryBufferTracker = new retrying_call_1.MessageBufferTracker((_b = options[\"grpc.retry_buffer_size\"]) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_BUFFER_SIZE_BYTES, (_c = options[\"grpc.per_rpc_retry_buffer_size\"]) !== null && _c !== void 0 ? _c : DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES);\n        this.keepaliveTime = (_d = options[\"grpc.keepalive_time_ms\"]) !== null && _d !== void 0 ? _d : -1;\n        this.idleTimeoutMs = Math.max((_e = options[\"grpc.client_idle_timeout_ms\"]) !== null && _e !== void 0 ? _e : DEFAULT_IDLE_TIMEOUT_MS, MIN_IDLE_TIMEOUT_MS);\n        const channelControlHelper = {\n            createSubchannel: (subchannelAddress, subchannelArgs)=>{\n                const finalSubchannelArgs = {};\n                for (const [key, value] of Object.entries(subchannelArgs)){\n                    if (!key.startsWith(exports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX)) {\n                        finalSubchannelArgs[key] = value;\n                    }\n                }\n                const subchannel = this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, finalSubchannelArgs, this.credentials);\n                subchannel.throttleKeepalive(this.keepaliveTime);\n                if (this.channelzEnabled) {\n                    this.channelzInfoTracker.trace.addTrace(\"CT_INFO\", \"Created subchannel or used existing subchannel\", subchannel.getChannelzRef());\n                }\n                const wrappedSubchannel = new ChannelSubchannelWrapper(subchannel, this);\n                return wrappedSubchannel;\n            },\n            updateState: (connectivityState, picker)=>{\n                this.currentPicker = picker;\n                const queueCopy = this.pickQueue.slice();\n                this.pickQueue = [];\n                if (queueCopy.length > 0) {\n                    this.callRefTimerUnref();\n                }\n                for (const call of queueCopy){\n                    call.doPick();\n                }\n                this.updateState(connectivityState);\n            },\n            requestReresolution: ()=>{\n                // This should never be called.\n                throw new Error(\"Resolving load balancer should never call requestReresolution\");\n            },\n            addChannelzChild: (child)=>{\n                if (this.channelzEnabled) {\n                    this.channelzInfoTracker.childrenTracker.refChild(child);\n                }\n            },\n            removeChannelzChild: (child)=>{\n                if (this.channelzEnabled) {\n                    this.channelzInfoTracker.childrenTracker.unrefChild(child);\n                }\n            }\n        };\n        this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, options, (serviceConfig, configSelector)=>{\n            var _a;\n            if (serviceConfig.retryThrottling) {\n                RETRY_THROTTLER_MAP.set(this.getTarget(), new retrying_call_1.RetryThrottler(serviceConfig.retryThrottling.maxTokens, serviceConfig.retryThrottling.tokenRatio, RETRY_THROTTLER_MAP.get(this.getTarget())));\n            } else {\n                RETRY_THROTTLER_MAP.delete(this.getTarget());\n            }\n            if (this.channelzEnabled) {\n                this.channelzInfoTracker.trace.addTrace(\"CT_INFO\", \"Address resolution succeeded\");\n            }\n            (_a = this.configSelector) === null || _a === void 0 ? void 0 : _a.unref();\n            this.configSelector = configSelector;\n            this.currentResolutionError = null;\n            /* We process the queue asynchronously to ensure that the corresponding\n             * load balancer update has completed. */ process.nextTick(()=>{\n                const localQueue = this.configSelectionQueue;\n                this.configSelectionQueue = [];\n                if (localQueue.length > 0) {\n                    this.callRefTimerUnref();\n                }\n                for (const call of localQueue){\n                    call.getConfig();\n                }\n            });\n        }, (status)=>{\n            if (this.channelzEnabled) {\n                this.channelzInfoTracker.trace.addTrace(\"CT_WARNING\", \"Address resolution failed with code \" + status.code + ' and details \"' + status.details + '\"');\n            }\n            if (this.configSelectionQueue.length > 0) {\n                this.trace(\"Name resolution failed with calls queued for config selection\");\n            }\n            if (this.configSelector === null) {\n                this.currentResolutionError = Object.assign(Object.assign({}, (0, control_plane_status_1.restrictControlPlaneStatusCode)(status.code, status.details)), {\n                    metadata: status.metadata\n                });\n            }\n            const localQueue = this.configSelectionQueue;\n            this.configSelectionQueue = [];\n            if (localQueue.length > 0) {\n                this.callRefTimerUnref();\n            }\n            for (const call of localQueue){\n                call.reportResolverError(status);\n            }\n        });\n        this.filterStackFactory = new filter_stack_1.FilterStackFactory([\n            new compression_filter_1.CompressionFilterFactory(this, this.options)\n        ]);\n        this.trace(\"Channel constructed with options \" + JSON.stringify(options, undefined, 2));\n        const error = new Error();\n        if ((0, logging_1.isTracerEnabled)(\"channel_stacktrace\")) {\n            (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, \"channel_stacktrace\", \"(\" + this.channelzRef.id + \") \" + \"Channel constructed \\n\" + ((_f = error.stack) === null || _f === void 0 ? void 0 : _f.substring(error.stack.indexOf(\"\\n\") + 1)));\n        }\n        this.lastActivityTimestamp = new Date();\n    }\n    trace(text, verbosityOverride) {\n        (0, logging_1.trace)(verbosityOverride !== null && verbosityOverride !== void 0 ? verbosityOverride : constants_1.LogVerbosity.DEBUG, \"channel\", \"(\" + this.channelzRef.id + \") \" + (0, uri_parser_1.uriToString)(this.target) + \" \" + text);\n    }\n    callRefTimerRef() {\n        var _a, _b, _c, _d;\n        if (!this.callRefTimer) {\n            this.callRefTimer = setInterval(()=>{}, MAX_TIMEOUT_TIME);\n        }\n        // If the hasRef function does not exist, always run the code\n        if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n            this.trace(\"callRefTimer.ref | configSelectionQueue.length=\" + this.configSelectionQueue.length + \" pickQueue.length=\" + this.pickQueue.length);\n            (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);\n        }\n    }\n    callRefTimerUnref() {\n        var _a, _b, _c;\n        // If the timer or the hasRef function does not exist, always run the code\n        if (!((_a = this.callRefTimer) === null || _a === void 0 ? void 0 : _a.hasRef) || this.callRefTimer.hasRef()) {\n            this.trace(\"callRefTimer.unref | configSelectionQueue.length=\" + this.configSelectionQueue.length + \" pickQueue.length=\" + this.pickQueue.length);\n            (_c = (_b = this.callRefTimer) === null || _b === void 0 ? void 0 : _b.unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n        }\n    }\n    removeConnectivityStateWatcher(watcherObject) {\n        const watcherIndex = this.connectivityStateWatchers.findIndex((value)=>value === watcherObject);\n        if (watcherIndex >= 0) {\n            this.connectivityStateWatchers.splice(watcherIndex, 1);\n        }\n    }\n    updateState(newState) {\n        (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, \"connectivity_state\", \"(\" + this.channelzRef.id + \") \" + (0, uri_parser_1.uriToString)(this.target) + \" \" + connectivity_state_1.ConnectivityState[this.connectivityState] + \" -> \" + connectivity_state_1.ConnectivityState[newState]);\n        if (this.channelzEnabled) {\n            this.channelzInfoTracker.trace.addTrace(\"CT_INFO\", \"Connectivity state change to \" + connectivity_state_1.ConnectivityState[newState]);\n        }\n        this.connectivityState = newState;\n        this.channelzInfoTracker.state = newState;\n        const watchersCopy = this.connectivityStateWatchers.slice();\n        for (const watcherObject of watchersCopy){\n            if (newState !== watcherObject.currentState) {\n                if (watcherObject.timer) {\n                    clearTimeout(watcherObject.timer);\n                }\n                this.removeConnectivityStateWatcher(watcherObject);\n                watcherObject.callback();\n            }\n        }\n        if (newState !== connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n            this.currentResolutionError = null;\n        }\n    }\n    throttleKeepalive(newKeepaliveTime) {\n        if (newKeepaliveTime > this.keepaliveTime) {\n            this.keepaliveTime = newKeepaliveTime;\n            for (const wrappedSubchannel of this.wrappedSubchannels){\n                wrappedSubchannel.throttleKeepalive(newKeepaliveTime);\n            }\n        }\n    }\n    addWrappedSubchannel(wrappedSubchannel) {\n        this.wrappedSubchannels.add(wrappedSubchannel);\n    }\n    removeWrappedSubchannel(wrappedSubchannel) {\n        this.wrappedSubchannels.delete(wrappedSubchannel);\n    }\n    doPick(metadata, extraPickInfo) {\n        return this.currentPicker.pick({\n            metadata: metadata,\n            extraPickInfo: extraPickInfo\n        });\n    }\n    queueCallForPick(call) {\n        this.pickQueue.push(call);\n        this.callRefTimerRef();\n    }\n    getConfig(method, metadata) {\n        if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN) {\n            this.resolvingLoadBalancer.exitIdle();\n        }\n        if (this.configSelector) {\n            return {\n                type: \"SUCCESS\",\n                config: this.configSelector.invoke(method, metadata, this.randomChannelId)\n            };\n        } else {\n            if (this.currentResolutionError) {\n                return {\n                    type: \"ERROR\",\n                    error: this.currentResolutionError\n                };\n            } else {\n                return {\n                    type: \"NONE\"\n                };\n            }\n        }\n    }\n    queueCallForConfig(call) {\n        this.configSelectionQueue.push(call);\n        this.callRefTimerRef();\n    }\n    enterIdle() {\n        this.resolvingLoadBalancer.destroy();\n        this.updateState(connectivity_state_1.ConnectivityState.IDLE);\n        this.currentPicker = new picker_1.QueuePicker(this.resolvingLoadBalancer);\n        if (this.idleTimer) {\n            clearTimeout(this.idleTimer);\n            this.idleTimer = null;\n        }\n        if (this.callRefTimer) {\n            clearInterval(this.callRefTimer);\n            this.callRefTimer = null;\n        }\n    }\n    startIdleTimeout(timeoutMs) {\n        var _a, _b;\n        this.idleTimer = setTimeout(()=>{\n            if (this.callCount > 0) {\n                /* If there is currently a call, the channel will not go idle for a\n                 * period of at least idleTimeoutMs, so check again after that time.\n                 */ this.startIdleTimeout(this.idleTimeoutMs);\n                return;\n            }\n            const now = new Date();\n            const timeSinceLastActivity = now.valueOf() - this.lastActivityTimestamp.valueOf();\n            if (timeSinceLastActivity >= this.idleTimeoutMs) {\n                this.trace(\"Idle timer triggered after \" + this.idleTimeoutMs + \"ms of inactivity\");\n                this.enterIdle();\n            } else {\n                /* Whenever the timer fires with the latest activity being too recent,\n                 * set the timer again for the time when the time since the last\n                 * activity is equal to the timeout. This should result in the timer\n                 * firing no more than once every idleTimeoutMs/2 on average. */ this.startIdleTimeout(this.idleTimeoutMs - timeSinceLastActivity);\n            }\n        }, timeoutMs);\n        (_b = (_a = this.idleTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    maybeStartIdleTimer() {\n        if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN && !this.idleTimer) {\n            this.startIdleTimeout(this.idleTimeoutMs);\n        }\n    }\n    onCallStart() {\n        if (this.channelzEnabled) {\n            this.channelzInfoTracker.callTracker.addCallStarted();\n        }\n        this.callCount += 1;\n    }\n    onCallEnd(status) {\n        if (this.channelzEnabled) {\n            if (status.code === constants_1.Status.OK) {\n                this.channelzInfoTracker.callTracker.addCallSucceeded();\n            } else {\n                this.channelzInfoTracker.callTracker.addCallFailed();\n            }\n        }\n        this.callCount -= 1;\n        this.lastActivityTimestamp = new Date();\n        this.maybeStartIdleTimer();\n    }\n    createLoadBalancingCall(callConfig, method, host, credentials, deadline) {\n        const callNumber = (0, call_number_1.getNextCallNumber)();\n        this.trace(\"createLoadBalancingCall [\" + callNumber + '] method=\"' + method + '\"');\n        return new load_balancing_call_1.LoadBalancingCall(this, callConfig, method, host, credentials, deadline, callNumber);\n    }\n    createRetryingCall(callConfig, method, host, credentials, deadline) {\n        const callNumber = (0, call_number_1.getNextCallNumber)();\n        this.trace(\"createRetryingCall [\" + callNumber + '] method=\"' + method + '\"');\n        return new retrying_call_1.RetryingCall(this, callConfig, method, host, credentials, deadline, callNumber, this.retryBufferTracker, RETRY_THROTTLER_MAP.get(this.getTarget()));\n    }\n    createResolvingCall(method, deadline, host, parentCall, propagateFlags) {\n        const callNumber = (0, call_number_1.getNextCallNumber)();\n        this.trace(\"createResolvingCall [\" + callNumber + '] method=\"' + method + '\", deadline=' + (0, deadline_1.deadlineToString)(deadline));\n        const finalOptions = {\n            deadline: deadline,\n            flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,\n            host: host !== null && host !== void 0 ? host : this.defaultAuthority,\n            parentCall: parentCall\n        };\n        const call = new resolving_call_1.ResolvingCall(this, method, finalOptions, this.filterStackFactory.clone(), callNumber);\n        this.onCallStart();\n        call.addStatusWatcher((status)=>{\n            this.onCallEnd(status);\n        });\n        return call;\n    }\n    close() {\n        var _a;\n        this.resolvingLoadBalancer.destroy();\n        this.updateState(connectivity_state_1.ConnectivityState.SHUTDOWN);\n        this.currentPicker = new ShutdownPicker();\n        for (const call of this.configSelectionQueue){\n            call.cancelWithStatus(constants_1.Status.UNAVAILABLE, \"Channel closed before call started\");\n        }\n        this.configSelectionQueue = [];\n        for (const call of this.pickQueue){\n            call.cancelWithStatus(constants_1.Status.UNAVAILABLE, \"Channel closed before call started\");\n        }\n        this.pickQueue = [];\n        if (this.callRefTimer) {\n            clearInterval(this.callRefTimer);\n        }\n        if (this.idleTimer) {\n            clearTimeout(this.idleTimer);\n        }\n        if (this.channelzEnabled) {\n            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n        }\n        this.subchannelPool.unrefUnusedSubchannels();\n        (_a = this.configSelector) === null || _a === void 0 ? void 0 : _a.unref();\n        this.configSelector = null;\n    }\n    getTarget() {\n        return (0, uri_parser_1.uriToString)(this.target);\n    }\n    getConnectivityState(tryToConnect) {\n        const connectivityState = this.connectivityState;\n        if (tryToConnect) {\n            this.resolvingLoadBalancer.exitIdle();\n            this.lastActivityTimestamp = new Date();\n            this.maybeStartIdleTimer();\n        }\n        return connectivityState;\n    }\n    watchConnectivityState(currentState, deadline, callback) {\n        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n            throw new Error(\"Channel has been shut down\");\n        }\n        let timer = null;\n        if (deadline !== Infinity) {\n            const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);\n            const now = new Date();\n            if (deadline === -Infinity || deadlineDate <= now) {\n                process.nextTick(callback, new Error(\"Deadline passed without connectivity state change\"));\n                return;\n            }\n            timer = setTimeout(()=>{\n                this.removeConnectivityStateWatcher(watcherObject);\n                callback(new Error(\"Deadline passed without connectivity state change\"));\n            }, deadlineDate.getTime() - now.getTime());\n        }\n        const watcherObject = {\n            currentState,\n            callback,\n            timer\n        };\n        this.connectivityStateWatchers.push(watcherObject);\n    }\n    /**\n     * Get the channelz reference object for this channel. The returned value is\n     * garbage if channelz is disabled for this channel.\n     * @returns\n     */ getChannelzRef() {\n        return this.channelzRef;\n    }\n    createCall(method, deadline, host, parentCall, propagateFlags) {\n        if (typeof method !== \"string\") {\n            throw new TypeError(\"Channel#createCall: method must be a string\");\n        }\n        if (!(typeof deadline === \"number\" || deadline instanceof Date)) {\n            throw new TypeError(\"Channel#createCall: deadline must be a number or Date\");\n        }\n        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n            throw new Error(\"Channel has been shut down\");\n        }\n        return this.createResolvingCall(method, deadline, host, parentCall, propagateFlags);\n    }\n    getOptions() {\n        return this.options;\n    }\n}\nexports.InternalChannel = InternalChannel; //# sourceMappingURL=internal-channel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/internal-channel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChildLoadBalancerHandler = void 0;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst TYPE_NAME = \"child_load_balancer_helper\";\nclass ChildLoadBalancerHandler {\n    constructor(channelControlHelper){\n        this.channelControlHelper = channelControlHelper;\n        this.currentChild = null;\n        this.pendingChild = null;\n        this.latestConfig = null;\n        this.ChildPolicyHelper = class {\n            constructor(parent){\n                this.parent = parent;\n                this.child = null;\n            }\n            createSubchannel(subchannelAddress, subchannelArgs) {\n                return this.parent.channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\n            }\n            updateState(connectivityState, picker, errorMessage) {\n                var _a;\n                if (this.calledByPendingChild()) {\n                    if (connectivityState === connectivity_state_1.ConnectivityState.CONNECTING) {\n                        return;\n                    }\n                    (_a = this.parent.currentChild) === null || _a === void 0 ? void 0 : _a.destroy();\n                    this.parent.currentChild = this.parent.pendingChild;\n                    this.parent.pendingChild = null;\n                } else if (!this.calledByCurrentChild()) {\n                    return;\n                }\n                this.parent.channelControlHelper.updateState(connectivityState, picker, errorMessage);\n            }\n            requestReresolution() {\n                var _a;\n                const latestChild = (_a = this.parent.pendingChild) !== null && _a !== void 0 ? _a : this.parent.currentChild;\n                if (this.child === latestChild) {\n                    this.parent.channelControlHelper.requestReresolution();\n                }\n            }\n            setChild(newChild) {\n                this.child = newChild;\n            }\n            addChannelzChild(child) {\n                this.parent.channelControlHelper.addChannelzChild(child);\n            }\n            removeChannelzChild(child) {\n                this.parent.channelControlHelper.removeChannelzChild(child);\n            }\n            calledByPendingChild() {\n                return this.child === this.parent.pendingChild;\n            }\n            calledByCurrentChild() {\n                return this.child === this.parent.currentChild;\n            }\n        };\n    }\n    configUpdateRequiresNewPolicyInstance(oldConfig, newConfig) {\n        return oldConfig.getLoadBalancerName() !== newConfig.getLoadBalancerName();\n    }\n    /**\n     * Prerequisites: lbConfig !== null and lbConfig.name is registered\n     * @param endpointList\n     * @param lbConfig\n     * @param attributes\n     */ updateAddressList(endpointList, lbConfig, options) {\n        let childToUpdate;\n        if (this.currentChild === null || this.latestConfig === null || this.configUpdateRequiresNewPolicyInstance(this.latestConfig, lbConfig)) {\n            const newHelper = new this.ChildPolicyHelper(this);\n            const newChild = (0, load_balancer_1.createLoadBalancer)(lbConfig, newHelper);\n            newHelper.setChild(newChild);\n            if (this.currentChild === null) {\n                this.currentChild = newChild;\n                childToUpdate = this.currentChild;\n            } else {\n                if (this.pendingChild) {\n                    this.pendingChild.destroy();\n                }\n                this.pendingChild = newChild;\n                childToUpdate = this.pendingChild;\n            }\n        } else {\n            if (this.pendingChild === null) {\n                childToUpdate = this.currentChild;\n            } else {\n                childToUpdate = this.pendingChild;\n            }\n        }\n        this.latestConfig = lbConfig;\n        childToUpdate.updateAddressList(endpointList, lbConfig, options);\n    }\n    exitIdle() {\n        if (this.currentChild) {\n            this.currentChild.exitIdle();\n            if (this.pendingChild) {\n                this.pendingChild.exitIdle();\n            }\n        }\n    }\n    resetBackoff() {\n        if (this.currentChild) {\n            this.currentChild.resetBackoff();\n            if (this.pendingChild) {\n                this.pendingChild.resetBackoff();\n            }\n        }\n    }\n    destroy() {\n        /* Note: state updates are only propagated from the child balancer if that\n         * object is equal to this.currentChild or this.pendingChild. Since this\n         * function sets both of those to null, no further state updates will\n         * occur after this function returns. */ if (this.currentChild) {\n            this.currentChild.destroy();\n            this.currentChild = null;\n        }\n        if (this.pendingChild) {\n            this.pendingChild.destroy();\n            this.pendingChild = null;\n        }\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.ChildLoadBalancerHandler = ChildLoadBalancerHandler; //# sourceMappingURL=load-balancer-child-handler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ var _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OutlierDetectionLoadBalancer = exports.OutlierDetectionLoadBalancingConfig = void 0;\nexports.setup = setup;\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst duration_1 = __webpack_require__(/*! ./duration */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/duration.js\");\nconst experimental_1 = __webpack_require__(/*! ./experimental */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/experimental.js\");\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = \"outlier_detection\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = \"outlier_detection\";\nconst OUTLIER_DETECTION_ENABLED = ((_a = process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION) !== null && _a !== void 0 ? _a : \"true\") === \"true\";\nconst defaultSuccessRateEjectionConfig = {\n    stdev_factor: 1900,\n    enforcement_percentage: 100,\n    minimum_hosts: 5,\n    request_volume: 100\n};\nconst defaultFailurePercentageEjectionConfig = {\n    threshold: 85,\n    enforcement_percentage: 100,\n    minimum_hosts: 5,\n    request_volume: 50\n};\nfunction validateFieldType(obj, fieldName, expectedType, objectName) {\n    if (fieldName in obj && obj[fieldName] !== undefined && typeof obj[fieldName] !== expectedType) {\n        const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n        throw new Error(`outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[fieldName]}`);\n    }\n}\nfunction validatePositiveDuration(obj, fieldName, objectName) {\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n    if (fieldName in obj && obj[fieldName] !== undefined) {\n        if (!(0, duration_1.isDuration)(obj[fieldName])) {\n            throw new Error(`outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[fieldName]}`);\n        }\n        if (!(obj[fieldName].seconds >= 0 && obj[fieldName].seconds <= 315576000000 && obj[fieldName].nanos >= 0 && obj[fieldName].nanos <= 999999999)) {\n            throw new Error(`outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`);\n        }\n    }\n}\nfunction validatePercentage(obj, fieldName, objectName) {\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n    validateFieldType(obj, fieldName, \"number\", objectName);\n    if (fieldName in obj && obj[fieldName] !== undefined && !(obj[fieldName] >= 0 && obj[fieldName] <= 100)) {\n        throw new Error(`outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`);\n    }\n}\nclass OutlierDetectionLoadBalancingConfig {\n    constructor(intervalMs, baseEjectionTimeMs, maxEjectionTimeMs, maxEjectionPercent, successRateEjection, failurePercentageEjection, childPolicy){\n        this.childPolicy = childPolicy;\n        if (childPolicy.getLoadBalancerName() === \"pick_first\") {\n            throw new Error(\"outlier_detection LB policy cannot have a pick_first child policy\");\n        }\n        this.intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 10000;\n        this.baseEjectionTimeMs = baseEjectionTimeMs !== null && baseEjectionTimeMs !== void 0 ? baseEjectionTimeMs : 30000;\n        this.maxEjectionTimeMs = maxEjectionTimeMs !== null && maxEjectionTimeMs !== void 0 ? maxEjectionTimeMs : 300000;\n        this.maxEjectionPercent = maxEjectionPercent !== null && maxEjectionPercent !== void 0 ? maxEjectionPercent : 10;\n        this.successRateEjection = successRateEjection ? Object.assign(Object.assign({}, defaultSuccessRateEjectionConfig), successRateEjection) : null;\n        this.failurePercentageEjection = failurePercentageEjection ? Object.assign(Object.assign({}, defaultFailurePercentageEjectionConfig), failurePercentageEjection) : null;\n    }\n    getLoadBalancerName() {\n        return TYPE_NAME;\n    }\n    toJsonObject() {\n        var _a, _b;\n        return {\n            outlier_detection: {\n                interval: (0, duration_1.msToDuration)(this.intervalMs),\n                base_ejection_time: (0, duration_1.msToDuration)(this.baseEjectionTimeMs),\n                max_ejection_time: (0, duration_1.msToDuration)(this.maxEjectionTimeMs),\n                max_ejection_percent: this.maxEjectionPercent,\n                success_rate_ejection: (_a = this.successRateEjection) !== null && _a !== void 0 ? _a : undefined,\n                failure_percentage_ejection: (_b = this.failurePercentageEjection) !== null && _b !== void 0 ? _b : undefined,\n                child_policy: [\n                    this.childPolicy.toJsonObject()\n                ]\n            }\n        };\n    }\n    getIntervalMs() {\n        return this.intervalMs;\n    }\n    getBaseEjectionTimeMs() {\n        return this.baseEjectionTimeMs;\n    }\n    getMaxEjectionTimeMs() {\n        return this.maxEjectionTimeMs;\n    }\n    getMaxEjectionPercent() {\n        return this.maxEjectionPercent;\n    }\n    getSuccessRateEjectionConfig() {\n        return this.successRateEjection;\n    }\n    getFailurePercentageEjectionConfig() {\n        return this.failurePercentageEjection;\n    }\n    getChildPolicy() {\n        return this.childPolicy;\n    }\n    static createFromJson(obj) {\n        var _a;\n        validatePositiveDuration(obj, \"interval\");\n        validatePositiveDuration(obj, \"base_ejection_time\");\n        validatePositiveDuration(obj, \"max_ejection_time\");\n        validatePercentage(obj, \"max_ejection_percent\");\n        if (\"success_rate_ejection\" in obj && obj.success_rate_ejection !== undefined) {\n            if (typeof obj.success_rate_ejection !== \"object\") {\n                throw new Error(\"outlier detection config success_rate_ejection must be an object\");\n            }\n            validateFieldType(obj.success_rate_ejection, \"stdev_factor\", \"number\", \"success_rate_ejection\");\n            validatePercentage(obj.success_rate_ejection, \"enforcement_percentage\", \"success_rate_ejection\");\n            validateFieldType(obj.success_rate_ejection, \"minimum_hosts\", \"number\", \"success_rate_ejection\");\n            validateFieldType(obj.success_rate_ejection, \"request_volume\", \"number\", \"success_rate_ejection\");\n        }\n        if (\"failure_percentage_ejection\" in obj && obj.failure_percentage_ejection !== undefined) {\n            if (typeof obj.failure_percentage_ejection !== \"object\") {\n                throw new Error(\"outlier detection config failure_percentage_ejection must be an object\");\n            }\n            validatePercentage(obj.failure_percentage_ejection, \"threshold\", \"failure_percentage_ejection\");\n            validatePercentage(obj.failure_percentage_ejection, \"enforcement_percentage\", \"failure_percentage_ejection\");\n            validateFieldType(obj.failure_percentage_ejection, \"minimum_hosts\", \"number\", \"failure_percentage_ejection\");\n            validateFieldType(obj.failure_percentage_ejection, \"request_volume\", \"number\", \"failure_percentage_ejection\");\n        }\n        if (!(\"child_policy\" in obj) || !Array.isArray(obj.child_policy)) {\n            throw new Error(\"outlier detection config child_policy must be an array\");\n        }\n        const childPolicy = (0, load_balancer_1.selectLbConfigFromList)(obj.child_policy);\n        if (!childPolicy) {\n            throw new Error(\"outlier detection config child_policy: no valid recognized policy found\");\n        }\n        return new OutlierDetectionLoadBalancingConfig(obj.interval ? (0, duration_1.durationToMs)(obj.interval) : null, obj.base_ejection_time ? (0, duration_1.durationToMs)(obj.base_ejection_time) : null, obj.max_ejection_time ? (0, duration_1.durationToMs)(obj.max_ejection_time) : null, (_a = obj.max_ejection_percent) !== null && _a !== void 0 ? _a : null, obj.success_rate_ejection, obj.failure_percentage_ejection, childPolicy);\n    }\n}\nexports.OutlierDetectionLoadBalancingConfig = OutlierDetectionLoadBalancingConfig;\nclass OutlierDetectionSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\n    constructor(childSubchannel, mapEntry){\n        super(childSubchannel);\n        this.mapEntry = mapEntry;\n        this.refCount = 0;\n    }\n    ref() {\n        this.child.ref();\n        this.refCount += 1;\n    }\n    unref() {\n        this.child.unref();\n        this.refCount -= 1;\n        if (this.refCount <= 0) {\n            if (this.mapEntry) {\n                const index = this.mapEntry.subchannelWrappers.indexOf(this);\n                if (index >= 0) {\n                    this.mapEntry.subchannelWrappers.splice(index, 1);\n                }\n            }\n        }\n    }\n    eject() {\n        this.setHealthy(false);\n    }\n    uneject() {\n        this.setHealthy(true);\n    }\n    getMapEntry() {\n        return this.mapEntry;\n    }\n    getWrappedSubchannel() {\n        return this.child;\n    }\n}\nfunction createEmptyBucket() {\n    return {\n        success: 0,\n        failure: 0\n    };\n}\nclass CallCounter {\n    constructor(){\n        this.activeBucket = createEmptyBucket();\n        this.inactiveBucket = createEmptyBucket();\n    }\n    addSuccess() {\n        this.activeBucket.success += 1;\n    }\n    addFailure() {\n        this.activeBucket.failure += 1;\n    }\n    switchBuckets() {\n        this.inactiveBucket = this.activeBucket;\n        this.activeBucket = createEmptyBucket();\n    }\n    getLastSuccesses() {\n        return this.inactiveBucket.success;\n    }\n    getLastFailures() {\n        return this.inactiveBucket.failure;\n    }\n}\nclass OutlierDetectionPicker {\n    constructor(wrappedPicker, countCalls){\n        this.wrappedPicker = wrappedPicker;\n        this.countCalls = countCalls;\n    }\n    pick(pickArgs) {\n        const wrappedPick = this.wrappedPicker.pick(pickArgs);\n        if (wrappedPick.pickResultType === picker_1.PickResultType.COMPLETE) {\n            const subchannelWrapper = wrappedPick.subchannel;\n            const mapEntry = subchannelWrapper.getMapEntry();\n            if (mapEntry) {\n                let onCallEnded = wrappedPick.onCallEnded;\n                if (this.countCalls) {\n                    onCallEnded = (statusCode)=>{\n                        var _a;\n                        if (statusCode === constants_1.Status.OK) {\n                            mapEntry.counter.addSuccess();\n                        } else {\n                            mapEntry.counter.addFailure();\n                        }\n                        (_a = wrappedPick.onCallEnded) === null || _a === void 0 ? void 0 : _a.call(wrappedPick, statusCode);\n                    };\n                }\n                return Object.assign(Object.assign({}, wrappedPick), {\n                    subchannel: subchannelWrapper.getWrappedSubchannel(),\n                    onCallEnded: onCallEnded\n                });\n            } else {\n                return Object.assign(Object.assign({}, wrappedPick), {\n                    subchannel: subchannelWrapper.getWrappedSubchannel()\n                });\n            }\n        } else {\n            return wrappedPick;\n        }\n    }\n}\nclass OutlierDetectionLoadBalancer {\n    constructor(channelControlHelper){\n        this.entryMap = new subchannel_address_1.EndpointMap();\n        this.latestConfig = null;\n        this.timerStartTime = null;\n        this.childBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler((0, experimental_1.createChildChannelControlHelper)(channelControlHelper, {\n            createSubchannel: (subchannelAddress, subchannelArgs)=>{\n                const originalSubchannel = channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\n                const mapEntry = this.entryMap.getForSubchannelAddress(subchannelAddress);\n                const subchannelWrapper = new OutlierDetectionSubchannelWrapper(originalSubchannel, mapEntry);\n                if ((mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.currentEjectionTimestamp) !== null) {\n                    // If the address is ejected, propagate that to the new subchannel wrapper\n                    subchannelWrapper.eject();\n                }\n                mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.subchannelWrappers.push(subchannelWrapper);\n                return subchannelWrapper;\n            },\n            updateState: (connectivityState, picker, errorMessage)=>{\n                if (connectivityState === connectivity_state_1.ConnectivityState.READY) {\n                    channelControlHelper.updateState(connectivityState, new OutlierDetectionPicker(picker, this.isCountingEnabled()), errorMessage);\n                } else {\n                    channelControlHelper.updateState(connectivityState, picker, errorMessage);\n                }\n            }\n        }));\n        this.ejectionTimer = setInterval(()=>{}, 0);\n        clearInterval(this.ejectionTimer);\n    }\n    isCountingEnabled() {\n        return this.latestConfig !== null && (this.latestConfig.getSuccessRateEjectionConfig() !== null || this.latestConfig.getFailurePercentageEjectionConfig() !== null);\n    }\n    getCurrentEjectionPercent() {\n        let ejectionCount = 0;\n        for (const mapEntry of this.entryMap.values()){\n            if (mapEntry.currentEjectionTimestamp !== null) {\n                ejectionCount += 1;\n            }\n        }\n        return ejectionCount * 100 / this.entryMap.size;\n    }\n    runSuccessRateCheck(ejectionTimestamp) {\n        if (!this.latestConfig) {\n            return;\n        }\n        const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();\n        if (!successRateConfig) {\n            return;\n        }\n        trace(\"Running success rate check\");\n        // Step 1\n        const targetRequestVolume = successRateConfig.request_volume;\n        let addresesWithTargetVolume = 0;\n        const successRates = [];\n        for (const [endpoint, mapEntry] of this.entryMap.entries()){\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            trace(\"Stats for \" + (0, subchannel_address_1.endpointToString)(endpoint) + \": successes=\" + successes + \" failures=\" + failures + \" targetRequestVolume=\" + targetRequestVolume);\n            if (successes + failures >= targetRequestVolume) {\n                addresesWithTargetVolume += 1;\n                successRates.push(successes / (successes + failures));\n            }\n        }\n        trace(\"Found \" + addresesWithTargetVolume + \" success rate candidates; currentEjectionPercent=\" + this.getCurrentEjectionPercent() + \" successRates=[\" + successRates + \"]\");\n        if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {\n            return;\n        }\n        // Step 2\n        const successRateMean = successRates.reduce((a, b)=>a + b) / successRates.length;\n        let successRateDeviationSum = 0;\n        for (const rate of successRates){\n            const deviation = rate - successRateMean;\n            successRateDeviationSum += deviation * deviation;\n        }\n        const successRateVariance = successRateDeviationSum / successRates.length;\n        const successRateStdev = Math.sqrt(successRateVariance);\n        const ejectionThreshold = successRateMean - successRateStdev * (successRateConfig.stdev_factor / 1000);\n        trace(\"stdev=\" + successRateStdev + \" ejectionThreshold=\" + ejectionThreshold);\n        // Step 3\n        for (const [address, mapEntry] of this.entryMap.entries()){\n            // Step 3.i\n            if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {\n                break;\n            }\n            // Step 3.ii\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            if (successes + failures < targetRequestVolume) {\n                continue;\n            }\n            // Step 3.iii\n            const successRate = successes / (successes + failures);\n            trace(\"Checking candidate \" + address + \" successRate=\" + successRate);\n            if (successRate < ejectionThreshold) {\n                const randomNumber = Math.random() * 100;\n                trace(\"Candidate \" + address + \" randomNumber=\" + randomNumber + \" enforcement_percentage=\" + successRateConfig.enforcement_percentage);\n                if (randomNumber < successRateConfig.enforcement_percentage) {\n                    trace(\"Ejecting candidate \" + address);\n                    this.eject(mapEntry, ejectionTimestamp);\n                }\n            }\n        }\n    }\n    runFailurePercentageCheck(ejectionTimestamp) {\n        if (!this.latestConfig) {\n            return;\n        }\n        const failurePercentageConfig = this.latestConfig.getFailurePercentageEjectionConfig();\n        if (!failurePercentageConfig) {\n            return;\n        }\n        trace(\"Running failure percentage check. threshold=\" + failurePercentageConfig.threshold + \" request volume threshold=\" + failurePercentageConfig.request_volume);\n        // Step 1\n        let addressesWithTargetVolume = 0;\n        for (const mapEntry of this.entryMap.values()){\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            if (successes + failures >= failurePercentageConfig.request_volume) {\n                addressesWithTargetVolume += 1;\n            }\n        }\n        if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {\n            return;\n        }\n        // Step 2\n        for (const [address, mapEntry] of this.entryMap.entries()){\n            // Step 2.i\n            if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {\n                break;\n            }\n            // Step 2.ii\n            const successes = mapEntry.counter.getLastSuccesses();\n            const failures = mapEntry.counter.getLastFailures();\n            trace(\"Candidate successes=\" + successes + \" failures=\" + failures);\n            if (successes + failures < failurePercentageConfig.request_volume) {\n                continue;\n            }\n            // Step 2.iii\n            const failurePercentage = failures * 100 / (failures + successes);\n            if (failurePercentage > failurePercentageConfig.threshold) {\n                const randomNumber = Math.random() * 100;\n                trace(\"Candidate \" + address + \" randomNumber=\" + randomNumber + \" enforcement_percentage=\" + failurePercentageConfig.enforcement_percentage);\n                if (randomNumber < failurePercentageConfig.enforcement_percentage) {\n                    trace(\"Ejecting candidate \" + address);\n                    this.eject(mapEntry, ejectionTimestamp);\n                }\n            }\n        }\n    }\n    eject(mapEntry, ejectionTimestamp) {\n        mapEntry.currentEjectionTimestamp = new Date();\n        mapEntry.ejectionTimeMultiplier += 1;\n        for (const subchannelWrapper of mapEntry.subchannelWrappers){\n            subchannelWrapper.eject();\n        }\n    }\n    uneject(mapEntry) {\n        mapEntry.currentEjectionTimestamp = null;\n        for (const subchannelWrapper of mapEntry.subchannelWrappers){\n            subchannelWrapper.uneject();\n        }\n    }\n    switchAllBuckets() {\n        for (const mapEntry of this.entryMap.values()){\n            mapEntry.counter.switchBuckets();\n        }\n    }\n    startTimer(delayMs) {\n        var _a, _b;\n        this.ejectionTimer = setTimeout(()=>this.runChecks(), delayMs);\n        (_b = (_a = this.ejectionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    runChecks() {\n        const ejectionTimestamp = new Date();\n        trace(\"Ejection timer running\");\n        this.switchAllBuckets();\n        if (!this.latestConfig) {\n            return;\n        }\n        this.timerStartTime = ejectionTimestamp;\n        this.startTimer(this.latestConfig.getIntervalMs());\n        this.runSuccessRateCheck(ejectionTimestamp);\n        this.runFailurePercentageCheck(ejectionTimestamp);\n        for (const [address, mapEntry] of this.entryMap.entries()){\n            if (mapEntry.currentEjectionTimestamp === null) {\n                if (mapEntry.ejectionTimeMultiplier > 0) {\n                    mapEntry.ejectionTimeMultiplier -= 1;\n                }\n            } else {\n                const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();\n                const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();\n                const returnTime = new Date(mapEntry.currentEjectionTimestamp.getTime());\n                returnTime.setMilliseconds(returnTime.getMilliseconds() + Math.min(baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier, Math.max(baseEjectionTimeMs, maxEjectionTimeMs)));\n                if (returnTime < new Date()) {\n                    trace(\"Unejecting \" + address);\n                    this.uneject(mapEntry);\n                }\n            }\n        }\n    }\n    updateAddressList(endpointList, lbConfig, options) {\n        if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {\n            return;\n        }\n        trace(\"Received update with config: \" + JSON.stringify(lbConfig.toJsonObject(), undefined, 2));\n        for (const endpoint of endpointList){\n            if (!this.entryMap.has(endpoint)) {\n                trace(\"Adding map entry for \" + (0, subchannel_address_1.endpointToString)(endpoint));\n                this.entryMap.set(endpoint, {\n                    counter: new CallCounter(),\n                    currentEjectionTimestamp: null,\n                    ejectionTimeMultiplier: 0,\n                    subchannelWrappers: []\n                });\n            }\n        }\n        this.entryMap.deleteMissing(endpointList);\n        const childPolicy = lbConfig.getChildPolicy();\n        this.childBalancer.updateAddressList(endpointList, childPolicy, options);\n        if (lbConfig.getSuccessRateEjectionConfig() || lbConfig.getFailurePercentageEjectionConfig()) {\n            if (this.timerStartTime) {\n                trace(\"Previous timer existed. Replacing timer\");\n                clearTimeout(this.ejectionTimer);\n                const remainingDelay = lbConfig.getIntervalMs() - (new Date().getTime() - this.timerStartTime.getTime());\n                this.startTimer(remainingDelay);\n            } else {\n                trace(\"Starting new timer\");\n                this.timerStartTime = new Date();\n                this.startTimer(lbConfig.getIntervalMs());\n                this.switchAllBuckets();\n            }\n        } else {\n            trace(\"Counting disabled. Cancelling timer.\");\n            this.timerStartTime = null;\n            clearTimeout(this.ejectionTimer);\n            for (const mapEntry of this.entryMap.values()){\n                this.uneject(mapEntry);\n                mapEntry.ejectionTimeMultiplier = 0;\n            }\n        }\n        this.latestConfig = lbConfig;\n    }\n    exitIdle() {\n        this.childBalancer.exitIdle();\n    }\n    resetBackoff() {\n        this.childBalancer.resetBackoff();\n    }\n    destroy() {\n        clearTimeout(this.ejectionTimer);\n        this.childBalancer.destroy();\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.OutlierDetectionLoadBalancer = OutlierDetectionLoadBalancer;\nfunction setup() {\n    if (OUTLIER_DETECTION_ENABLED) {\n        (0, experimental_1.registerLoadBalancerType)(TYPE_NAME, OutlierDetectionLoadBalancer, OutlierDetectionLoadBalancingConfig);\n    }\n} //# sourceMappingURL=load-balancer-outlier-detection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LeafLoadBalancer = exports.PickFirstLoadBalancer = exports.PickFirstLoadBalancingConfig = void 0;\nexports.shuffled = shuffled;\nexports.setup = setup;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst subchannel_address_2 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst TRACER_NAME = \"pick_first\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = \"pick_first\";\n/**\n * Delay after starting a connection on a subchannel before starting a\n * connection on the next subchannel in the list, for Happy Eyeballs algorithm.\n */ const CONNECTION_DELAY_INTERVAL_MS = 250;\nclass PickFirstLoadBalancingConfig {\n    constructor(shuffleAddressList){\n        this.shuffleAddressList = shuffleAddressList;\n    }\n    getLoadBalancerName() {\n        return TYPE_NAME;\n    }\n    toJsonObject() {\n        return {\n            [TYPE_NAME]: {\n                shuffleAddressList: this.shuffleAddressList\n            }\n        };\n    }\n    getShuffleAddressList() {\n        return this.shuffleAddressList;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static createFromJson(obj) {\n        if (\"shuffleAddressList\" in obj && !(typeof obj.shuffleAddressList === \"boolean\")) {\n            throw new Error(\"pick_first config field shuffleAddressList must be a boolean if provided\");\n        }\n        return new PickFirstLoadBalancingConfig(obj.shuffleAddressList === true);\n    }\n}\nexports.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;\n/**\n * Picker for a `PickFirstLoadBalancer` in the READY state. Always returns the\n * picked subchannel.\n */ class PickFirstPicker {\n    constructor(subchannel){\n        this.subchannel = subchannel;\n    }\n    pick(pickArgs) {\n        return {\n            pickResultType: picker_1.PickResultType.COMPLETE,\n            subchannel: this.subchannel,\n            status: null,\n            onCallStarted: null,\n            onCallEnded: null\n        };\n    }\n}\n/**\n * Return a new array with the elements of the input array in a random order\n * @param list The input array\n * @returns A shuffled array of the elements of list\n */ function shuffled(list) {\n    const result = list.slice();\n    for(let i = result.length - 1; i > 1; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = result[i];\n        result[i] = result[j];\n        result[j] = temp;\n    }\n    return result;\n}\n/**\n * Interleave addresses in addressList by family in accordance with RFC-8304 section 4\n * @param addressList\n * @returns\n */ function interleaveAddressFamilies(addressList) {\n    if (addressList.length === 0) {\n        return [];\n    }\n    const result = [];\n    const ipv6Addresses = [];\n    const ipv4Addresses = [];\n    const ipv6First = (0, subchannel_address_2.isTcpSubchannelAddress)(addressList[0]) && (0, net_1.isIPv6)(addressList[0].host);\n    for (const address of addressList){\n        if ((0, subchannel_address_2.isTcpSubchannelAddress)(address) && (0, net_1.isIPv6)(address.host)) {\n            ipv6Addresses.push(address);\n        } else {\n            ipv4Addresses.push(address);\n        }\n    }\n    const firstList = ipv6First ? ipv6Addresses : ipv4Addresses;\n    const secondList = ipv6First ? ipv4Addresses : ipv6Addresses;\n    for(let i = 0; i < Math.max(firstList.length, secondList.length); i++){\n        if (i < firstList.length) {\n            result.push(firstList[i]);\n        }\n        if (i < secondList.length) {\n            result.push(secondList[i]);\n        }\n    }\n    return result;\n}\nconst REPORT_HEALTH_STATUS_OPTION_NAME = \"grpc-node.internal.pick-first.report_health_status\";\nclass PickFirstLoadBalancer {\n    /**\n     * Load balancer that attempts to connect to each backend in the address list\n     * in order, and picks the first one that connects, using it for every\n     * request.\n     * @param channelControlHelper `ChannelControlHelper` instance provided by\n     *     this load balancer's owner.\n     */ constructor(channelControlHelper){\n        this.channelControlHelper = channelControlHelper;\n        /**\n         * The list of subchannels this load balancer is currently attempting to\n         * connect to.\n         */ this.children = [];\n        /**\n         * The current connectivity state of the load balancer.\n         */ this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n        /**\n         * The index within the `subchannels` array of the subchannel with the most\n         * recently started connection attempt.\n         */ this.currentSubchannelIndex = 0;\n        /**\n         * The currently picked subchannel used for making calls. Populated if\n         * and only if the load balancer's current state is READY. In that case,\n         * the subchannel's current state is also READY.\n         */ this.currentPick = null;\n        /**\n         * Listener callback attached to each subchannel in the `subchannels` list\n         * while establishing a connection.\n         */ this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime, errorMessage)=>{\n            this.onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage);\n        };\n        this.pickedSubchannelHealthListener = ()=>this.calculateAndReportNewState();\n        /**\n         * The LB policy enters sticky TRANSIENT_FAILURE mode when all\n         * subchannels have failed to connect at least once, and it stays in that\n         * mode until a connection attempt is successful. While in sticky TF mode,\n         * the LB policy continuously attempts to connect to all of its subchannels.\n         */ this.stickyTransientFailureMode = false;\n        this.reportHealthStatus = false;\n        /**\n         * The most recent error reported by any subchannel as it transitioned to\n         * TRANSIENT_FAILURE.\n         */ this.lastError = null;\n        this.latestAddressList = null;\n        this.latestOptions = {};\n        this.connectionDelayTimeout = setTimeout(()=>{}, 0);\n        clearTimeout(this.connectionDelayTimeout);\n    }\n    allChildrenHaveReportedTF() {\n        return this.children.every((child)=>child.hasReportedTransientFailure);\n    }\n    resetChildrenReportedTF() {\n        this.children.every((child)=>child.hasReportedTransientFailure = false);\n    }\n    calculateAndReportNewState() {\n        var _a;\n        if (this.currentPick) {\n            if (this.reportHealthStatus && !this.currentPick.isHealthy()) {\n                const errorMessage = `Picked subchannel ${this.currentPick.getAddress()} is unhealthy`;\n                this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n                    details: errorMessage\n                }), errorMessage);\n            } else {\n                this.updateState(connectivity_state_1.ConnectivityState.READY, new PickFirstPicker(this.currentPick), null);\n            }\n        } else if (((_a = this.latestAddressList) === null || _a === void 0 ? void 0 : _a.length) === 0) {\n            const errorMessage = `No connection established. Last error: ${this.lastError}`;\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n                details: errorMessage\n            }), errorMessage);\n        } else if (this.children.length === 0) {\n            this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);\n        } else {\n            if (this.stickyTransientFailureMode) {\n                const errorMessage = `No connection established. Last error: ${this.lastError}`;\n                this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n                    details: errorMessage\n                }), errorMessage);\n            } else {\n                this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this), null);\n            }\n        }\n    }\n    requestReresolution() {\n        this.channelControlHelper.requestReresolution();\n    }\n    maybeEnterStickyTransientFailureMode() {\n        if (!this.allChildrenHaveReportedTF()) {\n            return;\n        }\n        this.requestReresolution();\n        this.resetChildrenReportedTF();\n        if (this.stickyTransientFailureMode) {\n            this.calculateAndReportNewState();\n            return;\n        }\n        this.stickyTransientFailureMode = true;\n        for (const { subchannel } of this.children){\n            subchannel.startConnecting();\n        }\n        this.calculateAndReportNewState();\n    }\n    removeCurrentPick() {\n        if (this.currentPick !== null) {\n            this.currentPick.removeConnectivityStateListener(this.subchannelStateListener);\n            this.channelControlHelper.removeChannelzChild(this.currentPick.getChannelzRef());\n            this.currentPick.removeHealthStateWatcher(this.pickedSubchannelHealthListener);\n            // Unref last, to avoid triggering listeners\n            this.currentPick.unref();\n            this.currentPick = null;\n        }\n    }\n    onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage) {\n        var _a;\n        if ((_a = this.currentPick) === null || _a === void 0 ? void 0 : _a.realSubchannelEquals(subchannel)) {\n            if (newState !== connectivity_state_1.ConnectivityState.READY) {\n                this.removeCurrentPick();\n                this.calculateAndReportNewState();\n            }\n            return;\n        }\n        for (const [index, child] of this.children.entries()){\n            if (subchannel.realSubchannelEquals(child.subchannel)) {\n                if (newState === connectivity_state_1.ConnectivityState.READY) {\n                    this.pickSubchannel(child.subchannel);\n                }\n                if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                    child.hasReportedTransientFailure = true;\n                    if (errorMessage) {\n                        this.lastError = errorMessage;\n                    }\n                    this.maybeEnterStickyTransientFailureMode();\n                    if (index === this.currentSubchannelIndex) {\n                        this.startNextSubchannelConnecting(index + 1);\n                    }\n                }\n                child.subchannel.startConnecting();\n                return;\n            }\n        }\n    }\n    startNextSubchannelConnecting(startIndex) {\n        clearTimeout(this.connectionDelayTimeout);\n        for (const [index, child] of this.children.entries()){\n            if (index >= startIndex) {\n                const subchannelState = child.subchannel.getConnectivityState();\n                if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.CONNECTING) {\n                    this.startConnecting(index);\n                    return;\n                }\n            }\n        }\n        this.maybeEnterStickyTransientFailureMode();\n    }\n    /**\n     * Have a single subchannel in the `subchannels` list start connecting.\n     * @param subchannelIndex The index into the `subchannels` list.\n     */ startConnecting(subchannelIndex) {\n        var _a, _b;\n        clearTimeout(this.connectionDelayTimeout);\n        this.currentSubchannelIndex = subchannelIndex;\n        if (this.children[subchannelIndex].subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.IDLE) {\n            trace(\"Start connecting to subchannel with address \" + this.children[subchannelIndex].subchannel.getAddress());\n            process.nextTick(()=>{\n                var _a;\n                (_a = this.children[subchannelIndex]) === null || _a === void 0 ? void 0 : _a.subchannel.startConnecting();\n            });\n        }\n        this.connectionDelayTimeout = setTimeout(()=>{\n            this.startNextSubchannelConnecting(subchannelIndex + 1);\n        }, CONNECTION_DELAY_INTERVAL_MS);\n        (_b = (_a = this.connectionDelayTimeout).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /**\n     * Declare that the specified subchannel should be used to make requests.\n     * This functions the same independent of whether subchannel is a member of\n     * this.children and whether it is equal to this.currentPick.\n     * Prerequisite: subchannel.getConnectivityState() === READY.\n     * @param subchannel\n     */ pickSubchannel(subchannel) {\n        trace(\"Pick subchannel with address \" + subchannel.getAddress());\n        this.stickyTransientFailureMode = false;\n        /* Ref before removeCurrentPick and resetSubchannelList to avoid the\n         * refcount dropping to 0 during this process. */ subchannel.ref();\n        this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n        this.removeCurrentPick();\n        this.resetSubchannelList();\n        subchannel.addConnectivityStateListener(this.subchannelStateListener);\n        subchannel.addHealthStateWatcher(this.pickedSubchannelHealthListener);\n        this.currentPick = subchannel;\n        clearTimeout(this.connectionDelayTimeout);\n        this.calculateAndReportNewState();\n    }\n    updateState(newState, picker, errorMessage) {\n        trace(connectivity_state_1.ConnectivityState[this.currentState] + \" -> \" + connectivity_state_1.ConnectivityState[newState]);\n        this.currentState = newState;\n        this.channelControlHelper.updateState(newState, picker, errorMessage);\n    }\n    resetSubchannelList() {\n        for (const child of this.children){\n            /* Always remoev the connectivity state listener. If the subchannel is\n               getting picked, it will be re-added then. */ child.subchannel.removeConnectivityStateListener(this.subchannelStateListener);\n            /* Refs are counted independently for the children list and the\n             * currentPick, so we call unref whether or not the child is the\n             * currentPick. Channelz child references are also refcounted, so\n             * removeChannelzChild can be handled the same way. */ child.subchannel.unref();\n            this.channelControlHelper.removeChannelzChild(child.subchannel.getChannelzRef());\n        }\n        this.currentSubchannelIndex = 0;\n        this.children = [];\n    }\n    connectToAddressList(addressList, options) {\n        trace(\"connectToAddressList([\" + addressList.map((address)=>(0, subchannel_address_1.subchannelAddressToString)(address)) + \"])\");\n        const newChildrenList = addressList.map((address)=>({\n                subchannel: this.channelControlHelper.createSubchannel(address, options),\n                hasReportedTransientFailure: false\n            }));\n        for (const { subchannel } of newChildrenList){\n            if (subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY) {\n                this.pickSubchannel(subchannel);\n                return;\n            }\n        }\n        /* Ref each subchannel before resetting the list, to ensure that\n         * subchannels shared between the list don't drop to 0 refs during the\n         * transition. */ for (const { subchannel } of newChildrenList){\n            subchannel.ref();\n            this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n        }\n        this.resetSubchannelList();\n        this.children = newChildrenList;\n        for (const { subchannel } of this.children){\n            subchannel.addConnectivityStateListener(this.subchannelStateListener);\n        }\n        for (const child of this.children){\n            if (child.subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                child.hasReportedTransientFailure = true;\n            }\n        }\n        this.startNextSubchannelConnecting(0);\n        this.calculateAndReportNewState();\n    }\n    updateAddressList(endpointList, lbConfig, options) {\n        if (!(lbConfig instanceof PickFirstLoadBalancingConfig)) {\n            return;\n        }\n        this.reportHealthStatus = options[REPORT_HEALTH_STATUS_OPTION_NAME];\n        /* Previously, an update would be discarded if it was identical to the\n         * previous update, to minimize churn. Now the DNS resolver is\n         * rate-limited, so that is less of a concern. */ if (lbConfig.getShuffleAddressList()) {\n            endpointList = shuffled(endpointList);\n        }\n        const rawAddressList = [].concat(...endpointList.map((endpoint)=>endpoint.addresses));\n        trace(\"updateAddressList([\" + rawAddressList.map((address)=>(0, subchannel_address_1.subchannelAddressToString)(address)) + \"])\");\n        if (rawAddressList.length === 0) {\n            this.lastError = \"No addresses resolved\";\n        }\n        const addressList = interleaveAddressFamilies(rawAddressList);\n        this.latestAddressList = addressList;\n        this.latestOptions = options;\n        this.connectToAddressList(addressList, options);\n    }\n    exitIdle() {\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE && this.latestAddressList) {\n            this.connectToAddressList(this.latestAddressList, this.latestOptions);\n        }\n    }\n    resetBackoff() {\n    /* The pick first load balancer does not have a connection backoff, so this\n         * does nothing */ }\n    destroy() {\n        this.resetSubchannelList();\n        this.removeCurrentPick();\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.PickFirstLoadBalancer = PickFirstLoadBalancer;\nconst LEAF_CONFIG = new PickFirstLoadBalancingConfig(false);\n/**\n * This class handles the leaf load balancing operations for a single endpoint.\n * It is a thin wrapper around a PickFirstLoadBalancer with a different API\n * that more closely reflects how it will be used as a leaf balancer.\n */ class LeafLoadBalancer {\n    constructor(endpoint, channelControlHelper, options){\n        this.endpoint = endpoint;\n        this.options = options;\n        this.latestState = connectivity_state_1.ConnectivityState.IDLE;\n        const childChannelControlHelper = (0, load_balancer_1.createChildChannelControlHelper)(channelControlHelper, {\n            updateState: (connectivityState, picker, errorMessage)=>{\n                this.latestState = connectivityState;\n                this.latestPicker = picker;\n                channelControlHelper.updateState(connectivityState, picker, errorMessage);\n            }\n        });\n        this.pickFirstBalancer = new PickFirstLoadBalancer(childChannelControlHelper);\n        this.latestPicker = new picker_1.QueuePicker(this.pickFirstBalancer);\n    }\n    startConnecting() {\n        this.pickFirstBalancer.updateAddressList([\n            this.endpoint\n        ], LEAF_CONFIG, Object.assign(Object.assign({}, this.options), {\n            [REPORT_HEALTH_STATUS_OPTION_NAME]: true\n        }));\n    }\n    /**\n     * Update the endpoint associated with this LeafLoadBalancer to a new\n     * endpoint. Does not trigger connection establishment if a connection\n     * attempt is not already in progress.\n     * @param newEndpoint\n     */ updateEndpoint(newEndpoint, newOptions) {\n        this.options = newOptions;\n        this.endpoint = newEndpoint;\n        if (this.latestState !== connectivity_state_1.ConnectivityState.IDLE) {\n            this.startConnecting();\n        }\n    }\n    getConnectivityState() {\n        return this.latestState;\n    }\n    getPicker() {\n        return this.latestPicker;\n    }\n    getEndpoint() {\n        return this.endpoint;\n    }\n    exitIdle() {\n        this.pickFirstBalancer.exitIdle();\n    }\n    destroy() {\n        this.pickFirstBalancer.destroy();\n    }\n}\nexports.LeafLoadBalancer = LeafLoadBalancer;\nfunction setup() {\n    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);\n    (0, load_balancer_1.registerDefaultLoadBalancerType)(TYPE_NAME);\n} //# sourceMappingURL=load-balancer-pick-first.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RoundRobinLoadBalancer = void 0;\nexports.setup = setup;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst load_balancer_pick_first_1 = __webpack_require__(/*! ./load-balancer-pick-first */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\");\nconst TRACER_NAME = \"round_robin\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = \"round_robin\";\nclass RoundRobinLoadBalancingConfig {\n    getLoadBalancerName() {\n        return TYPE_NAME;\n    }\n    constructor(){}\n    toJsonObject() {\n        return {\n            [TYPE_NAME]: {}\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static createFromJson(obj) {\n        return new RoundRobinLoadBalancingConfig();\n    }\n}\nclass RoundRobinPicker {\n    constructor(children, nextIndex = 0){\n        this.children = children;\n        this.nextIndex = nextIndex;\n    }\n    pick(pickArgs) {\n        const childPicker = this.children[this.nextIndex].picker;\n        this.nextIndex = (this.nextIndex + 1) % this.children.length;\n        return childPicker.pick(pickArgs);\n    }\n    /**\n     * Check what the next subchannel returned would be. Used by the load\n     * balancer implementation to preserve this part of the picker state if\n     * possible when a subchannel connects or disconnects.\n     */ peekNextEndpoint() {\n        return this.children[this.nextIndex].endpoint;\n    }\n}\nclass RoundRobinLoadBalancer {\n    constructor(channelControlHelper){\n        this.channelControlHelper = channelControlHelper;\n        this.children = [];\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n        this.currentReadyPicker = null;\n        this.updatesPaused = false;\n        this.lastError = null;\n        this.childChannelControlHelper = (0, load_balancer_1.createChildChannelControlHelper)(channelControlHelper, {\n            updateState: (connectivityState, picker, errorMessage)=>{\n                /* Ensure that name resolution is requested again after active\n                 * connections are dropped. This is more aggressive than necessary to\n                 * accomplish that, so we are counting on resolvers to have\n                 * reasonable rate limits. */ if (this.currentState === connectivity_state_1.ConnectivityState.READY && connectivityState !== connectivity_state_1.ConnectivityState.READY) {\n                    this.channelControlHelper.requestReresolution();\n                }\n                if (errorMessage) {\n                    this.lastError = errorMessage;\n                }\n                this.calculateAndUpdateState();\n            }\n        });\n    }\n    countChildrenWithState(state) {\n        return this.children.filter((child)=>child.getConnectivityState() === state).length;\n    }\n    calculateAndUpdateState() {\n        if (this.updatesPaused) {\n            return;\n        }\n        if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.READY) > 0) {\n            const readyChildren = this.children.filter((child)=>child.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);\n            let index = 0;\n            if (this.currentReadyPicker !== null) {\n                const nextPickedEndpoint = this.currentReadyPicker.peekNextEndpoint();\n                index = readyChildren.findIndex((child)=>(0, subchannel_address_1.endpointEqual)(child.getEndpoint(), nextPickedEndpoint));\n                if (index < 0) {\n                    index = 0;\n                }\n            }\n            this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readyChildren.map((child)=>({\n                    endpoint: child.getEndpoint(),\n                    picker: child.getPicker()\n                })), index), null);\n        } else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.CONNECTING) > 0) {\n            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this), null);\n        } else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) > 0) {\n            const errorMessage = `round_robin: No connection established. Last error: ${this.lastError}`;\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n                details: errorMessage\n            }), errorMessage);\n        } else {\n            this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);\n        }\n        /* round_robin should keep all children connected, this is how we do that.\n         * We can't do this more efficiently in the individual child's updateState\n         * callback because that doesn't have a reference to which child the state\n         * change is associated with. */ for (const child of this.children){\n            if (child.getConnectivityState() === connectivity_state_1.ConnectivityState.IDLE) {\n                child.exitIdle();\n            }\n        }\n    }\n    updateState(newState, picker, errorMessage) {\n        trace(connectivity_state_1.ConnectivityState[this.currentState] + \" -> \" + connectivity_state_1.ConnectivityState[newState]);\n        if (newState === connectivity_state_1.ConnectivityState.READY) {\n            this.currentReadyPicker = picker;\n        } else {\n            this.currentReadyPicker = null;\n        }\n        this.currentState = newState;\n        this.channelControlHelper.updateState(newState, picker, errorMessage);\n    }\n    resetSubchannelList() {\n        for (const child of this.children){\n            child.destroy();\n        }\n    }\n    updateAddressList(endpointList, lbConfig, options) {\n        this.resetSubchannelList();\n        trace(\"Connect to endpoint list \" + endpointList.map(subchannel_address_1.endpointToString));\n        this.updatesPaused = true;\n        this.children = endpointList.map((endpoint)=>new load_balancer_pick_first_1.LeafLoadBalancer(endpoint, this.childChannelControlHelper, options));\n        for (const child of this.children){\n            child.startConnecting();\n        }\n        this.updatesPaused = false;\n        this.calculateAndUpdateState();\n    }\n    exitIdle() {\n    /* The round_robin LB policy is only in the IDLE state if it has no\n         * addresses to try to connect to and it has no picked subchannel.\n         * In that case, there is no meaningful action that can be taken here. */ }\n    resetBackoff() {\n    // This LB policy has no backoff to reset\n    }\n    destroy() {\n        this.resetSubchannelList();\n    }\n    getTypeName() {\n        return TYPE_NAME;\n    }\n}\nexports.RoundRobinLoadBalancer = RoundRobinLoadBalancer;\nfunction setup() {\n    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);\n} //# sourceMappingURL=load-balancer-round-robin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createChildChannelControlHelper = createChildChannelControlHelper;\nexports.registerLoadBalancerType = registerLoadBalancerType;\nexports.registerDefaultLoadBalancerType = registerDefaultLoadBalancerType;\nexports.createLoadBalancer = createLoadBalancer;\nexports.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;\nexports.parseLoadBalancingConfig = parseLoadBalancingConfig;\nexports.getDefaultConfig = getDefaultConfig;\nexports.selectLbConfigFromList = selectLbConfigFromList;\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\n/**\n * Create a child ChannelControlHelper that overrides some methods of the\n * parent while letting others pass through to the parent unmodified. This\n * allows other code to create these children without needing to know about\n * all of the methods to be passed through.\n * @param parent\n * @param overrides\n */ function createChildChannelControlHelper(parent, overrides) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    return {\n        createSubchannel: (_b = (_a = overrides.createSubchannel) === null || _a === void 0 ? void 0 : _a.bind(overrides)) !== null && _b !== void 0 ? _b : parent.createSubchannel.bind(parent),\n        updateState: (_d = (_c = overrides.updateState) === null || _c === void 0 ? void 0 : _c.bind(overrides)) !== null && _d !== void 0 ? _d : parent.updateState.bind(parent),\n        requestReresolution: (_f = (_e = overrides.requestReresolution) === null || _e === void 0 ? void 0 : _e.bind(overrides)) !== null && _f !== void 0 ? _f : parent.requestReresolution.bind(parent),\n        addChannelzChild: (_h = (_g = overrides.addChannelzChild) === null || _g === void 0 ? void 0 : _g.bind(overrides)) !== null && _h !== void 0 ? _h : parent.addChannelzChild.bind(parent),\n        removeChannelzChild: (_k = (_j = overrides.removeChannelzChild) === null || _j === void 0 ? void 0 : _j.bind(overrides)) !== null && _k !== void 0 ? _k : parent.removeChannelzChild.bind(parent)\n    };\n}\nconst registeredLoadBalancerTypes = {};\nlet defaultLoadBalancerType = null;\nfunction registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {\n    registeredLoadBalancerTypes[typeName] = {\n        LoadBalancer: loadBalancerType,\n        LoadBalancingConfig: loadBalancingConfigType\n    };\n}\nfunction registerDefaultLoadBalancerType(typeName) {\n    defaultLoadBalancerType = typeName;\n}\nfunction createLoadBalancer(config, channelControlHelper) {\n    const typeName = config.getLoadBalancerName();\n    if (typeName in registeredLoadBalancerTypes) {\n        return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);\n    } else {\n        return null;\n    }\n}\nfunction isLoadBalancerNameRegistered(typeName) {\n    return typeName in registeredLoadBalancerTypes;\n}\nfunction parseLoadBalancingConfig(rawConfig) {\n    const keys = Object.keys(rawConfig);\n    if (keys.length !== 1) {\n        throw new Error(\"Provided load balancing config has multiple conflicting entries\");\n    }\n    const typeName = keys[0];\n    if (typeName in registeredLoadBalancerTypes) {\n        try {\n            return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(rawConfig[typeName]);\n        } catch (e) {\n            throw new Error(`${typeName}: ${e.message}`);\n        }\n    } else {\n        throw new Error(`Unrecognized load balancing config name ${typeName}`);\n    }\n}\nfunction getDefaultConfig() {\n    if (!defaultLoadBalancerType) {\n        throw new Error(\"No default load balancer type registered\");\n    }\n    return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\n}\nfunction selectLbConfigFromList(configs, fallbackTodefault = false) {\n    for (const config of configs){\n        try {\n            return parseLoadBalancingConfig(config);\n        } catch (e) {\n            (0, logging_1.log)(constants_1.LogVerbosity.DEBUG, \"Config parsing failed with error\", e.message);\n            continue;\n        }\n    }\n    if (fallbackTodefault) {\n        if (defaultLoadBalancerType) {\n            return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\n        } else {\n            return null;\n        }\n    } else {\n        return null;\n    }\n} //# sourceMappingURL=load-balancer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LoadBalancingCall = void 0;\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst TRACER_NAME = \"load_balancing_call\";\nclass LoadBalancingCall {\n    constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber){\n        var _a, _b;\n        this.channel = channel;\n        this.callConfig = callConfig;\n        this.methodName = methodName;\n        this.host = host;\n        this.credentials = credentials;\n        this.deadline = deadline;\n        this.callNumber = callNumber;\n        this.child = null;\n        this.readPending = false;\n        this.pendingMessage = null;\n        this.pendingHalfClose = false;\n        this.ended = false;\n        this.metadata = null;\n        this.listener = null;\n        this.onCallEnded = null;\n        this.childStartTime = null;\n        const splitPath = this.methodName.split(\"/\");\n        let serviceName = \"\";\n        /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n         * by '/', the first item should be empty and the second should be the\n         * service name */ if (splitPath.length >= 2) {\n            serviceName = splitPath[1];\n        }\n        const hostname = (_b = (_a = (0, uri_parser_1.splitHostPort)(this.host)) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : \"localhost\";\n        /* Currently, call credentials are only allowed on HTTPS connections, so we\n         * can assume that the scheme is \"https\" */ this.serviceUrl = `https://${hostname}/${serviceName}`;\n        this.startTime = new Date();\n    }\n    getDeadlineInfo() {\n        var _a, _b;\n        const deadlineInfo = [];\n        if (this.childStartTime) {\n            if (this.childStartTime > this.startTime) {\n                if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {\n                    deadlineInfo.push(\"wait_for_ready\");\n                }\n                deadlineInfo.push(`LB pick: ${(0, deadline_1.formatDateDifference)(this.startTime, this.childStartTime)}`);\n            }\n            deadlineInfo.push(...this.child.getDeadlineInfo());\n            return deadlineInfo;\n        } else {\n            if ((_b = this.metadata) === null || _b === void 0 ? void 0 : _b.getOptions().waitForReady) {\n                deadlineInfo.push(\"wait_for_ready\");\n            }\n            deadlineInfo.push(\"Waiting for LB pick\");\n        }\n        return deadlineInfo;\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, \"[\" + this.callNumber + \"] \" + text);\n    }\n    outputStatus(status, progress) {\n        var _a, _b;\n        if (!this.ended) {\n            this.ended = true;\n            this.trace(\"ended with status: code=\" + status.code + ' details=\"' + status.details + '\" start time=' + this.startTime.toISOString());\n            const finalStatus = Object.assign(Object.assign({}, status), {\n                progress\n            });\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(finalStatus);\n            (_b = this.onCallEnded) === null || _b === void 0 ? void 0 : _b.call(this, finalStatus.code);\n        }\n    }\n    doPick() {\n        var _a, _b;\n        if (this.ended) {\n            return;\n        }\n        if (!this.metadata) {\n            throw new Error(\"doPick called before start\");\n        }\n        this.trace(\"Pick called\");\n        const finalMetadata = this.metadata.clone();\n        const pickResult = this.channel.doPick(finalMetadata, this.callConfig.pickInformation);\n        const subchannelString = pickResult.subchannel ? \"(\" + pickResult.subchannel.getChannelzRef().id + \") \" + pickResult.subchannel.getAddress() : \"\" + pickResult.subchannel;\n        this.trace(\"Pick result: \" + picker_1.PickResultType[pickResult.pickResultType] + \" subchannel: \" + subchannelString + \" status: \" + ((_a = pickResult.status) === null || _a === void 0 ? void 0 : _a.code) + \" \" + ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.details));\n        switch(pickResult.pickResultType){\n            case picker_1.PickResultType.COMPLETE:\n                const combinedCallCredentials = this.credentials.compose(pickResult.subchannel.getCallCredentials());\n                combinedCallCredentials.generateMetadata({\n                    method_name: this.methodName,\n                    service_url: this.serviceUrl\n                }).then((credsMetadata)=>{\n                    var _a;\n                    /* If this call was cancelled (e.g. by the deadline) before\n                     * metadata generation finished, we shouldn't do anything with\n                     * it. */ if (this.ended) {\n                        this.trace(\"Credentials metadata generation finished after call ended\");\n                        return;\n                    }\n                    finalMetadata.merge(credsMetadata);\n                    if (finalMetadata.get(\"authorization\").length > 1) {\n                        this.outputStatus({\n                            code: constants_1.Status.INTERNAL,\n                            details: '\"authorization\" metadata cannot have multiple values',\n                            metadata: new metadata_1.Metadata()\n                        }, \"PROCESSED\");\n                    }\n                    if (pickResult.subchannel.getConnectivityState() !== connectivity_state_1.ConnectivityState.READY) {\n                        this.trace(\"Picked subchannel \" + subchannelString + \" has state \" + connectivity_state_1.ConnectivityState[pickResult.subchannel.getConnectivityState()] + \" after getting credentials metadata. Retrying pick\");\n                        this.doPick();\n                        return;\n                    }\n                    if (this.deadline !== Infinity) {\n                        finalMetadata.set(\"grpc-timeout\", (0, deadline_1.getDeadlineTimeoutString)(this.deadline));\n                    }\n                    try {\n                        this.child = pickResult.subchannel.getRealSubchannel().createCall(finalMetadata, this.host, this.methodName, {\n                            onReceiveMetadata: (metadata)=>{\n                                this.trace(\"Received metadata\");\n                                this.listener.onReceiveMetadata(metadata);\n                            },\n                            onReceiveMessage: (message)=>{\n                                this.trace(\"Received message\");\n                                this.listener.onReceiveMessage(message);\n                            },\n                            onReceiveStatus: (status)=>{\n                                this.trace(\"Received status\");\n                                if (status.rstCode === http2.constants.NGHTTP2_REFUSED_STREAM) {\n                                    this.outputStatus(status, \"REFUSED\");\n                                } else {\n                                    this.outputStatus(status, \"PROCESSED\");\n                                }\n                            }\n                        });\n                        this.childStartTime = new Date();\n                    } catch (error) {\n                        this.trace(\"Failed to start call on picked subchannel \" + subchannelString + \" with error \" + error.message);\n                        this.outputStatus({\n                            code: constants_1.Status.INTERNAL,\n                            details: \"Failed to start HTTP/2 stream with error \" + error.message,\n                            metadata: new metadata_1.Metadata()\n                        }, \"NOT_STARTED\");\n                        return;\n                    }\n                    (_a = pickResult.onCallStarted) === null || _a === void 0 ? void 0 : _a.call(pickResult);\n                    this.onCallEnded = pickResult.onCallEnded;\n                    this.trace(\"Created child call [\" + this.child.getCallNumber() + \"]\");\n                    if (this.readPending) {\n                        this.child.startRead();\n                    }\n                    if (this.pendingMessage) {\n                        this.child.sendMessageWithContext(this.pendingMessage.context, this.pendingMessage.message);\n                    }\n                    if (this.pendingHalfClose) {\n                        this.child.halfClose();\n                    }\n                }, (error)=>{\n                    // We assume the error code isn't 0 (Status.OK)\n                    const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(typeof error.code === \"number\" ? error.code : constants_1.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error.message}`);\n                    this.outputStatus({\n                        code: code,\n                        details: details,\n                        metadata: new metadata_1.Metadata()\n                    }, \"PROCESSED\");\n                });\n                break;\n            case picker_1.PickResultType.DROP:\n                const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\n                setImmediate(()=>{\n                    this.outputStatus({\n                        code,\n                        details,\n                        metadata: pickResult.status.metadata\n                    }, \"DROP\");\n                });\n                break;\n            case picker_1.PickResultType.TRANSIENT_FAILURE:\n                if (this.metadata.getOptions().waitForReady) {\n                    this.channel.queueCallForPick(this);\n                } else {\n                    const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\n                    setImmediate(()=>{\n                        this.outputStatus({\n                            code,\n                            details,\n                            metadata: pickResult.status.metadata\n                        }, \"PROCESSED\");\n                    });\n                }\n                break;\n            case picker_1.PickResultType.QUEUE:\n                this.channel.queueCallForPick(this);\n        }\n    }\n    cancelWithStatus(status, details) {\n        var _a;\n        this.trace(\"cancelWithStatus code: \" + status + ' details: \"' + details + '\"');\n        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);\n        this.outputStatus({\n            code: status,\n            details: details,\n            metadata: new metadata_1.Metadata()\n        }, \"PROCESSED\");\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\n    }\n    start(metadata, listener) {\n        this.trace(\"start called\");\n        this.listener = listener;\n        this.metadata = metadata;\n        this.doPick();\n    }\n    sendMessageWithContext(context, message) {\n        this.trace(\"write() called with message of length \" + message.length);\n        if (this.child) {\n            this.child.sendMessageWithContext(context, message);\n        } else {\n            this.pendingMessage = {\n                context,\n                message\n            };\n        }\n    }\n    startRead() {\n        this.trace(\"startRead called\");\n        if (this.child) {\n            this.child.startRead();\n        } else {\n            this.readPending = true;\n        }\n    }\n    halfClose() {\n        this.trace(\"halfClose called\");\n        if (this.child) {\n            this.child.halfClose();\n        } else {\n            this.pendingHalfClose = true;\n        }\n    }\n    setCredentials(credentials) {\n        throw new Error(\"Method not implemented.\");\n    }\n    getCallNumber() {\n        return this.callNumber;\n    }\n}\nexports.LoadBalancingCall = LoadBalancingCall; //# sourceMappingURL=load-balancing-call.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js":
/*!*********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/logging.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ var _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\nexports.trace = trace;\nexports.isTracerEnabled = isTracerEnabled;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst process_1 = __webpack_require__(/*! process */ \"process\");\nconst clientVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@grpc/grpc-js/package.json\").version);\nconst DEFAULT_LOGGER = {\n    error: (message, ...optionalParams)=>{\n        console.error(\"E \" + message, ...optionalParams);\n    },\n    info: (message, ...optionalParams)=>{\n        console.error(\"I \" + message, ...optionalParams);\n    },\n    debug: (message, ...optionalParams)=>{\n        console.error(\"D \" + message, ...optionalParams);\n    }\n};\nlet _logger = DEFAULT_LOGGER;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : \"\";\nswitch(verbosityString.toUpperCase()){\n    case \"DEBUG\":\n        _logVerbosity = constants_1.LogVerbosity.DEBUG;\n        break;\n    case \"INFO\":\n        _logVerbosity = constants_1.LogVerbosity.INFO;\n        break;\n    case \"ERROR\":\n        _logVerbosity = constants_1.LogVerbosity.ERROR;\n        break;\n    case \"NONE\":\n        _logVerbosity = constants_1.LogVerbosity.NONE;\n        break;\n    default:\n}\nconst getLogger = ()=>{\n    return _logger;\n};\nexports.getLogger = getLogger;\nconst setLogger = (logger)=>{\n    _logger = logger;\n};\nexports.setLogger = setLogger;\nconst setLoggerVerbosity = (verbosity)=>{\n    _logVerbosity = verbosity;\n};\nexports.setLoggerVerbosity = setLoggerVerbosity;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst log = (severity, ...args)=>{\n    let logFunction;\n    if (severity >= _logVerbosity) {\n        switch(severity){\n            case constants_1.LogVerbosity.DEBUG:\n                logFunction = _logger.debug;\n                break;\n            case constants_1.LogVerbosity.INFO:\n                logFunction = _logger.info;\n                break;\n            case constants_1.LogVerbosity.ERROR:\n                logFunction = _logger.error;\n                break;\n        }\n        /* Fall back to _logger.error when other methods are not available for\n         * compatiblity with older behavior that always logged to _logger.error */ if (!logFunction) {\n            logFunction = _logger.error;\n        }\n        if (logFunction) {\n            logFunction.bind(_logger)(...args);\n        }\n    }\n};\nexports.log = log;\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : \"\";\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\nfor (const tracerName of tracersString.split(\",\")){\n    if (tracerName.startsWith(\"-\")) {\n        disabledTracers.add(tracerName.substring(1));\n    } else {\n        enabledTracers.add(tracerName);\n    }\n}\nconst allEnabled = enabledTracers.has(\"all\");\nfunction trace(severity, tracer, text) {\n    if (isTracerEnabled(tracer)) {\n        (0, exports.log)(severity, new Date().toISOString() + \" | v\" + clientVersion + \" \" + process_1.pid + \" | \" + tracer + \" | \" + text);\n    }\n}\nfunction isTracerEnabled(tracer) {\n    return !disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer));\n} //# sourceMappingURL=logging.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/make-client.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/make-client.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.makeClientConstructor = makeClientConstructor;\nexports.loadPackageDefinition = loadPackageDefinition;\nconst client_1 = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/client.js\");\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */ const requesterFuncs = {\n    unary: client_1.Client.prototype.makeUnaryRequest,\n    server_stream: client_1.Client.prototype.makeServerStreamRequest,\n    client_stream: client_1.Client.prototype.makeClientStreamRequest,\n    bidi: client_1.Client.prototype.makeBidiStreamRequest\n};\n/**\n * Returns true, if given key is included in the blacklisted\n * keys.\n * @param key key for check, string.\n */ function isPrototypePolluted(key) {\n    return [\n        \"__proto__\",\n        \"prototype\",\n        \"constructor\"\n    ].includes(key);\n}\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */ function makeClientConstructor(methods, serviceName, classOptions) {\n    if (!classOptions) {\n        classOptions = {};\n    }\n    class ServiceClientImpl extends client_1.Client {\n    }\n    Object.keys(methods).forEach((name)=>{\n        if (isPrototypePolluted(name)) {\n            return;\n        }\n        const attrs = methods[name];\n        let methodType;\n        // TODO(murgatroid99): Verify that we don't need this anymore\n        if (typeof name === \"string\" && name.charAt(0) === \"$\") {\n            throw new Error(\"Method names cannot start with $\");\n        }\n        if (attrs.requestStream) {\n            if (attrs.responseStream) {\n                methodType = \"bidi\";\n            } else {\n                methodType = \"client_stream\";\n            }\n        } else {\n            if (attrs.responseStream) {\n                methodType = \"server_stream\";\n            } else {\n                methodType = \"unary\";\n            }\n        }\n        const serialize = attrs.requestSerialize;\n        const deserialize = attrs.responseDeserialize;\n        const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\n        ServiceClientImpl.prototype[name] = methodFunc;\n        // Associate all provided attributes with the method\n        Object.assign(ServiceClientImpl.prototype[name], attrs);\n        if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\n            ServiceClientImpl.prototype[attrs.originalName] = ServiceClientImpl.prototype[name];\n        }\n    });\n    ServiceClientImpl.service = methods;\n    ServiceClientImpl.serviceName = serviceName;\n    return ServiceClientImpl;\n}\nfunction partial(fn, path, serialize, deserialize) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(...args) {\n        return fn.call(this, path, serialize, deserialize, ...args);\n    };\n}\nfunction isProtobufTypeDefinition(obj) {\n    return \"format\" in obj;\n}\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */ function loadPackageDefinition(packageDef) {\n    const result = {};\n    for(const serviceFqn in packageDef){\n        if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\n            const service = packageDef[serviceFqn];\n            const nameComponents = serviceFqn.split(\".\");\n            if (nameComponents.some((comp)=>isPrototypePolluted(comp))) {\n                continue;\n            }\n            const serviceName = nameComponents[nameComponents.length - 1];\n            let current = result;\n            for (const packageName of nameComponents.slice(0, -1)){\n                if (!current[packageName]) {\n                    current[packageName] = {};\n                }\n                current = current[packageName];\n            }\n            if (isProtobufTypeDefinition(service)) {\n                current[serviceName] = service;\n            } else {\n                current[serviceName] = makeClientConstructor(service, serviceName, {});\n            }\n        }\n    }\n    return result;\n} //# sourceMappingURL=make-client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/make-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/metadata.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Metadata = void 0;\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/error.js\");\nconst LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;\nconst LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;\nfunction isLegalKey(key) {\n    return LEGAL_KEY_REGEX.test(key);\n}\nfunction isLegalNonBinaryValue(value) {\n    return LEGAL_NON_BINARY_VALUE_REGEX.test(value);\n}\nfunction isBinaryKey(key) {\n    return key.endsWith(\"-bin\");\n}\nfunction isCustomMetadata(key) {\n    return !key.startsWith(\"grpc-\");\n}\nfunction normalizeKey(key) {\n    return key.toLowerCase();\n}\nfunction validate(key, value) {\n    if (!isLegalKey(key)) {\n        throw new Error('Metadata key \"' + key + '\" contains illegal characters');\n    }\n    if (value !== null && value !== undefined) {\n        if (isBinaryKey(key)) {\n            if (!Buffer.isBuffer(value)) {\n                throw new Error(\"keys that end with '-bin' must have Buffer values\");\n            }\n        } else {\n            if (Buffer.isBuffer(value)) {\n                throw new Error(\"keys that don't end with '-bin' must have String values\");\n            }\n            if (!isLegalNonBinaryValue(value)) {\n                throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\n            }\n        }\n    }\n}\n/**\n * A class for storing metadata. Keys are normalized to lowercase ASCII.\n */ class Metadata {\n    constructor(options = {}){\n        this.internalRepr = new Map();\n        this.options = options;\n    }\n    /**\n     * Sets the given value for the given key by replacing any other values\n     * associated with that key. Normalizes the key.\n     * @param key The key to whose value should be set.\n     * @param value The value to set. Must be a buffer if and only\n     *   if the normalized key ends with '-bin'.\n     */ set(key, value) {\n        key = normalizeKey(key);\n        validate(key, value);\n        this.internalRepr.set(key, [\n            value\n        ]);\n    }\n    /**\n     * Adds the given value for the given key by appending to a list of previous\n     * values associated with that key. Normalizes the key.\n     * @param key The key for which a new value should be appended.\n     * @param value The value to add. Must be a buffer if and only\n     *   if the normalized key ends with '-bin'.\n     */ add(key, value) {\n        key = normalizeKey(key);\n        validate(key, value);\n        const existingValue = this.internalRepr.get(key);\n        if (existingValue === undefined) {\n            this.internalRepr.set(key, [\n                value\n            ]);\n        } else {\n            existingValue.push(value);\n        }\n    }\n    /**\n     * Removes the given key and any associated values. Normalizes the key.\n     * @param key The key whose values should be removed.\n     */ remove(key) {\n        key = normalizeKey(key);\n        // validate(key);\n        this.internalRepr.delete(key);\n    }\n    /**\n     * Gets a list of all values associated with the key. Normalizes the key.\n     * @param key The key whose value should be retrieved.\n     * @return A list of values associated with the given key.\n     */ get(key) {\n        key = normalizeKey(key);\n        // validate(key);\n        return this.internalRepr.get(key) || [];\n    }\n    /**\n     * Gets a plain object mapping each key to the first value associated with it.\n     * This reflects the most common way that people will want to see metadata.\n     * @return A key/value mapping of the metadata.\n     */ getMap() {\n        const result = {};\n        for (const [key, values] of this.internalRepr){\n            if (values.length > 0) {\n                const v = values[0];\n                result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;\n            }\n        }\n        return result;\n    }\n    /**\n     * Clones the metadata object.\n     * @return The newly cloned object.\n     */ clone() {\n        const newMetadata = new Metadata(this.options);\n        const newInternalRepr = newMetadata.internalRepr;\n        for (const [key, value] of this.internalRepr){\n            const clonedValue = value.map((v)=>{\n                if (Buffer.isBuffer(v)) {\n                    return Buffer.from(v);\n                } else {\n                    return v;\n                }\n            });\n            newInternalRepr.set(key, clonedValue);\n        }\n        return newMetadata;\n    }\n    /**\n     * Merges all key-value pairs from a given Metadata object into this one.\n     * If both this object and the given object have values in the same key,\n     * values from the other Metadata object will be appended to this object's\n     * values.\n     * @param other A Metadata object.\n     */ merge(other) {\n        for (const [key, values] of other.internalRepr){\n            const mergedValue = (this.internalRepr.get(key) || []).concat(values);\n            this.internalRepr.set(key, mergedValue);\n        }\n    }\n    setOptions(options) {\n        this.options = options;\n    }\n    getOptions() {\n        return this.options;\n    }\n    /**\n     * Creates an OutgoingHttpHeaders object that can be used with the http2 API.\n     */ toHttp2Headers() {\n        // NOTE: Node <8.9 formats http2 headers incorrectly.\n        const result = {};\n        for (const [key, values] of this.internalRepr){\n            // We assume that the user's interaction with this object is limited to\n            // through its public API (i.e. keys and values are already validated).\n            result[key] = values.map(bufToString);\n        }\n        return result;\n    }\n    /**\n     * This modifies the behavior of JSON.stringify to show an object\n     * representation of the metadata map.\n     */ toJSON() {\n        const result = {};\n        for (const [key, values] of this.internalRepr){\n            result[key] = values;\n        }\n        return result;\n    }\n    /**\n     * Returns a new Metadata object based fields in a given IncomingHttpHeaders\n     * object.\n     * @param headers An IncomingHttpHeaders object.\n     */ static fromHttp2Headers(headers) {\n        const result = new Metadata();\n        for (const key of Object.keys(headers)){\n            // Reserved headers (beginning with `:`) are not valid keys.\n            if (key.charAt(0) === \":\") {\n                continue;\n            }\n            const values = headers[key];\n            try {\n                if (isBinaryKey(key)) {\n                    if (Array.isArray(values)) {\n                        values.forEach((value)=>{\n                            result.add(key, Buffer.from(value, \"base64\"));\n                        });\n                    } else if (values !== undefined) {\n                        if (isCustomMetadata(key)) {\n                            values.split(\",\").forEach((v)=>{\n                                result.add(key, Buffer.from(v.trim(), \"base64\"));\n                            });\n                        } else {\n                            result.add(key, Buffer.from(values, \"base64\"));\n                        }\n                    }\n                } else {\n                    if (Array.isArray(values)) {\n                        values.forEach((value)=>{\n                            result.add(key, value);\n                        });\n                    } else if (values !== undefined) {\n                        result.add(key, values);\n                    }\n                }\n            } catch (error) {\n                const message = `Failed to add metadata entry ${key}: ${values}. ${(0, error_1.getErrorMessage)(error)}. For more information see https://github.com/grpc/grpc-node/issues/1173`;\n                (0, logging_1.log)(constants_1.LogVerbosity.ERROR, message);\n            }\n        }\n        return result;\n    }\n}\nexports.Metadata = Metadata;\nconst bufToString = (val)=>{\n    return Buffer.isBuffer(val) ? val.toString(\"base64\") : val;\n}; //# sourceMappingURL=metadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/picker.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.QueuePicker = exports.UnavailablePicker = exports.PickResultType = void 0;\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nvar PickResultType;\n(function(PickResultType) {\n    PickResultType[PickResultType[\"COMPLETE\"] = 0] = \"COMPLETE\";\n    PickResultType[PickResultType[\"QUEUE\"] = 1] = \"QUEUE\";\n    PickResultType[PickResultType[\"TRANSIENT_FAILURE\"] = 2] = \"TRANSIENT_FAILURE\";\n    PickResultType[PickResultType[\"DROP\"] = 3] = \"DROP\";\n})(PickResultType || (exports.PickResultType = PickResultType = {}));\n/**\n * A standard picker representing a load balancer in the TRANSIENT_FAILURE\n * state. Always responds to every pick request with an UNAVAILABLE status.\n */ class UnavailablePicker {\n    constructor(status){\n        this.status = Object.assign({\n            code: constants_1.Status.UNAVAILABLE,\n            details: \"No connection established\",\n            metadata: new metadata_1.Metadata()\n        }, status);\n    }\n    pick(pickArgs) {\n        return {\n            pickResultType: PickResultType.TRANSIENT_FAILURE,\n            subchannel: null,\n            status: this.status,\n            onCallStarted: null,\n            onCallEnded: null\n        };\n    }\n}\nexports.UnavailablePicker = UnavailablePicker;\n/**\n * A standard picker representing a load balancer in the IDLE or CONNECTING\n * state. Always responds to every pick request with a QUEUE pick result\n * indicating that the pick should be tried again with the next `Picker`. Also\n * reports back to the load balancer that a connection should be established\n * once any pick is attempted.\n * If the childPicker is provided, delegate to it instead of returning the\n * hardcoded QUEUE pick result, but still calls exitIdle.\n */ class QueuePicker {\n    // Constructed with a load balancer. Calls exitIdle on it the first time pick is called\n    constructor(loadBalancer, childPicker){\n        this.loadBalancer = loadBalancer;\n        this.childPicker = childPicker;\n        this.calledExitIdle = false;\n    }\n    pick(pickArgs) {\n        if (!this.calledExitIdle) {\n            process.nextTick(()=>{\n                this.loadBalancer.exitIdle();\n            });\n            this.calledExitIdle = true;\n        }\n        if (this.childPicker) {\n            return this.childPicker.pick(pickArgs);\n        } else {\n            return {\n                pickResultType: PickResultType.QUEUE,\n                subchannel: null,\n                status: null,\n                onCallStarted: null,\n                onCallEnded: null\n            };\n        }\n    }\n}\nexports.QueuePicker = QueuePicker; //# sourceMappingURL=picker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcGlja2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBR0EseUJBQXlCLEdBQUdBLHNCQUFzQixHQUFHLEtBQUs7QUFDaEYsTUFBTUssYUFBYUMsbUJBQU9BLENBQUMsNEVBQVk7QUFDdkMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsOEVBQWE7QUFDekMsSUFBSUY7QUFDSCxVQUFVQSxjQUFjO0lBQ3JCQSxjQUFjLENBQUNBLGNBQWMsQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHO0lBQ2pEQSxjQUFjLENBQUNBLGNBQWMsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQzlDQSxjQUFjLENBQUNBLGNBQWMsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEdBQUc7SUFDMURBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7QUFDakQsR0FBR0Esa0JBQW1CSixDQUFBQSxzQkFBc0IsR0FBR0ksaUJBQWlCLENBQUM7QUFDakU7OztDQUdDLEdBQ0QsTUFBTUQ7SUFDRkssWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLElBQUksQ0FBQ0EsTUFBTSxHQUFHWCxPQUFPWSxNQUFNLENBQUM7WUFBRUMsTUFBTUosWUFBWUssTUFBTSxDQUFDQyxXQUFXO1lBQUVDLFNBQVM7WUFBNkJDLFVBQVUsSUFBSVYsV0FBV1csUUFBUTtRQUFHLEdBQUdQO0lBQ3JKO0lBQ0FRLEtBQUtDLFFBQVEsRUFBRTtRQUNYLE9BQU87WUFDSEMsZ0JBQWdCZixlQUFlZ0IsaUJBQWlCO1lBQ2hEQyxZQUFZO1lBQ1paLFFBQVEsSUFBSSxDQUFDQSxNQUFNO1lBQ25CYSxlQUFlO1lBQ2ZDLGFBQWE7UUFDakI7SUFDSjtBQUNKO0FBQ0F2Qix5QkFBeUIsR0FBR0c7QUFDNUI7Ozs7Ozs7O0NBUUMsR0FDRCxNQUFNRDtJQUNGLHVGQUF1RjtJQUN2Rk0sWUFBWWdCLFlBQVksRUFBRUMsV0FBVyxDQUFFO1FBQ25DLElBQUksQ0FBQ0QsWUFBWSxHQUFHQTtRQUNwQixJQUFJLENBQUNDLFdBQVcsR0FBR0E7UUFDbkIsSUFBSSxDQUFDQyxjQUFjLEdBQUc7SUFDMUI7SUFDQVQsS0FBS0MsUUFBUSxFQUFFO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQ1EsY0FBYyxFQUFFO1lBQ3RCQyxRQUFRQyxRQUFRLENBQUM7Z0JBQ2IsSUFBSSxDQUFDSixZQUFZLENBQUNLLFFBQVE7WUFDOUI7WUFDQSxJQUFJLENBQUNILGNBQWMsR0FBRztRQUMxQjtRQUNBLElBQUksSUFBSSxDQUFDRCxXQUFXLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUNBLFdBQVcsQ0FBQ1IsSUFBSSxDQUFDQztRQUNqQyxPQUNLO1lBQ0QsT0FBTztnQkFDSEMsZ0JBQWdCZixlQUFlMEIsS0FBSztnQkFDcENULFlBQVk7Z0JBQ1paLFFBQVE7Z0JBQ1JhLGVBQWU7Z0JBQ2ZDLGFBQWE7WUFDakI7UUFDSjtJQUNKO0FBQ0o7QUFDQXZCLG1CQUFtQixHQUFHRSxhQUN0QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcGlja2VyLmpzPzU3ZTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUXVldWVQaWNrZXIgPSBleHBvcnRzLlVuYXZhaWxhYmxlUGlja2VyID0gZXhwb3J0cy5QaWNrUmVzdWx0VHlwZSA9IHZvaWQgMDtcbmNvbnN0IG1ldGFkYXRhXzEgPSByZXF1aXJlKFwiLi9tZXRhZGF0YVwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xudmFyIFBpY2tSZXN1bHRUeXBlO1xuKGZ1bmN0aW9uIChQaWNrUmVzdWx0VHlwZSkge1xuICAgIFBpY2tSZXN1bHRUeXBlW1BpY2tSZXN1bHRUeXBlW1wiQ09NUExFVEVcIl0gPSAwXSA9IFwiQ09NUExFVEVcIjtcbiAgICBQaWNrUmVzdWx0VHlwZVtQaWNrUmVzdWx0VHlwZVtcIlFVRVVFXCJdID0gMV0gPSBcIlFVRVVFXCI7XG4gICAgUGlja1Jlc3VsdFR5cGVbUGlja1Jlc3VsdFR5cGVbXCJUUkFOU0lFTlRfRkFJTFVSRVwiXSA9IDJdID0gXCJUUkFOU0lFTlRfRkFJTFVSRVwiO1xuICAgIFBpY2tSZXN1bHRUeXBlW1BpY2tSZXN1bHRUeXBlW1wiRFJPUFwiXSA9IDNdID0gXCJEUk9QXCI7XG59KShQaWNrUmVzdWx0VHlwZSB8fCAoZXhwb3J0cy5QaWNrUmVzdWx0VHlwZSA9IFBpY2tSZXN1bHRUeXBlID0ge30pKTtcbi8qKlxuICogQSBzdGFuZGFyZCBwaWNrZXIgcmVwcmVzZW50aW5nIGEgbG9hZCBiYWxhbmNlciBpbiB0aGUgVFJBTlNJRU5UX0ZBSUxVUkVcbiAqIHN0YXRlLiBBbHdheXMgcmVzcG9uZHMgdG8gZXZlcnkgcGljayByZXF1ZXN0IHdpdGggYW4gVU5BVkFJTEFCTEUgc3RhdHVzLlxuICovXG5jbGFzcyBVbmF2YWlsYWJsZVBpY2tlciB7XG4gICAgY29uc3RydWN0b3Ioc3RhdHVzKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gT2JqZWN0LmFzc2lnbih7IGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5VTkFWQUlMQUJMRSwgZGV0YWlsczogJ05vIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQnLCBtZXRhZGF0YTogbmV3IG1ldGFkYXRhXzEuTWV0YWRhdGEoKSB9LCBzdGF0dXMpO1xuICAgIH1cbiAgICBwaWNrKHBpY2tBcmdzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwaWNrUmVzdWx0VHlwZTogUGlja1Jlc3VsdFR5cGUuVFJBTlNJRU5UX0ZBSUxVUkUsXG4gICAgICAgICAgICBzdWJjaGFubmVsOiBudWxsLFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgICAgIG9uQ2FsbFN0YXJ0ZWQ6IG51bGwsXG4gICAgICAgICAgICBvbkNhbGxFbmRlZDogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLlVuYXZhaWxhYmxlUGlja2VyID0gVW5hdmFpbGFibGVQaWNrZXI7XG4vKipcbiAqIEEgc3RhbmRhcmQgcGlja2VyIHJlcHJlc2VudGluZyBhIGxvYWQgYmFsYW5jZXIgaW4gdGhlIElETEUgb3IgQ09OTkVDVElOR1xuICogc3RhdGUuIEFsd2F5cyByZXNwb25kcyB0byBldmVyeSBwaWNrIHJlcXVlc3Qgd2l0aCBhIFFVRVVFIHBpY2sgcmVzdWx0XG4gKiBpbmRpY2F0aW5nIHRoYXQgdGhlIHBpY2sgc2hvdWxkIGJlIHRyaWVkIGFnYWluIHdpdGggdGhlIG5leHQgYFBpY2tlcmAuIEFsc29cbiAqIHJlcG9ydHMgYmFjayB0byB0aGUgbG9hZCBiYWxhbmNlciB0aGF0IGEgY29ubmVjdGlvbiBzaG91bGQgYmUgZXN0YWJsaXNoZWRcbiAqIG9uY2UgYW55IHBpY2sgaXMgYXR0ZW1wdGVkLlxuICogSWYgdGhlIGNoaWxkUGlja2VyIGlzIHByb3ZpZGVkLCBkZWxlZ2F0ZSB0byBpdCBpbnN0ZWFkIG9mIHJldHVybmluZyB0aGVcbiAqIGhhcmRjb2RlZCBRVUVVRSBwaWNrIHJlc3VsdCwgYnV0IHN0aWxsIGNhbGxzIGV4aXRJZGxlLlxuICovXG5jbGFzcyBRdWV1ZVBpY2tlciB7XG4gICAgLy8gQ29uc3RydWN0ZWQgd2l0aCBhIGxvYWQgYmFsYW5jZXIuIENhbGxzIGV4aXRJZGxlIG9uIGl0IHRoZSBmaXJzdCB0aW1lIHBpY2sgaXMgY2FsbGVkXG4gICAgY29uc3RydWN0b3IobG9hZEJhbGFuY2VyLCBjaGlsZFBpY2tlcikge1xuICAgICAgICB0aGlzLmxvYWRCYWxhbmNlciA9IGxvYWRCYWxhbmNlcjtcbiAgICAgICAgdGhpcy5jaGlsZFBpY2tlciA9IGNoaWxkUGlja2VyO1xuICAgICAgICB0aGlzLmNhbGxlZEV4aXRJZGxlID0gZmFsc2U7XG4gICAgfVxuICAgIHBpY2socGlja0FyZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbGxlZEV4aXRJZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRCYWxhbmNlci5leGl0SWRsZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmNhbGxlZEV4aXRJZGxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGlsZFBpY2tlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRQaWNrZXIucGljayhwaWNrQXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBpY2tSZXN1bHRUeXBlOiBQaWNrUmVzdWx0VHlwZS5RVUVVRSxcbiAgICAgICAgICAgICAgICBzdWJjaGFubmVsOiBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXR1czogbnVsbCxcbiAgICAgICAgICAgICAgICBvbkNhbGxTdGFydGVkOiBudWxsLFxuICAgICAgICAgICAgICAgIG9uQ2FsbEVuZGVkOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUXVldWVQaWNrZXIgPSBRdWV1ZVBpY2tlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpY2tlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJRdWV1ZVBpY2tlciIsIlVuYXZhaWxhYmxlUGlja2VyIiwiUGlja1Jlc3VsdFR5cGUiLCJtZXRhZGF0YV8xIiwicmVxdWlyZSIsImNvbnN0YW50c18xIiwiY29uc3RydWN0b3IiLCJzdGF0dXMiLCJhc3NpZ24iLCJjb2RlIiwiU3RhdHVzIiwiVU5BVkFJTEFCTEUiLCJkZXRhaWxzIiwibWV0YWRhdGEiLCJNZXRhZGF0YSIsInBpY2siLCJwaWNrQXJncyIsInBpY2tSZXN1bHRUeXBlIiwiVFJBTlNJRU5UX0ZBSUxVUkUiLCJzdWJjaGFubmVsIiwib25DYWxsU3RhcnRlZCIsIm9uQ2FsbEVuZGVkIiwibG9hZEJhbGFuY2VyIiwiY2hpbGRQaWNrZXIiLCJjYWxsZWRFeGl0SWRsZSIsInByb2Nlc3MiLCJuZXh0VGljayIsImV4aXRJZGxlIiwiUVVFVUUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-dns.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DEFAULT_PORT = void 0;\nexports.setup = setup;\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst dns_1 = __webpack_require__(/*! dns */ \"dns\");\nconst service_config_1 = __webpack_require__(/*! ./service-config */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/service-config.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nconst environment_1 = __webpack_require__(/*! ./environment */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/environment.js\");\nconst TRACER_NAME = \"dns_resolver\";\nfunction trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */ exports.DEFAULT_PORT = 443;\nconst DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30000;\n/**\n * Resolver implementation that handles DNS names and IP addresses.\n */ class DnsResolver {\n    constructor(target, listener, channelOptions){\n        var _a, _b, _c;\n        this.target = target;\n        this.listener = listener;\n        this.pendingLookupPromise = null;\n        this.pendingTxtPromise = null;\n        this.latestLookupResult = null;\n        this.latestServiceConfig = null;\n        this.latestServiceConfigError = null;\n        this.continueResolving = false;\n        this.isNextResolutionTimerRunning = false;\n        this.isServiceConfigEnabled = true;\n        this.returnedIpResult = false;\n        this.alternativeResolver = new dns_1.promises.Resolver();\n        trace(\"Resolver constructed for target \" + (0, uri_parser_1.uriToString)(target));\n        if (target.authority) {\n            this.alternativeResolver.setServers([\n                target.authority\n            ]);\n        }\n        const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\n        if (hostPort === null) {\n            this.ipResult = null;\n            this.dnsHostname = null;\n            this.port = null;\n        } else {\n            if ((0, net_1.isIPv4)(hostPort.host) || (0, net_1.isIPv6)(hostPort.host)) {\n                this.ipResult = [\n                    {\n                        addresses: [\n                            {\n                                host: hostPort.host,\n                                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : exports.DEFAULT_PORT\n                            }\n                        ]\n                    }\n                ];\n                this.dnsHostname = null;\n                this.port = null;\n            } else {\n                this.ipResult = null;\n                this.dnsHostname = hostPort.host;\n                this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : exports.DEFAULT_PORT;\n            }\n        }\n        this.percentage = Math.random() * 100;\n        if (channelOptions[\"grpc.service_config_disable_resolution\"] === 1) {\n            this.isServiceConfigEnabled = false;\n        }\n        this.defaultResolutionError = {\n            code: constants_1.Status.UNAVAILABLE,\n            details: `Name resolution failed for target ${(0, uri_parser_1.uriToString)(this.target)}`,\n            metadata: new metadata_1.Metadata()\n        };\n        const backoffOptions = {\n            initialDelay: channelOptions[\"grpc.initial_reconnect_backoff_ms\"],\n            maxDelay: channelOptions[\"grpc.max_reconnect_backoff_ms\"]\n        };\n        this.backoff = new backoff_timeout_1.BackoffTimeout(()=>{\n            if (this.continueResolving) {\n                this.startResolutionWithBackoff();\n            }\n        }, backoffOptions);\n        this.backoff.unref();\n        this.minTimeBetweenResolutionsMs = (_c = channelOptions[\"grpc.dns_min_time_between_resolutions_ms\"]) !== null && _c !== void 0 ? _c : DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;\n        this.nextResolutionTimer = setTimeout(()=>{}, 0);\n        clearTimeout(this.nextResolutionTimer);\n    }\n    /**\n     * If the target is an IP address, just provide that address as a result.\n     * Otherwise, initiate A, AAAA, and TXT lookups\n     */ startResolution() {\n        if (this.ipResult !== null) {\n            if (!this.returnedIpResult) {\n                trace(\"Returning IP address for target \" + (0, uri_parser_1.uriToString)(this.target));\n                setImmediate(()=>{\n                    this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});\n                });\n                this.returnedIpResult = true;\n            }\n            this.backoff.stop();\n            this.backoff.reset();\n            this.stopNextResolutionTimer();\n            return;\n        }\n        if (this.dnsHostname === null) {\n            trace(\"Failed to parse DNS address \" + (0, uri_parser_1.uriToString)(this.target));\n            setImmediate(()=>{\n                this.listener.onError({\n                    code: constants_1.Status.UNAVAILABLE,\n                    details: `Failed to parse DNS address ${(0, uri_parser_1.uriToString)(this.target)}`,\n                    metadata: new metadata_1.Metadata()\n                });\n            });\n            this.stopNextResolutionTimer();\n        } else {\n            if (this.pendingLookupPromise !== null) {\n                return;\n            }\n            trace(\"Looking up DNS hostname \" + this.dnsHostname);\n            /* We clear out latestLookupResult here to ensure that it contains the\n             * latest result since the last time we started resolving. That way, the\n             * TXT resolution handler can use it, but only if it finishes second. We\n             * don't clear out any previous service config results because it's\n             * better to use a service config that's slightly out of date than to\n             * revert to an effectively blank one. */ this.latestLookupResult = null;\n            const hostname = this.dnsHostname;\n            this.pendingLookupPromise = this.lookup(hostname);\n            this.pendingLookupPromise.then((addressList)=>{\n                if (this.pendingLookupPromise === null) {\n                    return;\n                }\n                this.pendingLookupPromise = null;\n                this.backoff.reset();\n                this.backoff.stop();\n                this.latestLookupResult = addressList.map((address)=>({\n                        addresses: [\n                            address\n                        ]\n                    }));\n                const allAddressesString = \"[\" + addressList.map((addr)=>addr.host + \":\" + addr.port).join(\",\") + \"]\";\n                trace(\"Resolved addresses for target \" + (0, uri_parser_1.uriToString)(this.target) + \": \" + allAddressesString);\n                if (this.latestLookupResult.length === 0) {\n                    this.listener.onError(this.defaultResolutionError);\n                    return;\n                }\n                /* If the TXT lookup has not yet finished, both of the last two\n                 * arguments will be null, which is the equivalent of getting an\n                 * empty TXT response. When the TXT lookup does finish, its handler\n                 * can update the service config by using the same address list */ this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n            }, (err)=>{\n                if (this.pendingLookupPromise === null) {\n                    return;\n                }\n                trace(\"Resolution error for target \" + (0, uri_parser_1.uriToString)(this.target) + \": \" + err.message);\n                this.pendingLookupPromise = null;\n                this.stopNextResolutionTimer();\n                this.listener.onError(this.defaultResolutionError);\n            });\n            /* If there already is a still-pending TXT resolution, we can just use\n             * that result when it comes in */ if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {\n                /* We handle the TXT query promise differently than the others because\n                 * the name resolution attempt as a whole is a success even if the TXT\n                 * lookup fails */ this.pendingTxtPromise = this.resolveTxt(hostname);\n                this.pendingTxtPromise.then((txtRecord)=>{\n                    if (this.pendingTxtPromise === null) {\n                        return;\n                    }\n                    this.pendingTxtPromise = null;\n                    try {\n                        this.latestServiceConfig = (0, service_config_1.extractAndSelectServiceConfig)(txtRecord, this.percentage);\n                    } catch (err) {\n                        this.latestServiceConfigError = {\n                            code: constants_1.Status.UNAVAILABLE,\n                            details: `Parsing service config failed with error ${err.message}`,\n                            metadata: new metadata_1.Metadata()\n                        };\n                    }\n                    if (this.latestLookupResult !== null) {\n                        /* We rely here on the assumption that calling this function with\n                         * identical parameters will be essentialy idempotent, and calling\n                         * it with the same address list and a different service config\n                         * should result in a fast and seamless switchover. */ this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n                    }\n                }, (err)=>{\n                /* If TXT lookup fails we should do nothing, which means that we\n                     * continue to use the result of the most recent successful lookup,\n                     * or the default null config object if there has never been a\n                     * successful lookup. We do not set the latestServiceConfigError\n                     * here because that is specifically used for response validation\n                     * errors. We still need to handle this error so that it does not\n                     * bubble up as an unhandled promise rejection. */ });\n            }\n        }\n    }\n    async lookup(hostname) {\n        if (environment_1.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) {\n            trace(\"Using alternative DNS resolver.\");\n            const records = await Promise.allSettled([\n                this.alternativeResolver.resolve4(hostname),\n                this.alternativeResolver.resolve6(hostname)\n            ]);\n            if (records.every((result)=>result.status === \"rejected\")) {\n                throw new Error(records[0].reason);\n            }\n            return records.reduce((acc, result)=>{\n                return result.status === \"fulfilled\" ? [\n                    ...acc,\n                    ...result.value\n                ] : acc;\n            }, []).map((addr)=>({\n                    host: addr,\n                    port: +this.port\n                }));\n        }\n        /* We lookup both address families here and then split them up later\n         * because when looking up a single family, dns.lookup outputs an error\n         * if the name exists but there are no records for that family, and that\n         * error is indistinguishable from other kinds of errors */ const addressList = await dns_1.promises.lookup(hostname, {\n            all: true\n        });\n        return addressList.map((addr)=>({\n                host: addr.address,\n                port: +this.port\n            }));\n    }\n    async resolveTxt(hostname) {\n        if (environment_1.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) {\n            trace(\"Using alternative DNS resolver.\");\n            return this.alternativeResolver.resolveTxt(hostname);\n        }\n        return dns_1.promises.resolveTxt(hostname);\n    }\n    startNextResolutionTimer() {\n        var _a, _b;\n        clearTimeout(this.nextResolutionTimer);\n        this.nextResolutionTimer = setTimeout(()=>{\n            this.stopNextResolutionTimer();\n            if (this.continueResolving) {\n                this.startResolutionWithBackoff();\n            }\n        }, this.minTimeBetweenResolutionsMs);\n        (_b = (_a = this.nextResolutionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.isNextResolutionTimerRunning = true;\n    }\n    stopNextResolutionTimer() {\n        clearTimeout(this.nextResolutionTimer);\n        this.isNextResolutionTimerRunning = false;\n    }\n    startResolutionWithBackoff() {\n        if (this.pendingLookupPromise === null) {\n            this.continueResolving = false;\n            this.backoff.runOnce();\n            this.startNextResolutionTimer();\n            this.startResolution();\n        }\n    }\n    updateResolution() {\n        /* If there is a pending lookup, just let it finish. Otherwise, if the\n         * nextResolutionTimer or backoff timer is running, set the\n         * continueResolving flag to resolve when whichever of those timers\n         * fires. Otherwise, start resolving immediately. */ if (this.pendingLookupPromise === null) {\n            if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {\n                if (this.isNextResolutionTimerRunning) {\n                    trace('resolution update delayed by \"min time between resolutions\" rate limit');\n                } else {\n                    trace(\"resolution update delayed by backoff timer until \" + this.backoff.getEndTime().toISOString());\n                }\n                this.continueResolving = true;\n            } else {\n                this.startResolutionWithBackoff();\n            }\n        }\n    }\n    /**\n     * Reset the resolver to the same state it had when it was created. In-flight\n     * DNS requests cannot be cancelled, but they are discarded and their results\n     * will be ignored.\n     */ destroy() {\n        this.continueResolving = false;\n        this.backoff.reset();\n        this.backoff.stop();\n        this.stopNextResolutionTimer();\n        this.pendingLookupPromise = null;\n        this.pendingTxtPromise = null;\n        this.latestLookupResult = null;\n        this.latestServiceConfig = null;\n        this.latestServiceConfigError = null;\n        this.returnedIpResult = false;\n    }\n    /**\n     * Get the default authority for the given target. For IP targets, that is\n     * the IP address. For DNS targets, it is the hostname.\n     * @param target\n     */ static getDefaultAuthority(target) {\n        return target.path;\n    }\n}\n/**\n * Set up the DNS resolver class by registering it as the handler for the\n * \"dns:\" prefix and as the default resolver.\n */ function setup() {\n    (0, resolver_1.registerResolver)(\"dns\", DnsResolver);\n    (0, resolver_1.registerDefaultScheme)(\"dns\");\n} //# sourceMappingURL=resolver-dns.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-ip.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setup = setup;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = \"ip_resolver\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst IPV4_SCHEME = \"ipv4\";\nconst IPV6_SCHEME = \"ipv6\";\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */ const DEFAULT_PORT = 443;\nclass IpResolver {\n    constructor(target, listener, channelOptions){\n        var _a;\n        this.listener = listener;\n        this.endpoints = [];\n        this.error = null;\n        this.hasReturnedResult = false;\n        trace(\"Resolver constructed for target \" + (0, uri_parser_1.uriToString)(target));\n        const addresses = [];\n        if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n            this.error = {\n                code: constants_1.Status.UNAVAILABLE,\n                details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n                metadata: new metadata_1.Metadata()\n            };\n            return;\n        }\n        const pathList = target.path.split(\",\");\n        for (const path of pathList){\n            const hostPort = (0, uri_parser_1.splitHostPort)(path);\n            if (hostPort === null) {\n                this.error = {\n                    code: constants_1.Status.UNAVAILABLE,\n                    details: `Failed to parse ${target.scheme} address ${path}`,\n                    metadata: new metadata_1.Metadata()\n                };\n                return;\n            }\n            if (target.scheme === IPV4_SCHEME && !(0, net_1.isIPv4)(hostPort.host) || target.scheme === IPV6_SCHEME && !(0, net_1.isIPv6)(hostPort.host)) {\n                this.error = {\n                    code: constants_1.Status.UNAVAILABLE,\n                    details: `Failed to parse ${target.scheme} address ${path}`,\n                    metadata: new metadata_1.Metadata()\n                };\n                return;\n            }\n            addresses.push({\n                host: hostPort.host,\n                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT\n            });\n        }\n        this.endpoints = addresses.map((address)=>({\n                addresses: [\n                    address\n                ]\n            }));\n        trace(\"Parsed \" + target.scheme + \" address list \" + addresses);\n    }\n    updateResolution() {\n        if (!this.hasReturnedResult) {\n            this.hasReturnedResult = true;\n            process.nextTick(()=>{\n                if (this.error) {\n                    this.listener.onError(this.error);\n                } else {\n                    this.listener.onSuccessfulResolution(this.endpoints, null, null, null, {});\n                }\n            });\n        }\n    }\n    destroy() {\n        this.hasReturnedResult = false;\n    }\n    static getDefaultAuthority(target) {\n        return target.path.split(\",\")[0];\n    }\n}\nfunction setup() {\n    (0, resolver_1.registerResolver)(IPV4_SCHEME, IpResolver);\n    (0, resolver_1.registerResolver)(IPV6_SCHEME, IpResolver);\n} //# sourceMappingURL=resolver-ip.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-uds.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setup = setup;\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nclass UdsResolver {\n    constructor(target, listener, channelOptions){\n        this.listener = listener;\n        this.hasReturnedResult = false;\n        this.endpoints = [];\n        let path;\n        if (target.authority === \"\") {\n            path = \"/\" + target.path;\n        } else {\n            path = target.path;\n        }\n        this.endpoints = [\n            {\n                addresses: [\n                    {\n                        path\n                    }\n                ]\n            }\n        ];\n    }\n    updateResolution() {\n        if (!this.hasReturnedResult) {\n            this.hasReturnedResult = true;\n            process.nextTick(this.listener.onSuccessfulResolution, this.endpoints, null, null, null, {});\n        }\n    }\n    destroy() {\n        this.hasReturnedResult = false;\n    }\n    static getDefaultAuthority(target) {\n        return \"localhost\";\n    }\n}\nfunction setup() {\n    (0, resolver_1.registerResolver)(\"unix\", UdsResolver);\n} //# sourceMappingURL=resolver-uds.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXItdWRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGFBQWEsR0FBR0U7QUFDaEIsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsNEVBQVk7QUFDdkMsTUFBTUM7SUFDRkMsWUFBWUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLGNBQWMsQ0FBRTtRQUMxQyxJQUFJLENBQUNELFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDRSxpQkFBaUIsR0FBRztRQUN6QixJQUFJLENBQUNDLFNBQVMsR0FBRyxFQUFFO1FBQ25CLElBQUlDO1FBQ0osSUFBSUwsT0FBT00sU0FBUyxLQUFLLElBQUk7WUFDekJELE9BQU8sTUFBTUwsT0FBT0ssSUFBSTtRQUM1QixPQUNLO1lBQ0RBLE9BQU9MLE9BQU9LLElBQUk7UUFDdEI7UUFDQSxJQUFJLENBQUNELFNBQVMsR0FBRztZQUFDO2dCQUFFRyxXQUFXO29CQUFDO3dCQUFFRjtvQkFBSztpQkFBRTtZQUFDO1NBQUU7SUFDaEQ7SUFDQUcsbUJBQW1CO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQ0wsaUJBQWlCLEVBQUU7WUFDekIsSUFBSSxDQUFDQSxpQkFBaUIsR0FBRztZQUN6Qk0sUUFBUUMsUUFBUSxDQUFDLElBQUksQ0FBQ1QsUUFBUSxDQUFDVSxzQkFBc0IsRUFBRSxJQUFJLENBQUNQLFNBQVMsRUFBRSxNQUFNLE1BQU0sTUFBTSxDQUFDO1FBQzlGO0lBQ0o7SUFDQVEsVUFBVTtRQUNOLElBQUksQ0FBQ1QsaUJBQWlCLEdBQUc7SUFDN0I7SUFDQSxPQUFPVSxvQkFBb0JiLE1BQU0sRUFBRTtRQUMvQixPQUFPO0lBQ1g7QUFDSjtBQUNBLFNBQVNMO0lBQ0osSUFBR0MsV0FBV2tCLGdCQUFnQixFQUFFLFFBQVFoQjtBQUM3QyxFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9yZXNvbHZlci11ZHMuanM/Njk1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldHVwID0gc2V0dXA7XG5jb25zdCByZXNvbHZlcl8xID0gcmVxdWlyZShcIi4vcmVzb2x2ZXJcIik7XG5jbGFzcyBVZHNSZXNvbHZlciB7XG4gICAgY29uc3RydWN0b3IodGFyZ2V0LCBsaXN0ZW5lciwgY2hhbm5lbE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgICAgICB0aGlzLmhhc1JldHVybmVkUmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZW5kcG9pbnRzID0gW107XG4gICAgICAgIGxldCBwYXRoO1xuICAgICAgICBpZiAodGFyZ2V0LmF1dGhvcml0eSA9PT0gJycpIHtcbiAgICAgICAgICAgIHBhdGggPSAnLycgKyB0YXJnZXQucGF0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhdGggPSB0YXJnZXQucGF0aDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVuZHBvaW50cyA9IFt7IGFkZHJlc3NlczogW3sgcGF0aCB9XSB9XTtcbiAgICB9XG4gICAgdXBkYXRlUmVzb2x1dGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1JldHVybmVkUmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLmhhc1JldHVybmVkUmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2sodGhpcy5saXN0ZW5lci5vblN1Y2Nlc3NmdWxSZXNvbHV0aW9uLCB0aGlzLmVuZHBvaW50cywgbnVsbCwgbnVsbCwgbnVsbCwge30pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuaGFzUmV0dXJuZWRSZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gICAgc3RhdGljIGdldERlZmF1bHRBdXRob3JpdHkodGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiAnbG9jYWxob3N0JztcbiAgICB9XG59XG5mdW5jdGlvbiBzZXR1cCgpIHtcbiAgICAoMCwgcmVzb2x2ZXJfMS5yZWdpc3RlclJlc29sdmVyKSgndW5peCcsIFVkc1Jlc29sdmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmVyLXVkcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzZXR1cCIsInJlc29sdmVyXzEiLCJyZXF1aXJlIiwiVWRzUmVzb2x2ZXIiLCJjb25zdHJ1Y3RvciIsInRhcmdldCIsImxpc3RlbmVyIiwiY2hhbm5lbE9wdGlvbnMiLCJoYXNSZXR1cm5lZFJlc3VsdCIsImVuZHBvaW50cyIsInBhdGgiLCJhdXRob3JpdHkiLCJhZGRyZXNzZXMiLCJ1cGRhdGVSZXNvbHV0aW9uIiwicHJvY2VzcyIsIm5leHRUaWNrIiwib25TdWNjZXNzZnVsUmVzb2x1dGlvbiIsImRlc3Ryb3kiLCJnZXREZWZhdWx0QXV0aG9yaXR5IiwicmVnaXN0ZXJSZXNvbHZlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.registerResolver = registerResolver;\nexports.registerDefaultScheme = registerDefaultScheme;\nexports.createResolver = createResolver;\nexports.getDefaultAuthority = getDefaultAuthority;\nexports.mapUriDefaultScheme = mapUriDefaultScheme;\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst registeredResolvers = {};\nlet defaultScheme = null;\n/**\n * Register a resolver class to handle target names prefixed with the `prefix`\n * string. This prefix should correspond to a URI scheme name listed in the\n * [gRPC Name Resolution document](https://github.com/grpc/grpc/blob/master/doc/naming.md)\n * @param prefix\n * @param resolverClass\n */ function registerResolver(scheme, resolverClass) {\n    registeredResolvers[scheme] = resolverClass;\n}\n/**\n * Register a default resolver to handle target names that do not start with\n * any registered prefix.\n * @param resolverClass\n */ function registerDefaultScheme(scheme) {\n    defaultScheme = scheme;\n}\n/**\n * Create a name resolver for the specified target, if possible. Throws an\n * error if no such name resolver can be created.\n * @param target\n * @param listener\n */ function createResolver(target, listener, options) {\n    if (target.scheme !== undefined && target.scheme in registeredResolvers) {\n        return new registeredResolvers[target.scheme](target, listener, options);\n    } else {\n        throw new Error(`No resolver could be created for target ${(0, uri_parser_1.uriToString)(target)}`);\n    }\n}\n/**\n * Get the default authority for the specified target, if possible. Throws an\n * error if no registered name resolver can parse that target string.\n * @param target\n */ function getDefaultAuthority(target) {\n    if (target.scheme !== undefined && target.scheme in registeredResolvers) {\n        return registeredResolvers[target.scheme].getDefaultAuthority(target);\n    } else {\n        throw new Error(`Invalid target ${(0, uri_parser_1.uriToString)(target)}`);\n    }\n}\nfunction mapUriDefaultScheme(target) {\n    if (target.scheme === undefined || !(target.scheme in registeredResolvers)) {\n        if (defaultScheme !== null) {\n            return {\n                scheme: defaultScheme,\n                authority: undefined,\n                path: (0, uri_parser_1.uriToString)(target)\n            };\n        } else {\n            return null;\n        }\n    }\n    return target;\n} //# sourceMappingURL=resolver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHdCQUF3QixHQUFHRTtBQUMzQkYsNkJBQTZCLEdBQUdHO0FBQ2hDSCxzQkFBc0IsR0FBR0k7QUFDekJKLDJCQUEyQixHQUFHSztBQUM5QkwsMkJBQTJCLEdBQUdNO0FBQzlCLE1BQU1DLGVBQWVDLG1CQUFPQSxDQUFDLGdGQUFjO0FBQzNDLE1BQU1DLHNCQUFzQixDQUFDO0FBQzdCLElBQUlDLGdCQUFnQjtBQUNwQjs7Ozs7O0NBTUMsR0FDRCxTQUFTUixpQkFBaUJTLE1BQU0sRUFBRUMsYUFBYTtJQUMzQ0gsbUJBQW1CLENBQUNFLE9BQU8sR0FBR0M7QUFDbEM7QUFDQTs7OztDQUlDLEdBQ0QsU0FBU1Qsc0JBQXNCUSxNQUFNO0lBQ2pDRCxnQkFBZ0JDO0FBQ3BCO0FBQ0E7Ozs7O0NBS0MsR0FDRCxTQUFTUCxlQUFlUyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsT0FBTztJQUM3QyxJQUFJRixPQUFPRixNQUFNLEtBQUtLLGFBQWFILE9BQU9GLE1BQU0sSUFBSUYscUJBQXFCO1FBQ3JFLE9BQU8sSUFBSUEsbUJBQW1CLENBQUNJLE9BQU9GLE1BQU0sQ0FBQyxDQUFDRSxRQUFRQyxVQUFVQztJQUNwRSxPQUNLO1FBQ0QsTUFBTSxJQUFJRSxNQUFNLENBQUMsd0NBQXdDLEVBQUUsQ0FBQyxHQUFHVixhQUFhVyxXQUFXLEVBQUVMLFFBQVEsQ0FBQztJQUN0RztBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNELFNBQVNSLG9CQUFvQlEsTUFBTTtJQUMvQixJQUFJQSxPQUFPRixNQUFNLEtBQUtLLGFBQWFILE9BQU9GLE1BQU0sSUFBSUYscUJBQXFCO1FBQ3JFLE9BQU9BLG1CQUFtQixDQUFDSSxPQUFPRixNQUFNLENBQUMsQ0FBQ04sbUJBQW1CLENBQUNRO0lBQ2xFLE9BQ0s7UUFDRCxNQUFNLElBQUlJLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxHQUFHVixhQUFhVyxXQUFXLEVBQUVMLFFBQVEsQ0FBQztJQUM3RTtBQUNKO0FBQ0EsU0FBU1Asb0JBQW9CTyxNQUFNO0lBQy9CLElBQUlBLE9BQU9GLE1BQU0sS0FBS0ssYUFBYSxDQUFFSCxDQUFBQSxPQUFPRixNQUFNLElBQUlGLG1CQUFrQixHQUFJO1FBQ3hFLElBQUlDLGtCQUFrQixNQUFNO1lBQ3hCLE9BQU87Z0JBQ0hDLFFBQVFEO2dCQUNSUyxXQUFXSDtnQkFDWEksTUFBTSxDQUFDLEdBQUdiLGFBQWFXLFdBQVcsRUFBRUw7WUFDeEM7UUFDSixPQUNLO1lBQ0QsT0FBTztRQUNYO0lBQ0o7SUFDQSxPQUFPQTtBQUNYLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3Jlc29sdmVyLmpzPzFkOTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVnaXN0ZXJSZXNvbHZlciA9IHJlZ2lzdGVyUmVzb2x2ZXI7XG5leHBvcnRzLnJlZ2lzdGVyRGVmYXVsdFNjaGVtZSA9IHJlZ2lzdGVyRGVmYXVsdFNjaGVtZTtcbmV4cG9ydHMuY3JlYXRlUmVzb2x2ZXIgPSBjcmVhdGVSZXNvbHZlcjtcbmV4cG9ydHMuZ2V0RGVmYXVsdEF1dGhvcml0eSA9IGdldERlZmF1bHRBdXRob3JpdHk7XG5leHBvcnRzLm1hcFVyaURlZmF1bHRTY2hlbWUgPSBtYXBVcmlEZWZhdWx0U2NoZW1lO1xuY29uc3QgdXJpX3BhcnNlcl8xID0gcmVxdWlyZShcIi4vdXJpLXBhcnNlclwiKTtcbmNvbnN0IHJlZ2lzdGVyZWRSZXNvbHZlcnMgPSB7fTtcbmxldCBkZWZhdWx0U2NoZW1lID0gbnVsbDtcbi8qKlxuICogUmVnaXN0ZXIgYSByZXNvbHZlciBjbGFzcyB0byBoYW5kbGUgdGFyZ2V0IG5hbWVzIHByZWZpeGVkIHdpdGggdGhlIGBwcmVmaXhgXG4gKiBzdHJpbmcuIFRoaXMgcHJlZml4IHNob3VsZCBjb3JyZXNwb25kIHRvIGEgVVJJIHNjaGVtZSBuYW1lIGxpc3RlZCBpbiB0aGVcbiAqIFtnUlBDIE5hbWUgUmVzb2x1dGlvbiBkb2N1bWVudF0oaHR0cHM6Ly9naXRodWIuY29tL2dycGMvZ3JwYy9ibG9iL21hc3Rlci9kb2MvbmFtaW5nLm1kKVxuICogQHBhcmFtIHByZWZpeFxuICogQHBhcmFtIHJlc29sdmVyQ2xhc3NcbiAqL1xuZnVuY3Rpb24gcmVnaXN0ZXJSZXNvbHZlcihzY2hlbWUsIHJlc29sdmVyQ2xhc3MpIHtcbiAgICByZWdpc3RlcmVkUmVzb2x2ZXJzW3NjaGVtZV0gPSByZXNvbHZlckNsYXNzO1xufVxuLyoqXG4gKiBSZWdpc3RlciBhIGRlZmF1bHQgcmVzb2x2ZXIgdG8gaGFuZGxlIHRhcmdldCBuYW1lcyB0aGF0IGRvIG5vdCBzdGFydCB3aXRoXG4gKiBhbnkgcmVnaXN0ZXJlZCBwcmVmaXguXG4gKiBAcGFyYW0gcmVzb2x2ZXJDbGFzc1xuICovXG5mdW5jdGlvbiByZWdpc3RlckRlZmF1bHRTY2hlbWUoc2NoZW1lKSB7XG4gICAgZGVmYXVsdFNjaGVtZSA9IHNjaGVtZTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmFtZSByZXNvbHZlciBmb3IgdGhlIHNwZWNpZmllZCB0YXJnZXQsIGlmIHBvc3NpYmxlLiBUaHJvd3MgYW5cbiAqIGVycm9yIGlmIG5vIHN1Y2ggbmFtZSByZXNvbHZlciBjYW4gYmUgY3JlYXRlZC5cbiAqIEBwYXJhbSB0YXJnZXRcbiAqIEBwYXJhbSBsaXN0ZW5lclxuICovXG5mdW5jdGlvbiBjcmVhdGVSZXNvbHZlcih0YXJnZXQsIGxpc3RlbmVyLCBvcHRpb25zKSB7XG4gICAgaWYgKHRhcmdldC5zY2hlbWUgIT09IHVuZGVmaW5lZCAmJiB0YXJnZXQuc2NoZW1lIGluIHJlZ2lzdGVyZWRSZXNvbHZlcnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyByZWdpc3RlcmVkUmVzb2x2ZXJzW3RhcmdldC5zY2hlbWVdKHRhcmdldCwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyByZXNvbHZlciBjb3VsZCBiZSBjcmVhdGVkIGZvciB0YXJnZXQgJHsoMCwgdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKSh0YXJnZXQpfWApO1xuICAgIH1cbn1cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IGF1dGhvcml0eSBmb3IgdGhlIHNwZWNpZmllZCB0YXJnZXQsIGlmIHBvc3NpYmxlLiBUaHJvd3MgYW5cbiAqIGVycm9yIGlmIG5vIHJlZ2lzdGVyZWQgbmFtZSByZXNvbHZlciBjYW4gcGFyc2UgdGhhdCB0YXJnZXQgc3RyaW5nLlxuICogQHBhcmFtIHRhcmdldFxuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0QXV0aG9yaXR5KHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQuc2NoZW1lICE9PSB1bmRlZmluZWQgJiYgdGFyZ2V0LnNjaGVtZSBpbiByZWdpc3RlcmVkUmVzb2x2ZXJzKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlcmVkUmVzb2x2ZXJzW3RhcmdldC5zY2hlbWVdLmdldERlZmF1bHRBdXRob3JpdHkodGFyZ2V0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB0YXJnZXQgJHsoMCwgdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKSh0YXJnZXQpfWApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1hcFVyaURlZmF1bHRTY2hlbWUodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldC5zY2hlbWUgPT09IHVuZGVmaW5lZCB8fCAhKHRhcmdldC5zY2hlbWUgaW4gcmVnaXN0ZXJlZFJlc29sdmVycykpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRTY2hlbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2NoZW1lOiBkZWZhdWx0U2NoZW1lLFxuICAgICAgICAgICAgICAgIGF1dGhvcml0eTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHBhdGg6ICgwLCB1cmlfcGFyc2VyXzEudXJpVG9TdHJpbmcpKHRhcmdldCksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlZ2lzdGVyUmVzb2x2ZXIiLCJyZWdpc3RlckRlZmF1bHRTY2hlbWUiLCJjcmVhdGVSZXNvbHZlciIsImdldERlZmF1bHRBdXRob3JpdHkiLCJtYXBVcmlEZWZhdWx0U2NoZW1lIiwidXJpX3BhcnNlcl8xIiwicmVxdWlyZSIsInJlZ2lzdGVyZWRSZXNvbHZlcnMiLCJkZWZhdWx0U2NoZW1lIiwic2NoZW1lIiwicmVzb2x2ZXJDbGFzcyIsInRhcmdldCIsImxpc3RlbmVyIiwib3B0aW9ucyIsInVuZGVmaW5lZCIsIkVycm9yIiwidXJpVG9TdHJpbmciLCJhdXRob3JpdHkiLCJwYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-call.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolving-call.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ResolvingCall = void 0;\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\nconst TRACER_NAME = \"resolving_call\";\nclass ResolvingCall {\n    constructor(channel, method, options, filterStackFactory, callNumber){\n        this.channel = channel;\n        this.method = method;\n        this.filterStackFactory = filterStackFactory;\n        this.callNumber = callNumber;\n        this.child = null;\n        this.readPending = false;\n        this.pendingMessage = null;\n        this.pendingHalfClose = false;\n        this.ended = false;\n        this.readFilterPending = false;\n        this.writeFilterPending = false;\n        this.pendingChildStatus = null;\n        this.metadata = null;\n        this.listener = null;\n        this.statusWatchers = [];\n        this.deadlineTimer = setTimeout(()=>{}, 0);\n        this.filterStack = null;\n        this.deadlineStartTime = null;\n        this.configReceivedTime = null;\n        this.childStartTime = null;\n        /**\n         * Credentials configured for this specific call. Does not include\n         * call credentials associated with the channel credentials used to create\n         * the channel.\n         */ this.credentials = call_credentials_1.CallCredentials.createEmpty();\n        this.deadline = options.deadline;\n        this.host = options.host;\n        if (options.parentCall) {\n            if (options.flags & constants_1.Propagate.CANCELLATION) {\n                options.parentCall.on(\"cancelled\", ()=>{\n                    this.cancelWithStatus(constants_1.Status.CANCELLED, \"Cancelled by parent call\");\n                });\n            }\n            if (options.flags & constants_1.Propagate.DEADLINE) {\n                this.trace(\"Propagating deadline from parent: \" + options.parentCall.getDeadline());\n                this.deadline = (0, deadline_1.minDeadline)(this.deadline, options.parentCall.getDeadline());\n            }\n        }\n        this.trace(\"Created\");\n        this.runDeadlineTimer();\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, \"[\" + this.callNumber + \"] \" + text);\n    }\n    runDeadlineTimer() {\n        clearTimeout(this.deadlineTimer);\n        this.deadlineStartTime = new Date();\n        this.trace(\"Deadline: \" + (0, deadline_1.deadlineToString)(this.deadline));\n        const timeout = (0, deadline_1.getRelativeTimeout)(this.deadline);\n        if (timeout !== Infinity) {\n            this.trace(\"Deadline will be reached in \" + timeout + \"ms\");\n            const handleDeadline = ()=>{\n                if (!this.deadlineStartTime) {\n                    this.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, \"Deadline exceeded\");\n                    return;\n                }\n                const deadlineInfo = [];\n                const deadlineEndTime = new Date();\n                deadlineInfo.push(`Deadline exceeded after ${(0, deadline_1.formatDateDifference)(this.deadlineStartTime, deadlineEndTime)}`);\n                if (this.configReceivedTime) {\n                    if (this.configReceivedTime > this.deadlineStartTime) {\n                        deadlineInfo.push(`name resolution: ${(0, deadline_1.formatDateDifference)(this.deadlineStartTime, this.configReceivedTime)}`);\n                    }\n                    if (this.childStartTime) {\n                        if (this.childStartTime > this.configReceivedTime) {\n                            deadlineInfo.push(`metadata filters: ${(0, deadline_1.formatDateDifference)(this.configReceivedTime, this.childStartTime)}`);\n                        }\n                    } else {\n                        deadlineInfo.push(\"waiting for metadata filters\");\n                    }\n                } else {\n                    deadlineInfo.push(\"waiting for name resolution\");\n                }\n                if (this.child) {\n                    deadlineInfo.push(...this.child.getDeadlineInfo());\n                }\n                this.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, deadlineInfo.join(\",\"));\n            };\n            if (timeout <= 0) {\n                process.nextTick(handleDeadline);\n            } else {\n                this.deadlineTimer = setTimeout(handleDeadline, timeout);\n            }\n        }\n    }\n    outputStatus(status) {\n        if (!this.ended) {\n            this.ended = true;\n            if (!this.filterStack) {\n                this.filterStack = this.filterStackFactory.createFilter();\n            }\n            clearTimeout(this.deadlineTimer);\n            const filteredStatus = this.filterStack.receiveTrailers(status);\n            this.trace(\"ended with status: code=\" + filteredStatus.code + ' details=\"' + filteredStatus.details + '\"');\n            this.statusWatchers.forEach((watcher)=>watcher(filteredStatus));\n            process.nextTick(()=>{\n                var _a;\n                (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);\n            });\n        }\n    }\n    sendMessageOnChild(context, message) {\n        if (!this.child) {\n            throw new Error(\"sendMessageonChild called with child not populated\");\n        }\n        const child = this.child;\n        this.writeFilterPending = true;\n        this.filterStack.sendMessage(Promise.resolve({\n            message: message,\n            flags: context.flags\n        })).then((filteredMessage)=>{\n            this.writeFilterPending = false;\n            child.sendMessageWithContext(context, filteredMessage.message);\n            if (this.pendingHalfClose) {\n                child.halfClose();\n            }\n        }, (status)=>{\n            this.cancelWithStatus(status.code, status.details);\n        });\n    }\n    getConfig() {\n        if (this.ended) {\n            return;\n        }\n        if (!this.metadata || !this.listener) {\n            throw new Error(\"getConfig called before start\");\n        }\n        const configResult = this.channel.getConfig(this.method, this.metadata);\n        if (configResult.type === \"NONE\") {\n            this.channel.queueCallForConfig(this);\n            return;\n        } else if (configResult.type === \"ERROR\") {\n            if (this.metadata.getOptions().waitForReady) {\n                this.channel.queueCallForConfig(this);\n            } else {\n                this.outputStatus(configResult.error);\n            }\n            return;\n        }\n        // configResult.type === 'SUCCESS'\n        this.configReceivedTime = new Date();\n        const config = configResult.config;\n        if (config.status !== constants_1.Status.OK) {\n            const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(config.status, \"Failed to route call to method \" + this.method);\n            this.outputStatus({\n                code: code,\n                details: details,\n                metadata: new metadata_1.Metadata()\n            });\n            return;\n        }\n        if (config.methodConfig.timeout) {\n            const configDeadline = new Date();\n            configDeadline.setSeconds(configDeadline.getSeconds() + config.methodConfig.timeout.seconds);\n            configDeadline.setMilliseconds(configDeadline.getMilliseconds() + config.methodConfig.timeout.nanos / 1000000);\n            this.deadline = (0, deadline_1.minDeadline)(this.deadline, configDeadline);\n            this.runDeadlineTimer();\n        }\n        this.filterStackFactory.push(config.dynamicFilterFactories);\n        this.filterStack = this.filterStackFactory.createFilter();\n        this.filterStack.sendMetadata(Promise.resolve(this.metadata)).then((filteredMetadata)=>{\n            this.child = this.channel.createRetryingCall(config, this.method, this.host, this.credentials, this.deadline);\n            this.trace(\"Created child [\" + this.child.getCallNumber() + \"]\");\n            this.childStartTime = new Date();\n            this.child.start(filteredMetadata, {\n                onReceiveMetadata: (metadata)=>{\n                    this.trace(\"Received metadata\");\n                    this.listener.onReceiveMetadata(this.filterStack.receiveMetadata(metadata));\n                },\n                onReceiveMessage: (message)=>{\n                    this.trace(\"Received message\");\n                    this.readFilterPending = true;\n                    this.filterStack.receiveMessage(message).then((filteredMesssage)=>{\n                        this.trace(\"Finished filtering received message\");\n                        this.readFilterPending = false;\n                        this.listener.onReceiveMessage(filteredMesssage);\n                        if (this.pendingChildStatus) {\n                            this.outputStatus(this.pendingChildStatus);\n                        }\n                    }, (status)=>{\n                        this.cancelWithStatus(status.code, status.details);\n                    });\n                },\n                onReceiveStatus: (status)=>{\n                    this.trace(\"Received status\");\n                    if (this.readFilterPending) {\n                        this.pendingChildStatus = status;\n                    } else {\n                        this.outputStatus(status);\n                    }\n                }\n            });\n            if (this.readPending) {\n                this.child.startRead();\n            }\n            if (this.pendingMessage) {\n                this.sendMessageOnChild(this.pendingMessage.context, this.pendingMessage.message);\n            } else if (this.pendingHalfClose) {\n                this.child.halfClose();\n            }\n        }, (status)=>{\n            this.outputStatus(status);\n        });\n    }\n    reportResolverError(status) {\n        var _a;\n        if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {\n            this.channel.queueCallForConfig(this);\n        } else {\n            this.outputStatus(status);\n        }\n    }\n    cancelWithStatus(status, details) {\n        var _a;\n        this.trace(\"cancelWithStatus code: \" + status + ' details: \"' + details + '\"');\n        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);\n        this.outputStatus({\n            code: status,\n            details: details,\n            metadata: new metadata_1.Metadata()\n        });\n    }\n    getPeer() {\n        var _a, _b;\n        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\n    }\n    start(metadata, listener) {\n        this.trace(\"start called\");\n        this.metadata = metadata.clone();\n        this.listener = listener;\n        this.getConfig();\n    }\n    sendMessageWithContext(context, message) {\n        this.trace(\"write() called with message of length \" + message.length);\n        if (this.child) {\n            this.sendMessageOnChild(context, message);\n        } else {\n            this.pendingMessage = {\n                context,\n                message\n            };\n        }\n    }\n    startRead() {\n        this.trace(\"startRead called\");\n        if (this.child) {\n            this.child.startRead();\n        } else {\n            this.readPending = true;\n        }\n    }\n    halfClose() {\n        this.trace(\"halfClose called\");\n        if (this.child && !this.writeFilterPending) {\n            this.child.halfClose();\n        } else {\n            this.pendingHalfClose = true;\n        }\n    }\n    setCredentials(credentials) {\n        this.credentials = credentials;\n    }\n    addStatusWatcher(watcher) {\n        this.statusWatchers.push(watcher);\n    }\n    getCallNumber() {\n        return this.callNumber;\n    }\n}\nexports.ResolvingCall = ResolvingCall; //# sourceMappingURL=resolving-call.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ResolvingLoadBalancer = void 0;\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\nconst service_config_1 = __webpack_require__(/*! ./service-config */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/service-config.js\");\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\nconst TRACER_NAME = \"resolving_load_balancer\";\nfunction trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n/**\n * Name match levels in order from most to least specific. This is the order in\n * which searches will be performed.\n */ const NAME_MATCH_LEVEL_ORDER = [\n    \"SERVICE_AND_METHOD\",\n    \"SERVICE\",\n    \"EMPTY\"\n];\nfunction hasMatchingName(service, method, methodConfig, matchLevel) {\n    for (const name of methodConfig.name){\n        switch(matchLevel){\n            case \"EMPTY\":\n                if (!name.service && !name.method) {\n                    return true;\n                }\n                break;\n            case \"SERVICE\":\n                if (name.service === service && !name.method) {\n                    return true;\n                }\n                break;\n            case \"SERVICE_AND_METHOD\":\n                if (name.service === service && name.method === method) {\n                    return true;\n                }\n        }\n    }\n    return false;\n}\nfunction findMatchingConfig(service, method, methodConfigs, matchLevel) {\n    for (const config of methodConfigs){\n        if (hasMatchingName(service, method, config, matchLevel)) {\n            return config;\n        }\n    }\n    return null;\n}\nfunction getDefaultConfigSelector(serviceConfig) {\n    return {\n        invoke (methodName, metadata) {\n            var _a, _b;\n            const splitName = methodName.split(\"/\").filter((x)=>x.length > 0);\n            const service = (_a = splitName[0]) !== null && _a !== void 0 ? _a : \"\";\n            const method = (_b = splitName[1]) !== null && _b !== void 0 ? _b : \"\";\n            if (serviceConfig && serviceConfig.methodConfig) {\n                /* Check for the following in order, and return the first method\n                * config that matches:\n                * 1. A name that exactly matches the service and method\n                * 2. A name with no method set that matches the service\n                * 3. An empty name\n                */ for (const matchLevel of NAME_MATCH_LEVEL_ORDER){\n                    const matchingConfig = findMatchingConfig(service, method, serviceConfig.methodConfig, matchLevel);\n                    if (matchingConfig) {\n                        return {\n                            methodConfig: matchingConfig,\n                            pickInformation: {},\n                            status: constants_1.Status.OK,\n                            dynamicFilterFactories: []\n                        };\n                    }\n                }\n            }\n            return {\n                methodConfig: {\n                    name: []\n                },\n                pickInformation: {},\n                status: constants_1.Status.OK,\n                dynamicFilterFactories: []\n            };\n        },\n        unref () {}\n    };\n}\nclass ResolvingLoadBalancer {\n    /**\n     * Wrapper class that behaves like a `LoadBalancer` and also handles name\n     * resolution internally.\n     * @param target The address of the backend to connect to.\n     * @param channelControlHelper `ChannelControlHelper` instance provided by\n     *     this load balancer's owner.\n     * @param defaultServiceConfig The default service configuration to be used\n     *     if none is provided by the name resolver. A `null` value indicates\n     *     that the default behavior should be the default unconfigured behavior.\n     *     In practice, that means using the \"pick first\" load balancer\n     *     implmentation\n     */ constructor(target, channelControlHelper, channelOptions, onSuccessfulResolution, onFailedResolution){\n        this.target = target;\n        this.channelControlHelper = channelControlHelper;\n        this.channelOptions = channelOptions;\n        this.onSuccessfulResolution = onSuccessfulResolution;\n        this.onFailedResolution = onFailedResolution;\n        this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;\n        this.latestChildPicker = new picker_1.QueuePicker(this);\n        this.latestChildErrorMessage = null;\n        /**\n         * This resolving load balancer's current connectivity state.\n         */ this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n        /**\n         * The service config object from the last successful resolution, if\n         * available. A value of null indicates that we have not yet received a valid\n         * service config from the resolver.\n         */ this.previousServiceConfig = null;\n        /**\n         * Indicates whether we should attempt to resolve again after the backoff\n         * timer runs out.\n         */ this.continueResolving = false;\n        if (channelOptions[\"grpc.service_config\"]) {\n            this.defaultServiceConfig = (0, service_config_1.validateServiceConfig)(JSON.parse(channelOptions[\"grpc.service_config\"]));\n        } else {\n            this.defaultServiceConfig = {\n                loadBalancingConfig: [],\n                methodConfig: []\n            };\n        }\n        this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);\n        this.childLoadBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler({\n            createSubchannel: channelControlHelper.createSubchannel.bind(channelControlHelper),\n            requestReresolution: ()=>{\n                /* If the backoffTimeout is running, we're still backing off from\n                 * making resolve requests, so we shouldn't make another one here.\n                 * In that case, the backoff timer callback will call\n                 * updateResolution */ if (this.backoffTimeout.isRunning()) {\n                    trace(\"requestReresolution delayed by backoff timer until \" + this.backoffTimeout.getEndTime().toISOString());\n                    this.continueResolving = true;\n                } else {\n                    this.updateResolution();\n                }\n            },\n            updateState: (newState, picker, errorMessage)=>{\n                this.latestChildState = newState;\n                this.latestChildPicker = picker;\n                this.latestChildErrorMessage = errorMessage;\n                this.updateState(newState, picker, errorMessage);\n            },\n            addChannelzChild: channelControlHelper.addChannelzChild.bind(channelControlHelper),\n            removeChannelzChild: channelControlHelper.removeChannelzChild.bind(channelControlHelper)\n        });\n        this.innerResolver = (0, resolver_1.createResolver)(target, {\n            onSuccessfulResolution: (endpointList, serviceConfig, serviceConfigError, configSelector, attributes)=>{\n                var _a;\n                this.backoffTimeout.stop();\n                this.backoffTimeout.reset();\n                let workingServiceConfig = null;\n                /* This first group of conditionals implements the algorithm described\n                 * in https://github.com/grpc/proposal/blob/master/A21-service-config-error-handling.md\n                 * in the section called \"Behavior on receiving a new gRPC Config\".\n                 */ if (serviceConfig === null) {\n                    // Step 4 and 5\n                    if (serviceConfigError === null) {\n                        // Step 5\n                        this.previousServiceConfig = null;\n                        workingServiceConfig = this.defaultServiceConfig;\n                    } else {\n                        // Step 4\n                        if (this.previousServiceConfig === null) {\n                            // Step 4.ii\n                            this.handleResolutionFailure(serviceConfigError);\n                        } else {\n                            // Step 4.i\n                            workingServiceConfig = this.previousServiceConfig;\n                        }\n                    }\n                } else {\n                    // Step 3\n                    workingServiceConfig = serviceConfig;\n                    this.previousServiceConfig = serviceConfig;\n                }\n                const workingConfigList = (_a = workingServiceConfig === null || workingServiceConfig === void 0 ? void 0 : workingServiceConfig.loadBalancingConfig) !== null && _a !== void 0 ? _a : [];\n                const loadBalancingConfig = (0, load_balancer_1.selectLbConfigFromList)(workingConfigList, true);\n                if (loadBalancingConfig === null) {\n                    // There were load balancing configs but none are supported. This counts as a resolution failure\n                    this.handleResolutionFailure({\n                        code: constants_1.Status.UNAVAILABLE,\n                        details: \"All load balancer options in service config are not compatible\",\n                        metadata: new metadata_1.Metadata()\n                    });\n                    configSelector === null || configSelector === void 0 ? void 0 : configSelector.unref();\n                    return;\n                }\n                this.childLoadBalancer.updateAddressList(endpointList, loadBalancingConfig, Object.assign(Object.assign({}, this.channelOptions), attributes));\n                const finalServiceConfig = workingServiceConfig !== null && workingServiceConfig !== void 0 ? workingServiceConfig : this.defaultServiceConfig;\n                this.onSuccessfulResolution(finalServiceConfig, configSelector !== null && configSelector !== void 0 ? configSelector : getDefaultConfigSelector(finalServiceConfig));\n            },\n            onError: (error)=>{\n                this.handleResolutionFailure(error);\n            }\n        }, channelOptions);\n        const backoffOptions = {\n            initialDelay: channelOptions[\"grpc.initial_reconnect_backoff_ms\"],\n            maxDelay: channelOptions[\"grpc.max_reconnect_backoff_ms\"]\n        };\n        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(()=>{\n            if (this.continueResolving) {\n                this.updateResolution();\n                this.continueResolving = false;\n            } else {\n                this.updateState(this.latestChildState, this.latestChildPicker, this.latestChildErrorMessage);\n            }\n        }, backoffOptions);\n        this.backoffTimeout.unref();\n    }\n    updateResolution() {\n        this.innerResolver.updateResolution();\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE) {\n            /* this.latestChildPicker is initialized as new QueuePicker(this), which\n             * is an appropriate value here if the child LB policy is unset.\n             * Otherwise, we want to delegate to the child here, in case that\n             * triggers something. */ this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, this.latestChildPicker, this.latestChildErrorMessage);\n        }\n        this.backoffTimeout.runOnce();\n    }\n    updateState(connectivityState, picker, errorMessage) {\n        trace((0, uri_parser_1.uriToString)(this.target) + \" \" + connectivity_state_1.ConnectivityState[this.currentState] + \" -> \" + connectivity_state_1.ConnectivityState[connectivityState]);\n        // Ensure that this.exitIdle() is called by the picker\n        if (connectivityState === connectivity_state_1.ConnectivityState.IDLE) {\n            picker = new picker_1.QueuePicker(this, picker);\n        }\n        this.currentState = connectivityState;\n        this.channelControlHelper.updateState(connectivityState, picker, errorMessage);\n    }\n    handleResolutionFailure(error) {\n        if (this.latestChildState === connectivity_state_1.ConnectivityState.IDLE) {\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker(error), error.details);\n            this.onFailedResolution(error);\n        }\n    }\n    exitIdle() {\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE || this.currentState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n            if (this.backoffTimeout.isRunning()) {\n                this.continueResolving = true;\n            } else {\n                this.updateResolution();\n            }\n        }\n        this.childLoadBalancer.exitIdle();\n    }\n    updateAddressList(endpointList, lbConfig) {\n        throw new Error(\"updateAddressList not supported on ResolvingLoadBalancer\");\n    }\n    resetBackoff() {\n        this.backoffTimeout.reset();\n        this.childLoadBalancer.resetBackoff();\n    }\n    destroy() {\n        this.childLoadBalancer.destroy();\n        this.innerResolver.destroy();\n        this.backoffTimeout.reset();\n        this.backoffTimeout.stop();\n        this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;\n        this.latestChildPicker = new picker_1.QueuePicker(this);\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n        this.previousServiceConfig = null;\n        this.continueResolving = false;\n    }\n    getTypeName() {\n        return \"resolving_load_balancer\";\n    }\n}\nexports.ResolvingLoadBalancer = ResolvingLoadBalancer; //# sourceMappingURL=resolving-load-balancer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/retrying-call.js":
/*!***************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/retrying-call.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RetryingCall = exports.MessageBufferTracker = exports.RetryThrottler = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = \"retrying_call\";\nclass RetryThrottler {\n    constructor(maxTokens, tokenRatio, previousRetryThrottler){\n        this.maxTokens = maxTokens;\n        this.tokenRatio = tokenRatio;\n        if (previousRetryThrottler) {\n            /* When carrying over tokens from a previous config, rescale them to the\n             * new max value */ this.tokens = previousRetryThrottler.tokens * (maxTokens / previousRetryThrottler.maxTokens);\n        } else {\n            this.tokens = maxTokens;\n        }\n    }\n    addCallSucceeded() {\n        this.tokens = Math.max(this.tokens + this.tokenRatio, this.maxTokens);\n    }\n    addCallFailed() {\n        this.tokens = Math.min(this.tokens - 1, 0);\n    }\n    canRetryCall() {\n        return this.tokens > this.maxTokens / 2;\n    }\n}\nexports.RetryThrottler = RetryThrottler;\nclass MessageBufferTracker {\n    constructor(totalLimit, limitPerCall){\n        this.totalLimit = totalLimit;\n        this.limitPerCall = limitPerCall;\n        this.totalAllocated = 0;\n        this.allocatedPerCall = new Map();\n    }\n    allocate(size, callId) {\n        var _a;\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\n        if (this.limitPerCall - currentPerCall < size || this.totalLimit - this.totalAllocated < size) {\n            return false;\n        }\n        this.allocatedPerCall.set(callId, currentPerCall + size);\n        this.totalAllocated += size;\n        return true;\n    }\n    free(size, callId) {\n        var _a;\n        if (this.totalAllocated < size) {\n            throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > total allocated ${this.totalAllocated}`);\n        }\n        this.totalAllocated -= size;\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\n        if (currentPerCall < size) {\n            throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > allocated for call ${currentPerCall}`);\n        }\n        this.allocatedPerCall.set(callId, currentPerCall - size);\n    }\n    freeAll(callId) {\n        var _a;\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\n        if (this.totalAllocated < currentPerCall) {\n            throw new Error(`Invalid buffer allocation state: call ${callId} allocated ${currentPerCall} > total allocated ${this.totalAllocated}`);\n        }\n        this.totalAllocated -= currentPerCall;\n        this.allocatedPerCall.delete(callId);\n    }\n}\nexports.MessageBufferTracker = MessageBufferTracker;\nconst PREVIONS_RPC_ATTEMPTS_METADATA_KEY = \"grpc-previous-rpc-attempts\";\nconst DEFAULT_MAX_ATTEMPTS_LIMIT = 5;\nclass RetryingCall {\n    constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber, bufferTracker, retryThrottler){\n        var _a;\n        this.channel = channel;\n        this.callConfig = callConfig;\n        this.methodName = methodName;\n        this.host = host;\n        this.credentials = credentials;\n        this.deadline = deadline;\n        this.callNumber = callNumber;\n        this.bufferTracker = bufferTracker;\n        this.retryThrottler = retryThrottler;\n        this.listener = null;\n        this.initialMetadata = null;\n        this.underlyingCalls = [];\n        this.writeBuffer = [];\n        /**\n         * The offset of message indices in the writeBuffer. For example, if\n         * writeBufferOffset is 10, message 10 is in writeBuffer[0] and message 15\n         * is in writeBuffer[5].\n         */ this.writeBufferOffset = 0;\n        /**\n         * Tracks whether a read has been started, so that we know whether to start\n         * reads on new child calls. This only matters for the first read, because\n         * once a message comes in the child call becomes committed and there will\n         * be no new child calls.\n         */ this.readStarted = false;\n        this.transparentRetryUsed = false;\n        /**\n         * Number of attempts so far\n         */ this.attempts = 0;\n        this.hedgingTimer = null;\n        this.committedCallIndex = null;\n        this.initialRetryBackoffSec = 0;\n        this.nextRetryBackoffSec = 0;\n        const maxAttemptsLimit = (_a = channel.getOptions()[\"grpc-node.retry_max_attempts_limit\"]) !== null && _a !== void 0 ? _a : DEFAULT_MAX_ATTEMPTS_LIMIT;\n        if (callConfig.methodConfig.retryPolicy) {\n            this.state = \"RETRY\";\n            const retryPolicy = callConfig.methodConfig.retryPolicy;\n            this.nextRetryBackoffSec = this.initialRetryBackoffSec = Number(retryPolicy.initialBackoff.substring(0, retryPolicy.initialBackoff.length - 1));\n            this.maxAttempts = Math.min(retryPolicy.maxAttempts, maxAttemptsLimit);\n        } else if (callConfig.methodConfig.hedgingPolicy) {\n            this.state = \"HEDGING\";\n            this.maxAttempts = Math.min(callConfig.methodConfig.hedgingPolicy.maxAttempts, maxAttemptsLimit);\n        } else if (channel.getOptions()[\"grpc.enable_retries\"] === 0) {\n            this.state = \"NO_RETRY\";\n            this.maxAttempts = 1;\n        } else {\n            this.state = \"TRANSPARENT_ONLY\";\n            this.maxAttempts = 1;\n        }\n        this.startTime = new Date();\n    }\n    getDeadlineInfo() {\n        if (this.underlyingCalls.length === 0) {\n            return [];\n        }\n        const deadlineInfo = [];\n        const latestCall = this.underlyingCalls[this.underlyingCalls.length - 1];\n        if (this.underlyingCalls.length > 1) {\n            deadlineInfo.push(`previous attempts: ${this.underlyingCalls.length - 1}`);\n        }\n        if (latestCall.startTime > this.startTime) {\n            deadlineInfo.push(`time to current attempt start: ${(0, deadline_1.formatDateDifference)(this.startTime, latestCall.startTime)}`);\n        }\n        deadlineInfo.push(...latestCall.call.getDeadlineInfo());\n        return deadlineInfo;\n    }\n    getCallNumber() {\n        return this.callNumber;\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, \"[\" + this.callNumber + \"] \" + text);\n    }\n    reportStatus(statusObject) {\n        this.trace(\"ended with status: code=\" + statusObject.code + ' details=\"' + statusObject.details + '\" start time=' + this.startTime.toISOString());\n        this.bufferTracker.freeAll(this.callNumber);\n        this.writeBufferOffset = this.writeBufferOffset + this.writeBuffer.length;\n        this.writeBuffer = [];\n        process.nextTick(()=>{\n            var _a;\n            // Explicitly construct status object to remove progress field\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus({\n                code: statusObject.code,\n                details: statusObject.details,\n                metadata: statusObject.metadata\n            });\n        });\n    }\n    cancelWithStatus(status, details) {\n        this.trace(\"cancelWithStatus code: \" + status + ' details: \"' + details + '\"');\n        this.reportStatus({\n            code: status,\n            details,\n            metadata: new metadata_1.Metadata()\n        });\n        for (const { call } of this.underlyingCalls){\n            call.cancelWithStatus(status, details);\n        }\n    }\n    getPeer() {\n        if (this.committedCallIndex !== null) {\n            return this.underlyingCalls[this.committedCallIndex].call.getPeer();\n        } else {\n            return \"unknown\";\n        }\n    }\n    getBufferEntry(messageIndex) {\n        var _a;\n        return (_a = this.writeBuffer[messageIndex - this.writeBufferOffset]) !== null && _a !== void 0 ? _a : {\n            entryType: \"FREED\",\n            allocated: false\n        };\n    }\n    getNextBufferIndex() {\n        return this.writeBufferOffset + this.writeBuffer.length;\n    }\n    clearSentMessages() {\n        if (this.state !== \"COMMITTED\") {\n            return;\n        }\n        let earliestNeededMessageIndex;\n        if (this.underlyingCalls[this.committedCallIndex].state === \"COMPLETED\") {\n            /* If the committed call is completed, clear all messages, even if some\n             * have not been sent. */ earliestNeededMessageIndex = this.getNextBufferIndex();\n        } else {\n            earliestNeededMessageIndex = this.underlyingCalls[this.committedCallIndex].nextMessageToSend;\n        }\n        for(let messageIndex = this.writeBufferOffset; messageIndex < earliestNeededMessageIndex; messageIndex++){\n            const bufferEntry = this.getBufferEntry(messageIndex);\n            if (bufferEntry.allocated) {\n                this.bufferTracker.free(bufferEntry.message.message.length, this.callNumber);\n            }\n        }\n        this.writeBuffer = this.writeBuffer.slice(earliestNeededMessageIndex - this.writeBufferOffset);\n        this.writeBufferOffset = earliestNeededMessageIndex;\n    }\n    commitCall(index) {\n        var _a, _b;\n        if (this.state === \"COMMITTED\") {\n            return;\n        }\n        this.trace(\"Committing call [\" + this.underlyingCalls[index].call.getCallNumber() + \"] at index \" + index);\n        this.state = \"COMMITTED\";\n        (_b = (_a = this.callConfig).onCommitted) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.committedCallIndex = index;\n        for(let i = 0; i < this.underlyingCalls.length; i++){\n            if (i === index) {\n                continue;\n            }\n            if (this.underlyingCalls[i].state === \"COMPLETED\") {\n                continue;\n            }\n            this.underlyingCalls[i].state = \"COMPLETED\";\n            this.underlyingCalls[i].call.cancelWithStatus(constants_1.Status.CANCELLED, \"Discarded in favor of other hedged attempt\");\n        }\n        this.clearSentMessages();\n    }\n    commitCallWithMostMessages() {\n        if (this.state === \"COMMITTED\") {\n            return;\n        }\n        let mostMessages = -1;\n        let callWithMostMessages = -1;\n        for (const [index, childCall] of this.underlyingCalls.entries()){\n            if (childCall.state === \"ACTIVE\" && childCall.nextMessageToSend > mostMessages) {\n                mostMessages = childCall.nextMessageToSend;\n                callWithMostMessages = index;\n            }\n        }\n        if (callWithMostMessages === -1) {\n            /* There are no active calls, disable retries to force the next call that\n             * is started to be committed. */ this.state = \"TRANSPARENT_ONLY\";\n        } else {\n            this.commitCall(callWithMostMessages);\n        }\n    }\n    isStatusCodeInList(list, code) {\n        return list.some((value)=>{\n            var _a;\n            return value === code || value.toString().toLowerCase() === ((_a = constants_1.Status[code]) === null || _a === void 0 ? void 0 : _a.toLowerCase());\n        });\n    }\n    getNextRetryBackoffMs() {\n        var _a;\n        const retryPolicy = (_a = this.callConfig) === null || _a === void 0 ? void 0 : _a.methodConfig.retryPolicy;\n        if (!retryPolicy) {\n            return 0;\n        }\n        const nextBackoffMs = Math.random() * this.nextRetryBackoffSec * 1000;\n        const maxBackoffSec = Number(retryPolicy.maxBackoff.substring(0, retryPolicy.maxBackoff.length - 1));\n        this.nextRetryBackoffSec = Math.min(this.nextRetryBackoffSec * retryPolicy.backoffMultiplier, maxBackoffSec);\n        return nextBackoffMs;\n    }\n    maybeRetryCall(pushback, callback) {\n        if (this.state !== \"RETRY\") {\n            callback(false);\n            return;\n        }\n        if (this.attempts >= this.maxAttempts) {\n            callback(false);\n            return;\n        }\n        let retryDelayMs;\n        if (pushback === null) {\n            retryDelayMs = this.getNextRetryBackoffMs();\n        } else if (pushback < 0) {\n            this.state = \"TRANSPARENT_ONLY\";\n            callback(false);\n            return;\n        } else {\n            retryDelayMs = pushback;\n            this.nextRetryBackoffSec = this.initialRetryBackoffSec;\n        }\n        setTimeout(()=>{\n            var _a, _b;\n            if (this.state !== \"RETRY\") {\n                callback(false);\n                return;\n            }\n            if ((_b = (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.canRetryCall()) !== null && _b !== void 0 ? _b : true) {\n                callback(true);\n                this.attempts += 1;\n                this.startNewAttempt();\n            }\n        }, retryDelayMs);\n    }\n    countActiveCalls() {\n        let count = 0;\n        for (const call of this.underlyingCalls){\n            if ((call === null || call === void 0 ? void 0 : call.state) === \"ACTIVE\") {\n                count += 1;\n            }\n        }\n        return count;\n    }\n    handleProcessedStatus(status, callIndex, pushback) {\n        var _a, _b, _c;\n        switch(this.state){\n            case \"COMMITTED\":\n            case \"NO_RETRY\":\n            case \"TRANSPARENT_ONLY\":\n                this.commitCall(callIndex);\n                this.reportStatus(status);\n                break;\n            case \"HEDGING\":\n                if (this.isStatusCodeInList((_a = this.callConfig.methodConfig.hedgingPolicy.nonFatalStatusCodes) !== null && _a !== void 0 ? _a : [], status.code)) {\n                    (_b = this.retryThrottler) === null || _b === void 0 ? void 0 : _b.addCallFailed();\n                    let delayMs;\n                    if (pushback === null) {\n                        delayMs = 0;\n                    } else if (pushback < 0) {\n                        this.state = \"TRANSPARENT_ONLY\";\n                        this.commitCall(callIndex);\n                        this.reportStatus(status);\n                        return;\n                    } else {\n                        delayMs = pushback;\n                    }\n                    setTimeout(()=>{\n                        this.maybeStartHedgingAttempt();\n                        // If after trying to start a call there are no active calls, this was the last one\n                        if (this.countActiveCalls() === 0) {\n                            this.commitCall(callIndex);\n                            this.reportStatus(status);\n                        }\n                    }, delayMs);\n                } else {\n                    this.commitCall(callIndex);\n                    this.reportStatus(status);\n                }\n                break;\n            case \"RETRY\":\n                if (this.isStatusCodeInList(this.callConfig.methodConfig.retryPolicy.retryableStatusCodes, status.code)) {\n                    (_c = this.retryThrottler) === null || _c === void 0 ? void 0 : _c.addCallFailed();\n                    this.maybeRetryCall(pushback, (retried)=>{\n                        if (!retried) {\n                            this.commitCall(callIndex);\n                            this.reportStatus(status);\n                        }\n                    });\n                } else {\n                    this.commitCall(callIndex);\n                    this.reportStatus(status);\n                }\n                break;\n        }\n    }\n    getPushback(metadata) {\n        const mdValue = metadata.get(\"grpc-retry-pushback-ms\");\n        if (mdValue.length === 0) {\n            return null;\n        }\n        try {\n            return parseInt(mdValue[0]);\n        } catch (e) {\n            return -1;\n        }\n    }\n    handleChildStatus(status, callIndex) {\n        var _a;\n        if (this.underlyingCalls[callIndex].state === \"COMPLETED\") {\n            return;\n        }\n        this.trace(\"state=\" + this.state + \" handling status with progress \" + status.progress + \" from child [\" + this.underlyingCalls[callIndex].call.getCallNumber() + \"] in state \" + this.underlyingCalls[callIndex].state);\n        this.underlyingCalls[callIndex].state = \"COMPLETED\";\n        if (status.code === constants_1.Status.OK) {\n            (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.addCallSucceeded();\n            this.commitCall(callIndex);\n            this.reportStatus(status);\n            return;\n        }\n        if (this.state === \"NO_RETRY\") {\n            this.commitCall(callIndex);\n            this.reportStatus(status);\n            return;\n        }\n        if (this.state === \"COMMITTED\") {\n            this.reportStatus(status);\n            return;\n        }\n        const pushback = this.getPushback(status.metadata);\n        switch(status.progress){\n            case \"NOT_STARTED\":\n                // RPC never leaves the client, always safe to retry\n                this.startNewAttempt();\n                break;\n            case \"REFUSED\":\n                // RPC reaches the server library, but not the server application logic\n                if (this.transparentRetryUsed) {\n                    this.handleProcessedStatus(status, callIndex, pushback);\n                } else {\n                    this.transparentRetryUsed = true;\n                    this.startNewAttempt();\n                }\n                break;\n            case \"DROP\":\n                this.commitCall(callIndex);\n                this.reportStatus(status);\n                break;\n            case \"PROCESSED\":\n                this.handleProcessedStatus(status, callIndex, pushback);\n                break;\n        }\n    }\n    maybeStartHedgingAttempt() {\n        if (this.state !== \"HEDGING\") {\n            return;\n        }\n        if (!this.callConfig.methodConfig.hedgingPolicy) {\n            return;\n        }\n        if (this.attempts >= this.maxAttempts) {\n            return;\n        }\n        this.attempts += 1;\n        this.startNewAttempt();\n        this.maybeStartHedgingTimer();\n    }\n    maybeStartHedgingTimer() {\n        var _a, _b, _c;\n        if (this.hedgingTimer) {\n            clearTimeout(this.hedgingTimer);\n        }\n        if (this.state !== \"HEDGING\") {\n            return;\n        }\n        if (!this.callConfig.methodConfig.hedgingPolicy) {\n            return;\n        }\n        const hedgingPolicy = this.callConfig.methodConfig.hedgingPolicy;\n        if (this.attempts >= this.maxAttempts) {\n            return;\n        }\n        const hedgingDelayString = (_a = hedgingPolicy.hedgingDelay) !== null && _a !== void 0 ? _a : \"0s\";\n        const hedgingDelaySec = Number(hedgingDelayString.substring(0, hedgingDelayString.length - 1));\n        this.hedgingTimer = setTimeout(()=>{\n            this.maybeStartHedgingAttempt();\n        }, hedgingDelaySec * 1000);\n        (_c = (_b = this.hedgingTimer).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    startNewAttempt() {\n        const child = this.channel.createLoadBalancingCall(this.callConfig, this.methodName, this.host, this.credentials, this.deadline);\n        this.trace(\"Created child call [\" + child.getCallNumber() + \"] for attempt \" + this.attempts);\n        const index = this.underlyingCalls.length;\n        this.underlyingCalls.push({\n            state: \"ACTIVE\",\n            call: child,\n            nextMessageToSend: 0,\n            startTime: new Date()\n        });\n        const previousAttempts = this.attempts - 1;\n        const initialMetadata = this.initialMetadata.clone();\n        if (previousAttempts > 0) {\n            initialMetadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\n        }\n        let receivedMetadata = false;\n        child.start(initialMetadata, {\n            onReceiveMetadata: (metadata)=>{\n                this.trace(\"Received metadata from child [\" + child.getCallNumber() + \"]\");\n                this.commitCall(index);\n                receivedMetadata = true;\n                if (previousAttempts > 0) {\n                    metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\n                }\n                if (this.underlyingCalls[index].state === \"ACTIVE\") {\n                    this.listener.onReceiveMetadata(metadata);\n                }\n            },\n            onReceiveMessage: (message)=>{\n                this.trace(\"Received message from child [\" + child.getCallNumber() + \"]\");\n                this.commitCall(index);\n                if (this.underlyingCalls[index].state === \"ACTIVE\") {\n                    this.listener.onReceiveMessage(message);\n                }\n            },\n            onReceiveStatus: (status)=>{\n                this.trace(\"Received status from child [\" + child.getCallNumber() + \"]\");\n                if (!receivedMetadata && previousAttempts > 0) {\n                    status.metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\n                }\n                this.handleChildStatus(status, index);\n            }\n        });\n        this.sendNextChildMessage(index);\n        if (this.readStarted) {\n            child.startRead();\n        }\n    }\n    start(metadata, listener) {\n        this.trace(\"start called\");\n        this.listener = listener;\n        this.initialMetadata = metadata;\n        this.attempts += 1;\n        this.startNewAttempt();\n        this.maybeStartHedgingTimer();\n    }\n    handleChildWriteCompleted(childIndex) {\n        var _a, _b;\n        const childCall = this.underlyingCalls[childIndex];\n        const messageIndex = childCall.nextMessageToSend;\n        (_b = (_a = this.getBufferEntry(messageIndex)).callback) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.clearSentMessages();\n        childCall.nextMessageToSend += 1;\n        this.sendNextChildMessage(childIndex);\n    }\n    sendNextChildMessage(childIndex) {\n        const childCall = this.underlyingCalls[childIndex];\n        if (childCall.state === \"COMPLETED\") {\n            return;\n        }\n        if (this.getBufferEntry(childCall.nextMessageToSend)) {\n            const bufferEntry = this.getBufferEntry(childCall.nextMessageToSend);\n            switch(bufferEntry.entryType){\n                case \"MESSAGE\":\n                    childCall.call.sendMessageWithContext({\n                        callback: (error)=>{\n                            // Ignore error\n                            this.handleChildWriteCompleted(childIndex);\n                        }\n                    }, bufferEntry.message.message);\n                    break;\n                case \"HALF_CLOSE\":\n                    childCall.nextMessageToSend += 1;\n                    childCall.call.halfClose();\n                    break;\n                case \"FREED\":\n                    break;\n            }\n        }\n    }\n    sendMessageWithContext(context, message) {\n        var _a;\n        this.trace(\"write() called with message of length \" + message.length);\n        const writeObj = {\n            message,\n            flags: context.flags\n        };\n        const messageIndex = this.getNextBufferIndex();\n        const bufferEntry = {\n            entryType: \"MESSAGE\",\n            message: writeObj,\n            allocated: this.bufferTracker.allocate(message.length, this.callNumber)\n        };\n        this.writeBuffer.push(bufferEntry);\n        if (bufferEntry.allocated) {\n            (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);\n            for (const [callIndex, call] of this.underlyingCalls.entries()){\n                if (call.state === \"ACTIVE\" && call.nextMessageToSend === messageIndex) {\n                    call.call.sendMessageWithContext({\n                        callback: (error)=>{\n                            // Ignore error\n                            this.handleChildWriteCompleted(callIndex);\n                        }\n                    }, message);\n                }\n            }\n        } else {\n            this.commitCallWithMostMessages();\n            // commitCallWithMostMessages can fail if we are between ping attempts\n            if (this.committedCallIndex === null) {\n                return;\n            }\n            const call = this.underlyingCalls[this.committedCallIndex];\n            bufferEntry.callback = context.callback;\n            if (call.state === \"ACTIVE\" && call.nextMessageToSend === messageIndex) {\n                call.call.sendMessageWithContext({\n                    callback: (error)=>{\n                        // Ignore error\n                        this.handleChildWriteCompleted(this.committedCallIndex);\n                    }\n                }, message);\n            }\n        }\n    }\n    startRead() {\n        this.trace(\"startRead called\");\n        this.readStarted = true;\n        for (const underlyingCall of this.underlyingCalls){\n            if ((underlyingCall === null || underlyingCall === void 0 ? void 0 : underlyingCall.state) === \"ACTIVE\") {\n                underlyingCall.call.startRead();\n            }\n        }\n    }\n    halfClose() {\n        this.trace(\"halfClose called\");\n        const halfCloseIndex = this.getNextBufferIndex();\n        this.writeBuffer.push({\n            entryType: \"HALF_CLOSE\",\n            allocated: false\n        });\n        for (const call of this.underlyingCalls){\n            if ((call === null || call === void 0 ? void 0 : call.state) === \"ACTIVE\" && call.nextMessageToSend === halfCloseIndex) {\n                call.nextMessageToSend += 1;\n                call.call.halfClose();\n            }\n        }\n    }\n    setCredentials(newCredentials) {\n        throw new Error(\"Method not implemented.\");\n    }\n    getMethod() {\n        return this.methodName;\n    }\n    getHost() {\n        return this.host;\n    }\n}\nexports.RetryingCall = RetryingCall; //# sourceMappingURL=retrying-call.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/retrying-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/server-call.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server-call.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ServerDuplexStreamImpl = exports.ServerWritableStreamImpl = exports.ServerReadableStreamImpl = exports.ServerUnaryCallImpl = void 0;\nexports.serverErrorToStatus = serverErrorToStatus;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nfunction serverErrorToStatus(error, overrideTrailers) {\n    var _a;\n    const status = {\n        code: constants_1.Status.UNKNOWN,\n        details: \"message\" in error ? error.message : \"Unknown Error\",\n        metadata: (_a = overrideTrailers !== null && overrideTrailers !== void 0 ? overrideTrailers : error.metadata) !== null && _a !== void 0 ? _a : null\n    };\n    if (\"code\" in error && typeof error.code === \"number\" && Number.isInteger(error.code)) {\n        status.code = error.code;\n        if (\"details\" in error && typeof error.details === \"string\") {\n            status.details = error.details;\n        }\n    }\n    return status;\n}\nclass ServerUnaryCallImpl extends events_1.EventEmitter {\n    constructor(path, call, metadata, request){\n        super();\n        this.path = path;\n        this.call = call;\n        this.metadata = metadata;\n        this.request = request;\n        this.cancelled = false;\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.path;\n    }\n    getHost() {\n        return this.call.getHost();\n    }\n}\nexports.ServerUnaryCallImpl = ServerUnaryCallImpl;\nclass ServerReadableStreamImpl extends stream_1.Readable {\n    constructor(path, call, metadata){\n        super({\n            objectMode: true\n        });\n        this.path = path;\n        this.call = call;\n        this.metadata = metadata;\n        this.cancelled = false;\n    }\n    _read(size) {\n        this.call.startRead();\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.path;\n    }\n    getHost() {\n        return this.call.getHost();\n    }\n}\nexports.ServerReadableStreamImpl = ServerReadableStreamImpl;\nclass ServerWritableStreamImpl extends stream_1.Writable {\n    constructor(path, call, metadata, request){\n        super({\n            objectMode: true\n        });\n        this.path = path;\n        this.call = call;\n        this.metadata = metadata;\n        this.request = request;\n        this.pendingStatus = {\n            code: constants_1.Status.OK,\n            details: \"OK\"\n        };\n        this.cancelled = false;\n        this.trailingMetadata = new metadata_1.Metadata();\n        this.on(\"error\", (err)=>{\n            this.pendingStatus = serverErrorToStatus(err);\n            this.end();\n        });\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.path;\n    }\n    getHost() {\n        return this.call.getHost();\n    }\n    _write(chunk, encoding, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback) {\n        this.call.sendMessage(chunk, callback);\n    }\n    _final(callback) {\n        var _a;\n        callback(null);\n        this.call.sendStatus(Object.assign(Object.assign({}, this.pendingStatus), {\n            metadata: (_a = this.pendingStatus.metadata) !== null && _a !== void 0 ? _a : this.trailingMetadata\n        }));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    end(metadata) {\n        if (metadata) {\n            this.trailingMetadata = metadata;\n        }\n        return super.end();\n    }\n}\nexports.ServerWritableStreamImpl = ServerWritableStreamImpl;\nclass ServerDuplexStreamImpl extends stream_1.Duplex {\n    constructor(path, call, metadata){\n        super({\n            objectMode: true\n        });\n        this.path = path;\n        this.call = call;\n        this.metadata = metadata;\n        this.pendingStatus = {\n            code: constants_1.Status.OK,\n            details: \"OK\"\n        };\n        this.cancelled = false;\n        this.trailingMetadata = new metadata_1.Metadata();\n        this.on(\"error\", (err)=>{\n            this.pendingStatus = serverErrorToStatus(err);\n            this.end();\n        });\n    }\n    getPeer() {\n        return this.call.getPeer();\n    }\n    sendMetadata(responseMetadata) {\n        this.call.sendMetadata(responseMetadata);\n    }\n    getDeadline() {\n        return this.call.getDeadline();\n    }\n    getPath() {\n        return this.path;\n    }\n    getHost() {\n        return this.call.getHost();\n    }\n    _read(size) {\n        this.call.startRead();\n    }\n    _write(chunk, encoding, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback) {\n        this.call.sendMessage(chunk, callback);\n    }\n    _final(callback) {\n        var _a;\n        callback(null);\n        this.call.sendStatus(Object.assign(Object.assign({}, this.pendingStatus), {\n            metadata: (_a = this.pendingStatus.metadata) !== null && _a !== void 0 ? _a : this.trailingMetadata\n        }));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    end(metadata) {\n        if (metadata) {\n            this.trailingMetadata = metadata;\n        }\n        return super.end();\n    }\n}\nexports.ServerDuplexStreamImpl = ServerDuplexStreamImpl; //# sourceMappingURL=server-call.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/server-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server-credentials.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ServerCredentials = void 0;\nexports.createCertificateProviderServerCredentials = createCertificateProviderServerCredentials;\nexports.createServerCredentialsWithInterceptors = createServerCredentialsWithInterceptors;\nconst tls_helpers_1 = __webpack_require__(/*! ./tls-helpers */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\");\nclass ServerCredentials {\n    constructor(serverConstructorOptions, contextOptions){\n        this.serverConstructorOptions = serverConstructorOptions;\n        this.watchers = new Set();\n        this.latestContextOptions = null;\n        this.latestContextOptions = contextOptions !== null && contextOptions !== void 0 ? contextOptions : null;\n    }\n    _addWatcher(watcher) {\n        this.watchers.add(watcher);\n    }\n    _removeWatcher(watcher) {\n        this.watchers.delete(watcher);\n    }\n    getWatcherCount() {\n        return this.watchers.size;\n    }\n    updateSecureContextOptions(options) {\n        this.latestContextOptions = options;\n        for (const watcher of this.watchers){\n            watcher(this.latestContextOptions);\n        }\n    }\n    _isSecure() {\n        return this.serverConstructorOptions !== null;\n    }\n    _getSecureContextOptions() {\n        return this.latestContextOptions;\n    }\n    _getConstructorOptions() {\n        return this.serverConstructorOptions;\n    }\n    _getInterceptors() {\n        return [];\n    }\n    static createInsecure() {\n        return new InsecureServerCredentials();\n    }\n    static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {\n        var _a;\n        if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {\n            throw new TypeError(\"rootCerts must be null or a Buffer\");\n        }\n        if (!Array.isArray(keyCertPairs)) {\n            throw new TypeError(\"keyCertPairs must be an array\");\n        }\n        if (typeof checkClientCertificate !== \"boolean\") {\n            throw new TypeError(\"checkClientCertificate must be a boolean\");\n        }\n        const cert = [];\n        const key = [];\n        for(let i = 0; i < keyCertPairs.length; i++){\n            const pair = keyCertPairs[i];\n            if (pair === null || typeof pair !== \"object\") {\n                throw new TypeError(`keyCertPair[${i}] must be an object`);\n            }\n            if (!Buffer.isBuffer(pair.private_key)) {\n                throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);\n            }\n            if (!Buffer.isBuffer(pair.cert_chain)) {\n                throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);\n            }\n            cert.push(pair.cert_chain);\n            key.push(pair.private_key);\n        }\n        return new SecureServerCredentials({\n            requestCert: checkClientCertificate,\n            ciphers: tls_helpers_1.CIPHER_SUITES\n        }, {\n            ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,\n            cert,\n            key\n        });\n    }\n}\nexports.ServerCredentials = ServerCredentials;\nclass InsecureServerCredentials extends ServerCredentials {\n    constructor(){\n        super(null);\n    }\n    _getSettings() {\n        return null;\n    }\n    _equals(other) {\n        return other instanceof InsecureServerCredentials;\n    }\n}\nclass SecureServerCredentials extends ServerCredentials {\n    constructor(constructorOptions, contextOptions){\n        super(constructorOptions, contextOptions);\n        this.options = Object.assign(Object.assign({}, constructorOptions), contextOptions);\n    }\n    /**\n     * Checks equality by checking the options that are actually set by\n     * createSsl.\n     * @param other\n     * @returns\n     */ _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof SecureServerCredentials)) {\n            return false;\n        }\n        // options.ca equality check\n        if (Buffer.isBuffer(this.options.ca) && Buffer.isBuffer(other.options.ca)) {\n            if (!this.options.ca.equals(other.options.ca)) {\n                return false;\n            }\n        } else {\n            if (this.options.ca !== other.options.ca) {\n                return false;\n            }\n        }\n        // options.cert equality check\n        if (Array.isArray(this.options.cert) && Array.isArray(other.options.cert)) {\n            if (this.options.cert.length !== other.options.cert.length) {\n                return false;\n            }\n            for(let i = 0; i < this.options.cert.length; i++){\n                const thisCert = this.options.cert[i];\n                const otherCert = other.options.cert[i];\n                if (Buffer.isBuffer(thisCert) && Buffer.isBuffer(otherCert)) {\n                    if (!thisCert.equals(otherCert)) {\n                        return false;\n                    }\n                } else {\n                    if (thisCert !== otherCert) {\n                        return false;\n                    }\n                }\n            }\n        } else {\n            if (this.options.cert !== other.options.cert) {\n                return false;\n            }\n        }\n        // options.key equality check\n        if (Array.isArray(this.options.key) && Array.isArray(other.options.key)) {\n            if (this.options.key.length !== other.options.key.length) {\n                return false;\n            }\n            for(let i = 0; i < this.options.key.length; i++){\n                const thisKey = this.options.key[i];\n                const otherKey = other.options.key[i];\n                if (Buffer.isBuffer(thisKey) && Buffer.isBuffer(otherKey)) {\n                    if (!thisKey.equals(otherKey)) {\n                        return false;\n                    }\n                } else {\n                    if (thisKey !== otherKey) {\n                        return false;\n                    }\n                }\n            }\n        } else {\n            if (this.options.key !== other.options.key) {\n                return false;\n            }\n        }\n        // options.requestCert equality check\n        if (this.options.requestCert !== other.options.requestCert) {\n            return false;\n        }\n        /* ciphers is derived from a value that is constant for the process, so no\n         * equality check is needed. */ return true;\n    }\n}\nclass CertificateProviderServerCredentials extends ServerCredentials {\n    constructor(identityCertificateProvider, caCertificateProvider, requireClientCertificate){\n        super({\n            requestCert: caCertificateProvider !== null,\n            rejectUnauthorized: requireClientCertificate,\n            ciphers: tls_helpers_1.CIPHER_SUITES\n        });\n        this.identityCertificateProvider = identityCertificateProvider;\n        this.caCertificateProvider = caCertificateProvider;\n        this.requireClientCertificate = requireClientCertificate;\n        this.latestCaUpdate = null;\n        this.latestIdentityUpdate = null;\n        this.caCertificateUpdateListener = this.handleCaCertificateUpdate.bind(this);\n        this.identityCertificateUpdateListener = this.handleIdentityCertitificateUpdate.bind(this);\n    }\n    _addWatcher(watcher) {\n        var _a;\n        if (this.getWatcherCount() === 0) {\n            (_a = this.caCertificateProvider) === null || _a === void 0 ? void 0 : _a.addCaCertificateListener(this.caCertificateUpdateListener);\n            this.identityCertificateProvider.addIdentityCertificateListener(this.identityCertificateUpdateListener);\n        }\n        super._addWatcher(watcher);\n    }\n    _removeWatcher(watcher) {\n        var _a;\n        super._removeWatcher(watcher);\n        if (this.getWatcherCount() === 0) {\n            (_a = this.caCertificateProvider) === null || _a === void 0 ? void 0 : _a.removeCaCertificateListener(this.caCertificateUpdateListener);\n            this.identityCertificateProvider.removeIdentityCertificateListener(this.identityCertificateUpdateListener);\n        }\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof CertificateProviderServerCredentials)) {\n            return false;\n        }\n        return this.caCertificateProvider === other.caCertificateProvider && this.identityCertificateProvider === other.identityCertificateProvider && this.requireClientCertificate === other.requireClientCertificate;\n    }\n    calculateSecureContextOptions() {\n        var _a;\n        if (this.latestIdentityUpdate === null) {\n            return null;\n        }\n        if (this.caCertificateProvider !== null && this.latestCaUpdate === null) {\n            return null;\n        }\n        return {\n            ca: (_a = this.latestCaUpdate) === null || _a === void 0 ? void 0 : _a.caCertificate,\n            cert: [\n                this.latestIdentityUpdate.certificate\n            ],\n            key: [\n                this.latestIdentityUpdate.privateKey\n            ]\n        };\n    }\n    finalizeUpdate() {\n        const secureContextOptions = this.calculateSecureContextOptions();\n        this.updateSecureContextOptions(secureContextOptions);\n    }\n    handleCaCertificateUpdate(update) {\n        this.latestCaUpdate = update;\n        this.finalizeUpdate();\n    }\n    handleIdentityCertitificateUpdate(update) {\n        this.latestIdentityUpdate = update;\n        this.finalizeUpdate();\n    }\n}\nfunction createCertificateProviderServerCredentials(caCertificateProvider, identityCertificateProvider, requireClientCertificate) {\n    return new CertificateProviderServerCredentials(caCertificateProvider, identityCertificateProvider, requireClientCertificate);\n}\nclass InterceptorServerCredentials extends ServerCredentials {\n    constructor(childCredentials, interceptors){\n        super({});\n        this.childCredentials = childCredentials;\n        this.interceptors = interceptors;\n    }\n    _isSecure() {\n        return this.childCredentials._isSecure();\n    }\n    _equals(other) {\n        if (!(other instanceof InterceptorServerCredentials)) {\n            return false;\n        }\n        if (!this.childCredentials._equals(other.childCredentials)) {\n            return false;\n        }\n        if (this.interceptors.length !== other.interceptors.length) {\n            return false;\n        }\n        for(let i = 0; i < this.interceptors.length; i++){\n            if (this.interceptors[i] !== other.interceptors[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _getInterceptors() {\n        return this.interceptors;\n    }\n    _addWatcher(watcher) {\n        this.childCredentials._addWatcher(watcher);\n    }\n    _removeWatcher(watcher) {\n        this.childCredentials._removeWatcher(watcher);\n    }\n    _getConstructorOptions() {\n        return this.childCredentials._getConstructorOptions();\n    }\n    _getSecureContextOptions() {\n        return this.childCredentials._getSecureContextOptions();\n    }\n}\nfunction createServerCredentialsWithInterceptors(credentials, interceptors) {\n    return new InterceptorServerCredentials(credentials, interceptors);\n} //# sourceMappingURL=server-credentials.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/server-interceptors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server-interceptors.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2024 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseServerInterceptingCall = exports.ServerInterceptingCall = exports.ResponderBuilder = exports.ServerListenerBuilder = void 0;\nexports.isInterceptingServerListener = isInterceptingServerListener;\nexports.getServerInterceptingCall = getServerInterceptingCall;\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/error.js\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst stream_decoder_1 = __webpack_require__(/*! ./stream-decoder */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst TRACER_NAME = \"server_call\";\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nclass ServerListenerBuilder {\n    constructor(){\n        this.metadata = undefined;\n        this.message = undefined;\n        this.halfClose = undefined;\n        this.cancel = undefined;\n    }\n    withOnReceiveMetadata(onReceiveMetadata) {\n        this.metadata = onReceiveMetadata;\n        return this;\n    }\n    withOnReceiveMessage(onReceiveMessage) {\n        this.message = onReceiveMessage;\n        return this;\n    }\n    withOnReceiveHalfClose(onReceiveHalfClose) {\n        this.halfClose = onReceiveHalfClose;\n        return this;\n    }\n    withOnCancel(onCancel) {\n        this.cancel = onCancel;\n        return this;\n    }\n    build() {\n        return {\n            onReceiveMetadata: this.metadata,\n            onReceiveMessage: this.message,\n            onReceiveHalfClose: this.halfClose,\n            onCancel: this.cancel\n        };\n    }\n}\nexports.ServerListenerBuilder = ServerListenerBuilder;\nfunction isInterceptingServerListener(listener) {\n    return listener.onReceiveMetadata !== undefined && listener.onReceiveMetadata.length === 1;\n}\nclass InterceptingServerListenerImpl {\n    constructor(listener, nextListener){\n        this.listener = listener;\n        this.nextListener = nextListener;\n        /**\n         * Once the call is cancelled, ignore all other events.\n         */ this.cancelled = false;\n        this.processingMetadata = false;\n        this.hasPendingMessage = false;\n        this.pendingMessage = null;\n        this.processingMessage = false;\n        this.hasPendingHalfClose = false;\n    }\n    processPendingMessage() {\n        if (this.hasPendingMessage) {\n            this.nextListener.onReceiveMessage(this.pendingMessage);\n            this.pendingMessage = null;\n            this.hasPendingMessage = false;\n        }\n    }\n    processPendingHalfClose() {\n        if (this.hasPendingHalfClose) {\n            this.nextListener.onReceiveHalfClose();\n            this.hasPendingHalfClose = false;\n        }\n    }\n    onReceiveMetadata(metadata) {\n        if (this.cancelled) {\n            return;\n        }\n        this.processingMetadata = true;\n        this.listener.onReceiveMetadata(metadata, (interceptedMetadata)=>{\n            this.processingMetadata = false;\n            if (this.cancelled) {\n                return;\n            }\n            this.nextListener.onReceiveMetadata(interceptedMetadata);\n            this.processPendingMessage();\n            this.processPendingHalfClose();\n        });\n    }\n    onReceiveMessage(message) {\n        if (this.cancelled) {\n            return;\n        }\n        this.processingMessage = true;\n        this.listener.onReceiveMessage(message, (msg)=>{\n            this.processingMessage = false;\n            if (this.cancelled) {\n                return;\n            }\n            if (this.processingMetadata) {\n                this.pendingMessage = msg;\n                this.hasPendingMessage = true;\n            } else {\n                this.nextListener.onReceiveMessage(msg);\n                this.processPendingHalfClose();\n            }\n        });\n    }\n    onReceiveHalfClose() {\n        if (this.cancelled) {\n            return;\n        }\n        this.listener.onReceiveHalfClose(()=>{\n            if (this.cancelled) {\n                return;\n            }\n            if (this.processingMetadata || this.processingMessage) {\n                this.hasPendingHalfClose = true;\n            } else {\n                this.nextListener.onReceiveHalfClose();\n            }\n        });\n    }\n    onCancel() {\n        this.cancelled = true;\n        this.listener.onCancel();\n        this.nextListener.onCancel();\n    }\n}\nclass ResponderBuilder {\n    constructor(){\n        this.start = undefined;\n        this.metadata = undefined;\n        this.message = undefined;\n        this.status = undefined;\n    }\n    withStart(start) {\n        this.start = start;\n        return this;\n    }\n    withSendMetadata(sendMetadata) {\n        this.metadata = sendMetadata;\n        return this;\n    }\n    withSendMessage(sendMessage) {\n        this.message = sendMessage;\n        return this;\n    }\n    withSendStatus(sendStatus) {\n        this.status = sendStatus;\n        return this;\n    }\n    build() {\n        return {\n            start: this.start,\n            sendMetadata: this.metadata,\n            sendMessage: this.message,\n            sendStatus: this.status\n        };\n    }\n}\nexports.ResponderBuilder = ResponderBuilder;\nconst defaultServerListener = {\n    onReceiveMetadata: (metadata, next)=>{\n        next(metadata);\n    },\n    onReceiveMessage: (message, next)=>{\n        next(message);\n    },\n    onReceiveHalfClose: (next)=>{\n        next();\n    },\n    onCancel: ()=>{}\n};\nconst defaultResponder = {\n    start: (next)=>{\n        next();\n    },\n    sendMetadata: (metadata, next)=>{\n        next(metadata);\n    },\n    sendMessage: (message, next)=>{\n        next(message);\n    },\n    sendStatus: (status, next)=>{\n        next(status);\n    }\n};\nclass ServerInterceptingCall {\n    constructor(nextCall, responder){\n        var _a, _b, _c, _d;\n        this.nextCall = nextCall;\n        this.processingMetadata = false;\n        this.sentMetadata = false;\n        this.processingMessage = false;\n        this.pendingMessage = null;\n        this.pendingMessageCallback = null;\n        this.pendingStatus = null;\n        this.responder = {\n            start: (_a = responder === null || responder === void 0 ? void 0 : responder.start) !== null && _a !== void 0 ? _a : defaultResponder.start,\n            sendMetadata: (_b = responder === null || responder === void 0 ? void 0 : responder.sendMetadata) !== null && _b !== void 0 ? _b : defaultResponder.sendMetadata,\n            sendMessage: (_c = responder === null || responder === void 0 ? void 0 : responder.sendMessage) !== null && _c !== void 0 ? _c : defaultResponder.sendMessage,\n            sendStatus: (_d = responder === null || responder === void 0 ? void 0 : responder.sendStatus) !== null && _d !== void 0 ? _d : defaultResponder.sendStatus\n        };\n    }\n    processPendingMessage() {\n        if (this.pendingMessageCallback) {\n            this.nextCall.sendMessage(this.pendingMessage, this.pendingMessageCallback);\n            this.pendingMessage = null;\n            this.pendingMessageCallback = null;\n        }\n    }\n    processPendingStatus() {\n        if (this.pendingStatus) {\n            this.nextCall.sendStatus(this.pendingStatus);\n            this.pendingStatus = null;\n        }\n    }\n    start(listener) {\n        this.responder.start((interceptedListener)=>{\n            var _a, _b, _c, _d;\n            const fullInterceptedListener = {\n                onReceiveMetadata: (_a = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveMetadata) !== null && _a !== void 0 ? _a : defaultServerListener.onReceiveMetadata,\n                onReceiveMessage: (_b = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveMessage) !== null && _b !== void 0 ? _b : defaultServerListener.onReceiveMessage,\n                onReceiveHalfClose: (_c = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveHalfClose) !== null && _c !== void 0 ? _c : defaultServerListener.onReceiveHalfClose,\n                onCancel: (_d = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onCancel) !== null && _d !== void 0 ? _d : defaultServerListener.onCancel\n            };\n            const finalInterceptingListener = new InterceptingServerListenerImpl(fullInterceptedListener, listener);\n            this.nextCall.start(finalInterceptingListener);\n        });\n    }\n    sendMetadata(metadata) {\n        this.processingMetadata = true;\n        this.sentMetadata = true;\n        this.responder.sendMetadata(metadata, (interceptedMetadata)=>{\n            this.processingMetadata = false;\n            this.nextCall.sendMetadata(interceptedMetadata);\n            this.processPendingMessage();\n            this.processPendingStatus();\n        });\n    }\n    sendMessage(message, callback) {\n        this.processingMessage = true;\n        if (!this.sentMetadata) {\n            this.sendMetadata(new metadata_1.Metadata());\n        }\n        this.responder.sendMessage(message, (interceptedMessage)=>{\n            this.processingMessage = false;\n            if (this.processingMetadata) {\n                this.pendingMessage = interceptedMessage;\n                this.pendingMessageCallback = callback;\n            } else {\n                this.nextCall.sendMessage(interceptedMessage, callback);\n            }\n        });\n    }\n    sendStatus(status) {\n        this.responder.sendStatus(status, (interceptedStatus)=>{\n            if (this.processingMetadata || this.processingMessage) {\n                this.pendingStatus = interceptedStatus;\n            } else {\n                this.nextCall.sendStatus(interceptedStatus);\n            }\n        });\n    }\n    startRead() {\n        this.nextCall.startRead();\n    }\n    getPeer() {\n        return this.nextCall.getPeer();\n    }\n    getDeadline() {\n        return this.nextCall.getDeadline();\n    }\n    getHost() {\n        return this.nextCall.getHost();\n    }\n}\nexports.ServerInterceptingCall = ServerInterceptingCall;\nconst GRPC_ACCEPT_ENCODING_HEADER = \"grpc-accept-encoding\";\nconst GRPC_ENCODING_HEADER = \"grpc-encoding\";\nconst GRPC_MESSAGE_HEADER = \"grpc-message\";\nconst GRPC_STATUS_HEADER = \"grpc-status\";\nconst GRPC_TIMEOUT_HEADER = \"grpc-timeout\";\nconst DEADLINE_REGEX = /(\\d{1,8})\\s*([HMSmun])/;\nconst deadlineUnitsToMs = {\n    H: 3600000,\n    M: 60000,\n    S: 1000,\n    m: 1,\n    u: 0.001,\n    n: 0.000001\n};\nconst defaultCompressionHeaders = {\n    // TODO(cjihrig): Remove these encoding headers from the default response\n    // once compression is integrated.\n    [GRPC_ACCEPT_ENCODING_HEADER]: \"identity,deflate,gzip\",\n    [GRPC_ENCODING_HEADER]: \"identity\"\n};\nconst defaultResponseHeaders = {\n    [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,\n    [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: \"application/grpc+proto\"\n};\nconst defaultResponseOptions = {\n    waitForTrailers: true\n};\nclass BaseServerInterceptingCall {\n    constructor(stream, headers, callEventTracker, handler, options){\n        var _a;\n        this.stream = stream;\n        this.callEventTracker = callEventTracker;\n        this.handler = handler;\n        this.listener = null;\n        this.deadlineTimer = null;\n        this.deadline = Infinity;\n        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n        this.cancelled = false;\n        this.metadataSent = false;\n        this.wantTrailers = false;\n        this.cancelNotified = false;\n        this.incomingEncoding = \"identity\";\n        this.readQueue = [];\n        this.isReadPending = false;\n        this.receivedHalfClose = false;\n        this.streamEnded = false;\n        this.stream.once(\"error\", (err)=>{\n        /* We need an error handler to avoid uncaught error event exceptions, but\n             * there is nothing we can reasonably do here. Any error event should\n             * have a corresponding close event, which handles emitting the cancelled\n             * event. And the stream is now in a bad state, so we can't reasonably\n             * expect to be able to send an error over it. */ });\n        this.stream.once(\"close\", ()=>{\n            var _a;\n            trace(\"Request to method \" + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + \" stream closed with rstCode \" + this.stream.rstCode);\n            if (this.callEventTracker && !this.streamEnded) {\n                this.streamEnded = true;\n                this.callEventTracker.onStreamEnd(false);\n                this.callEventTracker.onCallEnd({\n                    code: constants_1.Status.CANCELLED,\n                    details: \"Stream closed before sending status\",\n                    metadata: null\n                });\n            }\n            this.notifyOnCancel();\n        });\n        this.stream.on(\"data\", (data)=>{\n            this.handleDataFrame(data);\n        });\n        this.stream.pause();\n        this.stream.on(\"end\", ()=>{\n            this.handleEndEvent();\n        });\n        if (\"grpc.max_send_message_length\" in options) {\n            this.maxSendMessageSize = options[\"grpc.max_send_message_length\"];\n        }\n        if (\"grpc.max_receive_message_length\" in options) {\n            this.maxReceiveMessageSize = options[\"grpc.max_receive_message_length\"];\n        }\n        this.host = (_a = headers[\":authority\"]) !== null && _a !== void 0 ? _a : headers.host;\n        this.decoder = new stream_decoder_1.StreamDecoder(this.maxReceiveMessageSize);\n        const metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n        if (logging.isTracerEnabled(TRACER_NAME)) {\n            trace(\"Request to \" + this.handler.path + \" received headers \" + JSON.stringify(metadata.toJSON()));\n        }\n        const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);\n        if (timeoutHeader.length > 0) {\n            this.handleTimeoutHeader(timeoutHeader[0]);\n        }\n        const encodingHeader = metadata.get(GRPC_ENCODING_HEADER);\n        if (encodingHeader.length > 0) {\n            this.incomingEncoding = encodingHeader[0];\n        }\n        // Remove several headers that should not be propagated to the application\n        metadata.remove(GRPC_TIMEOUT_HEADER);\n        metadata.remove(GRPC_ENCODING_HEADER);\n        metadata.remove(GRPC_ACCEPT_ENCODING_HEADER);\n        metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);\n        metadata.remove(http2.constants.HTTP2_HEADER_TE);\n        metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);\n        this.metadata = metadata;\n    }\n    handleTimeoutHeader(timeoutHeader) {\n        const match = timeoutHeader.toString().match(DEADLINE_REGEX);\n        if (match === null) {\n            const status = {\n                code: constants_1.Status.INTERNAL,\n                details: `Invalid ${GRPC_TIMEOUT_HEADER} value \"${timeoutHeader}\"`,\n                metadata: null\n            };\n            // Wait for the constructor to complete before sending the error.\n            process.nextTick(()=>{\n                this.sendStatus(status);\n            });\n            return;\n        }\n        const timeout = +match[1] * deadlineUnitsToMs[match[2]] | 0;\n        const now = new Date();\n        this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);\n        this.deadlineTimer = setTimeout(()=>{\n            const status = {\n                code: constants_1.Status.DEADLINE_EXCEEDED,\n                details: \"Deadline exceeded\",\n                metadata: null\n            };\n            this.sendStatus(status);\n        }, timeout);\n    }\n    checkCancelled() {\n        /* In some cases the stream can become destroyed before the close event\n         * fires. That creates a race condition that this check works around */ if (!this.cancelled && (this.stream.destroyed || this.stream.closed)) {\n            this.notifyOnCancel();\n            this.cancelled = true;\n        }\n        return this.cancelled;\n    }\n    notifyOnCancel() {\n        if (this.cancelNotified) {\n            return;\n        }\n        this.cancelNotified = true;\n        this.cancelled = true;\n        process.nextTick(()=>{\n            var _a;\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onCancel();\n        });\n        if (this.deadlineTimer) {\n            clearTimeout(this.deadlineTimer);\n        }\n        // Flush incoming data frames\n        this.stream.resume();\n    }\n    /**\n     * A server handler can start sending messages without explicitly sending\n     * metadata. In that case, we need to send headers before sending any\n     * messages. This function does that if necessary.\n     */ maybeSendMetadata() {\n        if (!this.metadataSent) {\n            this.sendMetadata(new metadata_1.Metadata());\n        }\n    }\n    /**\n     * Serialize a message to a length-delimited byte string.\n     * @param value\n     * @returns\n     */ serializeMessage(value) {\n        const messageBuffer = this.handler.serialize(value);\n        const byteLength = messageBuffer.byteLength;\n        const output = Buffer.allocUnsafe(byteLength + 5);\n        /* Note: response compression is currently not supported, so this\n         * compressed bit is always 0. */ output.writeUInt8(0, 0);\n        output.writeUInt32BE(byteLength, 1);\n        messageBuffer.copy(output, 5);\n        return output;\n    }\n    decompressMessage(message, encoding) {\n        const messageContents = message.subarray(5);\n        if (encoding === \"identity\") {\n            return messageContents;\n        } else if (encoding === \"deflate\" || encoding === \"gzip\") {\n            let decompresser;\n            if (encoding === \"deflate\") {\n                decompresser = zlib.createInflate();\n            } else {\n                decompresser = zlib.createGunzip();\n            }\n            return new Promise((resolve, reject)=>{\n                let totalLength = 0;\n                const messageParts = [];\n                decompresser.on(\"data\", (chunk)=>{\n                    messageParts.push(chunk);\n                    totalLength += chunk.byteLength;\n                    if (this.maxReceiveMessageSize !== -1 && totalLength > this.maxReceiveMessageSize) {\n                        decompresser.destroy();\n                        reject({\n                            code: constants_1.Status.RESOURCE_EXHAUSTED,\n                            details: `Received message that decompresses to a size larger than ${this.maxReceiveMessageSize}`\n                        });\n                    }\n                });\n                decompresser.on(\"end\", ()=>{\n                    resolve(Buffer.concat(messageParts));\n                });\n                decompresser.write(messageContents);\n                decompresser.end();\n            });\n        } else {\n            return Promise.reject({\n                code: constants_1.Status.UNIMPLEMENTED,\n                details: `Received message compressed with unsupported encoding \"${encoding}\"`\n            });\n        }\n    }\n    async decompressAndMaybePush(queueEntry) {\n        if (queueEntry.type !== \"COMPRESSED\") {\n            throw new Error(`Invalid queue entry type: ${queueEntry.type}`);\n        }\n        const compressed = queueEntry.compressedMessage.readUInt8(0) === 1;\n        const compressedMessageEncoding = compressed ? this.incomingEncoding : \"identity\";\n        let decompressedMessage;\n        try {\n            decompressedMessage = await this.decompressMessage(queueEntry.compressedMessage, compressedMessageEncoding);\n        } catch (err) {\n            this.sendStatus(err);\n            return;\n        }\n        try {\n            queueEntry.parsedMessage = this.handler.deserialize(decompressedMessage);\n        } catch (err) {\n            this.sendStatus({\n                code: constants_1.Status.INTERNAL,\n                details: `Error deserializing request: ${err.message}`\n            });\n            return;\n        }\n        queueEntry.type = \"READABLE\";\n        this.maybePushNextMessage();\n    }\n    maybePushNextMessage() {\n        if (this.listener && this.isReadPending && this.readQueue.length > 0 && this.readQueue[0].type !== \"COMPRESSED\") {\n            this.isReadPending = false;\n            const nextQueueEntry = this.readQueue.shift();\n            if (nextQueueEntry.type === \"READABLE\") {\n                this.listener.onReceiveMessage(nextQueueEntry.parsedMessage);\n            } else {\n                // nextQueueEntry.type === 'HALF_CLOSE'\n                this.listener.onReceiveHalfClose();\n            }\n        }\n    }\n    handleDataFrame(data) {\n        var _a;\n        if (this.checkCancelled()) {\n            return;\n        }\n        trace(\"Request to \" + this.handler.path + \" received data frame of size \" + data.length);\n        let rawMessages;\n        try {\n            rawMessages = this.decoder.write(data);\n        } catch (e) {\n            this.sendStatus({\n                code: constants_1.Status.RESOURCE_EXHAUSTED,\n                details: e.message\n            });\n            return;\n        }\n        for (const messageBytes of rawMessages){\n            this.stream.pause();\n            const queueEntry = {\n                type: \"COMPRESSED\",\n                compressedMessage: messageBytes,\n                parsedMessage: null\n            };\n            this.readQueue.push(queueEntry);\n            this.decompressAndMaybePush(queueEntry);\n            (_a = this.callEventTracker) === null || _a === void 0 ? void 0 : _a.addMessageReceived();\n        }\n    }\n    handleEndEvent() {\n        this.readQueue.push({\n            type: \"HALF_CLOSE\",\n            compressedMessage: null,\n            parsedMessage: null\n        });\n        this.receivedHalfClose = true;\n        this.maybePushNextMessage();\n    }\n    start(listener) {\n        trace(\"Request to \" + this.handler.path + \" start called\");\n        if (this.checkCancelled()) {\n            return;\n        }\n        this.listener = listener;\n        listener.onReceiveMetadata(this.metadata);\n    }\n    sendMetadata(metadata) {\n        if (this.checkCancelled()) {\n            return;\n        }\n        if (this.metadataSent) {\n            return;\n        }\n        this.metadataSent = true;\n        const custom = metadata ? metadata.toHttp2Headers() : null;\n        const headers = Object.assign(Object.assign(Object.assign({}, defaultResponseHeaders), defaultCompressionHeaders), custom);\n        this.stream.respond(headers, defaultResponseOptions);\n    }\n    sendMessage(message, callback) {\n        if (this.checkCancelled()) {\n            return;\n        }\n        let response;\n        try {\n            response = this.serializeMessage(message);\n        } catch (e) {\n            this.sendStatus({\n                code: constants_1.Status.INTERNAL,\n                details: `Error serializing response: ${(0, error_1.getErrorMessage)(e)}`,\n                metadata: null\n            });\n            return;\n        }\n        if (this.maxSendMessageSize !== -1 && response.length - 5 > this.maxSendMessageSize) {\n            this.sendStatus({\n                code: constants_1.Status.RESOURCE_EXHAUSTED,\n                details: `Sent message larger than max (${response.length} vs. ${this.maxSendMessageSize})`,\n                metadata: null\n            });\n            return;\n        }\n        this.maybeSendMetadata();\n        trace(\"Request to \" + this.handler.path + \" sent data frame of size \" + response.length);\n        this.stream.write(response, (error)=>{\n            var _a;\n            if (error) {\n                this.sendStatus({\n                    code: constants_1.Status.INTERNAL,\n                    details: `Error writing message: ${(0, error_1.getErrorMessage)(error)}`,\n                    metadata: null\n                });\n                return;\n            }\n            (_a = this.callEventTracker) === null || _a === void 0 ? void 0 : _a.addMessageSent();\n            callback();\n        });\n    }\n    sendStatus(status) {\n        var _a, _b;\n        if (this.checkCancelled()) {\n            return;\n        }\n        trace(\"Request to method \" + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + \" ended with status code: \" + constants_1.Status[status.code] + \" details: \" + status.details);\n        if (this.metadataSent) {\n            if (!this.wantTrailers) {\n                this.wantTrailers = true;\n                this.stream.once(\"wantTrailers\", ()=>{\n                    var _a;\n                    if (this.callEventTracker && !this.streamEnded) {\n                        this.streamEnded = true;\n                        this.callEventTracker.onStreamEnd(true);\n                        this.callEventTracker.onCallEnd(status);\n                    }\n                    const trailersToSend = Object.assign({\n                        [GRPC_STATUS_HEADER]: status.code,\n                        [GRPC_MESSAGE_HEADER]: encodeURI(status.details)\n                    }, (_a = status.metadata) === null || _a === void 0 ? void 0 : _a.toHttp2Headers());\n                    this.stream.sendTrailers(trailersToSend);\n                    this.notifyOnCancel();\n                });\n                this.stream.end();\n            } else {\n                this.notifyOnCancel();\n            }\n        } else {\n            if (this.callEventTracker && !this.streamEnded) {\n                this.streamEnded = true;\n                this.callEventTracker.onStreamEnd(true);\n                this.callEventTracker.onCallEnd(status);\n            }\n            // Trailers-only response\n            const trailersToSend = Object.assign(Object.assign({\n                [GRPC_STATUS_HEADER]: status.code,\n                [GRPC_MESSAGE_HEADER]: encodeURI(status.details)\n            }, defaultResponseHeaders), (_b = status.metadata) === null || _b === void 0 ? void 0 : _b.toHttp2Headers());\n            this.stream.respond(trailersToSend, {\n                endStream: true\n            });\n            this.notifyOnCancel();\n        }\n    }\n    startRead() {\n        trace(\"Request to \" + this.handler.path + \" startRead called\");\n        if (this.checkCancelled()) {\n            return;\n        }\n        this.isReadPending = true;\n        if (this.readQueue.length === 0) {\n            if (!this.receivedHalfClose) {\n                this.stream.resume();\n            }\n        } else {\n            this.maybePushNextMessage();\n        }\n    }\n    getPeer() {\n        var _a;\n        const socket = (_a = this.stream.session) === null || _a === void 0 ? void 0 : _a.socket;\n        if (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) {\n            if (socket.remotePort) {\n                return `${socket.remoteAddress}:${socket.remotePort}`;\n            } else {\n                return socket.remoteAddress;\n            }\n        } else {\n            return \"unknown\";\n        }\n    }\n    getDeadline() {\n        return this.deadline;\n    }\n    getHost() {\n        return this.host;\n    }\n}\nexports.BaseServerInterceptingCall = BaseServerInterceptingCall;\nfunction getServerInterceptingCall(interceptors, stream, headers, callEventTracker, handler, options) {\n    const methodDefinition = {\n        path: handler.path,\n        requestStream: handler.type === \"clientStream\" || handler.type === \"bidi\",\n        responseStream: handler.type === \"serverStream\" || handler.type === \"bidi\",\n        requestDeserialize: handler.deserialize,\n        responseSerialize: handler.serialize\n    };\n    const baseCall = new BaseServerInterceptingCall(stream, headers, callEventTracker, handler, options);\n    return interceptors.reduce((call, interceptor)=>{\n        return interceptor(methodDefinition, call);\n    }, baseCall);\n} //# sourceMappingURL=server-interceptors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/server-interceptors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/server.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ var __runInitializers = (void 0) && (void 0).__runInitializers || function(thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for(var i = 0; i < initializers.length; i++){\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n};\nvar __esDecorate = (void 0) && (void 0).__esDecorate || function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) {\n        if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n        return f;\n    }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for(var i = decorators.length - 1; i >= 0; i--){\n        var context = {};\n        for(var p in contextIn)context[p] = p === \"access\" ? {} : contextIn[p];\n        for(var p in contextIn.access)context.access[p] = contextIn.access[p];\n        context.addInitializer = function(f) {\n            if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n            extraInitializers.push(accept(f || null));\n        };\n        var result = (0, decorators[i])(kind === \"accessor\" ? {\n            get: descriptor.get,\n            set: descriptor.set\n        } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        } else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Server = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst server_call_1 = __webpack_require__(/*! ./server-call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-call.js\");\nconst server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst server_interceptors_1 = __webpack_require__(/*! ./server-interceptors */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-interceptors.js\");\nconst UNLIMITED_CONNECTION_AGE_MS = ~(1 << 31);\nconst KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\nconst KEEPALIVE_TIMEOUT_MS = 20000;\nconst MAX_CONNECTION_IDLE_MS = ~(1 << 31);\nconst { HTTP2_HEADER_PATH } = http2.constants;\nconst TRACER_NAME = \"server\";\nconst kMaxAge = Buffer.from(\"max_age\");\nfunction serverCallTrace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, \"server_call\", text);\n}\nfunction noop() {}\n/**\n * Decorator to wrap a class method with util.deprecate\n * @param message The message to output if the deprecated method is called\n * @returns\n */ function deprecate(message) {\n    return function(target, context) {\n        return util.deprecate(target, message);\n    };\n}\nfunction getUnimplementedStatusResponse(methodName) {\n    return {\n        code: constants_1.Status.UNIMPLEMENTED,\n        details: `The server does not implement the method ${methodName}`\n    };\n}\nfunction getDefaultHandler(handlerType, methodName) {\n    const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);\n    switch(handlerType){\n        case \"unary\":\n            return (call, callback)=>{\n                callback(unimplementedStatusResponse, null);\n            };\n        case \"clientStream\":\n            return (call, callback)=>{\n                callback(unimplementedStatusResponse, null);\n            };\n        case \"serverStream\":\n            return (call)=>{\n                call.emit(\"error\", unimplementedStatusResponse);\n            };\n        case \"bidi\":\n            return (call)=>{\n                call.emit(\"error\", unimplementedStatusResponse);\n            };\n        default:\n            throw new Error(`Invalid handlerType ${handlerType}`);\n    }\n}\nlet Server = (()=>{\n    var _a;\n    let _instanceExtraInitializers = [];\n    let _start_decorators;\n    return _a = class Server {\n        constructor(options){\n            var _b, _c, _d, _e, _f, _g;\n            this.boundPorts = (__runInitializers(this, _instanceExtraInitializers), new Map());\n            this.http2Servers = new Map();\n            this.sessionIdleTimeouts = new Map();\n            this.handlers = new Map();\n            this.sessions = new Map();\n            /**\n                 * This field only exists to ensure that the start method throws an error if\n                 * it is called twice, as it did previously.\n                 */ this.started = false;\n            this.shutdown = false;\n            this.serverAddressString = \"null\";\n            // Channelz Info\n            this.channelzEnabled = true;\n            this.options = options !== null && options !== void 0 ? options : {};\n            if (this.options[\"grpc.enable_channelz\"] === 0) {\n                this.channelzEnabled = false;\n                this.channelzTrace = new channelz_1.ChannelzTraceStub();\n                this.callTracker = new channelz_1.ChannelzCallTrackerStub();\n                this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTrackerStub();\n                this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTrackerStub();\n            } else {\n                this.channelzTrace = new channelz_1.ChannelzTrace();\n                this.callTracker = new channelz_1.ChannelzCallTracker();\n                this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n                this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n            }\n            this.channelzRef = (0, channelz_1.registerChannelzServer)(\"server\", ()=>this.getChannelzInfo(), this.channelzEnabled);\n            this.channelzTrace.addTrace(\"CT_INFO\", \"Server created\");\n            this.maxConnectionAgeMs = (_b = this.options[\"grpc.max_connection_age_ms\"]) !== null && _b !== void 0 ? _b : UNLIMITED_CONNECTION_AGE_MS;\n            this.maxConnectionAgeGraceMs = (_c = this.options[\"grpc.max_connection_age_grace_ms\"]) !== null && _c !== void 0 ? _c : UNLIMITED_CONNECTION_AGE_MS;\n            this.keepaliveTimeMs = (_d = this.options[\"grpc.keepalive_time_ms\"]) !== null && _d !== void 0 ? _d : KEEPALIVE_MAX_TIME_MS;\n            this.keepaliveTimeoutMs = (_e = this.options[\"grpc.keepalive_timeout_ms\"]) !== null && _e !== void 0 ? _e : KEEPALIVE_TIMEOUT_MS;\n            this.sessionIdleTimeout = (_f = this.options[\"grpc.max_connection_idle_ms\"]) !== null && _f !== void 0 ? _f : MAX_CONNECTION_IDLE_MS;\n            this.commonServerOptions = {\n                maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER\n            };\n            if (\"grpc-node.max_session_memory\" in this.options) {\n                this.commonServerOptions.maxSessionMemory = this.options[\"grpc-node.max_session_memory\"];\n            } else {\n                /* By default, set a very large max session memory limit, to effectively\n                     * disable enforcement of the limit. Some testing indicates that Node's\n                     * behavior degrades badly when this limit is reached, so we solve that\n                     * by disabling the check entirely. */ this.commonServerOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;\n            }\n            if (\"grpc.max_concurrent_streams\" in this.options) {\n                this.commonServerOptions.settings = {\n                    maxConcurrentStreams: this.options[\"grpc.max_concurrent_streams\"]\n                };\n            }\n            this.interceptors = (_g = this.options.interceptors) !== null && _g !== void 0 ? _g : [];\n            this.trace(\"Server constructed\");\n        }\n        getChannelzInfo() {\n            return {\n                trace: this.channelzTrace,\n                callTracker: this.callTracker,\n                listenerChildren: this.listenerChildrenTracker.getChildLists(),\n                sessionChildren: this.sessionChildrenTracker.getChildLists()\n            };\n        }\n        getChannelzSessionInfo(session) {\n            var _b, _c, _d;\n            const sessionInfo = this.sessions.get(session);\n            const sessionSocket = session.socket;\n            const remoteAddress = sessionSocket.remoteAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;\n            const localAddress = sessionSocket.localAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort) : null;\n            let tlsInfo;\n            if (session.encrypted) {\n                const tlsSocket = sessionSocket;\n                const cipherInfo = tlsSocket.getCipher();\n                const certificate = tlsSocket.getCertificate();\n                const peerCertificate = tlsSocket.getPeerCertificate();\n                tlsInfo = {\n                    cipherSuiteStandardName: (_b = cipherInfo.standardName) !== null && _b !== void 0 ? _b : null,\n                    cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n                    localCertificate: certificate && \"raw\" in certificate ? certificate.raw : null,\n                    remoteCertificate: peerCertificate && \"raw\" in peerCertificate ? peerCertificate.raw : null\n                };\n            } else {\n                tlsInfo = null;\n            }\n            const socketInfo = {\n                remoteAddress: remoteAddress,\n                localAddress: localAddress,\n                security: tlsInfo,\n                remoteName: null,\n                streamsStarted: sessionInfo.streamTracker.callsStarted,\n                streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,\n                streamsFailed: sessionInfo.streamTracker.callsFailed,\n                messagesSent: sessionInfo.messagesSent,\n                messagesReceived: sessionInfo.messagesReceived,\n                keepAlivesSent: sessionInfo.keepAlivesSent,\n                lastLocalStreamCreatedTimestamp: null,\n                lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,\n                lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,\n                lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,\n                localFlowControlWindow: (_c = session.state.localWindowSize) !== null && _c !== void 0 ? _c : null,\n                remoteFlowControlWindow: (_d = session.state.remoteWindowSize) !== null && _d !== void 0 ? _d : null\n            };\n            return socketInfo;\n        }\n        trace(text) {\n            logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, \"(\" + this.channelzRef.id + \") \" + text);\n        }\n        keepaliveTrace(text) {\n            logging.trace(constants_1.LogVerbosity.DEBUG, \"keepalive\", \"(\" + this.channelzRef.id + \") \" + text);\n        }\n        addProtoService() {\n            throw new Error(\"Not implemented. Use addService() instead\");\n        }\n        addService(service, implementation) {\n            if (service === null || typeof service !== \"object\" || implementation === null || typeof implementation !== \"object\") {\n                throw new Error(\"addService() requires two objects as arguments\");\n            }\n            const serviceKeys = Object.keys(service);\n            if (serviceKeys.length === 0) {\n                throw new Error(\"Cannot add an empty service to a server\");\n            }\n            serviceKeys.forEach((name)=>{\n                const attrs = service[name];\n                let methodType;\n                if (attrs.requestStream) {\n                    if (attrs.responseStream) {\n                        methodType = \"bidi\";\n                    } else {\n                        methodType = \"clientStream\";\n                    }\n                } else {\n                    if (attrs.responseStream) {\n                        methodType = \"serverStream\";\n                    } else {\n                        methodType = \"unary\";\n                    }\n                }\n                let implFn = implementation[name];\n                let impl;\n                if (implFn === undefined && typeof attrs.originalName === \"string\") {\n                    implFn = implementation[attrs.originalName];\n                }\n                if (implFn !== undefined) {\n                    impl = implFn.bind(implementation);\n                } else {\n                    impl = getDefaultHandler(methodType, name);\n                }\n                const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);\n                if (success === false) {\n                    throw new Error(`Method handler for ${attrs.path} already provided.`);\n                }\n            });\n        }\n        removeService(service) {\n            if (service === null || typeof service !== \"object\") {\n                throw new Error(\"removeService() requires object as argument\");\n            }\n            const serviceKeys = Object.keys(service);\n            serviceKeys.forEach((name)=>{\n                const attrs = service[name];\n                this.unregister(attrs.path);\n            });\n        }\n        bind(port, creds) {\n            throw new Error(\"Not implemented. Use bindAsync() instead\");\n        }\n        /**\n             * This API is experimental, so API stability is not guaranteed across minor versions.\n             * @param boundAddress\n             * @returns\n             */ experimentalRegisterListenerToChannelz(boundAddress) {\n            return (0, channelz_1.registerChannelzSocket)((0, subchannel_address_1.subchannelAddressToString)(boundAddress), ()=>{\n                return {\n                    localAddress: boundAddress,\n                    remoteAddress: null,\n                    security: null,\n                    remoteName: null,\n                    streamsStarted: 0,\n                    streamsSucceeded: 0,\n                    streamsFailed: 0,\n                    messagesSent: 0,\n                    messagesReceived: 0,\n                    keepAlivesSent: 0,\n                    lastLocalStreamCreatedTimestamp: null,\n                    lastRemoteStreamCreatedTimestamp: null,\n                    lastMessageSentTimestamp: null,\n                    lastMessageReceivedTimestamp: null,\n                    localFlowControlWindow: null,\n                    remoteFlowControlWindow: null\n                };\n            }, this.channelzEnabled);\n        }\n        experimentalUnregisterListenerFromChannelz(channelzRef) {\n            (0, channelz_1.unregisterChannelzRef)(channelzRef);\n        }\n        createHttp2Server(credentials) {\n            let http2Server;\n            if (credentials._isSecure()) {\n                const constructorOptions = credentials._getConstructorOptions();\n                const contextOptions = credentials._getSecureContextOptions();\n                const secureServerOptions = Object.assign(Object.assign(Object.assign(Object.assign({}, this.commonServerOptions), constructorOptions), contextOptions), {\n                    enableTrace: this.options[\"grpc-node.tls_enable_trace\"] === 1\n                });\n                let areCredentialsValid = contextOptions !== null;\n                this.trace(\"Initial credentials valid: \" + areCredentialsValid);\n                http2Server = http2.createSecureServer(secureServerOptions);\n                http2Server.prependListener(\"connection\", (socket)=>{\n                    if (!areCredentialsValid) {\n                        this.trace(\"Dropped connection from \" + JSON.stringify(socket.address()) + \" due to unloaded credentials\");\n                        socket.destroy();\n                    }\n                });\n                http2Server.on(\"secureConnection\", (socket)=>{\n                    /* These errors need to be handled by the user of Http2SecureServer,\n                         * according to https://github.com/nodejs/node/issues/35824 */ socket.on(\"error\", (e)=>{\n                        this.trace(\"An incoming TLS connection closed with error: \" + e.message);\n                    });\n                });\n                const credsWatcher = (options)=>{\n                    if (options) {\n                        const secureServer = http2Server;\n                        try {\n                            secureServer.setSecureContext(options);\n                        } catch (e) {\n                            logging.log(constants_1.LogVerbosity.ERROR, \"Failed to set secure context with error \" + e.message);\n                            options = null;\n                        }\n                    }\n                    areCredentialsValid = options !== null;\n                    this.trace(\"Post-update credentials valid: \" + areCredentialsValid);\n                };\n                credentials._addWatcher(credsWatcher);\n                http2Server.on(\"close\", ()=>{\n                    credentials._removeWatcher(credsWatcher);\n                });\n            } else {\n                http2Server = http2.createServer(this.commonServerOptions);\n            }\n            http2Server.setTimeout(0, noop);\n            this._setupHandlers(http2Server, credentials._getInterceptors());\n            return http2Server;\n        }\n        bindOneAddress(address, boundPortObject) {\n            this.trace(\"Attempting to bind \" + (0, subchannel_address_1.subchannelAddressToString)(address));\n            const http2Server = this.createHttp2Server(boundPortObject.credentials);\n            return new Promise((resolve, reject)=>{\n                const onError = (err)=>{\n                    this.trace(\"Failed to bind \" + (0, subchannel_address_1.subchannelAddressToString)(address) + \" with error \" + err.message);\n                    resolve({\n                        port: \"port\" in address ? address.port : 1,\n                        error: err.message\n                    });\n                };\n                http2Server.once(\"error\", onError);\n                http2Server.listen(address, ()=>{\n                    const boundAddress = http2Server.address();\n                    let boundSubchannelAddress;\n                    if (typeof boundAddress === \"string\") {\n                        boundSubchannelAddress = {\n                            path: boundAddress\n                        };\n                    } else {\n                        boundSubchannelAddress = {\n                            host: boundAddress.address,\n                            port: boundAddress.port\n                        };\n                    }\n                    const channelzRef = this.experimentalRegisterListenerToChannelz(boundSubchannelAddress);\n                    this.listenerChildrenTracker.refChild(channelzRef);\n                    this.http2Servers.set(http2Server, {\n                        channelzRef: channelzRef,\n                        sessions: new Set(),\n                        ownsChannelzRef: true\n                    });\n                    boundPortObject.listeningServers.add(http2Server);\n                    this.trace(\"Successfully bound \" + (0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress));\n                    resolve({\n                        port: \"port\" in boundSubchannelAddress ? boundSubchannelAddress.port : 1\n                    });\n                    http2Server.removeListener(\"error\", onError);\n                });\n            });\n        }\n        async bindManyPorts(addressList, boundPortObject) {\n            if (addressList.length === 0) {\n                return {\n                    count: 0,\n                    port: 0,\n                    errors: []\n                };\n            }\n            if ((0, subchannel_address_1.isTcpSubchannelAddress)(addressList[0]) && addressList[0].port === 0) {\n                /* If binding to port 0, first try to bind the first address, then bind\n                     * the rest of the address list to the specific port that it binds. */ const firstAddressResult = await this.bindOneAddress(addressList[0], boundPortObject);\n                if (firstAddressResult.error) {\n                    /* If the first address fails to bind, try the same operation starting\n                         * from the second item in the list. */ const restAddressResult = await this.bindManyPorts(addressList.slice(1), boundPortObject);\n                    return Object.assign(Object.assign({}, restAddressResult), {\n                        errors: [\n                            firstAddressResult.error,\n                            ...restAddressResult.errors\n                        ]\n                    });\n                } else {\n                    const restAddresses = addressList.slice(1).map((address)=>(0, subchannel_address_1.isTcpSubchannelAddress)(address) ? {\n                            host: address.host,\n                            port: firstAddressResult.port\n                        } : address);\n                    const restAddressResult = await Promise.all(restAddresses.map((address)=>this.bindOneAddress(address, boundPortObject)));\n                    const allResults = [\n                        firstAddressResult,\n                        ...restAddressResult\n                    ];\n                    return {\n                        count: allResults.filter((result)=>result.error === undefined).length,\n                        port: firstAddressResult.port,\n                        errors: allResults.filter((result)=>result.error).map((result)=>result.error)\n                    };\n                }\n            } else {\n                const allResults = await Promise.all(addressList.map((address)=>this.bindOneAddress(address, boundPortObject)));\n                return {\n                    count: allResults.filter((result)=>result.error === undefined).length,\n                    port: allResults[0].port,\n                    errors: allResults.filter((result)=>result.error).map((result)=>result.error)\n                };\n            }\n        }\n        async bindAddressList(addressList, boundPortObject) {\n            const bindResult = await this.bindManyPorts(addressList, boundPortObject);\n            if (bindResult.count > 0) {\n                if (bindResult.count < addressList.length) {\n                    logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);\n                }\n                return bindResult.port;\n            } else {\n                const errorString = `No address added out of total ${addressList.length} resolved`;\n                logging.log(constants_1.LogVerbosity.ERROR, errorString);\n                throw new Error(`${errorString} errors: [${bindResult.errors.join(\",\")}]`);\n            }\n        }\n        resolvePort(port) {\n            return new Promise((resolve, reject)=>{\n                const resolverListener = {\n                    onSuccessfulResolution: (endpointList, serviceConfig, serviceConfigError)=>{\n                        // We only want one resolution result. Discard all future results\n                        resolverListener.onSuccessfulResolution = ()=>{};\n                        const addressList = [].concat(...endpointList.map((endpoint)=>endpoint.addresses));\n                        if (addressList.length === 0) {\n                            reject(new Error(`No addresses resolved for port ${port}`));\n                            return;\n                        }\n                        resolve(addressList);\n                    },\n                    onError: (error)=>{\n                        reject(new Error(error.details));\n                    }\n                };\n                const resolver = (0, resolver_1.createResolver)(port, resolverListener, this.options);\n                resolver.updateResolution();\n            });\n        }\n        async bindPort(port, boundPortObject) {\n            const addressList = await this.resolvePort(port);\n            if (boundPortObject.cancelled) {\n                this.completeUnbind(boundPortObject);\n                throw new Error(\"bindAsync operation cancelled by unbind call\");\n            }\n            const portNumber = await this.bindAddressList(addressList, boundPortObject);\n            if (boundPortObject.cancelled) {\n                this.completeUnbind(boundPortObject);\n                throw new Error(\"bindAsync operation cancelled by unbind call\");\n            }\n            return portNumber;\n        }\n        normalizePort(port) {\n            const initialPortUri = (0, uri_parser_1.parseUri)(port);\n            if (initialPortUri === null) {\n                throw new Error(`Could not parse port \"${port}\"`);\n            }\n            const portUri = (0, resolver_1.mapUriDefaultScheme)(initialPortUri);\n            if (portUri === null) {\n                throw new Error(`Could not get a default scheme for port \"${port}\"`);\n            }\n            return portUri;\n        }\n        bindAsync(port, creds, callback) {\n            if (this.shutdown) {\n                throw new Error(\"bindAsync called after shutdown\");\n            }\n            if (typeof port !== \"string\") {\n                throw new TypeError(\"port must be a string\");\n            }\n            if (creds === null || !(creds instanceof server_credentials_1.ServerCredentials)) {\n                throw new TypeError(\"creds must be a ServerCredentials object\");\n            }\n            if (typeof callback !== \"function\") {\n                throw new TypeError(\"callback must be a function\");\n            }\n            this.trace(\"bindAsync port=\" + port);\n            const portUri = this.normalizePort(port);\n            const deferredCallback = (error, port)=>{\n                process.nextTick(()=>callback(error, port));\n            };\n            /* First, if this port is already bound or that bind operation is in\n                 * progress, use that result. */ let boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));\n            if (boundPortObject) {\n                if (!creds._equals(boundPortObject.credentials)) {\n                    deferredCallback(new Error(`${port} already bound with incompatible credentials`), 0);\n                    return;\n                }\n                /* If that operation has previously been cancelled by an unbind call,\n                     * uncancel it. */ boundPortObject.cancelled = false;\n                if (boundPortObject.completionPromise) {\n                    boundPortObject.completionPromise.then((portNum)=>callback(null, portNum), (error)=>callback(error, 0));\n                } else {\n                    deferredCallback(null, boundPortObject.portNumber);\n                }\n                return;\n            }\n            boundPortObject = {\n                mapKey: (0, uri_parser_1.uriToString)(portUri),\n                originalUri: portUri,\n                completionPromise: null,\n                cancelled: false,\n                portNumber: 0,\n                credentials: creds,\n                listeningServers: new Set()\n            };\n            const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);\n            const completionPromise = this.bindPort(portUri, boundPortObject);\n            boundPortObject.completionPromise = completionPromise;\n            /* If the port number is 0, defer populating the map entry until after the\n                 * bind operation completes and we have a specific port number. Otherwise,\n                 * populate it immediately. */ if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {\n                completionPromise.then((portNum)=>{\n                    const finalUri = {\n                        scheme: portUri.scheme,\n                        authority: portUri.authority,\n                        path: (0, uri_parser_1.combineHostPort)({\n                            host: splitPort.host,\n                            port: portNum\n                        })\n                    };\n                    boundPortObject.mapKey = (0, uri_parser_1.uriToString)(finalUri);\n                    boundPortObject.completionPromise = null;\n                    boundPortObject.portNumber = portNum;\n                    this.boundPorts.set(boundPortObject.mapKey, boundPortObject);\n                    callback(null, portNum);\n                }, (error)=>{\n                    callback(error, 0);\n                });\n            } else {\n                this.boundPorts.set(boundPortObject.mapKey, boundPortObject);\n                completionPromise.then((portNum)=>{\n                    boundPortObject.completionPromise = null;\n                    boundPortObject.portNumber = portNum;\n                    callback(null, portNum);\n                }, (error)=>{\n                    callback(error, 0);\n                });\n            }\n        }\n        registerInjectorToChannelz() {\n            return (0, channelz_1.registerChannelzSocket)(\"injector\", ()=>{\n                return {\n                    localAddress: null,\n                    remoteAddress: null,\n                    security: null,\n                    remoteName: null,\n                    streamsStarted: 0,\n                    streamsSucceeded: 0,\n                    streamsFailed: 0,\n                    messagesSent: 0,\n                    messagesReceived: 0,\n                    keepAlivesSent: 0,\n                    lastLocalStreamCreatedTimestamp: null,\n                    lastRemoteStreamCreatedTimestamp: null,\n                    lastMessageSentTimestamp: null,\n                    lastMessageReceivedTimestamp: null,\n                    localFlowControlWindow: null,\n                    remoteFlowControlWindow: null\n                };\n            }, this.channelzEnabled);\n        }\n        /**\n             * This API is experimental, so API stability is not guaranteed across minor versions.\n             * @param credentials\n             * @param channelzRef\n             * @returns\n             */ experimentalCreateConnectionInjectorWithChannelzRef(credentials, channelzRef, ownsChannelzRef = false) {\n            if (credentials === null || !(credentials instanceof server_credentials_1.ServerCredentials)) {\n                throw new TypeError(\"creds must be a ServerCredentials object\");\n            }\n            if (this.channelzEnabled) {\n                this.listenerChildrenTracker.refChild(channelzRef);\n            }\n            const server = this.createHttp2Server(credentials);\n            const sessionsSet = new Set();\n            this.http2Servers.set(server, {\n                channelzRef: channelzRef,\n                sessions: sessionsSet,\n                ownsChannelzRef\n            });\n            return {\n                injectConnection: (connection)=>{\n                    server.emit(\"connection\", connection);\n                },\n                drain: (graceTimeMs)=>{\n                    var _b, _c;\n                    for (const session of sessionsSet){\n                        this.closeSession(session);\n                    }\n                    (_c = (_b = setTimeout(()=>{\n                        for (const session of sessionsSet){\n                            session.destroy(http2.constants.NGHTTP2_CANCEL);\n                        }\n                    }, graceTimeMs)).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n                },\n                destroy: ()=>{\n                    this.closeServer(server);\n                    for (const session of sessionsSet){\n                        this.closeSession(session);\n                    }\n                }\n            };\n        }\n        createConnectionInjector(credentials) {\n            if (credentials === null || !(credentials instanceof server_credentials_1.ServerCredentials)) {\n                throw new TypeError(\"creds must be a ServerCredentials object\");\n            }\n            const channelzRef = this.registerInjectorToChannelz();\n            return this.experimentalCreateConnectionInjectorWithChannelzRef(credentials, channelzRef, true);\n        }\n        closeServer(server, callback) {\n            this.trace(\"Closing server with address \" + JSON.stringify(server.address()));\n            const serverInfo = this.http2Servers.get(server);\n            server.close(()=>{\n                if (serverInfo && serverInfo.ownsChannelzRef) {\n                    this.listenerChildrenTracker.unrefChild(serverInfo.channelzRef);\n                    (0, channelz_1.unregisterChannelzRef)(serverInfo.channelzRef);\n                }\n                this.http2Servers.delete(server);\n                callback === null || callback === void 0 ? void 0 : callback();\n            });\n        }\n        closeSession(session, callback) {\n            var _b;\n            this.trace(\"Closing session initiated by \" + ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress));\n            const sessionInfo = this.sessions.get(session);\n            const closeCallback = ()=>{\n                if (sessionInfo) {\n                    this.sessionChildrenTracker.unrefChild(sessionInfo.ref);\n                    (0, channelz_1.unregisterChannelzRef)(sessionInfo.ref);\n                }\n                callback === null || callback === void 0 ? void 0 : callback();\n            };\n            if (session.closed) {\n                queueMicrotask(closeCallback);\n            } else {\n                session.close(closeCallback);\n            }\n        }\n        completeUnbind(boundPortObject) {\n            for (const server of boundPortObject.listeningServers){\n                const serverInfo = this.http2Servers.get(server);\n                this.closeServer(server, ()=>{\n                    boundPortObject.listeningServers.delete(server);\n                });\n                if (serverInfo) {\n                    for (const session of serverInfo.sessions){\n                        this.closeSession(session);\n                    }\n                }\n            }\n            this.boundPorts.delete(boundPortObject.mapKey);\n        }\n        /**\n             * Unbind a previously bound port, or cancel an in-progress bindAsync\n             * operation. If port 0 was bound, only the actual bound port can be\n             * unbound. For example, if bindAsync was called with \"localhost:0\" and the\n             * bound port result was 54321, it can be unbound as \"localhost:54321\".\n             * @param port\n             */ unbind(port) {\n            this.trace(\"unbind port=\" + port);\n            const portUri = this.normalizePort(port);\n            const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);\n            if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {\n                throw new Error(\"Cannot unbind port 0\");\n            }\n            const boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));\n            if (boundPortObject) {\n                this.trace(\"unbinding \" + boundPortObject.mapKey + \" originally bound as \" + (0, uri_parser_1.uriToString)(boundPortObject.originalUri));\n                /* If the bind operation is pending, the cancelled flag will trigger\n                     * the unbind operation later. */ if (boundPortObject.completionPromise) {\n                    boundPortObject.cancelled = true;\n                } else {\n                    this.completeUnbind(boundPortObject);\n                }\n            }\n        }\n        /**\n             * Gracefully close all connections associated with a previously bound port.\n             * After the grace time, forcefully close all remaining open connections.\n             *\n             * If port 0 was bound, only the actual bound port can be\n             * drained. For example, if bindAsync was called with \"localhost:0\" and the\n             * bound port result was 54321, it can be drained as \"localhost:54321\".\n             * @param port\n             * @param graceTimeMs\n             * @returns\n             */ drain(port, graceTimeMs) {\n            var _b, _c;\n            this.trace(\"drain port=\" + port + \" graceTimeMs=\" + graceTimeMs);\n            const portUri = this.normalizePort(port);\n            const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);\n            if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {\n                throw new Error(\"Cannot drain port 0\");\n            }\n            const boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));\n            if (!boundPortObject) {\n                return;\n            }\n            const allSessions = new Set();\n            for (const http2Server of boundPortObject.listeningServers){\n                const serverEntry = this.http2Servers.get(http2Server);\n                if (serverEntry) {\n                    for (const session of serverEntry.sessions){\n                        allSessions.add(session);\n                        this.closeSession(session, ()=>{\n                            allSessions.delete(session);\n                        });\n                    }\n                }\n            }\n            /* After the grace time ends, send another goaway to all remaining sessions\n                 * with the CANCEL code. */ (_c = (_b = setTimeout(()=>{\n                for (const session of allSessions){\n                    session.destroy(http2.constants.NGHTTP2_CANCEL);\n                }\n            }, graceTimeMs)).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n        }\n        forceShutdown() {\n            for (const boundPortObject of this.boundPorts.values()){\n                boundPortObject.cancelled = true;\n            }\n            this.boundPorts.clear();\n            // Close the server if it is still running.\n            for (const server of this.http2Servers.keys()){\n                this.closeServer(server);\n            }\n            // Always destroy any available sessions. It's possible that one or more\n            // tryShutdown() calls are in progress. Don't wait on them to finish.\n            this.sessions.forEach((channelzInfo, session)=>{\n                this.closeSession(session);\n                // Cast NGHTTP2_CANCEL to any because TypeScript doesn't seem to\n                // recognize destroy(code) as a valid signature.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                session.destroy(http2.constants.NGHTTP2_CANCEL);\n            });\n            this.sessions.clear();\n            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n            this.shutdown = true;\n        }\n        register(name, handler, serialize, deserialize, type) {\n            if (this.handlers.has(name)) {\n                return false;\n            }\n            this.handlers.set(name, {\n                func: handler,\n                serialize,\n                deserialize,\n                type,\n                path: name\n            });\n            return true;\n        }\n        unregister(name) {\n            return this.handlers.delete(name);\n        }\n        /**\n             * @deprecated No longer needed as of version 1.10.x\n             */ start() {\n            if (this.http2Servers.size === 0 || [\n                ...this.http2Servers.keys()\n            ].every((server)=>!server.listening)) {\n                throw new Error(\"server must be bound in order to start\");\n            }\n            if (this.started === true) {\n                throw new Error(\"server is already started\");\n            }\n            this.started = true;\n        }\n        tryShutdown(callback) {\n            var _b;\n            const wrappedCallback = (error)=>{\n                (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n                callback(error);\n            };\n            let pendingChecks = 0;\n            function maybeCallback() {\n                pendingChecks--;\n                if (pendingChecks === 0) {\n                    wrappedCallback();\n                }\n            }\n            this.shutdown = true;\n            for (const [serverKey, server] of this.http2Servers.entries()){\n                pendingChecks++;\n                const serverString = server.channelzRef.name;\n                this.trace(\"Waiting for server \" + serverString + \" to close\");\n                this.closeServer(serverKey, ()=>{\n                    this.trace(\"Server \" + serverString + \" finished closing\");\n                    maybeCallback();\n                });\n                for (const session of server.sessions.keys()){\n                    pendingChecks++;\n                    const sessionString = (_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress;\n                    this.trace(\"Waiting for session \" + sessionString + \" to close\");\n                    this.closeSession(session, ()=>{\n                        this.trace(\"Session \" + sessionString + \" finished closing\");\n                        maybeCallback();\n                    });\n                }\n            }\n            if (pendingChecks === 0) {\n                wrappedCallback();\n            }\n        }\n        addHttp2Port() {\n            throw new Error(\"Not yet implemented\");\n        }\n        /**\n             * Get the channelz reference object for this server. The returned value is\n             * garbage if channelz is disabled for this server.\n             * @returns\n             */ getChannelzRef() {\n            return this.channelzRef;\n        }\n        _verifyContentType(stream, headers) {\n            const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];\n            if (typeof contentType !== \"string\" || !contentType.startsWith(\"application/grpc\")) {\n                stream.respond({\n                    [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE\n                }, {\n                    endStream: true\n                });\n                return false;\n            }\n            return true;\n        }\n        _retrieveHandler(path) {\n            serverCallTrace(\"Received call to method \" + path + \" at address \" + this.serverAddressString);\n            const handler = this.handlers.get(path);\n            if (handler === undefined) {\n                serverCallTrace(\"No handler registered for method \" + path + \". Sending UNIMPLEMENTED status.\");\n                return null;\n            }\n            return handler;\n        }\n        _respondWithError(err, stream, channelzSessionInfo = null) {\n            var _b, _c;\n            const trailersToSend = Object.assign({\n                \"grpc-status\": (_b = err.code) !== null && _b !== void 0 ? _b : constants_1.Status.INTERNAL,\n                \"grpc-message\": err.details,\n                [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,\n                [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: \"application/grpc+proto\"\n            }, (_c = err.metadata) === null || _c === void 0 ? void 0 : _c.toHttp2Headers());\n            stream.respond(trailersToSend, {\n                endStream: true\n            });\n            this.callTracker.addCallFailed();\n            channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n        }\n        _channelzHandler(extraInterceptors, stream, headers) {\n            // for handling idle timeout\n            this.onStreamOpened(stream);\n            const channelzSessionInfo = this.sessions.get(stream.session);\n            this.callTracker.addCallStarted();\n            channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallStarted();\n            if (!this._verifyContentType(stream, headers)) {\n                this.callTracker.addCallFailed();\n                channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n                return;\n            }\n            const path = headers[HTTP2_HEADER_PATH];\n            const handler = this._retrieveHandler(path);\n            if (!handler) {\n                this._respondWithError(getUnimplementedStatusResponse(path), stream, channelzSessionInfo);\n                return;\n            }\n            const callEventTracker = {\n                addMessageSent: ()=>{\n                    if (channelzSessionInfo) {\n                        channelzSessionInfo.messagesSent += 1;\n                        channelzSessionInfo.lastMessageSentTimestamp = new Date();\n                    }\n                },\n                addMessageReceived: ()=>{\n                    if (channelzSessionInfo) {\n                        channelzSessionInfo.messagesReceived += 1;\n                        channelzSessionInfo.lastMessageReceivedTimestamp = new Date();\n                    }\n                },\n                onCallEnd: (status)=>{\n                    if (status.code === constants_1.Status.OK) {\n                        this.callTracker.addCallSucceeded();\n                    } else {\n                        this.callTracker.addCallFailed();\n                    }\n                },\n                onStreamEnd: (success)=>{\n                    if (channelzSessionInfo) {\n                        if (success) {\n                            channelzSessionInfo.streamTracker.addCallSucceeded();\n                        } else {\n                            channelzSessionInfo.streamTracker.addCallFailed();\n                        }\n                    }\n                }\n            };\n            const call = (0, server_interceptors_1.getServerInterceptingCall)([\n                ...extraInterceptors,\n                ...this.interceptors\n            ], stream, headers, callEventTracker, handler, this.options);\n            if (!this._runHandlerForCall(call, handler)) {\n                this.callTracker.addCallFailed();\n                channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n                call.sendStatus({\n                    code: constants_1.Status.INTERNAL,\n                    details: `Unknown handler type: ${handler.type}`\n                });\n            }\n        }\n        _streamHandler(extraInterceptors, stream, headers) {\n            // for handling idle timeout\n            this.onStreamOpened(stream);\n            if (this._verifyContentType(stream, headers) !== true) {\n                return;\n            }\n            const path = headers[HTTP2_HEADER_PATH];\n            const handler = this._retrieveHandler(path);\n            if (!handler) {\n                this._respondWithError(getUnimplementedStatusResponse(path), stream, null);\n                return;\n            }\n            const call = (0, server_interceptors_1.getServerInterceptingCall)([\n                ...extraInterceptors,\n                ...this.interceptors\n            ], stream, headers, null, handler, this.options);\n            if (!this._runHandlerForCall(call, handler)) {\n                call.sendStatus({\n                    code: constants_1.Status.INTERNAL,\n                    details: `Unknown handler type: ${handler.type}`\n                });\n            }\n        }\n        _runHandlerForCall(call, handler) {\n            const { type } = handler;\n            if (type === \"unary\") {\n                handleUnary(call, handler);\n            } else if (type === \"clientStream\") {\n                handleClientStreaming(call, handler);\n            } else if (type === \"serverStream\") {\n                handleServerStreaming(call, handler);\n            } else if (type === \"bidi\") {\n                handleBidiStreaming(call, handler);\n            } else {\n                return false;\n            }\n            return true;\n        }\n        _setupHandlers(http2Server, extraInterceptors) {\n            if (http2Server === null) {\n                return;\n            }\n            const serverAddress = http2Server.address();\n            let serverAddressString = \"null\";\n            if (serverAddress) {\n                if (typeof serverAddress === \"string\") {\n                    serverAddressString = serverAddress;\n                } else {\n                    serverAddressString = serverAddress.address + \":\" + serverAddress.port;\n                }\n            }\n            this.serverAddressString = serverAddressString;\n            const handler = this.channelzEnabled ? this._channelzHandler : this._streamHandler;\n            const sessionHandler = this.channelzEnabled ? this._channelzSessionHandler(http2Server) : this._sessionHandler(http2Server);\n            http2Server.on(\"stream\", handler.bind(this, extraInterceptors));\n            http2Server.on(\"session\", sessionHandler);\n        }\n        _sessionHandler(http2Server) {\n            return (session)=>{\n                var _b, _c;\n                (_b = this.http2Servers.get(http2Server)) === null || _b === void 0 ? void 0 : _b.sessions.add(session);\n                let connectionAgeTimer = null;\n                let connectionAgeGraceTimer = null;\n                let keepaliveTimer = null;\n                let sessionClosedByServer = false;\n                const idleTimeoutObj = this.enableIdleTimeout(session);\n                if (this.maxConnectionAgeMs !== UNLIMITED_CONNECTION_AGE_MS) {\n                    // Apply a random jitter within a +/-10% range\n                    const jitterMagnitude = this.maxConnectionAgeMs / 10;\n                    const jitter = Math.random() * jitterMagnitude * 2 - jitterMagnitude;\n                    connectionAgeTimer = setTimeout(()=>{\n                        var _b, _c;\n                        sessionClosedByServer = true;\n                        this.trace(\"Connection dropped by max connection age: \" + ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress));\n                        try {\n                            session.goaway(http2.constants.NGHTTP2_NO_ERROR, ~(1 << 31), kMaxAge);\n                        } catch (e) {\n                            // The goaway can't be sent because the session is already closed\n                            session.destroy();\n                            return;\n                        }\n                        session.close();\n                        /* Allow a grace period after sending the GOAWAY before forcibly\n                             * closing the connection. */ if (this.maxConnectionAgeGraceMs !== UNLIMITED_CONNECTION_AGE_MS) {\n                            connectionAgeGraceTimer = setTimeout(()=>{\n                                session.destroy();\n                            }, this.maxConnectionAgeGraceMs);\n                            (_c = connectionAgeGraceTimer.unref) === null || _c === void 0 ? void 0 : _c.call(connectionAgeGraceTimer);\n                        }\n                    }, this.maxConnectionAgeMs + jitter);\n                    (_c = connectionAgeTimer.unref) === null || _c === void 0 ? void 0 : _c.call(connectionAgeTimer);\n                }\n                const clearKeepaliveTimeout = ()=>{\n                    if (keepaliveTimer) {\n                        clearTimeout(keepaliveTimer);\n                        keepaliveTimer = null;\n                    }\n                };\n                const canSendPing = ()=>{\n                    return !session.destroyed && this.keepaliveTimeMs < KEEPALIVE_MAX_TIME_MS && this.keepaliveTimeMs > 0;\n                };\n                /* eslint-disable-next-line prefer-const */ let sendPing; // hoisted for use in maybeStartKeepalivePingTimer\n                const maybeStartKeepalivePingTimer = ()=>{\n                    var _b;\n                    if (!canSendPing()) {\n                        return;\n                    }\n                    this.keepaliveTrace(\"Starting keepalive timer for \" + this.keepaliveTimeMs + \"ms\");\n                    keepaliveTimer = setTimeout(()=>{\n                        clearKeepaliveTimeout();\n                        sendPing();\n                    }, this.keepaliveTimeMs);\n                    (_b = keepaliveTimer.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimer);\n                };\n                sendPing = ()=>{\n                    var _b;\n                    if (!canSendPing()) {\n                        return;\n                    }\n                    this.keepaliveTrace(\"Sending ping with timeout \" + this.keepaliveTimeoutMs + \"ms\");\n                    let pingSendError = \"\";\n                    try {\n                        const pingSentSuccessfully = session.ping((err, duration, payload)=>{\n                            clearKeepaliveTimeout();\n                            if (err) {\n                                this.keepaliveTrace(\"Ping failed with error: \" + err.message);\n                                sessionClosedByServer = true;\n                                session.close();\n                            } else {\n                                this.keepaliveTrace(\"Received ping response\");\n                                maybeStartKeepalivePingTimer();\n                            }\n                        });\n                        if (!pingSentSuccessfully) {\n                            pingSendError = \"Ping returned false\";\n                        }\n                    } catch (e) {\n                        // grpc/grpc-node#2139\n                        pingSendError = (e instanceof Error ? e.message : \"\") || \"Unknown error\";\n                    }\n                    if (pingSendError) {\n                        this.keepaliveTrace(\"Ping send failed: \" + pingSendError);\n                        this.trace(\"Connection dropped due to ping send error: \" + pingSendError);\n                        sessionClosedByServer = true;\n                        session.close();\n                        return;\n                    }\n                    keepaliveTimer = setTimeout(()=>{\n                        clearKeepaliveTimeout();\n                        this.keepaliveTrace(\"Ping timeout passed without response\");\n                        this.trace(\"Connection dropped by keepalive timeout\");\n                        sessionClosedByServer = true;\n                        session.close();\n                    }, this.keepaliveTimeoutMs);\n                    (_b = keepaliveTimer.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimer);\n                };\n                maybeStartKeepalivePingTimer();\n                session.on(\"close\", ()=>{\n                    var _b, _c;\n                    if (!sessionClosedByServer) {\n                        this.trace(`Connection dropped by client ${(_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress}`);\n                    }\n                    if (connectionAgeTimer) {\n                        clearTimeout(connectionAgeTimer);\n                    }\n                    if (connectionAgeGraceTimer) {\n                        clearTimeout(connectionAgeGraceTimer);\n                    }\n                    clearKeepaliveTimeout();\n                    if (idleTimeoutObj !== null) {\n                        clearTimeout(idleTimeoutObj.timeout);\n                        this.sessionIdleTimeouts.delete(session);\n                    }\n                    (_c = this.http2Servers.get(http2Server)) === null || _c === void 0 ? void 0 : _c.sessions.delete(session);\n                });\n            };\n        }\n        _channelzSessionHandler(http2Server) {\n            return (session)=>{\n                var _b, _c, _d, _e;\n                const channelzRef = (0, channelz_1.registerChannelzSocket)((_c = (_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress) !== null && _c !== void 0 ? _c : \"unknown\", this.getChannelzSessionInfo.bind(this, session), this.channelzEnabled);\n                const channelzSessionInfo = {\n                    ref: channelzRef,\n                    streamTracker: new channelz_1.ChannelzCallTracker(),\n                    messagesSent: 0,\n                    messagesReceived: 0,\n                    keepAlivesSent: 0,\n                    lastMessageSentTimestamp: null,\n                    lastMessageReceivedTimestamp: null\n                };\n                (_d = this.http2Servers.get(http2Server)) === null || _d === void 0 ? void 0 : _d.sessions.add(session);\n                this.sessions.set(session, channelzSessionInfo);\n                const clientAddress = `${session.socket.remoteAddress}:${session.socket.remotePort}`;\n                this.channelzTrace.addTrace(\"CT_INFO\", \"Connection established by client \" + clientAddress);\n                this.trace(\"Connection established by client \" + clientAddress);\n                this.sessionChildrenTracker.refChild(channelzRef);\n                let connectionAgeTimer = null;\n                let connectionAgeGraceTimer = null;\n                let keepaliveTimeout = null;\n                let sessionClosedByServer = false;\n                const idleTimeoutObj = this.enableIdleTimeout(session);\n                if (this.maxConnectionAgeMs !== UNLIMITED_CONNECTION_AGE_MS) {\n                    // Apply a random jitter within a +/-10% range\n                    const jitterMagnitude = this.maxConnectionAgeMs / 10;\n                    const jitter = Math.random() * jitterMagnitude * 2 - jitterMagnitude;\n                    connectionAgeTimer = setTimeout(()=>{\n                        var _b;\n                        sessionClosedByServer = true;\n                        this.channelzTrace.addTrace(\"CT_INFO\", \"Connection dropped by max connection age from \" + clientAddress);\n                        try {\n                            session.goaway(http2.constants.NGHTTP2_NO_ERROR, ~(1 << 31), kMaxAge);\n                        } catch (e) {\n                            // The goaway can't be sent because the session is already closed\n                            session.destroy();\n                            return;\n                        }\n                        session.close();\n                        /* Allow a grace period after sending the GOAWAY before forcibly\n                             * closing the connection. */ if (this.maxConnectionAgeGraceMs !== UNLIMITED_CONNECTION_AGE_MS) {\n                            connectionAgeGraceTimer = setTimeout(()=>{\n                                session.destroy();\n                            }, this.maxConnectionAgeGraceMs);\n                            (_b = connectionAgeGraceTimer.unref) === null || _b === void 0 ? void 0 : _b.call(connectionAgeGraceTimer);\n                        }\n                    }, this.maxConnectionAgeMs + jitter);\n                    (_e = connectionAgeTimer.unref) === null || _e === void 0 ? void 0 : _e.call(connectionAgeTimer);\n                }\n                const clearKeepaliveTimeout = ()=>{\n                    if (keepaliveTimeout) {\n                        clearTimeout(keepaliveTimeout);\n                        keepaliveTimeout = null;\n                    }\n                };\n                const canSendPing = ()=>{\n                    return !session.destroyed && this.keepaliveTimeMs < KEEPALIVE_MAX_TIME_MS && this.keepaliveTimeMs > 0;\n                };\n                /* eslint-disable-next-line prefer-const */ let sendPing; // hoisted for use in maybeStartKeepalivePingTimer\n                const maybeStartKeepalivePingTimer = ()=>{\n                    var _b;\n                    if (!canSendPing()) {\n                        return;\n                    }\n                    this.keepaliveTrace(\"Starting keepalive timer for \" + this.keepaliveTimeMs + \"ms\");\n                    keepaliveTimeout = setTimeout(()=>{\n                        clearKeepaliveTimeout();\n                        sendPing();\n                    }, this.keepaliveTimeMs);\n                    (_b = keepaliveTimeout.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimeout);\n                };\n                sendPing = ()=>{\n                    var _b;\n                    if (!canSendPing()) {\n                        return;\n                    }\n                    this.keepaliveTrace(\"Sending ping with timeout \" + this.keepaliveTimeoutMs + \"ms\");\n                    let pingSendError = \"\";\n                    try {\n                        const pingSentSuccessfully = session.ping((err, duration, payload)=>{\n                            clearKeepaliveTimeout();\n                            if (err) {\n                                this.keepaliveTrace(\"Ping failed with error: \" + err.message);\n                                this.channelzTrace.addTrace(\"CT_INFO\", \"Connection dropped due to error of a ping frame \" + err.message + \" return in \" + duration);\n                                sessionClosedByServer = true;\n                                session.close();\n                            } else {\n                                this.keepaliveTrace(\"Received ping response\");\n                                maybeStartKeepalivePingTimer();\n                            }\n                        });\n                        if (!pingSentSuccessfully) {\n                            pingSendError = \"Ping returned false\";\n                        }\n                    } catch (e) {\n                        // grpc/grpc-node#2139\n                        pingSendError = (e instanceof Error ? e.message : \"\") || \"Unknown error\";\n                    }\n                    if (pingSendError) {\n                        this.keepaliveTrace(\"Ping send failed: \" + pingSendError);\n                        this.channelzTrace.addTrace(\"CT_INFO\", \"Connection dropped due to ping send error: \" + pingSendError);\n                        sessionClosedByServer = true;\n                        session.close();\n                        return;\n                    }\n                    channelzSessionInfo.keepAlivesSent += 1;\n                    keepaliveTimeout = setTimeout(()=>{\n                        clearKeepaliveTimeout();\n                        this.keepaliveTrace(\"Ping timeout passed without response\");\n                        this.channelzTrace.addTrace(\"CT_INFO\", \"Connection dropped by keepalive timeout from \" + clientAddress);\n                        sessionClosedByServer = true;\n                        session.close();\n                    }, this.keepaliveTimeoutMs);\n                    (_b = keepaliveTimeout.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimeout);\n                };\n                maybeStartKeepalivePingTimer();\n                session.on(\"close\", ()=>{\n                    var _b;\n                    if (!sessionClosedByServer) {\n                        this.channelzTrace.addTrace(\"CT_INFO\", \"Connection dropped by client \" + clientAddress);\n                    }\n                    this.sessionChildrenTracker.unrefChild(channelzRef);\n                    (0, channelz_1.unregisterChannelzRef)(channelzRef);\n                    if (connectionAgeTimer) {\n                        clearTimeout(connectionAgeTimer);\n                    }\n                    if (connectionAgeGraceTimer) {\n                        clearTimeout(connectionAgeGraceTimer);\n                    }\n                    clearKeepaliveTimeout();\n                    if (idleTimeoutObj !== null) {\n                        clearTimeout(idleTimeoutObj.timeout);\n                        this.sessionIdleTimeouts.delete(session);\n                    }\n                    (_b = this.http2Servers.get(http2Server)) === null || _b === void 0 ? void 0 : _b.sessions.delete(session);\n                    this.sessions.delete(session);\n                });\n            };\n        }\n        enableIdleTimeout(session) {\n            var _b, _c;\n            if (this.sessionIdleTimeout >= MAX_CONNECTION_IDLE_MS) {\n                return null;\n            }\n            const idleTimeoutObj = {\n                activeStreams: 0,\n                lastIdle: Date.now(),\n                onClose: this.onStreamClose.bind(this, session),\n                timeout: setTimeout(this.onIdleTimeout, this.sessionIdleTimeout, this, session)\n            };\n            (_c = (_b = idleTimeoutObj.timeout).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n            this.sessionIdleTimeouts.set(session, idleTimeoutObj);\n            const { socket } = session;\n            this.trace(\"Enable idle timeout for \" + socket.remoteAddress + \":\" + socket.remotePort);\n            return idleTimeoutObj;\n        }\n        onIdleTimeout(ctx, session) {\n            const { socket } = session;\n            const sessionInfo = ctx.sessionIdleTimeouts.get(session);\n            // if it is called while we have activeStreams - timer will not be rescheduled\n            // until last active stream is closed, then it will call .refresh() on the timer\n            // important part is to not clearTimeout(timer) or it becomes unusable\n            // for future refreshes\n            if (sessionInfo !== undefined && sessionInfo.activeStreams === 0) {\n                if (Date.now() - sessionInfo.lastIdle >= ctx.sessionIdleTimeout) {\n                    ctx.trace(\"Session idle timeout triggered for \" + (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) + \":\" + (socket === null || socket === void 0 ? void 0 : socket.remotePort) + \" last idle at \" + sessionInfo.lastIdle);\n                    ctx.closeSession(session);\n                } else {\n                    sessionInfo.timeout.refresh();\n                }\n            }\n        }\n        onStreamOpened(stream) {\n            const session = stream.session;\n            const idleTimeoutObj = this.sessionIdleTimeouts.get(session);\n            if (idleTimeoutObj) {\n                idleTimeoutObj.activeStreams += 1;\n                stream.once(\"close\", idleTimeoutObj.onClose);\n            }\n        }\n        onStreamClose(session) {\n            var _b, _c;\n            const idleTimeoutObj = this.sessionIdleTimeouts.get(session);\n            if (idleTimeoutObj) {\n                idleTimeoutObj.activeStreams -= 1;\n                if (idleTimeoutObj.activeStreams === 0) {\n                    idleTimeoutObj.lastIdle = Date.now();\n                    idleTimeoutObj.timeout.refresh();\n                    this.trace(\"Session onStreamClose\" + ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress) + \":\" + ((_c = session.socket) === null || _c === void 0 ? void 0 : _c.remotePort) + \" at \" + idleTimeoutObj.lastIdle);\n                }\n            }\n        }\n    }, (()=>{\n        const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n        _start_decorators = [\n            deprecate(\"Calling start() is no longer necessary. It can be safely omitted.\")\n        ];\n        __esDecorate(_a, null, _start_decorators, {\n            kind: \"method\",\n            name: \"start\",\n            static: false,\n            private: false,\n            access: {\n                has: (obj)=>\"start\" in obj,\n                get: (obj)=>obj.start\n            },\n            metadata: _metadata\n        }, null, _instanceExtraInitializers);\n        if (_metadata) Object.defineProperty(_a, Symbol.metadata, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _metadata\n        });\n    })(), _a;\n})();\nexports.Server = Server;\nasync function handleUnary(call, handler) {\n    let stream;\n    function respond(err, value, trailer, flags) {\n        if (err) {\n            call.sendStatus((0, server_call_1.serverErrorToStatus)(err, trailer));\n            return;\n        }\n        call.sendMessage(value, ()=>{\n            call.sendStatus({\n                code: constants_1.Status.OK,\n                details: \"OK\",\n                metadata: trailer !== null && trailer !== void 0 ? trailer : null\n            });\n        });\n    }\n    let requestMetadata;\n    let requestMessage = null;\n    call.start({\n        onReceiveMetadata (metadata) {\n            requestMetadata = metadata;\n            call.startRead();\n        },\n        onReceiveMessage (message) {\n            if (requestMessage) {\n                call.sendStatus({\n                    code: constants_1.Status.UNIMPLEMENTED,\n                    details: `Received a second request message for server streaming method ${handler.path}`,\n                    metadata: null\n                });\n                return;\n            }\n            requestMessage = message;\n            call.startRead();\n        },\n        onReceiveHalfClose () {\n            if (!requestMessage) {\n                call.sendStatus({\n                    code: constants_1.Status.UNIMPLEMENTED,\n                    details: `Received no request message for server streaming method ${handler.path}`,\n                    metadata: null\n                });\n                return;\n            }\n            stream = new server_call_1.ServerWritableStreamImpl(handler.path, call, requestMetadata, requestMessage);\n            try {\n                handler.func(stream, respond);\n            } catch (err) {\n                call.sendStatus({\n                    code: constants_1.Status.UNKNOWN,\n                    details: `Server method handler threw error ${err.message}`,\n                    metadata: null\n                });\n            }\n        },\n        onCancel () {\n            if (stream) {\n                stream.cancelled = true;\n                stream.emit(\"cancelled\", \"cancelled\");\n            }\n        }\n    });\n}\nfunction handleClientStreaming(call, handler) {\n    let stream;\n    function respond(err, value, trailer, flags) {\n        if (err) {\n            call.sendStatus((0, server_call_1.serverErrorToStatus)(err, trailer));\n            return;\n        }\n        call.sendMessage(value, ()=>{\n            call.sendStatus({\n                code: constants_1.Status.OK,\n                details: \"OK\",\n                metadata: trailer !== null && trailer !== void 0 ? trailer : null\n            });\n        });\n    }\n    call.start({\n        onReceiveMetadata (metadata) {\n            stream = new server_call_1.ServerDuplexStreamImpl(handler.path, call, metadata);\n            try {\n                handler.func(stream, respond);\n            } catch (err) {\n                call.sendStatus({\n                    code: constants_1.Status.UNKNOWN,\n                    details: `Server method handler threw error ${err.message}`,\n                    metadata: null\n                });\n            }\n        },\n        onReceiveMessage (message) {\n            stream.push(message);\n        },\n        onReceiveHalfClose () {\n            stream.push(null);\n        },\n        onCancel () {\n            if (stream) {\n                stream.cancelled = true;\n                stream.emit(\"cancelled\", \"cancelled\");\n                stream.destroy();\n            }\n        }\n    });\n}\nfunction handleServerStreaming(call, handler) {\n    let stream;\n    let requestMetadata;\n    let requestMessage = null;\n    call.start({\n        onReceiveMetadata (metadata) {\n            requestMetadata = metadata;\n            call.startRead();\n        },\n        onReceiveMessage (message) {\n            if (requestMessage) {\n                call.sendStatus({\n                    code: constants_1.Status.UNIMPLEMENTED,\n                    details: `Received a second request message for server streaming method ${handler.path}`,\n                    metadata: null\n                });\n                return;\n            }\n            requestMessage = message;\n            call.startRead();\n        },\n        onReceiveHalfClose () {\n            if (!requestMessage) {\n                call.sendStatus({\n                    code: constants_1.Status.UNIMPLEMENTED,\n                    details: `Received no request message for server streaming method ${handler.path}`,\n                    metadata: null\n                });\n                return;\n            }\n            stream = new server_call_1.ServerWritableStreamImpl(handler.path, call, requestMetadata, requestMessage);\n            try {\n                handler.func(stream);\n            } catch (err) {\n                call.sendStatus({\n                    code: constants_1.Status.UNKNOWN,\n                    details: `Server method handler threw error ${err.message}`,\n                    metadata: null\n                });\n            }\n        },\n        onCancel () {\n            if (stream) {\n                stream.cancelled = true;\n                stream.emit(\"cancelled\", \"cancelled\");\n                stream.destroy();\n            }\n        }\n    });\n}\nfunction handleBidiStreaming(call, handler) {\n    let stream;\n    call.start({\n        onReceiveMetadata (metadata) {\n            stream = new server_call_1.ServerDuplexStreamImpl(handler.path, call, metadata);\n            try {\n                handler.func(stream);\n            } catch (err) {\n                call.sendStatus({\n                    code: constants_1.Status.UNKNOWN,\n                    details: `Server method handler threw error ${err.message}`,\n                    metadata: null\n                });\n            }\n        },\n        onReceiveMessage (message) {\n            stream.push(message);\n        },\n        onReceiveHalfClose () {\n            stream.push(null);\n        },\n        onCancel () {\n            if (stream) {\n                stream.cancelled = true;\n                stream.emit(\"cancelled\", \"cancelled\");\n                stream.destroy();\n            }\n        }\n    });\n} //# sourceMappingURL=server.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc2VydmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ0QsSUFBSUEsb0JBQW9CLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsaUJBQWlCLElBQUssU0FBVUMsT0FBTyxFQUFFQyxZQUFZLEVBQUVDLEtBQUs7SUFDOUYsSUFBSUMsV0FBV0MsVUFBVUMsTUFBTSxHQUFHO0lBQ2xDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxhQUFhSSxNQUFNLEVBQUVDLElBQUs7UUFDMUNKLFFBQVFDLFdBQVdGLFlBQVksQ0FBQ0ssRUFBRSxDQUFDQyxJQUFJLENBQUNQLFNBQVNFLFNBQVNELFlBQVksQ0FBQ0ssRUFBRSxDQUFDQyxJQUFJLENBQUNQO0lBQ25GO0lBQ0EsT0FBT0csV0FBV0QsUUFBUSxLQUFLO0FBQ25DO0FBQ0EsSUFBSU0sZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFVQyxJQUFJLEVBQUVDLFlBQVksRUFBRUMsVUFBVSxFQUFFQyxTQUFTLEVBQUVYLFlBQVksRUFBRVksaUJBQWlCO0lBQ2xJLFNBQVNDLE9BQU9DLENBQUM7UUFBSSxJQUFJQSxNQUFNLEtBQUssS0FBSyxPQUFPQSxNQUFNLFlBQVksTUFBTSxJQUFJQyxVQUFVO1FBQXNCLE9BQU9EO0lBQUc7SUFDdEgsSUFBSUUsT0FBT0wsVUFBVUssSUFBSSxFQUFFQyxNQUFNRCxTQUFTLFdBQVcsUUFBUUEsU0FBUyxXQUFXLFFBQVE7SUFDekYsSUFBSUUsU0FBUyxDQUFDVCxnQkFBZ0JELE9BQU9HLFNBQVMsQ0FBQyxTQUFTLEdBQUdILE9BQU9BLEtBQUtXLFNBQVMsR0FBRztJQUNuRixJQUFJQyxhQUFhWCxnQkFBaUJTLENBQUFBLFNBQVNHLE9BQU9DLHdCQUF3QixDQUFDSixRQUFRUCxVQUFVWSxJQUFJLElBQUksQ0FBQztJQUN0RyxJQUFJQyxH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Z0wsb0JBQW9CaFosSUFBSSxFQUFFcVYsT0FBTztJQUN0QyxJQUFJcUI7SUFDSjFXLEtBQUsyVixLQUFLLENBQUM7UUFDUDJHLG1CQUFrQjdFLFFBQVE7WUFDdEJmLFNBQVMsSUFBSXJVLGNBQWN3YSxzQkFBc0IsQ0FBQ3hILFFBQVFuSixJQUFJLEVBQUVsTSxNQUFNeVg7WUFDdEUsSUFBSTtnQkFDQXBDLFFBQVFLLElBQUksQ0FBQ2dCO1lBQ2pCLEVBQ0EsT0FBT3RILEtBQUs7Z0JBQ1JwUCxLQUFLMlksVUFBVSxDQUFDO29CQUNaMVUsTUFBTTdCLFlBQVk4QixNQUFNLENBQUN5WSxPQUFPO29CQUNoQ3ZZLFNBQVMsQ0FBQyxrQ0FBa0MsRUFBRWdMLElBQUl0TCxPQUFPLENBQUMsQ0FBQztvQkFDM0QyVCxVQUFVO2dCQUNkO1lBQ0o7UUFDSjtRQUNBK0Usa0JBQWlCMVksT0FBTztZQUNwQjRTLE9BQU9sVixJQUFJLENBQUNzQztRQUNoQjtRQUNBMlk7WUFDSS9GLE9BQU9sVixJQUFJLENBQUM7UUFDaEI7UUFDQW9iO1lBQ0ksSUFBSWxHLFFBQVE7Z0JBQ1JBLE9BQU8zRSxTQUFTLEdBQUc7Z0JBQ25CMkUsT0FBT2pTLElBQUksQ0FBQyxhQUFhO2dCQUN6QmlTLE9BQU8xSSxPQUFPO1lBQ2xCO1FBQ0o7SUFDSjtBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3NlcnZlci5qcz9hODgyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgX19ydW5Jbml0aWFsaXplcnMgPSAodGhpcyAmJiB0aGlzLl9fcnVuSW5pdGlhbGl6ZXJzKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xuICAgIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcbiAgICB9XG4gICAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XG59O1xudmFyIF9fZXNEZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19lc0RlY29yYXRlKSB8fCBmdW5jdGlvbiAoY3RvciwgZGVzY3JpcHRvckluLCBkZWNvcmF0b3JzLCBjb250ZXh0SW4sIGluaXRpYWxpemVycywgZXh0cmFJbml0aWFsaXplcnMpIHtcbiAgICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xuICAgIHZhciB0YXJnZXQgPSAhZGVzY3JpcHRvckluICYmIGN0b3IgPyBjb250ZXh0SW5bXCJzdGF0aWNcIl0gPyBjdG9yIDogY3Rvci5wcm90b3R5cGUgOiBudWxsO1xuICAgIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICAgIHZhciBfLCBkb25lID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XG4gICAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluLmFjY2VzcykgY29udGV4dC5hY2Nlc3NbcF0gPSBjb250ZXh0SW4uYWNjZXNzW3BdO1xuICAgICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGtpbmQgPT09IFwiYWNjZXNzb3JcIikge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5nZXQpKSBkZXNjcmlwdG9yLmdldCA9IF87XG4gICAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgICAgICAgZWxzZSBkZXNjcmlwdG9yW2tleV0gPSBfO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0YXJnZXQpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbnRleHRJbi5uYW1lLCBkZXNjcmlwdG9yKTtcbiAgICBkb25lID0gdHJ1ZTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlcnZlciA9IHZvaWQgMDtcbmNvbnN0IGh0dHAyID0gcmVxdWlyZShcImh0dHAyXCIpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBzZXJ2ZXJfY2FsbF8xID0gcmVxdWlyZShcIi4vc2VydmVyLWNhbGxcIik7XG5jb25zdCBzZXJ2ZXJfY3JlZGVudGlhbHNfMSA9IHJlcXVpcmUoXCIuL3NlcnZlci1jcmVkZW50aWFsc1wiKTtcbmNvbnN0IHJlc29sdmVyXzEgPSByZXF1aXJlKFwiLi9yZXNvbHZlclwiKTtcbmNvbnN0IGxvZ2dpbmcgPSByZXF1aXJlKFwiLi9sb2dnaW5nXCIpO1xuY29uc3Qgc3ViY2hhbm5lbF9hZGRyZXNzXzEgPSByZXF1aXJlKFwiLi9zdWJjaGFubmVsLWFkZHJlc3NcIik7XG5jb25zdCB1cmlfcGFyc2VyXzEgPSByZXF1aXJlKFwiLi91cmktcGFyc2VyXCIpO1xuY29uc3QgY2hhbm5lbHpfMSA9IHJlcXVpcmUoXCIuL2NoYW5uZWx6XCIpO1xuY29uc3Qgc2VydmVyX2ludGVyY2VwdG9yc18xID0gcmVxdWlyZShcIi4vc2VydmVyLWludGVyY2VwdG9yc1wiKTtcbmNvbnN0IFVOTElNSVRFRF9DT05ORUNUSU9OX0FHRV9NUyA9IH4oMSA8PCAzMSk7XG5jb25zdCBLRUVQQUxJVkVfTUFYX1RJTUVfTVMgPSB+KDEgPDwgMzEpO1xuY29uc3QgS0VFUEFMSVZFX1RJTUVPVVRfTVMgPSAyMDAwMDtcbmNvbnN0IE1BWF9DT05ORUNUSU9OX0lETEVfTVMgPSB+KDEgPDwgMzEpO1xuY29uc3QgeyBIVFRQMl9IRUFERVJfUEFUSCB9ID0gaHR0cDIuY29uc3RhbnRzO1xuY29uc3QgVFJBQ0VSX05BTUUgPSAnc2VydmVyJztcbmNvbnN0IGtNYXhBZ2UgPSBCdWZmZXIuZnJvbSgnbWF4X2FnZScpO1xuZnVuY3Rpb24gc2VydmVyQ2FsbFRyYWNlKHRleHQpIHtcbiAgICBsb2dnaW5nLnRyYWNlKGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5ERUJVRywgJ3NlcnZlcl9jYWxsJywgdGV4dCk7XG59XG5mdW5jdGlvbiBub29wKCkgeyB9XG4vKipcbiAqIERlY29yYXRvciB0byB3cmFwIGEgY2xhc3MgbWV0aG9kIHdpdGggdXRpbC5kZXByZWNhdGVcbiAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIG91dHB1dCBpZiB0aGUgZGVwcmVjYXRlZCBtZXRob2QgaXMgY2FsbGVkXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBkZXByZWNhdGUobWVzc2FnZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB1dGlsLmRlcHJlY2F0ZSh0YXJnZXQsIG1lc3NhZ2UpO1xuICAgIH07XG59XG5mdW5jdGlvbiBnZXRVbmltcGxlbWVudGVkU3RhdHVzUmVzcG9uc2UobWV0aG9kTmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5VTklNUExFTUVOVEVELFxuICAgICAgICBkZXRhaWxzOiBgVGhlIHNlcnZlciBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIG1ldGhvZCAke21ldGhvZE5hbWV9YCxcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEhhbmRsZXIoaGFuZGxlclR5cGUsIG1ldGhvZE5hbWUpIHtcbiAgICBjb25zdCB1bmltcGxlbWVudGVkU3RhdHVzUmVzcG9uc2UgPSBnZXRVbmltcGxlbWVudGVkU3RhdHVzUmVzcG9uc2UobWV0aG9kTmFtZSk7XG4gICAgc3dpdGNoIChoYW5kbGVyVHlwZSkge1xuICAgICAgICBjYXNlICd1bmFyeSc6XG4gICAgICAgICAgICByZXR1cm4gKGNhbGwsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodW5pbXBsZW1lbnRlZFN0YXR1c1Jlc3BvbnNlLCBudWxsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ2NsaWVudFN0cmVhbSc6XG4gICAgICAgICAgICByZXR1cm4gKGNhbGwsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodW5pbXBsZW1lbnRlZFN0YXR1c1Jlc3BvbnNlLCBudWxsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ3NlcnZlclN0cmVhbSc6XG4gICAgICAgICAgICByZXR1cm4gKGNhbGwpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsLmVtaXQoJ2Vycm9yJywgdW5pbXBsZW1lbnRlZFN0YXR1c1Jlc3BvbnNlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ2JpZGknOlxuICAgICAgICAgICAgcmV0dXJuIChjYWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbC5lbWl0KCdlcnJvcicsIHVuaW1wbGVtZW50ZWRTdGF0dXNSZXNwb25zZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGhhbmRsZXJUeXBlICR7aGFuZGxlclR5cGV9YCk7XG4gICAgfVxufVxubGV0IFNlcnZlciA9ICgoKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGxldCBfaW5zdGFuY2VFeHRyYUluaXRpYWxpemVycyA9IFtdO1xuICAgIGxldCBfc3RhcnRfZGVjb3JhdG9ycztcbiAgICByZXR1cm4gX2EgPSBjbGFzcyBTZXJ2ZXIge1xuICAgICAgICAgICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xuICAgICAgICAgICAgICAgIHRoaXMuYm91bmRQb3J0cyA9IChfX3J1bkluaXRpYWxpemVycyh0aGlzLCBfaW5zdGFuY2VFeHRyYUluaXRpYWxpemVycyksIG5ldyBNYXAoKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5odHRwMlNlcnZlcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXNzaW9uSWRsZVRpbWVvdXRzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXNzaW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBUaGlzIGZpZWxkIG9ubHkgZXhpc3RzIHRvIGVuc3VyZSB0aGF0IHRoZSBzdGFydCBtZXRob2QgdGhyb3dzIGFuIGVycm9yIGlmXG4gICAgICAgICAgICAgICAgICogaXQgaXMgY2FsbGVkIHR3aWNlLCBhcyBpdCBkaWQgcHJldmlvdXNseS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNodXRkb3duID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXJBZGRyZXNzU3RyaW5nID0gJ251bGwnO1xuICAgICAgICAgICAgICAgIC8vIENoYW5uZWx6IEluZm9cbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWx6RW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge307XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uc1snZ3JwYy5lbmFibGVfY2hhbm5lbHonXSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWx6RW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWx6VHJhY2UgPSBuZXcgY2hhbm5lbHpfMS5DaGFubmVselRyYWNlU3R1YigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxUcmFja2VyID0gbmV3IGNoYW5uZWx6XzEuQ2hhbm5lbHpDYWxsVHJhY2tlclN0dWIoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lckNoaWxkcmVuVHJhY2tlciA9IG5ldyBjaGFubmVsel8xLkNoYW5uZWx6Q2hpbGRyZW5UcmFja2VyU3R1YigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlc3Npb25DaGlsZHJlblRyYWNrZXIgPSBuZXcgY2hhbm5lbHpfMS5DaGFubmVsekNoaWxkcmVuVHJhY2tlclN0dWIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHpUcmFjZSA9IG5ldyBjaGFubmVsel8xLkNoYW5uZWx6VHJhY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsVHJhY2tlciA9IG5ldyBjaGFubmVsel8xLkNoYW5uZWx6Q2FsbFRyYWNrZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lckNoaWxkcmVuVHJhY2tlciA9IG5ldyBjaGFubmVsel8xLkNoYW5uZWx6Q2hpbGRyZW5UcmFja2VyKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Vzc2lvbkNoaWxkcmVuVHJhY2tlciA9IG5ldyBjaGFubmVsel8xLkNoYW5uZWx6Q2hpbGRyZW5UcmFja2VyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHpSZWYgPSAoMCwgY2hhbm5lbHpfMS5yZWdpc3RlckNoYW5uZWx6U2VydmVyKSgnc2VydmVyJywgKCkgPT4gdGhpcy5nZXRDaGFubmVsekluZm8oKSwgdGhpcy5jaGFubmVsekVuYWJsZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHpUcmFjZS5hZGRUcmFjZSgnQ1RfSU5GTycsICdTZXJ2ZXIgY3JlYXRlZCcpO1xuICAgICAgICAgICAgICAgIHRoaXMubWF4Q29ubmVjdGlvbkFnZU1zID1cbiAgICAgICAgICAgICAgICAgICAgKF9iID0gdGhpcy5vcHRpb25zWydncnBjLm1heF9jb25uZWN0aW9uX2FnZV9tcyddKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBVTkxJTUlURURfQ09OTkVDVElPTl9BR0VfTVM7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhDb25uZWN0aW9uQWdlR3JhY2VNcyA9XG4gICAgICAgICAgICAgICAgICAgIChfYyA9IHRoaXMub3B0aW9uc1snZ3JwYy5tYXhfY29ubmVjdGlvbl9hZ2VfZ3JhY2VfbXMnXSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogVU5MSU1JVEVEX0NPTk5FQ1RJT05fQUdFX01TO1xuICAgICAgICAgICAgICAgIHRoaXMua2VlcGFsaXZlVGltZU1zID1cbiAgICAgICAgICAgICAgICAgICAgKF9kID0gdGhpcy5vcHRpb25zWydncnBjLmtlZXBhbGl2ZV90aW1lX21zJ10pICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IEtFRVBBTElWRV9NQVhfVElNRV9NUztcbiAgICAgICAgICAgICAgICB0aGlzLmtlZXBhbGl2ZVRpbWVvdXRNcyA9XG4gICAgICAgICAgICAgICAgICAgIChfZSA9IHRoaXMub3B0aW9uc1snZ3JwYy5rZWVwYWxpdmVfdGltZW91dF9tcyddKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBLRUVQQUxJVkVfVElNRU9VVF9NUztcbiAgICAgICAgICAgICAgICB0aGlzLnNlc3Npb25JZGxlVGltZW91dCA9XG4gICAgICAgICAgICAgICAgICAgIChfZiA9IHRoaXMub3B0aW9uc1snZ3JwYy5tYXhfY29ubmVjdGlvbl9pZGxlX21zJ10pICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IE1BWF9DT05ORUNUSU9OX0lETEVfTVM7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tb25TZXJ2ZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBtYXhTZW5kSGVhZGVyQmxvY2tMZW5ndGg6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKCdncnBjLW5vZGUubWF4X3Nlc3Npb25fbWVtb3J5JyBpbiB0aGlzLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tb25TZXJ2ZXJPcHRpb25zLm1heFNlc3Npb25NZW1vcnkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zWydncnBjLW5vZGUubWF4X3Nlc3Npb25fbWVtb3J5J107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvKiBCeSBkZWZhdWx0LCBzZXQgYSB2ZXJ5IGxhcmdlIG1heCBzZXNzaW9uIG1lbW9yeSBsaW1pdCwgdG8gZWZmZWN0aXZlbHlcbiAgICAgICAgICAgICAgICAgICAgICogZGlzYWJsZSBlbmZvcmNlbWVudCBvZiB0aGUgbGltaXQuIFNvbWUgdGVzdGluZyBpbmRpY2F0ZXMgdGhhdCBOb2RlJ3NcbiAgICAgICAgICAgICAgICAgICAgICogYmVoYXZpb3IgZGVncmFkZXMgYmFkbHkgd2hlbiB0aGlzIGxpbWl0IGlzIHJlYWNoZWQsIHNvIHdlIHNvbHZlIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICogYnkgZGlzYWJsaW5nIHRoZSBjaGVjayBlbnRpcmVseS4gKi9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tb25TZXJ2ZXJPcHRpb25zLm1heFNlc3Npb25NZW1vcnkgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCdncnBjLm1heF9jb25jdXJyZW50X3N0cmVhbXMnIGluIHRoaXMub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1vblNlcnZlck9wdGlvbnMuc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhDb25jdXJyZW50U3RyZWFtczogdGhpcy5vcHRpb25zWydncnBjLm1heF9jb25jdXJyZW50X3N0cmVhbXMnXSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcmNlcHRvcnMgPSAoX2cgPSB0aGlzLm9wdGlvbnMuaW50ZXJjZXB0b3JzKSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYWNlKCdTZXJ2ZXIgY29uc3RydWN0ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdldENoYW5uZWx6SW5mbygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0cmFjZTogdGhpcy5jaGFubmVselRyYWNlLFxuICAgICAgICAgICAgICAgICAgICBjYWxsVHJhY2tlcjogdGhpcy5jYWxsVHJhY2tlcixcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJDaGlsZHJlbjogdGhpcy5saXN0ZW5lckNoaWxkcmVuVHJhY2tlci5nZXRDaGlsZExpc3RzKCksXG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25DaGlsZHJlbjogdGhpcy5zZXNzaW9uQ2hpbGRyZW5UcmFja2VyLmdldENoaWxkTGlzdHMoKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2V0Q2hhbm5lbHpTZXNzaW9uSW5mbyhzZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iLCBfYywgX2Q7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbkluZm8gPSB0aGlzLnNlc3Npb25zLmdldChzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXNzaW9uU29ja2V0ID0gc2Vzc2lvbi5zb2NrZXQ7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3RlQWRkcmVzcyA9IHNlc3Npb25Tb2NrZXQucmVtb3RlQWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICA/ICgwLCBzdWJjaGFubmVsX2FkZHJlc3NfMS5zdHJpbmdUb1N1YmNoYW5uZWxBZGRyZXNzKShzZXNzaW9uU29ja2V0LnJlbW90ZUFkZHJlc3MsIHNlc3Npb25Tb2NrZXQucmVtb3RlUG9ydClcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsQWRkcmVzcyA9IHNlc3Npb25Tb2NrZXQubG9jYWxBZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgID8gKDAsIHN1YmNoYW5uZWxfYWRkcmVzc18xLnN0cmluZ1RvU3ViY2hhbm5lbEFkZHJlc3MpKHNlc3Npb25Tb2NrZXQubG9jYWxBZGRyZXNzLCBzZXNzaW9uU29ja2V0LmxvY2FsUG9ydClcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgIGxldCB0bHNJbmZvO1xuICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uLmVuY3J5cHRlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0bHNTb2NrZXQgPSBzZXNzaW9uU29ja2V0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaXBoZXJJbmZvID0gdGxzU29ja2V0LmdldENpcGhlcigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZXJ0aWZpY2F0ZSA9IHRsc1NvY2tldC5nZXRDZXJ0aWZpY2F0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwZWVyQ2VydGlmaWNhdGUgPSB0bHNTb2NrZXQuZ2V0UGVlckNlcnRpZmljYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRsc0luZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaXBoZXJTdWl0ZVN0YW5kYXJkTmFtZTogKF9iID0gY2lwaGVySW5mby5zdGFuZGFyZE5hbWUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaXBoZXJTdWl0ZU90aGVyTmFtZTogY2lwaGVySW5mby5zdGFuZGFyZE5hbWUgPyBudWxsIDogY2lwaGVySW5mby5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxDZXJ0aWZpY2F0ZTogY2VydGlmaWNhdGUgJiYgJ3JhdycgaW4gY2VydGlmaWNhdGUgPyBjZXJ0aWZpY2F0ZS5yYXcgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlQ2VydGlmaWNhdGU6IHBlZXJDZXJ0aWZpY2F0ZSAmJiAncmF3JyBpbiBwZWVyQ2VydGlmaWNhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHBlZXJDZXJ0aWZpY2F0ZS5yYXdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0bHNJbmZvID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc29ja2V0SW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlQWRkcmVzczogcmVtb3RlQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxBZGRyZXNzOiBsb2NhbEFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5OiB0bHNJbmZvLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVOYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzdHJlYW1zU3RhcnRlZDogc2Vzc2lvbkluZm8uc3RyZWFtVHJhY2tlci5jYWxsc1N0YXJ0ZWQsXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbXNTdWNjZWVkZWQ6IHNlc3Npb25JbmZvLnN0cmVhbVRyYWNrZXIuY2FsbHNTdWNjZWVkZWQsXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbXNGYWlsZWQ6IHNlc3Npb25JbmZvLnN0cmVhbVRyYWNrZXIuY2FsbHNGYWlsZWQsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzU2VudDogc2Vzc2lvbkluZm8ubWVzc2FnZXNTZW50LFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlc1JlY2VpdmVkOiBzZXNzaW9uSW5mby5tZXNzYWdlc1JlY2VpdmVkLFxuICAgICAgICAgICAgICAgICAgICBrZWVwQWxpdmVzU2VudDogc2Vzc2lvbkluZm8ua2VlcEFsaXZlc1NlbnQsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RMb2NhbFN0cmVhbUNyZWF0ZWRUaW1lc3RhbXA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RSZW1vdGVTdHJlYW1DcmVhdGVkVGltZXN0YW1wOiBzZXNzaW9uSW5mby5zdHJlYW1UcmFja2VyLmxhc3RDYWxsU3RhcnRlZFRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1lc3NhZ2VTZW50VGltZXN0YW1wOiBzZXNzaW9uSW5mby5sYXN0TWVzc2FnZVNlbnRUaW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlUmVjZWl2ZWRUaW1lc3RhbXA6IHNlc3Npb25JbmZvLmxhc3RNZXNzYWdlUmVjZWl2ZWRUaW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsRmxvd0NvbnRyb2xXaW5kb3c6IChfYyA9IHNlc3Npb24uc3RhdGUubG9jYWxXaW5kb3dTaXplKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICByZW1vdGVGbG93Q29udHJvbFdpbmRvdzogKF9kID0gc2Vzc2lvbi5zdGF0ZS5yZW1vdGVXaW5kb3dTaXplKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBudWxsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvY2tldEluZm87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZSh0ZXh0KSB7XG4gICAgICAgICAgICAgICAgbG9nZ2luZy50cmFjZShjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuREVCVUcsIFRSQUNFUl9OQU1FLCAnKCcgKyB0aGlzLmNoYW5uZWx6UmVmLmlkICsgJykgJyArIHRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2VlcGFsaXZlVHJhY2UodGV4dCkge1xuICAgICAgICAgICAgICAgIGxvZ2dpbmcudHJhY2UoY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LkRFQlVHLCAna2VlcGFsaXZlJywgJygnICsgdGhpcy5jaGFubmVselJlZi5pZCArICcpICcgKyB0ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZFByb3RvU2VydmljZSgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZC4gVXNlIGFkZFNlcnZpY2UoKSBpbnN0ZWFkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRTZXJ2aWNlKHNlcnZpY2UsIGltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlcnZpY2UgPT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHNlcnZpY2UgIT09ICdvYmplY3QnIHx8XG4gICAgICAgICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uID09PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpbXBsZW1lbnRhdGlvbiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZGRTZXJ2aWNlKCkgcmVxdWlyZXMgdHdvIG9iamVjdHMgYXMgYXJndW1lbnRzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZpY2VLZXlzID0gT2JqZWN0LmtleXMoc2VydmljZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlcnZpY2VLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBhZGQgYW4gZW1wdHkgc2VydmljZSB0byBhIHNlcnZlcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXJ2aWNlS2V5cy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRycyA9IHNlcnZpY2VbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBtZXRob2RUeXBlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cnMucmVxdWVzdFN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzLnJlc3BvbnNlU3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kVHlwZSA9ICdiaWRpJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZFR5cGUgPSAnY2xpZW50U3RyZWFtJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRycy5yZXNwb25zZVN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZFR5cGUgPSAnc2VydmVyU3RyZWFtJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZFR5cGUgPSAndW5hcnknO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbXBsRm4gPSBpbXBsZW1lbnRhdGlvbltuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGltcGw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbXBsRm4gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgYXR0cnMub3JpZ2luYWxOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1wbEZuID0gaW1wbGVtZW50YXRpb25bYXR0cnMub3JpZ2luYWxOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaW1wbEZuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltcGwgPSBpbXBsRm4uYmluZChpbXBsZW1lbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbXBsID0gZ2V0RGVmYXVsdEhhbmRsZXIobWV0aG9kVHlwZSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHRoaXMucmVnaXN0ZXIoYXR0cnMucGF0aCwgaW1wbCwgYXR0cnMucmVzcG9uc2VTZXJpYWxpemUsIGF0dHJzLnJlcXVlc3REZXNlcmlhbGl6ZSwgbWV0aG9kVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNZXRob2QgaGFuZGxlciBmb3IgJHthdHRycy5wYXRofSBhbHJlYWR5IHByb3ZpZGVkLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1vdmVTZXJ2aWNlKHNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VydmljZSA9PT0gbnVsbCB8fCB0eXBlb2Ygc2VydmljZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmVTZXJ2aWNlKCkgcmVxdWlyZXMgb2JqZWN0IGFzIGFyZ3VtZW50Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZpY2VLZXlzID0gT2JqZWN0LmtleXMoc2VydmljZSk7XG4gICAgICAgICAgICAgICAgc2VydmljZUtleXMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cnMgPSBzZXJ2aWNlW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVucmVnaXN0ZXIoYXR0cnMucGF0aCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiaW5kKHBvcnQsIGNyZWRzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQuIFVzZSBiaW5kQXN5bmMoKSBpbnN0ZWFkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgQVBJIGlzIGV4cGVyaW1lbnRhbCwgc28gQVBJIHN0YWJpbGl0eSBpcyBub3QgZ3VhcmFudGVlZCBhY3Jvc3MgbWlub3IgdmVyc2lvbnMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gYm91bmRBZGRyZXNzXG4gICAgICAgICAgICAgKiBAcmV0dXJuc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBleHBlcmltZW50YWxSZWdpc3Rlckxpc3RlbmVyVG9DaGFubmVseihib3VuZEFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIGNoYW5uZWx6XzEucmVnaXN0ZXJDaGFubmVselNvY2tldCkoKDAsIHN1YmNoYW5uZWxfYWRkcmVzc18xLnN1YmNoYW5uZWxBZGRyZXNzVG9TdHJpbmcpKGJvdW5kQWRkcmVzcyksICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsQWRkcmVzczogYm91bmRBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlQWRkcmVzczogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlTmFtZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbXNTdGFydGVkOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtc1N1Y2NlZWRlZDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbXNGYWlsZWQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlc1NlbnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlc1JlY2VpdmVkOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAga2VlcEFsaXZlc1NlbnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0TG9jYWxTdHJlYW1DcmVhdGVkVGltZXN0YW1wOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFJlbW90ZVN0cmVhbUNyZWF0ZWRUaW1lc3RhbXA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWVzc2FnZVNlbnRUaW1lc3RhbXA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0TWVzc2FnZVJlY2VpdmVkVGltZXN0YW1wOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxGbG93Q29udHJvbFdpbmRvdzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZUZsb3dDb250cm9sV2luZG93OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sIHRoaXMuY2hhbm5lbHpFbmFibGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4cGVyaW1lbnRhbFVucmVnaXN0ZXJMaXN0ZW5lckZyb21DaGFubmVseihjaGFubmVselJlZikge1xuICAgICAgICAgICAgICAgICgwLCBjaGFubmVsel8xLnVucmVnaXN0ZXJDaGFubmVselJlZikoY2hhbm5lbHpSZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3JlYXRlSHR0cDJTZXJ2ZXIoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgaHR0cDJTZXJ2ZXI7XG4gICAgICAgICAgICAgICAgaWYgKGNyZWRlbnRpYWxzLl9pc1NlY3VyZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnN0cnVjdG9yT3B0aW9ucyA9IGNyZWRlbnRpYWxzLl9nZXRDb25zdHJ1Y3Rvck9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dE9wdGlvbnMgPSBjcmVkZW50aWFscy5fZ2V0U2VjdXJlQ29udGV4dE9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJlU2VydmVyT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29tbW9uU2VydmVyT3B0aW9ucyksIGNvbnN0cnVjdG9yT3B0aW9ucyksIGNvbnRleHRPcHRpb25zKSwgeyBlbmFibGVUcmFjZTogdGhpcy5vcHRpb25zWydncnBjLW5vZGUudGxzX2VuYWJsZV90cmFjZSddID09PSAxIH0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYXJlQ3JlZGVudGlhbHNWYWxpZCA9IGNvbnRleHRPcHRpb25zICE9PSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWNlKCdJbml0aWFsIGNyZWRlbnRpYWxzIHZhbGlkOiAnICsgYXJlQ3JlZGVudGlhbHNWYWxpZCk7XG4gICAgICAgICAgICAgICAgICAgIGh0dHAyU2VydmVyID0gaHR0cDIuY3JlYXRlU2VjdXJlU2VydmVyKHNlY3VyZVNlcnZlck9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBodHRwMlNlcnZlci5wcmVwZW5kTGlzdGVuZXIoJ2Nvbm5lY3Rpb24nLCAoc29ja2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZUNyZWRlbnRpYWxzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWNlKCdEcm9wcGVkIGNvbm5lY3Rpb24gZnJvbSAnICsgSlNPTi5zdHJpbmdpZnkoc29ja2V0LmFkZHJlc3MoKSkgKyAnIGR1ZSB0byB1bmxvYWRlZCBjcmVkZW50aWFscycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBodHRwMlNlcnZlci5vbignc2VjdXJlQ29ubmVjdGlvbicsIChzb2NrZXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFRoZXNlIGVycm9ycyBuZWVkIHRvIGJlIGhhbmRsZWQgYnkgdGhlIHVzZXIgb2YgSHR0cDJTZWN1cmVTZXJ2ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBhY2NvcmRpbmcgdG8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy8zNTgyNCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0Lm9uKCdlcnJvcicsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFjZSgnQW4gaW5jb21pbmcgVExTIGNvbm5lY3Rpb24gY2xvc2VkIHdpdGggZXJyb3I6ICcgKyBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjcmVkc1dhdGNoZXIgPSBvcHRpb25zID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VjdXJlU2VydmVyID0gaHR0cDJTZXJ2ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJlU2VydmVyLnNldFNlY3VyZUNvbnRleHQob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dpbmcubG9nKGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5FUlJPUiwgJ0ZhaWxlZCB0byBzZXQgc2VjdXJlIGNvbnRleHQgd2l0aCBlcnJvciAnICsgZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJlQ3JlZGVudGlhbHNWYWxpZCA9IG9wdGlvbnMgIT09IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWNlKCdQb3N0LXVwZGF0ZSBjcmVkZW50aWFscyB2YWxpZDogJyArIGFyZUNyZWRlbnRpYWxzVmFsaWQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFscy5fYWRkV2F0Y2hlcihjcmVkc1dhdGNoZXIpO1xuICAgICAgICAgICAgICAgICAgICBodHRwMlNlcnZlci5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFscy5fcmVtb3ZlV2F0Y2hlcihjcmVkc1dhdGNoZXIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGh0dHAyU2VydmVyID0gaHR0cDIuY3JlYXRlU2VydmVyKHRoaXMuY29tbW9uU2VydmVyT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGh0dHAyU2VydmVyLnNldFRpbWVvdXQoMCwgbm9vcCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBIYW5kbGVycyhodHRwMlNlcnZlciwgY3JlZGVudGlhbHMuX2dldEludGVyY2VwdG9ycygpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaHR0cDJTZXJ2ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiaW5kT25lQWRkcmVzcyhhZGRyZXNzLCBib3VuZFBvcnRPYmplY3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYWNlKCdBdHRlbXB0aW5nIHRvIGJpbmQgJyArICgwLCBzdWJjaGFubmVsX2FkZHJlc3NfMS5zdWJjaGFubmVsQWRkcmVzc1RvU3RyaW5nKShhZGRyZXNzKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaHR0cDJTZXJ2ZXIgPSB0aGlzLmNyZWF0ZUh0dHAyU2VydmVyKGJvdW5kUG9ydE9iamVjdC5jcmVkZW50aWFscyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhY2UoJ0ZhaWxlZCB0byBiaW5kICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBzdWJjaGFubmVsX2FkZHJlc3NfMS5zdWJjaGFubmVsQWRkcmVzc1RvU3RyaW5nKShhZGRyZXNzKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB3aXRoIGVycm9yICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6ICdwb3J0JyBpbiBhZGRyZXNzID8gYWRkcmVzcy5wb3J0IDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaHR0cDJTZXJ2ZXIub25jZSgnZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgaHR0cDJTZXJ2ZXIubGlzdGVuKGFkZHJlc3MsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvdW5kQWRkcmVzcyA9IGh0dHAyU2VydmVyLmFkZHJlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBib3VuZFN1YmNoYW5uZWxBZGRyZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBib3VuZEFkZHJlc3MgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRTdWJjaGFubmVsQWRkcmVzcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogYm91bmRBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3VuZFN1YmNoYW5uZWxBZGRyZXNzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0OiBib3VuZEFkZHJlc3MuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9ydDogYm91bmRBZGRyZXNzLnBvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5uZWx6UmVmID0gdGhpcy5leHBlcmltZW50YWxSZWdpc3Rlckxpc3RlbmVyVG9DaGFubmVseihib3VuZFN1YmNoYW5uZWxBZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJDaGlsZHJlblRyYWNrZXIucmVmQ2hpbGQoY2hhbm5lbHpSZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5odHRwMlNlcnZlcnMuc2V0KGh0dHAyU2VydmVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHpSZWY6IGNoYW5uZWx6UmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25zOiBuZXcgU2V0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3duc0NoYW5uZWx6UmVmOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kUG9ydE9iamVjdC5saXN0ZW5pbmdTZXJ2ZXJzLmFkZChodHRwMlNlcnZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWNlKCdTdWNjZXNzZnVsbHkgYm91bmQgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIHN1YmNoYW5uZWxfYWRkcmVzc18xLnN1YmNoYW5uZWxBZGRyZXNzVG9TdHJpbmcpKGJvdW5kU3ViY2hhbm5lbEFkZHJlc3MpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6ICdwb3J0JyBpbiBib3VuZFN1YmNoYW5uZWxBZGRyZXNzID8gYm91bmRTdWJjaGFubmVsQWRkcmVzcy5wb3J0IDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHR0cDJTZXJ2ZXIucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXN5bmMgYmluZE1hbnlQb3J0cyhhZGRyZXNzTGlzdCwgYm91bmRQb3J0T2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGFkZHJlc3NMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3J0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCgwLCBzdWJjaGFubmVsX2FkZHJlc3NfMS5pc1RjcFN1YmNoYW5uZWxBZGRyZXNzKShhZGRyZXNzTGlzdFswXSkgJiYgYWRkcmVzc0xpc3RbMF0ucG9ydCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvKiBJZiBiaW5kaW5nIHRvIHBvcnQgMCwgZmlyc3QgdHJ5IHRvIGJpbmQgdGhlIGZpcnN0IGFkZHJlc3MsIHRoZW4gYmluZFxuICAgICAgICAgICAgICAgICAgICAgKiB0aGUgcmVzdCBvZiB0aGUgYWRkcmVzcyBsaXN0IHRvIHRoZSBzcGVjaWZpYyBwb3J0IHRoYXQgaXQgYmluZHMuICovXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0QWRkcmVzc1Jlc3VsdCA9IGF3YWl0IHRoaXMuYmluZE9uZUFkZHJlc3MoYWRkcmVzc0xpc3RbMF0sIGJvdW5kUG9ydE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdEFkZHJlc3NSZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIHRoZSBmaXJzdCBhZGRyZXNzIGZhaWxzIHRvIGJpbmQsIHRyeSB0aGUgc2FtZSBvcGVyYXRpb24gc3RhcnRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIGZyb20gdGhlIHNlY29uZCBpdGVtIGluIHRoZSBsaXN0LiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdEFkZHJlc3NSZXN1bHQgPSBhd2FpdCB0aGlzLmJpbmRNYW55UG9ydHMoYWRkcmVzc0xpc3Quc2xpY2UoMSksIGJvdW5kUG9ydE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXN0QWRkcmVzc1Jlc3VsdCksIHsgZXJyb3JzOiBbZmlyc3RBZGRyZXNzUmVzdWx0LmVycm9yLCAuLi5yZXN0QWRkcmVzc1Jlc3VsdC5lcnJvcnNdIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdEFkZHJlc3NlcyA9IGFkZHJlc3NMaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChhZGRyZXNzID0+ICgwLCBzdWJjaGFubmVsX2FkZHJlc3NfMS5pc1RjcFN1YmNoYW5uZWxBZGRyZXNzKShhZGRyZXNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8geyBob3N0OiBhZGRyZXNzLmhvc3QsIHBvcnQ6IGZpcnN0QWRkcmVzc1Jlc3VsdC5wb3J0IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdEFkZHJlc3NSZXN1bHQgPSBhd2FpdCBQcm9taXNlLmFsbChyZXN0QWRkcmVzc2VzLm1hcChhZGRyZXNzID0+IHRoaXMuYmluZE9uZUFkZHJlc3MoYWRkcmVzcywgYm91bmRQb3J0T2JqZWN0KSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxsUmVzdWx0cyA9IFtmaXJzdEFkZHJlc3NSZXN1bHQsIC4uLnJlc3RBZGRyZXNzUmVzdWx0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IGFsbFJlc3VsdHMuZmlsdGVyKHJlc3VsdCA9PiByZXN1bHQuZXJyb3IgPT09IHVuZGVmaW5lZCkubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6IGZpcnN0QWRkcmVzc1Jlc3VsdC5wb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yczogYWxsUmVzdWx0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHJlc3VsdCA9PiByZXN1bHQuZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAocmVzdWx0ID0+IHJlc3VsdC5lcnJvciksXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxSZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoYWRkcmVzc0xpc3QubWFwKGFkZHJlc3MgPT4gdGhpcy5iaW5kT25lQWRkcmVzcyhhZGRyZXNzLCBib3VuZFBvcnRPYmplY3QpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogYWxsUmVzdWx0cy5maWx0ZXIocmVzdWx0ID0+IHJlc3VsdC5lcnJvciA9PT0gdW5kZWZpbmVkKS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3J0OiBhbGxSZXN1bHRzWzBdLnBvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IGFsbFJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHJlc3VsdCA9PiByZXN1bHQuZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChyZXN1bHQgPT4gcmVzdWx0LmVycm9yKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3luYyBiaW5kQWRkcmVzc0xpc3QoYWRkcmVzc0xpc3QsIGJvdW5kUG9ydE9iamVjdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpbmRSZXN1bHQgPSBhd2FpdCB0aGlzLmJpbmRNYW55UG9ydHMoYWRkcmVzc0xpc3QsIGJvdW5kUG9ydE9iamVjdCk7XG4gICAgICAgICAgICAgICAgaWYgKGJpbmRSZXN1bHQuY291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiaW5kUmVzdWx0LmNvdW50IDwgYWRkcmVzc0xpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnaW5nLmxvZyhjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuSU5GTywgYFdBUk5JTkcgT25seSAke2JpbmRSZXN1bHQuY291bnR9IGFkZHJlc3NlcyBhZGRlZCBvdXQgb2YgdG90YWwgJHthZGRyZXNzTGlzdC5sZW5ndGh9IHJlc29sdmVkYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJpbmRSZXN1bHQucG9ydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yU3RyaW5nID0gYE5vIGFkZHJlc3MgYWRkZWQgb3V0IG9mIHRvdGFsICR7YWRkcmVzc0xpc3QubGVuZ3RofSByZXNvbHZlZGA7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dpbmcubG9nKGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5FUlJPUiwgZXJyb3JTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZXJyb3JTdHJpbmd9IGVycm9yczogWyR7YmluZFJlc3VsdC5lcnJvcnMuam9pbignLCcpfV1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlUG9ydChwb3J0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXJMaXN0ZW5lciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU3VjY2Vzc2Z1bFJlc29sdXRpb246IChlbmRwb2ludExpc3QsIHNlcnZpY2VDb25maWcsIHNlcnZpY2VDb25maWdFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCBvbmUgcmVzb2x1dGlvbiByZXN1bHQuIERpc2NhcmQgYWxsIGZ1dHVyZSByZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZXJMaXN0ZW5lci5vblN1Y2Nlc3NmdWxSZXNvbHV0aW9uID0gKCkgPT4geyB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZHJlc3NMaXN0ID0gW10uY29uY2F0KC4uLmVuZHBvaW50TGlzdC5tYXAoZW5kcG9pbnQgPT4gZW5kcG9pbnQuYWRkcmVzc2VzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZHJlc3NMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBObyBhZGRyZXNzZXMgcmVzb2x2ZWQgZm9yIHBvcnQgJHtwb3J0fWApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFkZHJlc3NMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yOiBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihlcnJvci5kZXRhaWxzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlciA9ICgwLCByZXNvbHZlcl8xLmNyZWF0ZVJlc29sdmVyKShwb3J0LCByZXNvbHZlckxpc3RlbmVyLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlci51cGRhdGVSZXNvbHV0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3luYyBiaW5kUG9ydChwb3J0LCBib3VuZFBvcnRPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhZGRyZXNzTGlzdCA9IGF3YWl0IHRoaXMucmVzb2x2ZVBvcnQocG9ydCk7XG4gICAgICAgICAgICAgICAgaWYgKGJvdW5kUG9ydE9iamVjdC5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZVVuYmluZChib3VuZFBvcnRPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRBc3luYyBvcGVyYXRpb24gY2FuY2VsbGVkIGJ5IHVuYmluZCBjYWxsJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcnROdW1iZXIgPSBhd2FpdCB0aGlzLmJpbmRBZGRyZXNzTGlzdChhZGRyZXNzTGlzdCwgYm91bmRQb3J0T2JqZWN0KTtcbiAgICAgICAgICAgICAgICBpZiAoYm91bmRQb3J0T2JqZWN0LmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlVW5iaW5kKGJvdW5kUG9ydE9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmluZEFzeW5jIG9wZXJhdGlvbiBjYW5jZWxsZWQgYnkgdW5iaW5kIGNhbGwnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvcnROdW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub3JtYWxpemVQb3J0KHBvcnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbml0aWFsUG9ydFVyaSA9ICgwLCB1cmlfcGFyc2VyXzEucGFyc2VVcmkpKHBvcnQpO1xuICAgICAgICAgICAgICAgIGlmIChpbml0aWFsUG9ydFVyaSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBwYXJzZSBwb3J0IFwiJHtwb3J0fVwiYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcnRVcmkgPSAoMCwgcmVzb2x2ZXJfMS5tYXBVcmlEZWZhdWx0U2NoZW1lKShpbml0aWFsUG9ydFVyaSk7XG4gICAgICAgICAgICAgICAgaWYgKHBvcnRVcmkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZ2V0IGEgZGVmYXVsdCBzY2hlbWUgZm9yIHBvcnQgXCIke3BvcnR9XCJgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvcnRVcmk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiaW5kQXN5bmMocG9ydCwgY3JlZHMsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2h1dGRvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiaW5kQXN5bmMgY2FsbGVkIGFmdGVyIHNodXRkb3duJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcG9ydCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncG9ydCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjcmVkcyA9PT0gbnVsbCB8fCAhKGNyZWRzIGluc3RhbmNlb2Ygc2VydmVyX2NyZWRlbnRpYWxzXzEuU2VydmVyQ3JlZGVudGlhbHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NyZWRzIG11c3QgYmUgYSBTZXJ2ZXJDcmVkZW50aWFscyBvYmplY3QnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy50cmFjZSgnYmluZEFzeW5jIHBvcnQ9JyArIHBvcnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvcnRVcmkgPSB0aGlzLm5vcm1hbGl6ZVBvcnQocG9ydCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVmZXJyZWRDYWxsYmFjayA9IChlcnJvciwgcG9ydCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGNhbGxiYWNrKGVycm9yLCBwb3J0KSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvKiBGaXJzdCwgaWYgdGhpcyBwb3J0IGlzIGFscmVhZHkgYm91bmQgb3IgdGhhdCBiaW5kIG9wZXJhdGlvbiBpcyBpblxuICAgICAgICAgICAgICAgICAqIHByb2dyZXNzLCB1c2UgdGhhdCByZXN1bHQuICovXG4gICAgICAgICAgICAgICAgbGV0IGJvdW5kUG9ydE9iamVjdCA9IHRoaXMuYm91bmRQb3J0cy5nZXQoKDAsIHVyaV9wYXJzZXJfMS51cmlUb1N0cmluZykocG9ydFVyaSkpO1xuICAgICAgICAgICAgICAgIGlmIChib3VuZFBvcnRPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjcmVkcy5fZXF1YWxzKGJvdW5kUG9ydE9iamVjdC5jcmVkZW50aWFscykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkQ2FsbGJhY2sobmV3IEVycm9yKGAke3BvcnR9IGFscmVhZHkgYm91bmQgd2l0aCBpbmNvbXBhdGlibGUgY3JlZGVudGlhbHNgKSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhhdCBvcGVyYXRpb24gaGFzIHByZXZpb3VzbHkgYmVlbiBjYW5jZWxsZWQgYnkgYW4gdW5iaW5kIGNhbGwsXG4gICAgICAgICAgICAgICAgICAgICAqIHVuY2FuY2VsIGl0LiAqL1xuICAgICAgICAgICAgICAgICAgICBib3VuZFBvcnRPYmplY3QuY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib3VuZFBvcnRPYmplY3QuY29tcGxldGlvblByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kUG9ydE9iamVjdC5jb21wbGV0aW9uUHJvbWlzZS50aGVuKHBvcnROdW0gPT4gY2FsbGJhY2sobnVsbCwgcG9ydE51bSksIGVycm9yID0+IGNhbGxiYWNrKGVycm9yLCAwKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZENhbGxiYWNrKG51bGwsIGJvdW5kUG9ydE9iamVjdC5wb3J0TnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJvdW5kUG9ydE9iamVjdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgbWFwS2V5OiAoMCwgdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKShwb3J0VXJpKSxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxVcmk6IHBvcnRVcmksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRpb25Qcm9taXNlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwb3J0TnVtYmVyOiAwLFxuICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogY3JlZHMsXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmluZ1NlcnZlcnM6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwbGl0UG9ydCA9ICgwLCB1cmlfcGFyc2VyXzEuc3BsaXRIb3N0UG9ydCkocG9ydFVyaS5wYXRoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wbGV0aW9uUHJvbWlzZSA9IHRoaXMuYmluZFBvcnQocG9ydFVyaSwgYm91bmRQb3J0T2JqZWN0KTtcbiAgICAgICAgICAgICAgICBib3VuZFBvcnRPYmplY3QuY29tcGxldGlvblByb21pc2UgPSBjb21wbGV0aW9uUHJvbWlzZTtcbiAgICAgICAgICAgICAgICAvKiBJZiB0aGUgcG9ydCBudW1iZXIgaXMgMCwgZGVmZXIgcG9wdWxhdGluZyB0aGUgbWFwIGVudHJ5IHVudGlsIGFmdGVyIHRoZVxuICAgICAgICAgICAgICAgICAqIGJpbmQgb3BlcmF0aW9uIGNvbXBsZXRlcyBhbmQgd2UgaGF2ZSBhIHNwZWNpZmljIHBvcnQgbnVtYmVyLiBPdGhlcndpc2UsXG4gICAgICAgICAgICAgICAgICogcG9wdWxhdGUgaXQgaW1tZWRpYXRlbHkuICovXG4gICAgICAgICAgICAgICAgaWYgKChzcGxpdFBvcnQgPT09IG51bGwgfHwgc3BsaXRQb3J0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzcGxpdFBvcnQucG9ydCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGlvblByb21pc2UudGhlbihwb3J0TnVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbmFsVXJpID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjaGVtZTogcG9ydFVyaS5zY2hlbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXR5OiBwb3J0VXJpLmF1dGhvcml0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiAoMCwgdXJpX3BhcnNlcl8xLmNvbWJpbmVIb3N0UG9ydCkoeyBob3N0OiBzcGxpdFBvcnQuaG9zdCwgcG9ydDogcG9ydE51bSB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZFBvcnRPYmplY3QubWFwS2V5ID0gKDAsIHVyaV9wYXJzZXJfMS51cmlUb1N0cmluZykoZmluYWxVcmkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRQb3J0T2JqZWN0LmNvbXBsZXRpb25Qcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kUG9ydE9iamVjdC5wb3J0TnVtYmVyID0gcG9ydE51bTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm91bmRQb3J0cy5zZXQoYm91bmRQb3J0T2JqZWN0Lm1hcEtleSwgYm91bmRQb3J0T2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHBvcnROdW0pO1xuICAgICAgICAgICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib3VuZFBvcnRzLnNldChib3VuZFBvcnRPYmplY3QubWFwS2V5LCBib3VuZFBvcnRPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9uUHJvbWlzZS50aGVuKHBvcnROdW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRQb3J0T2JqZWN0LmNvbXBsZXRpb25Qcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kUG9ydE9iamVjdC5wb3J0TnVtYmVyID0gcG9ydE51bTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHBvcnROdW0pO1xuICAgICAgICAgICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlZ2lzdGVySW5qZWN0b3JUb0NoYW5uZWx6KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgY2hhbm5lbHpfMS5yZWdpc3RlckNoYW5uZWx6U29ja2V0KSgnaW5qZWN0b3InLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbEFkZHJlc3M6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVBZGRyZXNzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVOYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtc1N0YXJ0ZWQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1zU3VjY2VlZGVkOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtc0ZhaWxlZDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzU2VudDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzUmVjZWl2ZWQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBrZWVwQWxpdmVzU2VudDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RMb2NhbFN0cmVhbUNyZWF0ZWRUaW1lc3RhbXA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0UmVtb3RlU3RyZWFtQ3JlYXRlZFRpbWVzdGFtcDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlU2VudFRpbWVzdGFtcDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNZXNzYWdlUmVjZWl2ZWRUaW1lc3RhbXA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbEZsb3dDb250cm9sV2luZG93OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlRmxvd0NvbnRyb2xXaW5kb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSwgdGhpcy5jaGFubmVsekVuYWJsZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGlzIEFQSSBpcyBleHBlcmltZW50YWwsIHNvIEFQSSBzdGFiaWxpdHkgaXMgbm90IGd1YXJhbnRlZWQgYWNyb3NzIG1pbm9yIHZlcnNpb25zLlxuICAgICAgICAgICAgICogQHBhcmFtIGNyZWRlbnRpYWxzXG4gICAgICAgICAgICAgKiBAcGFyYW0gY2hhbm5lbHpSZWZcbiAgICAgICAgICAgICAqIEByZXR1cm5zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGV4cGVyaW1lbnRhbENyZWF0ZUNvbm5lY3Rpb25JbmplY3RvcldpdGhDaGFubmVselJlZihjcmVkZW50aWFscywgY2hhbm5lbHpSZWYsIG93bnNDaGFubmVselJlZiA9IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNyZWRlbnRpYWxzID09PSBudWxsIHx8ICEoY3JlZGVudGlhbHMgaW5zdGFuY2VvZiBzZXJ2ZXJfY3JlZGVudGlhbHNfMS5TZXJ2ZXJDcmVkZW50aWFscykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY3JlZHMgbXVzdCBiZSBhIFNlcnZlckNyZWRlbnRpYWxzIG9iamVjdCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFubmVsekVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lckNoaWxkcmVuVHJhY2tlci5yZWZDaGlsZChjaGFubmVselJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZlciA9IHRoaXMuY3JlYXRlSHR0cDJTZXJ2ZXIoY3JlZGVudGlhbHMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb25zU2V0ID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuaHR0cDJTZXJ2ZXJzLnNldChzZXJ2ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHpSZWY6IGNoYW5uZWx6UmVmLFxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uczogc2Vzc2lvbnNTZXQsXG4gICAgICAgICAgICAgICAgICAgIG93bnNDaGFubmVselJlZlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGluamVjdENvbm5lY3Rpb246IChjb25uZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXIuZW1pdCgnY29ubmVjdGlvbicsIGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkcmFpbjogKGdyYWNlVGltZU1zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2IsIF9jO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzZXNzaW9uIG9mIHNlc3Npb25zU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZVNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2MgPSAoX2IgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNlc3Npb24gb2Ygc2Vzc2lvbnNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5kZXN0cm95KGh0dHAyLmNvbnN0YW50cy5OR0hUVFAyX0NBTkNFTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZ3JhY2VUaW1lTXMpKS51bnJlZikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoX2IpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkZXN0cm95OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlU2VydmVyKHNlcnZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNlc3Npb24gb2Ygc2Vzc2lvbnNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlU2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjcmVhdGVDb25uZWN0aW9uSW5qZWN0b3IoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3JlZGVudGlhbHMgPT09IG51bGwgfHwgIShjcmVkZW50aWFscyBpbnN0YW5jZW9mIHNlcnZlcl9jcmVkZW50aWFsc18xLlNlcnZlckNyZWRlbnRpYWxzKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjcmVkcyBtdXN0IGJlIGEgU2VydmVyQ3JlZGVudGlhbHMgb2JqZWN0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5uZWx6UmVmID0gdGhpcy5yZWdpc3RlckluamVjdG9yVG9DaGFubmVseigpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cGVyaW1lbnRhbENyZWF0ZUNvbm5lY3Rpb25JbmplY3RvcldpdGhDaGFubmVselJlZihjcmVkZW50aWFscywgY2hhbm5lbHpSZWYsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xvc2VTZXJ2ZXIoc2VydmVyLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhY2UoJ0Nsb3Npbmcgc2VydmVyIHdpdGggYWRkcmVzcyAnICsgSlNPTi5zdHJpbmdpZnkoc2VydmVyLmFkZHJlc3MoKSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZlckluZm8gPSB0aGlzLmh0dHAyU2VydmVycy5nZXQoc2VydmVyKTtcbiAgICAgICAgICAgICAgICBzZXJ2ZXIuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VydmVySW5mbyAmJiBzZXJ2ZXJJbmZvLm93bnNDaGFubmVselJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lckNoaWxkcmVuVHJhY2tlci51bnJlZkNoaWxkKHNlcnZlckluZm8uY2hhbm5lbHpSZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGNoYW5uZWx6XzEudW5yZWdpc3RlckNoYW5uZWx6UmVmKShzZXJ2ZXJJbmZvLmNoYW5uZWx6UmVmKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmh0dHAyU2VydmVycy5kZWxldGUoc2VydmVyKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbG9zZVNlc3Npb24oc2Vzc2lvbiwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgX2I7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFjZSgnQ2xvc2luZyBzZXNzaW9uIGluaXRpYXRlZCBieSAnICsgKChfYiA9IHNlc3Npb24uc29ja2V0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVtb3RlQWRkcmVzcykpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb25JbmZvID0gdGhpcy5zZXNzaW9ucy5nZXQoc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgY29uc3QgY2xvc2VDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25JbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlc3Npb25DaGlsZHJlblRyYWNrZXIudW5yZWZDaGlsZChzZXNzaW9uSW5mby5yZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGNoYW5uZWx6XzEudW5yZWdpc3RlckNoYW5uZWx6UmVmKShzZXNzaW9uSW5mby5yZWYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHNlc3Npb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKGNsb3NlQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5jbG9zZShjbG9zZUNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wbGV0ZVVuYmluZChib3VuZFBvcnRPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiBib3VuZFBvcnRPYmplY3QubGlzdGVuaW5nU2VydmVycykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXJ2ZXJJbmZvID0gdGhpcy5odHRwMlNlcnZlcnMuZ2V0KHNlcnZlcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VTZXJ2ZXIoc2VydmVyLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZFBvcnRPYmplY3QubGlzdGVuaW5nU2VydmVycy5kZWxldGUoc2VydmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXJ2ZXJJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNlc3Npb24gb2Ygc2VydmVySW5mby5zZXNzaW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VTZXNzaW9uKHNlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuYm91bmRQb3J0cy5kZWxldGUoYm91bmRQb3J0T2JqZWN0Lm1hcEtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVuYmluZCBhIHByZXZpb3VzbHkgYm91bmQgcG9ydCwgb3IgY2FuY2VsIGFuIGluLXByb2dyZXNzIGJpbmRBc3luY1xuICAgICAgICAgICAgICogb3BlcmF0aW9uLiBJZiBwb3J0IDAgd2FzIGJvdW5kLCBvbmx5IHRoZSBhY3R1YWwgYm91bmQgcG9ydCBjYW4gYmVcbiAgICAgICAgICAgICAqIHVuYm91bmQuIEZvciBleGFtcGxlLCBpZiBiaW5kQXN5bmMgd2FzIGNhbGxlZCB3aXRoIFwibG9jYWxob3N0OjBcIiBhbmQgdGhlXG4gICAgICAgICAgICAgKiBib3VuZCBwb3J0IHJlc3VsdCB3YXMgNTQzMjEsIGl0IGNhbiBiZSB1bmJvdW5kIGFzIFwibG9jYWxob3N0OjU0MzIxXCIuXG4gICAgICAgICAgICAgKiBAcGFyYW0gcG9ydFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB1bmJpbmQocG9ydCkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhY2UoJ3VuYmluZCBwb3J0PScgKyBwb3J0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3J0VXJpID0gdGhpcy5ub3JtYWxpemVQb3J0KHBvcnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwbGl0UG9ydCA9ICgwLCB1cmlfcGFyc2VyXzEuc3BsaXRIb3N0UG9ydCkocG9ydFVyaS5wYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAoKHNwbGl0UG9ydCA9PT0gbnVsbCB8fCBzcGxpdFBvcnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNwbGl0UG9ydC5wb3J0KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCB1bmJpbmQgcG9ydCAwJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGJvdW5kUG9ydE9iamVjdCA9IHRoaXMuYm91bmRQb3J0cy5nZXQoKDAsIHVyaV9wYXJzZXJfMS51cmlUb1N0cmluZykocG9ydFVyaSkpO1xuICAgICAgICAgICAgICAgIGlmIChib3VuZFBvcnRPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFjZSgndW5iaW5kaW5nICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRQb3J0T2JqZWN0Lm1hcEtleSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnIG9yaWdpbmFsbHkgYm91bmQgYXMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKShib3VuZFBvcnRPYmplY3Qub3JpZ2luYWxVcmkpKTtcbiAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhlIGJpbmQgb3BlcmF0aW9uIGlzIHBlbmRpbmcsIHRoZSBjYW5jZWxsZWQgZmxhZyB3aWxsIHRyaWdnZXJcbiAgICAgICAgICAgICAgICAgICAgICogdGhlIHVuYmluZCBvcGVyYXRpb24gbGF0ZXIuICovXG4gICAgICAgICAgICAgICAgICAgIGlmIChib3VuZFBvcnRPYmplY3QuY29tcGxldGlvblByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kUG9ydE9iamVjdC5jYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZVVuYmluZChib3VuZFBvcnRPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHcmFjZWZ1bGx5IGNsb3NlIGFsbCBjb25uZWN0aW9ucyBhc3NvY2lhdGVkIHdpdGggYSBwcmV2aW91c2x5IGJvdW5kIHBvcnQuXG4gICAgICAgICAgICAgKiBBZnRlciB0aGUgZ3JhY2UgdGltZSwgZm9yY2VmdWxseSBjbG9zZSBhbGwgcmVtYWluaW5nIG9wZW4gY29ubmVjdGlvbnMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogSWYgcG9ydCAwIHdhcyBib3VuZCwgb25seSB0aGUgYWN0dWFsIGJvdW5kIHBvcnQgY2FuIGJlXG4gICAgICAgICAgICAgKiBkcmFpbmVkLiBGb3IgZXhhbXBsZSwgaWYgYmluZEFzeW5jIHdhcyBjYWxsZWQgd2l0aCBcImxvY2FsaG9zdDowXCIgYW5kIHRoZVxuICAgICAgICAgICAgICogYm91bmQgcG9ydCByZXN1bHQgd2FzIDU0MzIxLCBpdCBjYW4gYmUgZHJhaW5lZCBhcyBcImxvY2FsaG9zdDo1NDMyMVwiLlxuICAgICAgICAgICAgICogQHBhcmFtIHBvcnRcbiAgICAgICAgICAgICAqIEBwYXJhbSBncmFjZVRpbWVNc1xuICAgICAgICAgICAgICogQHJldHVybnNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZHJhaW4ocG9ydCwgZ3JhY2VUaW1lTXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2IsIF9jO1xuICAgICAgICAgICAgICAgIHRoaXMudHJhY2UoJ2RyYWluIHBvcnQ9JyArIHBvcnQgKyAnIGdyYWNlVGltZU1zPScgKyBncmFjZVRpbWVNcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9ydFVyaSA9IHRoaXMubm9ybWFsaXplUG9ydChwb3J0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzcGxpdFBvcnQgPSAoMCwgdXJpX3BhcnNlcl8xLnNwbGl0SG9zdFBvcnQpKHBvcnRVcmkucGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKChzcGxpdFBvcnQgPT09IG51bGwgfHwgc3BsaXRQb3J0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzcGxpdFBvcnQucG9ydCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZHJhaW4gcG9ydCAwJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGJvdW5kUG9ydE9iamVjdCA9IHRoaXMuYm91bmRQb3J0cy5nZXQoKDAsIHVyaV9wYXJzZXJfMS51cmlUb1N0cmluZykocG9ydFVyaSkpO1xuICAgICAgICAgICAgICAgIGlmICghYm91bmRQb3J0T2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsU2Vzc2lvbnMgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBodHRwMlNlcnZlciBvZiBib3VuZFBvcnRPYmplY3QubGlzdGVuaW5nU2VydmVycykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXJ2ZXJFbnRyeSA9IHRoaXMuaHR0cDJTZXJ2ZXJzLmdldChodHRwMlNlcnZlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXJ2ZXJFbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzZXNzaW9uIG9mIHNlcnZlckVudHJ5LnNlc3Npb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2Vzc2lvbnMuYWRkKHNlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VTZXNzaW9uKHNlc3Npb24sICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2Vzc2lvbnMuZGVsZXRlKHNlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIEFmdGVyIHRoZSBncmFjZSB0aW1lIGVuZHMsIHNlbmQgYW5vdGhlciBnb2F3YXkgdG8gYWxsIHJlbWFpbmluZyBzZXNzaW9uc1xuICAgICAgICAgICAgICAgICAqIHdpdGggdGhlIENBTkNFTCBjb2RlLiAqL1xuICAgICAgICAgICAgICAgIChfYyA9IChfYiA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNlc3Npb24gb2YgYWxsU2Vzc2lvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uZGVzdHJveShodHRwMi5jb25zdGFudHMuTkdIVFRQMl9DQU5DRUwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZ3JhY2VUaW1lTXMpKS51bnJlZikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoX2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yY2VTaHV0ZG93bigpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGJvdW5kUG9ydE9iamVjdCBvZiB0aGlzLmJvdW5kUG9ydHMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRQb3J0T2JqZWN0LmNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuYm91bmRQb3J0cy5jbGVhcigpO1xuICAgICAgICAgICAgICAgIC8vIENsb3NlIHRoZSBzZXJ2ZXIgaWYgaXQgaXMgc3RpbGwgcnVubmluZy5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNlcnZlciBvZiB0aGlzLmh0dHAyU2VydmVycy5rZXlzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZVNlcnZlcihzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBBbHdheXMgZGVzdHJveSBhbnkgYXZhaWxhYmxlIHNlc3Npb25zLiBJdCdzIHBvc3NpYmxlIHRoYXQgb25lIG9yIG1vcmVcbiAgICAgICAgICAgICAgICAvLyB0cnlTaHV0ZG93bigpIGNhbGxzIGFyZSBpbiBwcm9ncmVzcy4gRG9uJ3Qgd2FpdCBvbiB0aGVtIHRvIGZpbmlzaC5cbiAgICAgICAgICAgICAgICB0aGlzLnNlc3Npb25zLmZvckVhY2goKGNoYW5uZWx6SW5mbywgc2Vzc2lvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlU2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FzdCBOR0hUVFAyX0NBTkNFTCB0byBhbnkgYmVjYXVzZSBUeXBlU2NyaXB0IGRvZXNuJ3Qgc2VlbSB0b1xuICAgICAgICAgICAgICAgICAgICAvLyByZWNvZ25pemUgZGVzdHJveShjb2RlKSBhcyBhIHZhbGlkIHNpZ25hdHVyZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5kZXN0cm95KGh0dHAyLmNvbnN0YW50cy5OR0hUVFAyX0NBTkNFTCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXNzaW9ucy5jbGVhcigpO1xuICAgICAgICAgICAgICAgICgwLCBjaGFubmVsel8xLnVucmVnaXN0ZXJDaGFubmVselJlZikodGhpcy5jaGFubmVselJlZik7XG4gICAgICAgICAgICAgICAgdGhpcy5zaHV0ZG93biA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWdpc3RlcihuYW1lLCBoYW5kbGVyLCBzZXJpYWxpemUsIGRlc2VyaWFsaXplLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlcnMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVycy5zZXQobmFtZSwge1xuICAgICAgICAgICAgICAgICAgICBmdW5jOiBoYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemUsXG4gICAgICAgICAgICAgICAgICAgIGRlc2VyaWFsaXplLFxuICAgICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBuYW1lLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdW5yZWdpc3RlcihuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMuZGVsZXRlKG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZCBObyBsb25nZXIgbmVlZGVkIGFzIG9mIHZlcnNpb24gMS4xMC54XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHN0YXJ0KCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmh0dHAyU2VydmVycy5zaXplID09PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgIFsuLi50aGlzLmh0dHAyU2VydmVycy5rZXlzKCldLmV2ZXJ5KHNlcnZlciA9PiAhc2VydmVyLmxpc3RlbmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZXJ2ZXIgbXVzdCBiZSBib3VuZCBpbiBvcmRlciB0byBzdGFydCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFydGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2VydmVyIGlzIGFscmVhZHkgc3RhcnRlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5U2h1dGRvd24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgX2I7XG4gICAgICAgICAgICAgICAgY29uc3Qgd3JhcHBlZENhbGxiYWNrID0gKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICgwLCBjaGFubmVsel8xLnVucmVnaXN0ZXJDaGFubmVselJlZikodGhpcy5jaGFubmVselJlZik7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGxldCBwZW5kaW5nQ2hlY2tzID0gMDtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBtYXliZUNhbGxiYWNrKCkge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nQ2hlY2tzLS07XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nQ2hlY2tzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVkQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNodXRkb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtzZXJ2ZXJLZXksIHNlcnZlcl0gb2YgdGhpcy5odHRwMlNlcnZlcnMuZW50cmllcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdDaGVja3MrKztcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VydmVyU3RyaW5nID0gc2VydmVyLmNoYW5uZWx6UmVmLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhY2UoJ1dhaXRpbmcgZm9yIHNlcnZlciAnICsgc2VydmVyU3RyaW5nICsgJyB0byBjbG9zZScpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlU2VydmVyKHNlcnZlcktleSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFjZSgnU2VydmVyICcgKyBzZXJ2ZXJTdHJpbmcgKyAnIGZpbmlzaGVkIGNsb3NpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2Vzc2lvbiBvZiBzZXJ2ZXIuc2Vzc2lvbnMua2V5cygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nQ2hlY2tzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXNzaW9uU3RyaW5nID0gKF9iID0gc2Vzc2lvbi5zb2NrZXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5yZW1vdGVBZGRyZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFjZSgnV2FpdGluZyBmb3Igc2Vzc2lvbiAnICsgc2Vzc2lvblN0cmluZyArICcgdG8gY2xvc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VTZXNzaW9uKHNlc3Npb24sICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWNlKCdTZXNzaW9uICcgKyBzZXNzaW9uU3RyaW5nICsgJyBmaW5pc2hlZCBjbG9zaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdDaGVja3MgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgd3JhcHBlZENhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkSHR0cDJQb3J0KCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHlldCBpbXBsZW1lbnRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgdGhlIGNoYW5uZWx6IHJlZmVyZW5jZSBvYmplY3QgZm9yIHRoaXMgc2VydmVyLiBUaGUgcmV0dXJuZWQgdmFsdWUgaXNcbiAgICAgICAgICAgICAqIGdhcmJhZ2UgaWYgY2hhbm5lbHogaXMgZGlzYWJsZWQgZm9yIHRoaXMgc2VydmVyLlxuICAgICAgICAgICAgICogQHJldHVybnNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0Q2hhbm5lbHpSZWYoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHpSZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdmVyaWZ5Q29udGVudFR5cGUoc3RyZWFtLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzW2h0dHAyLmNvbnN0YW50cy5IVFRQMl9IRUFERVJfQ09OVEVOVF9UWVBFXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnRUeXBlICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICAgICAgICAhY29udGVudFR5cGUuc3RhcnRzV2l0aCgnYXBwbGljYXRpb24vZ3JwYycpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbS5yZXNwb25kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtodHRwMi5jb25zdGFudHMuSFRUUDJfSEVBREVSX1NUQVRVU106IGh0dHAyLmNvbnN0YW50cy5IVFRQX1NUQVRVU19VTlNVUFBPUlRFRF9NRURJQV9UWVBFLFxuICAgICAgICAgICAgICAgICAgICB9LCB7IGVuZFN0cmVhbTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9yZXRyaWV2ZUhhbmRsZXIocGF0aCkge1xuICAgICAgICAgICAgICAgIHNlcnZlckNhbGxUcmFjZSgnUmVjZWl2ZWQgY2FsbCB0byBtZXRob2QgJyArXG4gICAgICAgICAgICAgICAgICAgIHBhdGggK1xuICAgICAgICAgICAgICAgICAgICAnIGF0IGFkZHJlc3MgJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VydmVyQWRkcmVzc1N0cmluZyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMuaGFuZGxlcnMuZ2V0KHBhdGgpO1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyQ2FsbFRyYWNlKCdObyBoYW5kbGVyIHJlZ2lzdGVyZWQgZm9yIG1ldGhvZCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggK1xuICAgICAgICAgICAgICAgICAgICAgICAgJy4gU2VuZGluZyBVTklNUExFTUVOVEVEIHN0YXR1cy4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3Jlc3BvbmRXaXRoRXJyb3IoZXJyLCBzdHJlYW0sIGNoYW5uZWx6U2Vzc2lvbkluZm8gPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iLCBfYztcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFpbGVyc1RvU2VuZCA9IE9iamVjdC5hc3NpZ24oeyAnZ3JwYy1zdGF0dXMnOiAoX2IgPSBlcnIuY29kZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogY29uc3RhbnRzXzEuU3RhdHVzLklOVEVSTkFMLCAnZ3JwYy1tZXNzYWdlJzogZXJyLmRldGFpbHMsIFtodHRwMi5jb25zdGFudHMuSFRUUDJfSEVBREVSX1NUQVRVU106IGh0dHAyLmNvbnN0YW50cy5IVFRQX1NUQVRVU19PSywgW2h0dHAyLmNvbnN0YW50cy5IVFRQMl9IRUFERVJfQ09OVEVOVF9UWVBFXTogJ2FwcGxpY2F0aW9uL2dycGMrcHJvdG8nIH0sIChfYyA9IGVyci5tZXRhZGF0YSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnRvSHR0cDJIZWFkZXJzKCkpO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5yZXNwb25kKHRyYWlsZXJzVG9TZW5kLCB7IGVuZFN0cmVhbTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxUcmFja2VyLmFkZENhbGxGYWlsZWQoKTtcbiAgICAgICAgICAgICAgICBjaGFubmVselNlc3Npb25JbmZvID09PSBudWxsIHx8IGNoYW5uZWx6U2Vzc2lvbkluZm8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNoYW5uZWx6U2Vzc2lvbkluZm8uc3RyZWFtVHJhY2tlci5hZGRDYWxsRmFpbGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfY2hhbm5lbHpIYW5kbGVyKGV4dHJhSW50ZXJjZXB0b3JzLCBzdHJlYW0sIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAvLyBmb3IgaGFuZGxpbmcgaWRsZSB0aW1lb3V0XG4gICAgICAgICAgICAgICAgdGhpcy5vblN0cmVhbU9wZW5lZChzdHJlYW0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5uZWx6U2Vzc2lvbkluZm8gPSB0aGlzLnNlc3Npb25zLmdldChzdHJlYW0uc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsVHJhY2tlci5hZGRDYWxsU3RhcnRlZCgpO1xuICAgICAgICAgICAgICAgIGNoYW5uZWx6U2Vzc2lvbkluZm8gPT09IG51bGwgfHwgY2hhbm5lbHpTZXNzaW9uSW5mbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2hhbm5lbHpTZXNzaW9uSW5mby5zdHJlYW1UcmFja2VyLmFkZENhbGxTdGFydGVkKCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl92ZXJpZnlDb250ZW50VHlwZShzdHJlYW0sIGhlYWRlcnMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFRyYWNrZXIuYWRkQ2FsbEZhaWxlZCgpO1xuICAgICAgICAgICAgICAgICAgICBjaGFubmVselNlc3Npb25JbmZvID09PSBudWxsIHx8IGNoYW5uZWx6U2Vzc2lvbkluZm8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNoYW5uZWx6U2Vzc2lvbkluZm8uc3RyZWFtVHJhY2tlci5hZGRDYWxsRmFpbGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IGhlYWRlcnNbSFRUUDJfSEVBREVSX1BBVEhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLl9yZXRyaWV2ZUhhbmRsZXIocGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbmRXaXRoRXJyb3IoZ2V0VW5pbXBsZW1lbnRlZFN0YXR1c1Jlc3BvbnNlKHBhdGgpLCBzdHJlYW0sIGNoYW5uZWx6U2Vzc2lvbkluZm8pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxFdmVudFRyYWNrZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZE1lc3NhZ2VTZW50OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbm5lbHpTZXNzaW9uSW5mbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWx6U2Vzc2lvbkluZm8ubWVzc2FnZXNTZW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHpTZXNzaW9uSW5mby5sYXN0TWVzc2FnZVNlbnRUaW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhZGRNZXNzYWdlUmVjZWl2ZWQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFubmVselNlc3Npb25JbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHpTZXNzaW9uSW5mby5tZXNzYWdlc1JlY2VpdmVkICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHpTZXNzaW9uSW5mby5sYXN0TWVzc2FnZVJlY2VpdmVkVGltZXN0YW1wID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25DYWxsRW5kOiBzdGF0dXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cy5jb2RlID09PSBjb25zdGFudHNfMS5TdGF0dXMuT0spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxUcmFja2VyLmFkZENhbGxTdWNjZWVkZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbFRyYWNrZXIuYWRkQ2FsbEZhaWxlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvblN0cmVhbUVuZDogc3VjY2VzcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbm5lbHpTZXNzaW9uSW5mbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWx6U2Vzc2lvbkluZm8uc3RyZWFtVHJhY2tlci5hZGRDYWxsU3VjY2VlZGVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVselNlc3Npb25JbmZvLnN0cmVhbVRyYWNrZXIuYWRkQ2FsbEZhaWxlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbGwgPSAoMCwgc2VydmVyX2ludGVyY2VwdG9yc18xLmdldFNlcnZlckludGVyY2VwdGluZ0NhbGwpKFsuLi5leHRyYUludGVyY2VwdG9ycywgLi4udGhpcy5pbnRlcmNlcHRvcnNdLCBzdHJlYW0sIGhlYWRlcnMsIGNhbGxFdmVudFRyYWNrZXIsIGhhbmRsZXIsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9ydW5IYW5kbGVyRm9yQ2FsbChjYWxsLCBoYW5kbGVyKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxUcmFja2VyLmFkZENhbGxGYWlsZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHpTZXNzaW9uSW5mbyA9PT0gbnVsbCB8fCBjaGFubmVselNlc3Npb25JbmZvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjaGFubmVselNlc3Npb25JbmZvLnN0cmVhbVRyYWNrZXIuYWRkQ2FsbEZhaWxlZCgpO1xuICAgICAgICAgICAgICAgICAgICBjYWxsLnNlbmRTdGF0dXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogY29uc3RhbnRzXzEuU3RhdHVzLklOVEVSTkFMLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogYFVua25vd24gaGFuZGxlciB0eXBlOiAke2hhbmRsZXIudHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfc3RyZWFtSGFuZGxlcihleHRyYUludGVyY2VwdG9ycywgc3RyZWFtLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgLy8gZm9yIGhhbmRsaW5nIGlkbGUgdGltZW91dFxuICAgICAgICAgICAgICAgIHRoaXMub25TdHJlYW1PcGVuZWQoc3RyZWFtKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmVyaWZ5Q29udGVudFR5cGUoc3RyZWFtLCBoZWFkZXJzKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBoZWFkZXJzW0hUVFAyX0hFQURFUl9QQVRIXTtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5fcmV0cmlldmVIYW5kbGVyKHBhdGgpO1xuICAgICAgICAgICAgICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNwb25kV2l0aEVycm9yKGdldFVuaW1wbGVtZW50ZWRTdGF0dXNSZXNwb25zZShwYXRoKSwgc3RyZWFtLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjYWxsID0gKDAsIHNlcnZlcl9pbnRlcmNlcHRvcnNfMS5nZXRTZXJ2ZXJJbnRlcmNlcHRpbmdDYWxsKShbLi4uZXh0cmFJbnRlcmNlcHRvcnMsIC4uLnRoaXMuaW50ZXJjZXB0b3JzXSwgc3RyZWFtLCBoZWFkZXJzLCBudWxsLCBoYW5kbGVyLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcnVuSGFuZGxlckZvckNhbGwoY2FsbCwgaGFuZGxlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbC5zZW5kU3RhdHVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5JTlRFUk5BTCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGBVbmtub3duIGhhbmRsZXIgdHlwZTogJHtoYW5kbGVyLnR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3J1bkhhbmRsZXJGb3JDYWxsKGNhbGwsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHR5cGUgfSA9IGhhbmRsZXI7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICd1bmFyeScpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlVW5hcnkoY2FsbCwgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdjbGllbnRTdHJlYW0nKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUNsaWVudFN0cmVhbWluZyhjYWxsLCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ3NlcnZlclN0cmVhbScpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2VydmVyU3RyZWFtaW5nKGNhbGwsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnYmlkaScpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlQmlkaVN0cmVhbWluZyhjYWxsLCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfc2V0dXBIYW5kbGVycyhodHRwMlNlcnZlciwgZXh0cmFJbnRlcmNlcHRvcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaHR0cDJTZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBzZXJ2ZXJBZGRyZXNzID0gaHR0cDJTZXJ2ZXIuYWRkcmVzcygpO1xuICAgICAgICAgICAgICAgIGxldCBzZXJ2ZXJBZGRyZXNzU3RyaW5nID0gJ251bGwnO1xuICAgICAgICAgICAgICAgIGlmIChzZXJ2ZXJBZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VydmVyQWRkcmVzcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlckFkZHJlc3NTdHJpbmcgPSBzZXJ2ZXJBZGRyZXNzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyQWRkcmVzc1N0cmluZyA9IHNlcnZlckFkZHJlc3MuYWRkcmVzcyArICc6JyArIHNlcnZlckFkZHJlc3MucG9ydDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZlckFkZHJlc3NTdHJpbmcgPSBzZXJ2ZXJBZGRyZXNzU3RyaW5nO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmNoYW5uZWx6RW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX2NoYW5uZWx6SGFuZGxlclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX3N0cmVhbUhhbmRsZXI7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbkhhbmRsZXIgPSB0aGlzLmNoYW5uZWx6RW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuX2NoYW5uZWx6U2Vzc2lvbkhhbmRsZXIoaHR0cDJTZXJ2ZXIpXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5fc2Vzc2lvbkhhbmRsZXIoaHR0cDJTZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIGh0dHAyU2VydmVyLm9uKCdzdHJlYW0nLCBoYW5kbGVyLmJpbmQodGhpcywgZXh0cmFJbnRlcmNlcHRvcnMpKTtcbiAgICAgICAgICAgICAgICBodHRwMlNlcnZlci5vbignc2Vzc2lvbicsIHNlc3Npb25IYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9zZXNzaW9uSGFuZGxlcihodHRwMlNlcnZlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoc2Vzc2lvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2IsIF9jO1xuICAgICAgICAgICAgICAgICAgICAoX2IgPSB0aGlzLmh0dHAyU2VydmVycy5nZXQoaHR0cDJTZXJ2ZXIpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2Vzc2lvbnMuYWRkKHNlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29ubmVjdGlvbkFnZVRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbm5lY3Rpb25BZ2VHcmFjZVRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGtlZXBhbGl2ZVRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlc3Npb25DbG9zZWRCeVNlcnZlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpZGxlVGltZW91dE9iaiA9IHRoaXMuZW5hYmxlSWRsZVRpbWVvdXQoc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1heENvbm5lY3Rpb25BZ2VNcyAhPT0gVU5MSU1JVEVEX0NPTk5FQ1RJT05fQUdFX01TKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBseSBhIHJhbmRvbSBqaXR0ZXIgd2l0aGluIGEgKy8tMTAlIHJhbmdlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBqaXR0ZXJNYWduaXR1ZGUgPSB0aGlzLm1heENvbm5lY3Rpb25BZ2VNcyAvIDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgaml0dGVyID0gTWF0aC5yYW5kb20oKSAqIGppdHRlck1hZ25pdHVkZSAqIDIgLSBqaXR0ZXJNYWduaXR1ZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uQWdlVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2IsIF9jO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25DbG9zZWRCeVNlcnZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFjZSgnQ29ubmVjdGlvbiBkcm9wcGVkIGJ5IG1heCBjb25uZWN0aW9uIGFnZTogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoX2IgPSBzZXNzaW9uLnNvY2tldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnJlbW90ZUFkZHJlc3MpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLmdvYXdheShodHRwMi5jb25zdGFudHMuTkdIVFRQMl9OT19FUlJPUiwgfigxIDw8IDMxKSwga01heEFnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBnb2F3YXkgY2FuJ3QgYmUgc2VudCBiZWNhdXNlIHRoZSBzZXNzaW9uIGlzIGFscmVhZHkgY2xvc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBBbGxvdyBhIGdyYWNlIHBlcmlvZCBhZnRlciBzZW5kaW5nIHRoZSBHT0FXQVkgYmVmb3JlIGZvcmNpYmx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogY2xvc2luZyB0aGUgY29ubmVjdGlvbi4gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhDb25uZWN0aW9uQWdlR3JhY2VNcyAhPT0gVU5MSU1JVEVEX0NPTk5FQ1RJT05fQUdFX01TKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25BZ2VHcmFjZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5tYXhDb25uZWN0aW9uQWdlR3JhY2VNcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfYyA9IGNvbm5lY3Rpb25BZ2VHcmFjZVRpbWVyLnVucmVmKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChjb25uZWN0aW9uQWdlR3JhY2VUaW1lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5tYXhDb25uZWN0aW9uQWdlTXMgKyBqaXR0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9jID0gY29ubmVjdGlvbkFnZVRpbWVyLnVucmVmKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChjb25uZWN0aW9uQWdlVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsZWFyS2VlcGFsaXZlVGltZW91dCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZWVwYWxpdmVUaW1lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChrZWVwYWxpdmVUaW1lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2VlcGFsaXZlVGltZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW5TZW5kUGluZyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoIXNlc3Npb24uZGVzdHJveWVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5rZWVwYWxpdmVUaW1lTXMgPCBLRUVQQUxJVkVfTUFYX1RJTUVfTVMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtlZXBhbGl2ZVRpbWVNcyA+IDApO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0ICovXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZW5kUGluZzsgLy8gaG9pc3RlZCBmb3IgdXNlIGluIG1heWJlU3RhcnRLZWVwYWxpdmVQaW5nVGltZXJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF5YmVTdGFydEtlZXBhbGl2ZVBpbmdUaW1lciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FuU2VuZFBpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMua2VlcGFsaXZlVHJhY2UoJ1N0YXJ0aW5nIGtlZXBhbGl2ZSB0aW1lciBmb3IgJyArIHRoaXMua2VlcGFsaXZlVGltZU1zICsgJ21zJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZWVwYWxpdmVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyS2VlcGFsaXZlVGltZW91dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRQaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLmtlZXBhbGl2ZVRpbWVNcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2IgPSBrZWVwYWxpdmVUaW1lci51bnJlZikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoa2VlcGFsaXZlVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBzZW5kUGluZyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FuU2VuZFBpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMua2VlcGFsaXZlVHJhY2UoJ1NlbmRpbmcgcGluZyB3aXRoIHRpbWVvdXQgJyArIHRoaXMua2VlcGFsaXZlVGltZW91dE1zICsgJ21zJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGluZ1NlbmRFcnJvciA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwaW5nU2VudFN1Y2Nlc3NmdWxseSA9IHNlc3Npb24ucGluZygoZXJyLCBkdXJhdGlvbiwgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcktlZXBhbGl2ZVRpbWVvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5rZWVwYWxpdmVUcmFjZSgnUGluZyBmYWlsZWQgd2l0aCBlcnJvcjogJyArIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25DbG9zZWRCeVNlcnZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtlZXBhbGl2ZVRyYWNlKCdSZWNlaXZlZCBwaW5nIHJlc3BvbnNlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXliZVN0YXJ0S2VlcGFsaXZlUGluZ1RpbWVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBpbmdTZW50U3VjY2Vzc2Z1bGx5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbmdTZW5kRXJyb3IgPSAnUGluZyByZXR1cm5lZCBmYWxzZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBncnBjL2dycGMtbm9kZSMyMTM5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGluZ1NlbmRFcnJvciA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiAnJykgfHwgJ1Vua25vd24gZXJyb3InO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBpbmdTZW5kRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtlZXBhbGl2ZVRyYWNlKCdQaW5nIHNlbmQgZmFpbGVkOiAnICsgcGluZ1NlbmRFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFjZSgnQ29ubmVjdGlvbiBkcm9wcGVkIGR1ZSB0byBwaW5nIHNlbmQgZXJyb3I6ICcgKyBwaW5nU2VuZEVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uQ2xvc2VkQnlTZXJ2ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBrZWVwYWxpdmVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyS2VlcGFsaXZlVGltZW91dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMua2VlcGFsaXZlVHJhY2UoJ1BpbmcgdGltZW91dCBwYXNzZWQgd2l0aG91dCByZXNwb25zZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhY2UoJ0Nvbm5lY3Rpb24gZHJvcHBlZCBieSBrZWVwYWxpdmUgdGltZW91dCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25DbG9zZWRCeVNlcnZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5rZWVwYWxpdmVUaW1lb3V0TXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9iID0ga2VlcGFsaXZlVGltZXIudW5yZWYpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKGtlZXBhbGl2ZVRpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgbWF5YmVTdGFydEtlZXBhbGl2ZVBpbmdUaW1lcigpO1xuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYiwgX2M7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb25DbG9zZWRCeVNlcnZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhY2UoYENvbm5lY3Rpb24gZHJvcHBlZCBieSBjbGllbnQgJHsoX2IgPSBzZXNzaW9uLnNvY2tldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnJlbW90ZUFkZHJlc3N9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbkFnZVRpbWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNvbm5lY3Rpb25BZ2VUaW1lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbkFnZUdyYWNlVGltZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY29ubmVjdGlvbkFnZUdyYWNlVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJLZWVwYWxpdmVUaW1lb3V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWRsZVRpbWVvdXRPYmogIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaWRsZVRpbWVvdXRPYmoudGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXNzaW9uSWRsZVRpbWVvdXRzLmRlbGV0ZShzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIChfYyA9IHRoaXMuaHR0cDJTZXJ2ZXJzLmdldChodHRwMlNlcnZlcikpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5zZXNzaW9ucy5kZWxldGUoc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfY2hhbm5lbHpTZXNzaW9uSGFuZGxlcihodHRwMlNlcnZlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoc2Vzc2lvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5uZWx6UmVmID0gKDAsIGNoYW5uZWx6XzEucmVnaXN0ZXJDaGFubmVselNvY2tldCkoKF9jID0gKF9iID0gc2Vzc2lvbi5zb2NrZXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5yZW1vdGVBZGRyZXNzKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAndW5rbm93bicsIHRoaXMuZ2V0Q2hhbm5lbHpTZXNzaW9uSW5mby5iaW5kKHRoaXMsIHNlc3Npb24pLCB0aGlzLmNoYW5uZWx6RW5hYmxlZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5uZWx6U2Vzc2lvbkluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6IGNoYW5uZWx6UmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtVHJhY2tlcjogbmV3IGNoYW5uZWx6XzEuQ2hhbm5lbHpDYWxsVHJhY2tlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXNTZW50OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXNSZWNlaXZlZDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtlZXBBbGl2ZXNTZW50OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1lc3NhZ2VTZW50VGltZXN0YW1wOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE1lc3NhZ2VSZWNlaXZlZFRpbWVzdGFtcDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgKF9kID0gdGhpcy5odHRwMlNlcnZlcnMuZ2V0KGh0dHAyU2VydmVyKSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnNlc3Npb25zLmFkZChzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXNzaW9ucy5zZXQoc2Vzc2lvbiwgY2hhbm5lbHpTZXNzaW9uSW5mbyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudEFkZHJlc3MgPSBgJHtzZXNzaW9uLnNvY2tldC5yZW1vdGVBZGRyZXNzfToke3Nlc3Npb24uc29ja2V0LnJlbW90ZVBvcnR9YDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFubmVselRyYWNlLmFkZFRyYWNlKCdDVF9JTkZPJywgJ0Nvbm5lY3Rpb24gZXN0YWJsaXNoZWQgYnkgY2xpZW50ICcgKyBjbGllbnRBZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFjZSgnQ29ubmVjdGlvbiBlc3RhYmxpc2hlZCBieSBjbGllbnQgJyArIGNsaWVudEFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlc3Npb25DaGlsZHJlblRyYWNrZXIucmVmQ2hpbGQoY2hhbm5lbHpSZWYpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29ubmVjdGlvbkFnZVRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbm5lY3Rpb25BZ2VHcmFjZVRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGtlZXBhbGl2ZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2Vzc2lvbkNsb3NlZEJ5U2VydmVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkbGVUaW1lb3V0T2JqID0gdGhpcy5lbmFibGVJZGxlVGltZW91dChzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF4Q29ubmVjdGlvbkFnZU1zICE9PSBVTkxJTUlURURfQ09OTkVDVElPTl9BR0VfTVMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IGEgcmFuZG9tIGppdHRlciB3aXRoaW4gYSArLy0xMCUgcmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGppdHRlck1hZ25pdHVkZSA9IHRoaXMubWF4Q29ubmVjdGlvbkFnZU1zIC8gMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBqaXR0ZXIgPSBNYXRoLnJhbmRvbSgpICogaml0dGVyTWFnbml0dWRlICogMiAtIGppdHRlck1hZ25pdHVkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25BZ2VUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uQ2xvc2VkQnlTZXJ2ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHpUcmFjZS5hZGRUcmFjZSgnQ1RfSU5GTycsICdDb25uZWN0aW9uIGRyb3BwZWQgYnkgbWF4IGNvbm5lY3Rpb24gYWdlIGZyb20gJyArIGNsaWVudEFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uZ29hd2F5KGh0dHAyLmNvbnN0YW50cy5OR0hUVFAyX05PX0VSUk9SLCB+KDEgPDwgMzEpLCBrTWF4QWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGdvYXdheSBjYW4ndCBiZSBzZW50IGJlY2F1c2UgdGhlIHNlc3Npb24gaXMgYWxyZWFkeSBjbG9zZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFsbG93IGEgZ3JhY2UgcGVyaW9kIGFmdGVyIHNlbmRpbmcgdGhlIEdPQVdBWSBiZWZvcmUgZm9yY2libHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBjbG9zaW5nIHRoZSBjb25uZWN0aW9uLiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1heENvbm5lY3Rpb25BZ2VHcmFjZU1zICE9PSBVTkxJTUlURURfQ09OTkVDVElPTl9BR0VfTVMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbkFnZUdyYWNlVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLm1heENvbm5lY3Rpb25BZ2VHcmFjZU1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9iID0gY29ubmVjdGlvbkFnZUdyYWNlVGltZXIudW5yZWYpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKGNvbm5lY3Rpb25BZ2VHcmFjZVRpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLm1heENvbm5lY3Rpb25BZ2VNcyArIGppdHRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2UgPSBjb25uZWN0aW9uQWdlVGltZXIudW5yZWYpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5jYWxsKGNvbm5lY3Rpb25BZ2VUaW1lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xlYXJLZWVwYWxpdmVUaW1lb3V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtlZXBhbGl2ZVRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoa2VlcGFsaXZlVGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2VlcGFsaXZlVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhblNlbmRQaW5nID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICghc2Vzc2lvbi5kZXN0cm95ZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtlZXBhbGl2ZVRpbWVNcyA8IEtFRVBBTElWRV9NQVhfVElNRV9NUyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMua2VlcGFsaXZlVGltZU1zID4gMCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3QgKi9cbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlbmRQaW5nOyAvLyBob2lzdGVkIGZvciB1c2UgaW4gbWF5YmVTdGFydEtlZXBhbGl2ZVBpbmdUaW1lclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXliZVN0YXJ0S2VlcGFsaXZlUGluZ1RpbWVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9iO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5TZW5kUGluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5rZWVwYWxpdmVUcmFjZSgnU3RhcnRpbmcga2VlcGFsaXZlIHRpbWVyIGZvciAnICsgdGhpcy5rZWVwYWxpdmVUaW1lTXMgKyAnbXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtlZXBhbGl2ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcktlZXBhbGl2ZVRpbWVvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kUGluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5rZWVwYWxpdmVUaW1lTXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9iID0ga2VlcGFsaXZlVGltZW91dC51bnJlZikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoa2VlcGFsaXZlVGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHNlbmRQaW5nID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9iO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5TZW5kUGluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5rZWVwYWxpdmVUcmFjZSgnU2VuZGluZyBwaW5nIHdpdGggdGltZW91dCAnICsgdGhpcy5rZWVwYWxpdmVUaW1lb3V0TXMgKyAnbXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwaW5nU2VuZEVycm9yID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBpbmdTZW50U3VjY2Vzc2Z1bGx5ID0gc2Vzc2lvbi5waW5nKChlcnIsIGR1cmF0aW9uLCBwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyS2VlcGFsaXZlVGltZW91dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtlZXBhbGl2ZVRyYWNlKCdQaW5nIGZhaWxlZCB3aXRoIGVycm9yOiAnICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFubmVselRyYWNlLmFkZFRyYWNlKCdDVF9JTkZPJywgJ0Nvbm5lY3Rpb24gZHJvcHBlZCBkdWUgdG8gZXJyb3Igb2YgYSBwaW5nIGZyYW1lICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHJldHVybiBpbiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uQ2xvc2VkQnlTZXJ2ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5rZWVwYWxpdmVUcmFjZSgnUmVjZWl2ZWQgcGluZyByZXNwb25zZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVTdGFydEtlZXBhbGl2ZVBpbmdUaW1lcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwaW5nU2VudFN1Y2Nlc3NmdWxseSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaW5nU2VuZEVycm9yID0gJ1BpbmcgcmV0dXJuZWQgZmFsc2UnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ3JwYy9ncnBjLW5vZGUjMjEzOVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbmdTZW5kRXJyb3IgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZSBpbnN0YW5jZW9mIEVycm9yID8gZS5tZXNzYWdlIDogJycpIHx8ICdVbmtub3duIGVycm9yJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwaW5nU2VuZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5rZWVwYWxpdmVUcmFjZSgnUGluZyBzZW5kIGZhaWxlZDogJyArIHBpbmdTZW5kRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHpUcmFjZS5hZGRUcmFjZSgnQ1RfSU5GTycsICdDb25uZWN0aW9uIGRyb3BwZWQgZHVlIHRvIHBpbmcgc2VuZCBlcnJvcjogJyArIHBpbmdTZW5kRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25DbG9zZWRCeVNlcnZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWx6U2Vzc2lvbkluZm8ua2VlcEFsaXZlc1NlbnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtlZXBhbGl2ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcktlZXBhbGl2ZVRpbWVvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtlZXBhbGl2ZVRyYWNlKCdQaW5nIHRpbWVvdXQgcGFzc2VkIHdpdGhvdXQgcmVzcG9uc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWx6VHJhY2UuYWRkVHJhY2UoJ0NUX0lORk8nLCAnQ29ubmVjdGlvbiBkcm9wcGVkIGJ5IGtlZXBhbGl2ZSB0aW1lb3V0IGZyb20gJyArIGNsaWVudEFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25DbG9zZWRCeVNlcnZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5rZWVwYWxpdmVUaW1lb3V0TXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKF9iID0ga2VlcGFsaXZlVGltZW91dC51bnJlZikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoa2VlcGFsaXZlVGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIG1heWJlU3RhcnRLZWVwYWxpdmVQaW5nVGltZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2I7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlc3Npb25DbG9zZWRCeVNlcnZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHpUcmFjZS5hZGRUcmFjZSgnQ1RfSU5GTycsICdDb25uZWN0aW9uIGRyb3BwZWQgYnkgY2xpZW50ICcgKyBjbGllbnRBZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Vzc2lvbkNoaWxkcmVuVHJhY2tlci51bnJlZkNoaWxkKGNoYW5uZWx6UmVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBjaGFubmVsel8xLnVucmVnaXN0ZXJDaGFubmVselJlZikoY2hhbm5lbHpSZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb25BZ2VUaW1lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChjb25uZWN0aW9uQWdlVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb25BZ2VHcmFjZVRpbWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNvbm5lY3Rpb25BZ2VHcmFjZVRpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyS2VlcGFsaXZlVGltZW91dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkbGVUaW1lb3V0T2JqICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGlkbGVUaW1lb3V0T2JqLnRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Vzc2lvbklkbGVUaW1lb3V0cy5kZWxldGUoc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2IgPSB0aGlzLmh0dHAyU2VydmVycy5nZXQoaHR0cDJTZXJ2ZXIpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2Vzc2lvbnMuZGVsZXRlKHNlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXNzaW9ucy5kZWxldGUoc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmFibGVJZGxlVGltZW91dChzZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iLCBfYztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXNzaW9uSWRsZVRpbWVvdXQgPj0gTUFYX0NPTk5FQ1RJT05fSURMRV9NUykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgaWRsZVRpbWVvdXRPYmogPSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbXM6IDAsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RJZGxlOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlOiB0aGlzLm9uU3RyZWFtQ2xvc2UuYmluZCh0aGlzLCBzZXNzaW9uKSxcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dDogc2V0VGltZW91dCh0aGlzLm9uSWRsZVRpbWVvdXQsIHRoaXMuc2Vzc2lvbklkbGVUaW1lb3V0LCB0aGlzLCBzZXNzaW9uKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIChfYyA9IChfYiA9IGlkbGVUaW1lb3V0T2JqLnRpbWVvdXQpLnVucmVmKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXNzaW9uSWRsZVRpbWVvdXRzLnNldChzZXNzaW9uLCBpZGxlVGltZW91dE9iaik7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzb2NrZXQgfSA9IHNlc3Npb247XG4gICAgICAgICAgICAgICAgdGhpcy50cmFjZSgnRW5hYmxlIGlkbGUgdGltZW91dCBmb3IgJyArXG4gICAgICAgICAgICAgICAgICAgIHNvY2tldC5yZW1vdGVBZGRyZXNzICtcbiAgICAgICAgICAgICAgICAgICAgJzonICtcbiAgICAgICAgICAgICAgICAgICAgc29ja2V0LnJlbW90ZVBvcnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpZGxlVGltZW91dE9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uSWRsZVRpbWVvdXQoY3R4LCBzZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzb2NrZXQgfSA9IHNlc3Npb247XG4gICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbkluZm8gPSBjdHguc2Vzc2lvbklkbGVUaW1lb3V0cy5nZXQoc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgLy8gaWYgaXQgaXMgY2FsbGVkIHdoaWxlIHdlIGhhdmUgYWN0aXZlU3RyZWFtcyAtIHRpbWVyIHdpbGwgbm90IGJlIHJlc2NoZWR1bGVkXG4gICAgICAgICAgICAgICAgLy8gdW50aWwgbGFzdCBhY3RpdmUgc3RyZWFtIGlzIGNsb3NlZCwgdGhlbiBpdCB3aWxsIGNhbGwgLnJlZnJlc2goKSBvbiB0aGUgdGltZXJcbiAgICAgICAgICAgICAgICAvLyBpbXBvcnRhbnQgcGFydCBpcyB0byBub3QgY2xlYXJUaW1lb3V0KHRpbWVyKSBvciBpdCBiZWNvbWVzIHVudXNhYmxlXG4gICAgICAgICAgICAgICAgLy8gZm9yIGZ1dHVyZSByZWZyZXNoZXNcbiAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbkluZm8gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSW5mby5hY3RpdmVTdHJlYW1zID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChEYXRlLm5vdygpIC0gc2Vzc2lvbkluZm8ubGFzdElkbGUgPj0gY3R4LnNlc3Npb25JZGxlVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnRyYWNlKCdTZXNzaW9uIGlkbGUgdGltZW91dCB0cmlnZ2VyZWQgZm9yICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzb2NrZXQgPT09IG51bGwgfHwgc29ja2V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb2NrZXQucmVtb3RlQWRkcmVzcykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNvY2tldCA9PT0gbnVsbCB8fCBzb2NrZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvY2tldC5yZW1vdGVQb3J0KSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBsYXN0IGlkbGUgYXQgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbkluZm8ubGFzdElkbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmNsb3NlU2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25JbmZvLnRpbWVvdXQucmVmcmVzaCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25TdHJlYW1PcGVuZWQoc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHN0cmVhbS5zZXNzaW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkbGVUaW1lb3V0T2JqID0gdGhpcy5zZXNzaW9uSWRsZVRpbWVvdXRzLmdldChzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoaWRsZVRpbWVvdXRPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgaWRsZVRpbWVvdXRPYmouYWN0aXZlU3RyZWFtcyArPSAxO1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW0ub25jZSgnY2xvc2UnLCBpZGxlVGltZW91dE9iai5vbkNsb3NlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvblN0cmVhbUNsb3NlKHNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgX2IsIF9jO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkbGVUaW1lb3V0T2JqID0gdGhpcy5zZXNzaW9uSWRsZVRpbWVvdXRzLmdldChzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoaWRsZVRpbWVvdXRPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgaWRsZVRpbWVvdXRPYmouYWN0aXZlU3RyZWFtcyAtPSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWRsZVRpbWVvdXRPYmouYWN0aXZlU3RyZWFtcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRsZVRpbWVvdXRPYmoubGFzdElkbGUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRsZVRpbWVvdXRPYmoudGltZW91dC5yZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWNlKCdTZXNzaW9uIG9uU3RyZWFtQ2xvc2UnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKF9iID0gc2Vzc2lvbi5zb2NrZXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5yZW1vdGVBZGRyZXNzKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzonICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKF9jID0gc2Vzc2lvbi5zb2NrZXQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5yZW1vdGVQb3J0KSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBhdCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZGxlVGltZW91dE9iai5sYXN0SWRsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBfbWV0YWRhdGEgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLm1ldGFkYXRhID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIF9zdGFydF9kZWNvcmF0b3JzID0gW2RlcHJlY2F0ZSgnQ2FsbGluZyBzdGFydCgpIGlzIG5vIGxvbmdlciBuZWNlc3NhcnkuIEl0IGNhbiBiZSBzYWZlbHkgb21pdHRlZC4nKV07XG4gICAgICAgICAgICBfX2VzRGVjb3JhdGUoX2EsIG51bGwsIF9zdGFydF9kZWNvcmF0b3JzLCB7IGtpbmQ6IFwibWV0aG9kXCIsIG5hbWU6IFwic3RhcnRcIiwgc3RhdGljOiBmYWxzZSwgcHJpdmF0ZTogZmFsc2UsIGFjY2VzczogeyBoYXM6IG9iaiA9PiBcInN0YXJ0XCIgaW4gb2JqLCBnZXQ6IG9iaiA9PiBvYmouc3RhcnQgfSwgbWV0YWRhdGE6IF9tZXRhZGF0YSB9LCBudWxsLCBfaW5zdGFuY2VFeHRyYUluaXRpYWxpemVycyk7XG4gICAgICAgICAgICBpZiAoX21ldGFkYXRhKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2EsIFN5bWJvbC5tZXRhZGF0YSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogX21ldGFkYXRhIH0pO1xuICAgICAgICB9KSgpLFxuICAgICAgICBfYTtcbn0pKCk7XG5leHBvcnRzLlNlcnZlciA9IFNlcnZlcjtcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZVVuYXJ5KGNhbGwsIGhhbmRsZXIpIHtcbiAgICBsZXQgc3RyZWFtO1xuICAgIGZ1bmN0aW9uIHJlc3BvbmQoZXJyLCB2YWx1ZSwgdHJhaWxlciwgZmxhZ3MpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgY2FsbC5zZW5kU3RhdHVzKCgwLCBzZXJ2ZXJfY2FsbF8xLnNlcnZlckVycm9yVG9TdGF0dXMpKGVyciwgdHJhaWxlcikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhbGwuc2VuZE1lc3NhZ2UodmFsdWUsICgpID0+IHtcbiAgICAgICAgICAgIGNhbGwuc2VuZFN0YXR1cyh7XG4gICAgICAgICAgICAgICAgY29kZTogY29uc3RhbnRzXzEuU3RhdHVzLk9LLFxuICAgICAgICAgICAgICAgIGRldGFpbHM6ICdPSycsXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHRyYWlsZXIgIT09IG51bGwgJiYgdHJhaWxlciAhPT0gdm9pZCAwID8gdHJhaWxlciA6IG51bGwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXF1ZXN0TWV0YWRhdGE7XG4gICAgbGV0IHJlcXVlc3RNZXNzYWdlID0gbnVsbDtcbiAgICBjYWxsLnN0YXJ0KHtcbiAgICAgICAgb25SZWNlaXZlTWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHJlcXVlc3RNZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICAgICAgY2FsbC5zdGFydFJlYWQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZWNlaXZlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAocmVxdWVzdE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBjYWxsLnNlbmRTdGF0dXMoe1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb25zdGFudHNfMS5TdGF0dXMuVU5JTVBMRU1FTlRFRCxcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogYFJlY2VpdmVkIGEgc2Vjb25kIHJlcXVlc3QgbWVzc2FnZSBmb3Igc2VydmVyIHN0cmVhbWluZyBtZXRob2QgJHtoYW5kbGVyLnBhdGh9YCxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG51bGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdE1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICAgICAgY2FsbC5zdGFydFJlYWQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZWNlaXZlSGFsZkNsb3NlKCkge1xuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0TWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGNhbGwuc2VuZFN0YXR1cyh7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5VTklNUExFTUVOVEVELFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiBgUmVjZWl2ZWQgbm8gcmVxdWVzdCBtZXNzYWdlIGZvciBzZXJ2ZXIgc3RyZWFtaW5nIG1ldGhvZCAke2hhbmRsZXIucGF0aH1gLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbnVsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJlYW0gPSBuZXcgc2VydmVyX2NhbGxfMS5TZXJ2ZXJXcml0YWJsZVN0cmVhbUltcGwoaGFuZGxlci5wYXRoLCBjYWxsLCByZXF1ZXN0TWV0YWRhdGEsIHJlcXVlc3RNZXNzYWdlKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlci5mdW5jKHN0cmVhbSwgcmVzcG9uZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbC5zZW5kU3RhdHVzKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogY29uc3RhbnRzXzEuU3RhdHVzLlVOS05PV04sXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGBTZXJ2ZXIgbWV0aG9kIGhhbmRsZXIgdGhyZXcgZXJyb3IgJHtlcnIubWVzc2FnZX1gLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbnVsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25DYW5jZWwoKSB7XG4gICAgICAgICAgICBpZiAoc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2NhbmNlbGxlZCcsICdjYW5jZWxsZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUNsaWVudFN0cmVhbWluZyhjYWxsLCBoYW5kbGVyKSB7XG4gICAgbGV0IHN0cmVhbTtcbiAgICBmdW5jdGlvbiByZXNwb25kKGVyciwgdmFsdWUsIHRyYWlsZXIsIGZsYWdzKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNhbGwuc2VuZFN0YXR1cygoMCwgc2VydmVyX2NhbGxfMS5zZXJ2ZXJFcnJvclRvU3RhdHVzKShlcnIsIHRyYWlsZXIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYWxsLnNlbmRNZXNzYWdlKHZhbHVlLCAoKSA9PiB7XG4gICAgICAgICAgICBjYWxsLnNlbmRTdGF0dXMoe1xuICAgICAgICAgICAgICAgIGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5PSyxcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiAnT0snLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiB0cmFpbGVyICE9PSBudWxsICYmIHRyYWlsZXIgIT09IHZvaWQgMCA/IHRyYWlsZXIgOiBudWxsLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYWxsLnN0YXJ0KHtcbiAgICAgICAgb25SZWNlaXZlTWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHN0cmVhbSA9IG5ldyBzZXJ2ZXJfY2FsbF8xLlNlcnZlckR1cGxleFN0cmVhbUltcGwoaGFuZGxlci5wYXRoLCBjYWxsLCBtZXRhZGF0YSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuZnVuYyhzdHJlYW0sIHJlc3BvbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGwuc2VuZFN0YXR1cyh7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5VTktOT1dOLFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiBgU2VydmVyIG1ldGhvZCBoYW5kbGVyIHRocmV3IGVycm9yICR7ZXJyLm1lc3NhZ2V9YCxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG51bGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uUmVjZWl2ZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICAgICAgc3RyZWFtLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUmVjZWl2ZUhhbGZDbG9zZSgpIHtcbiAgICAgICAgICAgIHN0cmVhbS5wdXNoKG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICBvbkNhbmNlbCgpIHtcbiAgICAgICAgICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICBzdHJlYW0uY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzdHJlYW0uZW1pdCgnY2FuY2VsbGVkJywgJ2NhbmNlbGxlZCcpO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5mdW5jdGlvbiBoYW5kbGVTZXJ2ZXJTdHJlYW1pbmcoY2FsbCwgaGFuZGxlcikge1xuICAgIGxldCBzdHJlYW07XG4gICAgbGV0IHJlcXVlc3RNZXRhZGF0YTtcbiAgICBsZXQgcmVxdWVzdE1lc3NhZ2UgPSBudWxsO1xuICAgIGNhbGwuc3RhcnQoe1xuICAgICAgICBvblJlY2VpdmVNZXRhZGF0YShtZXRhZGF0YSkge1xuICAgICAgICAgICAgcmVxdWVzdE1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgICAgICAgICBjYWxsLnN0YXJ0UmVhZCgpO1xuICAgICAgICB9LFxuICAgICAgICBvblJlY2VpdmVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0TWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGNhbGwuc2VuZFN0YXR1cyh7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5VTklNUExFTUVOVEVELFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiBgUmVjZWl2ZWQgYSBzZWNvbmQgcmVxdWVzdCBtZXNzYWdlIGZvciBzZXJ2ZXIgc3RyZWFtaW5nIG1ldGhvZCAke2hhbmRsZXIucGF0aH1gLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbnVsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXF1ZXN0TWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgICAgICBjYWxsLnN0YXJ0UmVhZCgpO1xuICAgICAgICB9LFxuICAgICAgICBvblJlY2VpdmVIYWxmQ2xvc2UoKSB7XG4gICAgICAgICAgICBpZiAoIXJlcXVlc3RNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY2FsbC5zZW5kU3RhdHVzKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogY29uc3RhbnRzXzEuU3RhdHVzLlVOSU1QTEVNRU5URUQsXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGBSZWNlaXZlZCBubyByZXF1ZXN0IG1lc3NhZ2UgZm9yIHNlcnZlciBzdHJlYW1pbmcgbWV0aG9kICR7aGFuZGxlci5wYXRofWAsXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBudWxsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cmVhbSA9IG5ldyBzZXJ2ZXJfY2FsbF8xLlNlcnZlcldyaXRhYmxlU3RyZWFtSW1wbChoYW5kbGVyLnBhdGgsIGNhbGwsIHJlcXVlc3RNZXRhZGF0YSwgcmVxdWVzdE1lc3NhZ2UpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmZ1bmMoc3RyZWFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsLnNlbmRTdGF0dXMoe1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb25zdGFudHNfMS5TdGF0dXMuVU5LTk9XTixcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogYFNlcnZlciBtZXRob2QgaGFuZGxlciB0aHJldyBlcnJvciAke2Vyci5tZXNzYWdlfWAsXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBudWxsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkNhbmNlbCgpIHtcbiAgICAgICAgICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICBzdHJlYW0uY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzdHJlYW0uZW1pdCgnY2FuY2VsbGVkJywgJ2NhbmNlbGxlZCcpO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5mdW5jdGlvbiBoYW5kbGVCaWRpU3RyZWFtaW5nKGNhbGwsIGhhbmRsZXIpIHtcbiAgICBsZXQgc3RyZWFtO1xuICAgIGNhbGwuc3RhcnQoe1xuICAgICAgICBvblJlY2VpdmVNZXRhZGF0YShtZXRhZGF0YSkge1xuICAgICAgICAgICAgc3RyZWFtID0gbmV3IHNlcnZlcl9jYWxsXzEuU2VydmVyRHVwbGV4U3RyZWFtSW1wbChoYW5kbGVyLnBhdGgsIGNhbGwsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlci5mdW5jKHN0cmVhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbC5zZW5kU3RhdHVzKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogY29uc3RhbnRzXzEuU3RhdHVzLlVOS05PV04sXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGBTZXJ2ZXIgbWV0aG9kIGhhbmRsZXIgdGhyZXcgZXJyb3IgJHtlcnIubWVzc2FnZX1gLFxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbnVsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25SZWNlaXZlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgICAgICBzdHJlYW0ucHVzaChtZXNzYWdlKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZWNlaXZlSGFsZkNsb3NlKCkge1xuICAgICAgICAgICAgc3RyZWFtLnB1c2gobnVsbCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2FuY2VsKCkge1xuICAgICAgICAgICAgaWYgKHN0cmVhbSkge1xuICAgICAgICAgICAgICAgIHN0cmVhbS5jYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdjYW5jZWxsZWQnLCAnY2FuY2VsbGVkJyk7XG4gICAgICAgICAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZlci5qcy5tYXAiXSwibmFtZXMiOlsiX19ydW5Jbml0aWFsaXplcnMiLCJ0aGlzQXJnIiwiaW5pdGlhbGl6ZXJzIiwidmFsdWUiLCJ1c2VWYWx1ZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImkiLCJjYWxsIiwiX19lc0RlY29yYXRlIiwiY3RvciIsImRlc2NyaXB0b3JJbiIsImRlY29yYXRvcnMiLCJjb250ZXh0SW4iLCJleHRyYUluaXRpYWxpemVycyIsImFjY2VwdCIsImYiLCJUeXBlRXJyb3IiLCJraW5kIiwia2V5IiwidGFyZ2V0IiwicHJvdG90eXBlIiwiZGVzY3JpcHRvciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm5hbWUiLCJfIiwiZG9uZSIsImNvbnRleHQiLCJwIiwiYWNjZXNzIiwiYWRkSW5pdGlhbGl6ZXIiLCJwdXNoIiwicmVzdWx0IiwiZ2V0Iiwic2V0IiwiaW5pdCIsInVuc2hpZnQiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJTZXJ2ZXIiLCJodHRwMiIsInJlcXVpcmUiLCJ1dGlsIiwiY29uc3RhbnRzXzEiLCJzZXJ2ZXJfY2FsbF8xIiwic2VydmVyX2NyZWRlbnRpYWxzXzEiLCJyZXNvbHZlcl8xIiwibG9nZ2luZyIsInN1YmNoYW5uZWxfYWRkcmVzc18xIiwidXJpX3BhcnNlcl8xIiwiY2hhbm5lbHpfMSIsInNlcnZlcl9pbnRlcmNlcHRvcnNfMSIsIlVOTElNSVRFRF9DT05ORUNUSU9OX0FHRV9NUyIsIktFRVBBTElWRV9NQVhfVElNRV9NUyIsIktFRVBBTElWRV9USU1FT1VUX01TIiwiTUFYX0NPTk5FQ1RJT05fSURMRV9NUyIsIkhUVFAyX0hFQURFUl9QQVRIIiwiY29uc3RhbnRzIiwiVFJBQ0VSX05BTUUiLCJrTWF4QWdlIiwiQnVmZmVyIiwiZnJvbSIsInNlcnZlckNhbGxUcmFjZSIsInRleHQiLCJ0cmFjZSIsIkxvZ1ZlcmJvc2l0eSIsIkRFQlVHIiwibm9vcCIsImRlcHJlY2F0ZSIsIm1lc3NhZ2UiLCJnZXRVbmltcGxlbWVudGVkU3RhdHVzUmVzcG9uc2UiLCJtZXRob2ROYW1lIiwiY29kZSIsIlN0YXR1cyIsIlVOSU1QTEVNRU5URUQiLCJkZXRhaWxzIiwiZ2V0RGVmYXVsdEhhbmRsZXIiLCJoYW5kbGVyVHlwZSIsInVuaW1wbGVtZW50ZWRTdGF0dXNSZXNwb25zZSIsImNhbGxiYWNrIiwiZW1pdCIsIkVycm9yIiwiX2EiLCJfaW5zdGFuY2VFeHRyYUluaXRpYWxpemVycyIsIl9zdGFydF9kZWNvcmF0b3JzIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiX2IiLCJfYyIsIl9kIiwiX2UiLCJfZiIsIl9nIiwiYm91bmRQb3J0cyIsIk1hcCIsImh0dHAyU2VydmVycyIsInNlc3Npb25JZGxlVGltZW91dHMiLCJoYW5kbGVycyIsInNlc3Npb25zIiwic3RhcnRlZCIsInNodXRkb3duIiwic2VydmVyQWRkcmVzc1N0cmluZyIsImNoYW5uZWx6RW5hYmxlZCIsImNoYW5uZWx6VHJhY2UiLCJDaGFubmVselRyYWNlU3R1YiIsImNhbGxUcmFja2VyIiwiQ2hhbm5lbHpDYWxsVHJhY2tlclN0dWIiLCJsaXN0ZW5lckNoaWxkcmVuVHJhY2tlciIsIkNoYW5uZWx6Q2hpbGRyZW5UcmFja2VyU3R1YiIsInNlc3Npb25DaGlsZHJlblRyYWNrZXIiLCJDaGFubmVselRyYWNlIiwiQ2hhbm5lbHpDYWxsVHJhY2tlciIsIkNoYW5uZWx6Q2hpbGRyZW5UcmFja2VyIiwiY2hhbm5lbHpSZWYiLCJyZWdpc3RlckNoYW5uZWx6U2VydmVyIiwiZ2V0Q2hhbm5lbHpJbmZvIiwiYWRkVHJhY2UiLCJtYXhDb25uZWN0aW9uQWdlTXMiLCJtYXhDb25uZWN0aW9uQWdlR3JhY2VNcyIsImtlZXBhbGl2ZVRpbWVNcyIsImtlZXBhbGl2ZVRpbWVvdXRNcyIsInNlc3Npb25JZGxlVGltZW91dCIsImNvbW1vblNlcnZlck9wdGlvbnMiLCJtYXhTZW5kSGVhZGVyQmxvY2tMZW5ndGgiLCJOdW1iZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwibWF4U2Vzc2lvbk1lbW9yeSIsInNldHRpbmdzIiwibWF4Q29uY3VycmVudFN0cmVhbXMiLCJpbnRlcmNlcHRvcnMiLCJsaXN0ZW5lckNoaWxkcmVuIiwiZ2V0Q2hpbGRMaXN0cyIsInNlc3Npb25DaGlsZHJlbiIsImdldENoYW5uZWx6U2Vzc2lvbkluZm8iLCJzZXNzaW9uIiwic2Vzc2lvbkluZm8iLCJzZXNzaW9uU29ja2V0Iiwic29ja2V0IiwicmVtb3RlQWRkcmVzcyIsInN0cmluZ1RvU3ViY2hhbm5lbEFkZHJlc3MiLCJyZW1vdGVQb3J0IiwibG9jYWxBZGRyZXNzIiwibG9jYWxQb3J0IiwidGxzSW5mbyIsImVuY3J5cHRlZCIsInRsc1NvY2tldCIsImNpcGhlckluZm8iLCJnZXRDaXBoZXIiLCJjZXJ0aWZpY2F0ZSIsImdldENlcnRpZmljYXRlIiwicGVlckNlcnRpZmljYXRlIiwiZ2V0UGVlckNlcnRpZmljYXRlIiwiY2lwaGVyU3VpdGVTdGFuZGFyZE5hbWUiLCJzdGFuZGFyZE5hbWUiLCJjaXBoZXJTdWl0ZU90aGVyTmFtZSIsImxvY2FsQ2VydGlmaWNhdGUiLCJyYXciLCJyZW1vdGVDZXJ0aWZpY2F0ZSIsInNvY2tldEluZm8iLCJzZWN1cml0eSIsInJlbW90ZU5hbWUiLCJzdHJlYW1zU3RhcnRlZCIsInN0cmVhbVRyYWNrZXIiLCJjYWxsc1N0YXJ0ZWQiLCJzdHJlYW1zU3VjY2VlZGVkIiwiY2FsbHNTdWNjZWVkZWQiLCJzdHJlYW1zRmFpbGVkIiwiY2FsbHNGYWlsZWQiLCJtZXNzYWdlc1NlbnQiLCJtZXNzYWdlc1JlY2VpdmVkIiwia2VlcEFsaXZlc1NlbnQiLCJsYXN0TG9jYWxTdHJlYW1DcmVhdGVkVGltZXN0YW1wIiwibGFzdFJlbW90ZVN0cmVhbUNyZWF0ZWRUaW1lc3RhbXAiLCJsYXN0Q2FsbFN0YXJ0ZWRUaW1lc3RhbXAiLCJsYXN0TWVzc2FnZVNlbnRUaW1lc3RhbXAiLCJsYXN0TWVzc2FnZVJlY2VpdmVkVGltZXN0YW1wIiwibG9jYWxGbG93Q29udHJvbFdpbmRvdyIsInN0YXRlIiwibG9jYWxXaW5kb3dTaXplIiwicmVtb3RlRmxvd0NvbnRyb2xXaW5kb3ciLCJyZW1vdGVXaW5kb3dTaXplIiwiaWQiLCJrZWVwYWxpdmVUcmFjZSIsImFkZFByb3RvU2VydmljZSIsImFkZFNlcnZpY2UiLCJzZXJ2aWNlIiwiaW1wbGVtZW50YXRpb24iLCJzZXJ2aWNlS2V5cyIsImtleXMiLCJmb3JFYWNoIiwiYXR0cnMiLCJtZXRob2RUeXBlIiwicmVxdWVzdFN0cmVhbSIsInJlc3BvbnNlU3RyZWFtIiwiaW1wbEZuIiwiaW1wbCIsInVuZGVmaW5lZCIsIm9yaWdpbmFsTmFtZSIsImJpbmQiLCJzdWNjZXNzIiwicmVnaXN0ZXIiLCJwYXRoIiwicmVzcG9uc2VTZXJpYWxpemUiLCJyZXF1ZXN0RGVzZXJpYWxpemUiLCJyZW1vdmVTZXJ2aWNlIiwidW5yZWdpc3RlciIsInBvcnQiLCJjcmVkcyIsImV4cGVyaW1lbnRhbFJlZ2lzdGVyTGlzdGVuZXJUb0NoYW5uZWx6IiwiYm91bmRBZGRyZXNzIiwicmVnaXN0ZXJDaGFubmVselNvY2tldCIsInN1YmNoYW5uZWxBZGRyZXNzVG9TdHJpbmciLCJleHBlcmltZW50YWxVbnJlZ2lzdGVyTGlzdGVuZXJGcm9tQ2hhbm5lbHoiLCJ1bnJlZ2lzdGVyQ2hhbm5lbHpSZWYiLCJjcmVhdGVIdHRwMlNlcnZlciIsImNyZWRlbnRpYWxzIiwiaHR0cDJTZXJ2ZXIiLCJfaXNTZWN1cmUiLCJjb25zdHJ1Y3Rvck9wdGlvbnMiLCJfZ2V0Q29uc3RydWN0b3JPcHRpb25zIiwiY29udGV4dE9wdGlvbnMiLCJfZ2V0U2VjdXJlQ29udGV4dE9wdGlvbnMiLCJzZWN1cmVTZXJ2ZXJPcHRpb25zIiwiYXNzaWduIiwiZW5hYmxlVHJhY2UiLCJhcmVDcmVkZW50aWFsc1ZhbGlkIiwiY3JlYXRlU2VjdXJlU2VydmVyIiwicHJlcGVuZExpc3RlbmVyIiwiSlNPTiIsInN0cmluZ2lmeSIsImFkZHJlc3MiLCJkZXN0cm95Iiwib24iLCJlIiwiY3JlZHNXYXRjaGVyIiwic2VjdXJlU2VydmVyIiwic2V0U2VjdXJlQ29udGV4dCIsImxvZyIsIkVSUk9SIiwiX2FkZFdhdGNoZXIiLCJfcmVtb3ZlV2F0Y2hlciIsImNyZWF0ZVNlcnZlciIsInNldFRpbWVvdXQiLCJfc2V0dXBIYW5kbGVycyIsIl9nZXRJbnRlcmNlcHRvcnMiLCJiaW5kT25lQWRkcmVzcyIsImJvdW5kUG9ydE9iamVjdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25FcnJvciIsImVyciIsImVycm9yIiwib25jZSIsImxpc3RlbiIsImJvdW5kU3ViY2hhbm5lbEFkZHJlc3MiLCJob3N0IiwicmVmQ2hpbGQiLCJTZXQiLCJvd25zQ2hhbm5lbHpSZWYiLCJsaXN0ZW5pbmdTZXJ2ZXJzIiwiYWRkIiwicmVtb3ZlTGlzdGVuZXIiLCJiaW5kTWFueVBvcnRzIiwiYWRkcmVzc0xpc3QiLCJjb3VudCIsImVycm9ycyIsImlzVGNwU3ViY2hhbm5lbEFkZHJlc3MiLCJmaXJzdEFkZHJlc3NSZXN1bHQiLCJyZXN0QWRkcmVzc1Jlc3VsdCIsInNsaWNlIiwicmVzdEFkZHJlc3NlcyIsIm1hcCIsImFsbCIsImFsbFJlc3VsdHMiLCJmaWx0ZXIiLCJiaW5kQWRkcmVzc0xpc3QiLCJiaW5kUmVzdWx0IiwiSU5GTyIsImVycm9yU3RyaW5nIiwiam9pbiIsInJlc29sdmVQb3J0IiwicmVzb2x2ZXJMaXN0ZW5lciIsIm9uU3VjY2Vzc2Z1bFJlc29sdXRpb24iLCJlbmRwb2ludExpc3QiLCJzZXJ2aWNlQ29uZmlnIiwic2VydmljZUNvbmZpZ0Vycm9yIiwiY29uY2F0IiwiZW5kcG9pbnQiLCJhZGRyZXNzZXMiLCJyZXNvbHZlciIsImNyZWF0ZVJlc29sdmVyIiwidXBkYXRlUmVzb2x1dGlvbiIsImJpbmRQb3J0IiwiY2FuY2VsbGVkIiwiY29tcGxldGVVbmJpbmQiLCJwb3J0TnVtYmVyIiwibm9ybWFsaXplUG9ydCIsImluaXRpYWxQb3J0VXJpIiwicGFyc2VVcmkiLCJwb3J0VXJpIiwibWFwVXJpRGVmYXVsdFNjaGVtZSIsImJpbmRBc3luYyIsIlNlcnZlckNyZWRlbnRpYWxzIiwiZGVmZXJyZWRDYWxsYmFjayIsInByb2Nlc3MiLCJuZXh0VGljayIsInVyaVRvU3RyaW5nIiwiX2VxdWFscyIsImNvbXBsZXRpb25Qcm9taXNlIiwidGhlbiIsInBvcnROdW0iLCJtYXBLZXkiLCJvcmlnaW5hbFVyaSIsInNwbGl0UG9ydCIsInNwbGl0SG9zdFBvcnQiLCJmaW5hbFVyaSIsInNjaGVtZSIsImF1dGhvcml0eSIsImNvbWJpbmVIb3N0UG9ydCIsInJlZ2lzdGVySW5qZWN0b3JUb0NoYW5uZWx6IiwiZXhwZXJpbWVudGFsQ3JlYXRlQ29ubmVjdGlvbkluamVjdG9yV2l0aENoYW5uZWx6UmVmIiwic2VydmVyIiwic2Vzc2lvbnNTZXQiLCJpbmplY3RDb25uZWN0aW9uIiwiY29ubmVjdGlvbiIsImRyYWluIiwiZ3JhY2VUaW1lTXMiLCJjbG9zZVNlc3Npb24iLCJOR0hUVFAyX0NBTkNFTCIsInVucmVmIiwiY2xvc2VTZXJ2ZXIiLCJjcmVhdGVDb25uZWN0aW9uSW5qZWN0b3IiLCJzZXJ2ZXJJbmZvIiwiY2xvc2UiLCJ1bnJlZkNoaWxkIiwiZGVsZXRlIiwiY2xvc2VDYWxsYmFjayIsInJlZiIsImNsb3NlZCIsInF1ZXVlTWljcm90YXNrIiwidW5iaW5kIiwiYWxsU2Vzc2lvbnMiLCJzZXJ2ZXJFbnRyeSIsImZvcmNlU2h1dGRvd24iLCJ2YWx1ZXMiLCJjbGVhciIsImNoYW5uZWx6SW5mbyIsImhhbmRsZXIiLCJzZXJpYWxpemUiLCJkZXNlcmlhbGl6ZSIsInR5cGUiLCJoYXMiLCJmdW5jIiwic3RhcnQiLCJzaXplIiwiZXZlcnkiLCJsaXN0ZW5pbmciLCJ0cnlTaHV0ZG93biIsIndyYXBwZWRDYWxsYmFjayIsInBlbmRpbmdDaGVja3MiLCJtYXliZUNhbGxiYWNrIiwic2VydmVyS2V5IiwiZW50cmllcyIsInNlcnZlclN0cmluZyIsInNlc3Npb25TdHJpbmciLCJhZGRIdHRwMlBvcnQiLCJnZXRDaGFubmVselJlZiIsIl92ZXJpZnlDb250ZW50VHlwZSIsInN0cmVhbSIsImhlYWRlcnMiLCJjb250ZW50VHlwZSIsIkhUVFAyX0hFQURFUl9DT05URU5UX1RZUEUiLCJzdGFydHNXaXRoIiwicmVzcG9uZCIsIkhUVFAyX0hFQURFUl9TVEFUVVMiLCJIVFRQX1NUQVRVU19VTlNVUFBPUlRFRF9NRURJQV9UWVBFIiwiZW5kU3RyZWFtIiwiX3JldHJpZXZlSGFuZGxlciIsIl9yZXNwb25kV2l0aEVycm9yIiwiY2hhbm5lbHpTZXNzaW9uSW5mbyIsInRyYWlsZXJzVG9TZW5kIiwiSU5URVJOQUwiLCJIVFRQX1NUQVRVU19PSyIsIm1ldGFkYXRhIiwidG9IdHRwMkhlYWRlcnMiLCJhZGRDYWxsRmFpbGVkIiwiX2NoYW5uZWx6SGFuZGxlciIsImV4dHJhSW50ZXJjZXB0b3JzIiwib25TdHJlYW1PcGVuZWQiLCJhZGRDYWxsU3RhcnRlZCIsImNhbGxFdmVudFRyYWNrZXIiLCJhZGRNZXNzYWdlU2VudCIsIkRhdGUiLCJhZGRNZXNzYWdlUmVjZWl2ZWQiLCJvbkNhbGxFbmQiLCJzdGF0dXMiLCJPSyIsImFkZENhbGxTdWNjZWVkZWQiLCJvblN0cmVhbUVuZCIsImdldFNlcnZlckludGVyY2VwdGluZ0NhbGwiLCJfcnVuSGFuZGxlckZvckNhbGwiLCJzZW5kU3RhdHVzIiwiX3N0cmVhbUhhbmRsZXIiLCJoYW5kbGVVbmFyeSIsImhhbmRsZUNsaWVudFN0cmVhbWluZyIsImhhbmRsZVNlcnZlclN0cmVhbWluZyIsImhhbmRsZUJpZGlTdHJlYW1pbmciLCJzZXJ2ZXJBZGRyZXNzIiwic2Vzc2lvbkhhbmRsZXIiLCJfY2hhbm5lbHpTZXNzaW9uSGFuZGxlciIsIl9zZXNzaW9uSGFuZGxlciIsImNvbm5lY3Rpb25BZ2VUaW1lciIsImNvbm5lY3Rpb25BZ2VHcmFjZVRpbWVyIiwia2VlcGFsaXZlVGltZXIiLCJzZXNzaW9uQ2xvc2VkQnlTZXJ2ZXIiLCJpZGxlVGltZW91dE9iaiIsImVuYWJsZUlkbGVUaW1lb3V0Iiwiaml0dGVyTWFnbml0dWRlIiwiaml0dGVyIiwiTWF0aCIsInJhbmRvbSIsImdvYXdheSIsIk5HSFRUUDJfTk9fRVJST1IiLCJjbGVhcktlZXBhbGl2ZVRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjYW5TZW5kUGluZyIsImRlc3Ryb3llZCIsInNlbmRQaW5nIiwibWF5YmVTdGFydEtlZXBhbGl2ZVBpbmdUaW1lciIsInBpbmdTZW5kRXJyb3IiLCJwaW5nU2VudFN1Y2Nlc3NmdWxseSIsInBpbmciLCJkdXJhdGlvbiIsInBheWxvYWQiLCJ0aW1lb3V0IiwiY2xpZW50QWRkcmVzcyIsImtlZXBhbGl2ZVRpbWVvdXQiLCJhY3RpdmVTdHJlYW1zIiwibGFzdElkbGUiLCJub3ciLCJvbkNsb3NlIiwib25TdHJlYW1DbG9zZSIsIm9uSWRsZVRpbWVvdXQiLCJjdHgiLCJyZWZyZXNoIiwiX21ldGFkYXRhIiwiU3ltYm9sIiwiY3JlYXRlIiwic3RhdGljIiwicHJpdmF0ZSIsIm9iaiIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInRyYWlsZXIiLCJmbGFncyIsInNlcnZlckVycm9yVG9TdGF0dXMiLCJzZW5kTWVzc2FnZSIsInJlcXVlc3RNZXRhZGF0YSIsInJlcXVlc3RNZXNzYWdlIiwib25SZWNlaXZlTWV0YWRhdGEiLCJzdGFydFJlYWQiLCJvblJlY2VpdmVNZXNzYWdlIiwib25SZWNlaXZlSGFsZkNsb3NlIiwiU2VydmVyV3JpdGFibGVTdHJlYW1JbXBsIiwiVU5LTk9XTiIsIm9uQ2FuY2VsIiwiU2VydmVyRHVwbGV4U3RyZWFtSW1wbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/service-config.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/service-config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validateRetryThrottling = validateRetryThrottling;\nexports.validateServiceConfig = validateServiceConfig;\nexports.extractAndSelectServiceConfig = extractAndSelectServiceConfig;\n/* This file implements gRFC A2 and the service config spec:\n * https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md\n * https://github.com/grpc/grpc/blob/master/doc/service_config.md. Each\n * function here takes an object with unknown structure and returns its\n * specific object type if the input has the right structure, and throws an\n * error otherwise. */ /* The any type is purposely used here. All functions validate their input at\n * runtime */ /* eslint-disable @typescript-eslint/no-explicit-any */ const os = __webpack_require__(/*! os */ \"os\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\n/**\n * Recognizes a number with up to 9 digits after the decimal point, followed by\n * an \"s\", representing a number of seconds.\n */ const DURATION_REGEX = /^\\d+(\\.\\d{1,9})?s$/;\n/**\n * Client language name used for determining whether this client matches a\n * `ServiceConfigCanaryConfig`'s `clientLanguage` list.\n */ const CLIENT_LANGUAGE_STRING = \"node\";\nfunction validateName(obj) {\n    // In this context, and unset field and '' are considered the same\n    if (\"service\" in obj && obj.service !== \"\") {\n        if (typeof obj.service !== \"string\") {\n            throw new Error(`Invalid method config name: invalid service: expected type string, got ${typeof obj.service}`);\n        }\n        if (\"method\" in obj && obj.method !== \"\") {\n            if (typeof obj.method !== \"string\") {\n                throw new Error(`Invalid method config name: invalid method: expected type string, got ${typeof obj.service}`);\n            }\n            return {\n                service: obj.service,\n                method: obj.method\n            };\n        } else {\n            return {\n                service: obj.service\n            };\n        }\n    } else {\n        if (\"method\" in obj && obj.method !== undefined) {\n            throw new Error(`Invalid method config name: method set with empty or unset service`);\n        }\n        return {};\n    }\n}\nfunction validateRetryPolicy(obj) {\n    if (!(\"maxAttempts\" in obj) || !Number.isInteger(obj.maxAttempts) || obj.maxAttempts < 2) {\n        throw new Error(\"Invalid method config retry policy: maxAttempts must be an integer at least 2\");\n    }\n    if (!(\"initialBackoff\" in obj) || typeof obj.initialBackoff !== \"string\" || !DURATION_REGEX.test(obj.initialBackoff)) {\n        throw new Error(\"Invalid method config retry policy: initialBackoff must be a string consisting of a positive integer or decimal followed by s\");\n    }\n    if (!(\"maxBackoff\" in obj) || typeof obj.maxBackoff !== \"string\" || !DURATION_REGEX.test(obj.maxBackoff)) {\n        throw new Error(\"Invalid method config retry policy: maxBackoff must be a string consisting of a positive integer or decimal followed by s\");\n    }\n    if (!(\"backoffMultiplier\" in obj) || typeof obj.backoffMultiplier !== \"number\" || obj.backoffMultiplier <= 0) {\n        throw new Error(\"Invalid method config retry policy: backoffMultiplier must be a number greater than 0\");\n    }\n    if (!(\"retryableStatusCodes\" in obj && Array.isArray(obj.retryableStatusCodes))) {\n        throw new Error(\"Invalid method config retry policy: retryableStatusCodes is required\");\n    }\n    if (obj.retryableStatusCodes.length === 0) {\n        throw new Error(\"Invalid method config retry policy: retryableStatusCodes must be non-empty\");\n    }\n    for (const value of obj.retryableStatusCodes){\n        if (typeof value === \"number\") {\n            if (!Object.values(constants_1.Status).includes(value)) {\n                throw new Error(\"Invalid method config retry policy: retryableStatusCodes value not in status code range\");\n            }\n        } else if (typeof value === \"string\") {\n            if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {\n                throw new Error(\"Invalid method config retry policy: retryableStatusCodes value not a status code name\");\n            }\n        } else {\n            throw new Error(\"Invalid method config retry policy: retryableStatusCodes value must be a string or number\");\n        }\n    }\n    return {\n        maxAttempts: obj.maxAttempts,\n        initialBackoff: obj.initialBackoff,\n        maxBackoff: obj.maxBackoff,\n        backoffMultiplier: obj.backoffMultiplier,\n        retryableStatusCodes: obj.retryableStatusCodes\n    };\n}\nfunction validateHedgingPolicy(obj) {\n    if (!(\"maxAttempts\" in obj) || !Number.isInteger(obj.maxAttempts) || obj.maxAttempts < 2) {\n        throw new Error(\"Invalid method config hedging policy: maxAttempts must be an integer at least 2\");\n    }\n    if (\"hedgingDelay\" in obj && (typeof obj.hedgingDelay !== \"string\" || !DURATION_REGEX.test(obj.hedgingDelay))) {\n        throw new Error(\"Invalid method config hedging policy: hedgingDelay must be a string consisting of a positive integer followed by s\");\n    }\n    if (\"nonFatalStatusCodes\" in obj && Array.isArray(obj.nonFatalStatusCodes)) {\n        for (const value of obj.nonFatalStatusCodes){\n            if (typeof value === \"number\") {\n                if (!Object.values(constants_1.Status).includes(value)) {\n                    throw new Error(\"Invalid method config hedging policy: nonFatalStatusCodes value not in status code range\");\n                }\n            } else if (typeof value === \"string\") {\n                if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {\n                    throw new Error(\"Invalid method config hedging policy: nonFatalStatusCodes value not a status code name\");\n                }\n            } else {\n                throw new Error(\"Invalid method config hedging policy: nonFatalStatusCodes value must be a string or number\");\n            }\n        }\n    }\n    const result = {\n        maxAttempts: obj.maxAttempts\n    };\n    if (obj.hedgingDelay) {\n        result.hedgingDelay = obj.hedgingDelay;\n    }\n    if (obj.nonFatalStatusCodes) {\n        result.nonFatalStatusCodes = obj.nonFatalStatusCodes;\n    }\n    return result;\n}\nfunction validateMethodConfig(obj) {\n    var _a;\n    const result = {\n        name: []\n    };\n    if (!(\"name\" in obj) || !Array.isArray(obj.name)) {\n        throw new Error(\"Invalid method config: invalid name array\");\n    }\n    for (const name of obj.name){\n        result.name.push(validateName(name));\n    }\n    if (\"waitForReady\" in obj) {\n        if (typeof obj.waitForReady !== \"boolean\") {\n            throw new Error(\"Invalid method config: invalid waitForReady\");\n        }\n        result.waitForReady = obj.waitForReady;\n    }\n    if (\"timeout\" in obj) {\n        if (typeof obj.timeout === \"object\") {\n            if (!(\"seconds\" in obj.timeout) || !(typeof obj.timeout.seconds === \"number\")) {\n                throw new Error(\"Invalid method config: invalid timeout.seconds\");\n            }\n            if (!(\"nanos\" in obj.timeout) || !(typeof obj.timeout.nanos === \"number\")) {\n                throw new Error(\"Invalid method config: invalid timeout.nanos\");\n            }\n            result.timeout = obj.timeout;\n        } else if (typeof obj.timeout === \"string\" && DURATION_REGEX.test(obj.timeout)) {\n            const timeoutParts = obj.timeout.substring(0, obj.timeout.length - 1).split(\".\");\n            result.timeout = {\n                seconds: timeoutParts[0] | 0,\n                nanos: ((_a = timeoutParts[1]) !== null && _a !== void 0 ? _a : 0) | 0\n            };\n        } else {\n            throw new Error(\"Invalid method config: invalid timeout\");\n        }\n    }\n    if (\"maxRequestBytes\" in obj) {\n        if (typeof obj.maxRequestBytes !== \"number\") {\n            throw new Error(\"Invalid method config: invalid maxRequestBytes\");\n        }\n        result.maxRequestBytes = obj.maxRequestBytes;\n    }\n    if (\"maxResponseBytes\" in obj) {\n        if (typeof obj.maxResponseBytes !== \"number\") {\n            throw new Error(\"Invalid method config: invalid maxRequestBytes\");\n        }\n        result.maxResponseBytes = obj.maxResponseBytes;\n    }\n    if (\"retryPolicy\" in obj) {\n        if (\"hedgingPolicy\" in obj) {\n            throw new Error(\"Invalid method config: retryPolicy and hedgingPolicy cannot both be specified\");\n        } else {\n            result.retryPolicy = validateRetryPolicy(obj.retryPolicy);\n        }\n    } else if (\"hedgingPolicy\" in obj) {\n        result.hedgingPolicy = validateHedgingPolicy(obj.hedgingPolicy);\n    }\n    return result;\n}\nfunction validateRetryThrottling(obj) {\n    if (!(\"maxTokens\" in obj) || typeof obj.maxTokens !== \"number\" || obj.maxTokens <= 0 || obj.maxTokens > 1000) {\n        throw new Error(\"Invalid retryThrottling: maxTokens must be a number in (0, 1000]\");\n    }\n    if (!(\"tokenRatio\" in obj) || typeof obj.tokenRatio !== \"number\" || obj.tokenRatio <= 0) {\n        throw new Error(\"Invalid retryThrottling: tokenRatio must be a number greater than 0\");\n    }\n    return {\n        maxTokens: +obj.maxTokens.toFixed(3),\n        tokenRatio: +obj.tokenRatio.toFixed(3)\n    };\n}\nfunction validateLoadBalancingConfig(obj) {\n    if (!(typeof obj === \"object\" && obj !== null)) {\n        throw new Error(`Invalid loadBalancingConfig: unexpected type ${typeof obj}`);\n    }\n    const keys = Object.keys(obj);\n    if (keys.length > 1) {\n        throw new Error(`Invalid loadBalancingConfig: unexpected multiple keys ${keys}`);\n    }\n    if (keys.length === 0) {\n        throw new Error(\"Invalid loadBalancingConfig: load balancing policy name required\");\n    }\n    return {\n        [keys[0]]: obj[keys[0]]\n    };\n}\nfunction validateServiceConfig(obj) {\n    const result = {\n        loadBalancingConfig: [],\n        methodConfig: []\n    };\n    if (\"loadBalancingPolicy\" in obj) {\n        if (typeof obj.loadBalancingPolicy === \"string\") {\n            result.loadBalancingPolicy = obj.loadBalancingPolicy;\n        } else {\n            throw new Error(\"Invalid service config: invalid loadBalancingPolicy\");\n        }\n    }\n    if (\"loadBalancingConfig\" in obj) {\n        if (Array.isArray(obj.loadBalancingConfig)) {\n            for (const config of obj.loadBalancingConfig){\n                result.loadBalancingConfig.push(validateLoadBalancingConfig(config));\n            }\n        } else {\n            throw new Error(\"Invalid service config: invalid loadBalancingConfig\");\n        }\n    }\n    if (\"methodConfig\" in obj) {\n        if (Array.isArray(obj.methodConfig)) {\n            for (const methodConfig of obj.methodConfig){\n                result.methodConfig.push(validateMethodConfig(methodConfig));\n            }\n        }\n    }\n    if (\"retryThrottling\" in obj) {\n        result.retryThrottling = validateRetryThrottling(obj.retryThrottling);\n    }\n    // Validate method name uniqueness\n    const seenMethodNames = [];\n    for (const methodConfig of result.methodConfig){\n        for (const name of methodConfig.name){\n            for (const seenName of seenMethodNames){\n                if (name.service === seenName.service && name.method === seenName.method) {\n                    throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);\n                }\n            }\n            seenMethodNames.push(name);\n        }\n    }\n    return result;\n}\nfunction validateCanaryConfig(obj) {\n    if (!(\"serviceConfig\" in obj)) {\n        throw new Error(\"Invalid service config choice: missing service config\");\n    }\n    const result = {\n        serviceConfig: validateServiceConfig(obj.serviceConfig)\n    };\n    if (\"clientLanguage\" in obj) {\n        if (Array.isArray(obj.clientLanguage)) {\n            result.clientLanguage = [];\n            for (const lang of obj.clientLanguage){\n                if (typeof lang === \"string\") {\n                    result.clientLanguage.push(lang);\n                } else {\n                    throw new Error(\"Invalid service config choice: invalid clientLanguage\");\n                }\n            }\n        } else {\n            throw new Error(\"Invalid service config choice: invalid clientLanguage\");\n        }\n    }\n    if (\"clientHostname\" in obj) {\n        if (Array.isArray(obj.clientHostname)) {\n            result.clientHostname = [];\n            for (const lang of obj.clientHostname){\n                if (typeof lang === \"string\") {\n                    result.clientHostname.push(lang);\n                } else {\n                    throw new Error(\"Invalid service config choice: invalid clientHostname\");\n                }\n            }\n        } else {\n            throw new Error(\"Invalid service config choice: invalid clientHostname\");\n        }\n    }\n    if (\"percentage\" in obj) {\n        if (typeof obj.percentage === \"number\" && 0 <= obj.percentage && obj.percentage <= 100) {\n            result.percentage = obj.percentage;\n        } else {\n            throw new Error(\"Invalid service config choice: invalid percentage\");\n        }\n    }\n    // Validate that no unexpected fields are present\n    const allowedFields = [\n        \"clientLanguage\",\n        \"percentage\",\n        \"clientHostname\",\n        \"serviceConfig\"\n    ];\n    for(const field in obj){\n        if (!allowedFields.includes(field)) {\n            throw new Error(`Invalid service config choice: unexpected field ${field}`);\n        }\n    }\n    return result;\n}\nfunction validateAndSelectCanaryConfig(obj, percentage) {\n    if (!Array.isArray(obj)) {\n        throw new Error(\"Invalid service config list\");\n    }\n    for (const config of obj){\n        const validatedConfig = validateCanaryConfig(config);\n        /* For each field, we check if it is present, then only discard the\n         * config if the field value does not match the current client */ if (typeof validatedConfig.percentage === \"number\" && percentage > validatedConfig.percentage) {\n            continue;\n        }\n        if (Array.isArray(validatedConfig.clientHostname)) {\n            let hostnameMatched = false;\n            for (const hostname of validatedConfig.clientHostname){\n                if (hostname === os.hostname()) {\n                    hostnameMatched = true;\n                }\n            }\n            if (!hostnameMatched) {\n                continue;\n            }\n        }\n        if (Array.isArray(validatedConfig.clientLanguage)) {\n            let languageMatched = false;\n            for (const language of validatedConfig.clientLanguage){\n                if (language === CLIENT_LANGUAGE_STRING) {\n                    languageMatched = true;\n                }\n            }\n            if (!languageMatched) {\n                continue;\n            }\n        }\n        return validatedConfig.serviceConfig;\n    }\n    throw new Error(\"No matching service config found\");\n}\n/**\n * Find the \"grpc_config\" record among the TXT records, parse its value as JSON, validate its contents,\n * and select a service config with selection fields that all match this client. Most of these steps\n * can fail with an error; the caller must handle any errors thrown this way.\n * @param txtRecord The TXT record array that is output from a successful call to dns.resolveTxt\n * @param percentage A number chosen from the range [0, 100) that is used to select which config to use\n * @return The service configuration to use, given the percentage value, or null if the service config\n *     data has a valid format but none of the options match the current client.\n */ function extractAndSelectServiceConfig(txtRecord, percentage) {\n    for (const record of txtRecord){\n        if (record.length > 0 && record[0].startsWith(\"grpc_config=\")) {\n            /* Treat the list of strings in this record as a single string and remove\n             * \"grpc_config=\" from the beginning. The rest should be a JSON string */ const recordString = record.join(\"\").substring(\"grpc_config=\".length);\n            const recordJson = JSON.parse(recordString);\n            return validateAndSelectCanaryConfig(recordJson, percentage);\n        }\n    }\n    return null;\n} //# sourceMappingURL=service-config.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/service-config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/status-builder.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/status-builder.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StatusBuilder = void 0;\n/**\n * A builder for gRPC status objects.\n */ class StatusBuilder {\n    constructor(){\n        this.code = null;\n        this.details = null;\n        this.metadata = null;\n    }\n    /**\n     * Adds a status code to the builder.\n     */ withCode(code) {\n        this.code = code;\n        return this;\n    }\n    /**\n     * Adds details to the builder.\n     */ withDetails(details) {\n        this.details = details;\n        return this;\n    }\n    /**\n     * Adds metadata to the builder.\n     */ withMetadata(metadata) {\n        this.metadata = metadata;\n        return this;\n    }\n    /**\n     * Builds the status object.\n     */ build() {\n        const status = {};\n        if (this.code !== null) {\n            status.code = this.code;\n        }\n        if (this.details !== null) {\n            status.details = this.details;\n        }\n        if (this.metadata !== null) {\n            status.metadata = this.metadata;\n        }\n        return status;\n    }\n}\nexports.StatusBuilder = StatusBuilder; //# sourceMappingURL=status-builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3RhdHVzLWJ1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHLEtBQUs7QUFDN0I7O0NBRUMsR0FDRCxNQUFNRTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ3BCO0lBQ0E7O0tBRUMsR0FDREMsU0FBU0gsSUFBSSxFQUFFO1FBQ1gsSUFBSSxDQUFDQSxJQUFJLEdBQUdBO1FBQ1osT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7S0FFQyxHQUNESSxZQUFZSCxPQUFPLEVBQUU7UUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1FBQ2YsT0FBTyxJQUFJO0lBQ2Y7SUFDQTs7S0FFQyxHQUNESSxhQUFhSCxRQUFRLEVBQUU7UUFDbkIsSUFBSSxDQUFDQSxRQUFRLEdBQUdBO1FBQ2hCLE9BQU8sSUFBSTtJQUNmO0lBQ0E7O0tBRUMsR0FDREksUUFBUTtRQUNKLE1BQU1DLFNBQVMsQ0FBQztRQUNoQixJQUFJLElBQUksQ0FBQ1AsSUFBSSxLQUFLLE1BQU07WUFDcEJPLE9BQU9QLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUk7UUFDM0I7UUFDQSxJQUFJLElBQUksQ0FBQ0MsT0FBTyxLQUFLLE1BQU07WUFDdkJNLE9BQU9OLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU87UUFDakM7UUFDQSxJQUFJLElBQUksQ0FBQ0MsUUFBUSxLQUFLLE1BQU07WUFDeEJLLE9BQU9MLFFBQVEsR0FBRyxJQUFJLENBQUNBLFFBQVE7UUFDbkM7UUFDQSxPQUFPSztJQUNYO0FBQ0o7QUFDQVgscUJBQXFCLEdBQUdFLGVBQ3hCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9zdGF0dXMtYnVpbGRlci5qcz9kMjkyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0YXR1c0J1aWxkZXIgPSB2b2lkIDA7XG4vKipcbiAqIEEgYnVpbGRlciBmb3IgZ1JQQyBzdGF0dXMgb2JqZWN0cy5cbiAqL1xuY2xhc3MgU3RhdHVzQnVpbGRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY29kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IG51bGw7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgc3RhdHVzIGNvZGUgdG8gdGhlIGJ1aWxkZXIuXG4gICAgICovXG4gICAgd2l0aENvZGUoY29kZSkge1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBkZXRhaWxzIHRvIHRoZSBidWlsZGVyLlxuICAgICAqL1xuICAgIHdpdGhEZXRhaWxzKGRldGFpbHMpIHtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgbWV0YWRhdGEgdG8gdGhlIGJ1aWxkZXIuXG4gICAgICovXG4gICAgd2l0aE1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1aWxkcyB0aGUgc3RhdHVzIG9iamVjdC5cbiAgICAgKi9cbiAgICBidWlsZCgpIHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0ge307XG4gICAgICAgIGlmICh0aGlzLmNvZGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXR1cy5jb2RlID0gdGhpcy5jb2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRldGFpbHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXR1cy5kZXRhaWxzID0gdGhpcy5kZXRhaWxzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1ldGFkYXRhICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGF0dXMubWV0YWRhdGEgPSB0aGlzLm1ldGFkYXRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxufVxuZXhwb3J0cy5TdGF0dXNCdWlsZGVyID0gU3RhdHVzQnVpbGRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXR1cy1idWlsZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlN0YXR1c0J1aWxkZXIiLCJjb25zdHJ1Y3RvciIsImNvZGUiLCJkZXRhaWxzIiwibWV0YWRhdGEiLCJ3aXRoQ29kZSIsIndpdGhEZXRhaWxzIiwid2l0aE1ldGFkYXRhIiwiYnVpbGQiLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/status-builder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/stream-decoder.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StreamDecoder = void 0;\nvar ReadState;\n(function(ReadState) {\n    ReadState[ReadState[\"NO_DATA\"] = 0] = \"NO_DATA\";\n    ReadState[ReadState[\"READING_SIZE\"] = 1] = \"READING_SIZE\";\n    ReadState[ReadState[\"READING_MESSAGE\"] = 2] = \"READING_MESSAGE\";\n})(ReadState || (ReadState = {}));\nclass StreamDecoder {\n    constructor(maxReadMessageLength){\n        this.maxReadMessageLength = maxReadMessageLength;\n        this.readState = ReadState.NO_DATA;\n        this.readCompressFlag = Buffer.alloc(1);\n        this.readPartialSize = Buffer.alloc(4);\n        this.readSizeRemaining = 4;\n        this.readMessageSize = 0;\n        this.readPartialMessage = [];\n        this.readMessageRemaining = 0;\n    }\n    write(data) {\n        let readHead = 0;\n        let toRead;\n        const result = [];\n        while(readHead < data.length){\n            switch(this.readState){\n                case ReadState.NO_DATA:\n                    this.readCompressFlag = data.slice(readHead, readHead + 1);\n                    readHead += 1;\n                    this.readState = ReadState.READING_SIZE;\n                    this.readPartialSize.fill(0);\n                    this.readSizeRemaining = 4;\n                    this.readMessageSize = 0;\n                    this.readMessageRemaining = 0;\n                    this.readPartialMessage = [];\n                    break;\n                case ReadState.READING_SIZE:\n                    toRead = Math.min(data.length - readHead, this.readSizeRemaining);\n                    data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);\n                    this.readSizeRemaining -= toRead;\n                    readHead += toRead;\n                    // readSizeRemaining >=0 here\n                    if (this.readSizeRemaining === 0) {\n                        this.readMessageSize = this.readPartialSize.readUInt32BE(0);\n                        if (this.maxReadMessageLength !== -1 && this.readMessageSize > this.maxReadMessageLength) {\n                            throw new Error(`Received message larger than max (${this.readMessageSize} vs ${this.maxReadMessageLength})`);\n                        }\n                        this.readMessageRemaining = this.readMessageSize;\n                        if (this.readMessageRemaining > 0) {\n                            this.readState = ReadState.READING_MESSAGE;\n                        } else {\n                            const message = Buffer.concat([\n                                this.readCompressFlag,\n                                this.readPartialSize\n                            ], 5);\n                            this.readState = ReadState.NO_DATA;\n                            result.push(message);\n                        }\n                    }\n                    break;\n                case ReadState.READING_MESSAGE:\n                    toRead = Math.min(data.length - readHead, this.readMessageRemaining);\n                    this.readPartialMessage.push(data.slice(readHead, readHead + toRead));\n                    this.readMessageRemaining -= toRead;\n                    readHead += toRead;\n                    // readMessageRemaining >=0 here\n                    if (this.readMessageRemaining === 0) {\n                        // At this point, we have read a full message\n                        const framedMessageBuffers = [\n                            this.readCompressFlag,\n                            this.readPartialSize\n                        ].concat(this.readPartialMessage);\n                        const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);\n                        this.readState = ReadState.NO_DATA;\n                        result.push(framedMessage);\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unexpected read state\");\n            }\n        }\n        return result;\n    }\n}\nexports.StreamDecoder = StreamDecoder; //# sourceMappingURL=stream-decoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-address.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EndpointMap = void 0;\nexports.isTcpSubchannelAddress = isTcpSubchannelAddress;\nexports.subchannelAddressEqual = subchannelAddressEqual;\nexports.subchannelAddressToString = subchannelAddressToString;\nexports.stringToSubchannelAddress = stringToSubchannelAddress;\nexports.endpointEqual = endpointEqual;\nexports.endpointToString = endpointToString;\nexports.endpointHasAddress = endpointHasAddress;\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nfunction isTcpSubchannelAddress(address) {\n    return \"port\" in address;\n}\nfunction subchannelAddressEqual(address1, address2) {\n    if (!address1 && !address2) {\n        return true;\n    }\n    if (!address1 || !address2) {\n        return false;\n    }\n    if (isTcpSubchannelAddress(address1)) {\n        return isTcpSubchannelAddress(address2) && address1.host === address2.host && address1.port === address2.port;\n    } else {\n        return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n    }\n}\nfunction subchannelAddressToString(address) {\n    if (isTcpSubchannelAddress(address)) {\n        if ((0, net_1.isIPv6)(address.host)) {\n            return \"[\" + address.host + \"]:\" + address.port;\n        } else {\n            return address.host + \":\" + address.port;\n        }\n    } else {\n        return address.path;\n    }\n}\nconst DEFAULT_PORT = 443;\nfunction stringToSubchannelAddress(addressString, port) {\n    if ((0, net_1.isIP)(addressString)) {\n        return {\n            host: addressString,\n            port: port !== null && port !== void 0 ? port : DEFAULT_PORT\n        };\n    } else {\n        return {\n            path: addressString\n        };\n    }\n}\nfunction endpointEqual(endpoint1, endpoint2) {\n    if (endpoint1.addresses.length !== endpoint2.addresses.length) {\n        return false;\n    }\n    for(let i = 0; i < endpoint1.addresses.length; i++){\n        if (!subchannelAddressEqual(endpoint1.addresses[i], endpoint2.addresses[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction endpointToString(endpoint) {\n    return \"[\" + endpoint.addresses.map(subchannelAddressToString).join(\", \") + \"]\";\n}\nfunction endpointHasAddress(endpoint, expectedAddress) {\n    for (const address of endpoint.addresses){\n        if (subchannelAddressEqual(address, expectedAddress)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction endpointEqualUnordered(endpoint1, endpoint2) {\n    if (endpoint1.addresses.length !== endpoint2.addresses.length) {\n        return false;\n    }\n    for (const address1 of endpoint1.addresses){\n        let matchFound = false;\n        for (const address2 of endpoint2.addresses){\n            if (subchannelAddressEqual(address1, address2)) {\n                matchFound = true;\n                break;\n            }\n        }\n        if (!matchFound) {\n            return false;\n        }\n    }\n    return true;\n}\nclass EndpointMap {\n    constructor(){\n        this.map = new Set();\n    }\n    get size() {\n        return this.map.size;\n    }\n    getForSubchannelAddress(address) {\n        for (const entry of this.map){\n            if (endpointHasAddress(entry.key, address)) {\n                return entry.value;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Delete any entries in this map with keys that are not in endpoints\n     * @param endpoints\n     */ deleteMissing(endpoints) {\n        const removedValues = [];\n        for (const entry of this.map){\n            let foundEntry = false;\n            for (const endpoint of endpoints){\n                if (endpointEqualUnordered(endpoint, entry.key)) {\n                    foundEntry = true;\n                }\n            }\n            if (!foundEntry) {\n                removedValues.push(entry.value);\n                this.map.delete(entry);\n            }\n        }\n        return removedValues;\n    }\n    get(endpoint) {\n        for (const entry of this.map){\n            if (endpointEqualUnordered(endpoint, entry.key)) {\n                return entry.value;\n            }\n        }\n        return undefined;\n    }\n    set(endpoint, mapEntry) {\n        for (const entry of this.map){\n            if (endpointEqualUnordered(endpoint, entry.key)) {\n                entry.value = mapEntry;\n                return;\n            }\n        }\n        this.map.add({\n            key: endpoint,\n            value: mapEntry\n        });\n    }\n    delete(endpoint) {\n        for (const entry of this.map){\n            if (endpointEqualUnordered(endpoint, entry.key)) {\n                this.map.delete(entry);\n                return;\n            }\n        }\n    }\n    has(endpoint) {\n        for (const entry of this.map){\n            if (endpointEqualUnordered(endpoint, entry.key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    clear() {\n        this.map.clear();\n    }\n    *keys() {\n        for (const entry of this.map){\n            yield entry.key;\n        }\n    }\n    *values() {\n        for (const entry of this.map){\n            yield entry.value;\n        }\n    }\n    *entries() {\n        for (const entry of this.map){\n            yield [\n                entry.key,\n                entry.value\n            ];\n        }\n    }\n}\nexports.EndpointMap = EndpointMap; //# sourceMappingURL=subchannel-address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-call.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-call.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Http2SubchannelCall = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\nconst stream_decoder_1 = __webpack_require__(/*! ./stream-decoder */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst TRACER_NAME = \"subchannel_call\";\n/**\n * Should do approximately the same thing as util.getSystemErrorName but the\n * TypeScript types don't have that function for some reason so I just made my\n * own.\n * @param errno\n */ function getSystemErrorName(errno) {\n    for (const [name, num] of Object.entries(os.constants.errno)){\n        if (num === errno) {\n            return name;\n        }\n    }\n    return \"Unknown system error \" + errno;\n}\nfunction mapHttpStatusCode(code) {\n    const details = `Received HTTP status code ${code}`;\n    let mappedStatusCode;\n    switch(code){\n        // TODO(murgatroid99): handle 100 and 101\n        case 400:\n            mappedStatusCode = constants_1.Status.INTERNAL;\n            break;\n        case 401:\n            mappedStatusCode = constants_1.Status.UNAUTHENTICATED;\n            break;\n        case 403:\n            mappedStatusCode = constants_1.Status.PERMISSION_DENIED;\n            break;\n        case 404:\n            mappedStatusCode = constants_1.Status.UNIMPLEMENTED;\n            break;\n        case 429:\n        case 502:\n        case 503:\n        case 504:\n            mappedStatusCode = constants_1.Status.UNAVAILABLE;\n            break;\n        default:\n            mappedStatusCode = constants_1.Status.UNKNOWN;\n    }\n    return {\n        code: mappedStatusCode,\n        details: details,\n        metadata: new metadata_1.Metadata()\n    };\n}\nclass Http2SubchannelCall {\n    constructor(http2Stream, callEventTracker, listener, transport, callId){\n        var _a;\n        this.http2Stream = http2Stream;\n        this.callEventTracker = callEventTracker;\n        this.listener = listener;\n        this.transport = transport;\n        this.callId = callId;\n        this.isReadFilterPending = false;\n        this.isPushPending = false;\n        this.canPush = false;\n        /**\n         * Indicates that an 'end' event has come from the http2 stream, so there\n         * will be no more data events.\n         */ this.readsClosed = false;\n        this.statusOutput = false;\n        this.unpushedReadMessages = [];\n        // This is populated (non-null) if and only if the call has ended\n        this.finalStatus = null;\n        this.internalError = null;\n        this.serverEndedCall = false;\n        this.connectionDropped = false;\n        const maxReceiveMessageLength = (_a = transport.getOptions()[\"grpc.max_receive_message_length\"]) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n        this.decoder = new stream_decoder_1.StreamDecoder(maxReceiveMessageLength);\n        http2Stream.on(\"response\", (headers, flags)=>{\n            let headersString = \"\";\n            for (const header of Object.keys(headers)){\n                headersString += \"\t\t\" + header + \": \" + headers[header] + \"\\n\";\n            }\n            this.trace(\"Received server headers:\\n\" + headersString);\n            this.httpStatusCode = headers[\":status\"];\n            if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\n                this.handleTrailers(headers);\n            } else {\n                let metadata;\n                try {\n                    metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n                } catch (error) {\n                    this.endCall({\n                        code: constants_1.Status.UNKNOWN,\n                        details: error.message,\n                        metadata: new metadata_1.Metadata()\n                    });\n                    return;\n                }\n                this.listener.onReceiveMetadata(metadata);\n            }\n        });\n        http2Stream.on(\"trailers\", (headers)=>{\n            this.handleTrailers(headers);\n        });\n        http2Stream.on(\"data\", (data)=>{\n            /* If the status has already been output, allow the http2 stream to\n             * drain without processing the data. */ if (this.statusOutput) {\n                return;\n            }\n            this.trace(\"receive HTTP/2 data frame of length \" + data.length);\n            let messages;\n            try {\n                messages = this.decoder.write(data);\n            } catch (e) {\n                /* Some servers send HTML error pages along with HTTP status codes.\n                 * When the client attempts to parse this as a length-delimited\n                 * message, the parsed message size is greater than the default limit,\n                 * resulting in a message decoding error. In that situation, the HTTP\n                 * error code information is more useful to the user than the\n                 * RESOURCE_EXHAUSTED error is, so we report that instead. Normally,\n                 * we delay processing the HTTP status until after the stream ends, to\n                 * prioritize reporting the gRPC status from trailers if it is present,\n                 * but when there is a message parsing error we end the stream early\n                 * before processing trailers. */ if (this.httpStatusCode !== undefined && this.httpStatusCode !== 200) {\n                    const mappedStatus = mapHttpStatusCode(this.httpStatusCode);\n                    this.cancelWithStatus(mappedStatus.code, mappedStatus.details);\n                } else {\n                    this.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, e.message);\n                }\n                return;\n            }\n            for (const message of messages){\n                this.trace(\"parsed message of length \" + message.length);\n                this.callEventTracker.addMessageReceived();\n                this.tryPush(message);\n            }\n        });\n        http2Stream.on(\"end\", ()=>{\n            this.readsClosed = true;\n            this.maybeOutputStatus();\n        });\n        http2Stream.on(\"close\", ()=>{\n            this.serverEndedCall = true;\n            /* Use process.next tick to ensure that this code happens after any\n             * \"error\" event that may be emitted at about the same time, so that\n             * we can bubble up the error message from that event. */ process.nextTick(()=>{\n                var _a;\n                this.trace(\"HTTP/2 stream closed with code \" + http2Stream.rstCode);\n                /* If we have a final status with an OK status code, that means that\n                 * we have received all of the messages and we have processed the\n                 * trailers and the call completed successfully, so it doesn't matter\n                 * how the stream ends after that */ if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n                    return;\n                }\n                let code;\n                let details = \"\";\n                switch(http2Stream.rstCode){\n                    case http2.constants.NGHTTP2_NO_ERROR:\n                        /* If we get a NO_ERROR code and we already have a status, the\n                         * stream completed properly and we just haven't fully processed\n                         * it yet */ if (this.finalStatus !== null) {\n                            return;\n                        }\n                        if (this.httpStatusCode && this.httpStatusCode !== 200) {\n                            const mappedStatus = mapHttpStatusCode(this.httpStatusCode);\n                            code = mappedStatus.code;\n                            details = mappedStatus.details;\n                        } else {\n                            code = constants_1.Status.INTERNAL;\n                            details = `Received RST_STREAM with code ${http2Stream.rstCode} (Call ended without gRPC status)`;\n                        }\n                        break;\n                    case http2.constants.NGHTTP2_REFUSED_STREAM:\n                        code = constants_1.Status.UNAVAILABLE;\n                        details = \"Stream refused by server\";\n                        break;\n                    case http2.constants.NGHTTP2_CANCEL:\n                        /* Bug reports indicate that Node synthesizes a NGHTTP2_CANCEL\n                         * code from connection drops. We want to prioritize reporting\n                         * an unavailable status when that happens. */ if (this.connectionDropped) {\n                            code = constants_1.Status.UNAVAILABLE;\n                            details = \"Connection dropped\";\n                        } else {\n                            code = constants_1.Status.CANCELLED;\n                            details = \"Call cancelled\";\n                        }\n                        break;\n                    case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\n                        code = constants_1.Status.RESOURCE_EXHAUSTED;\n                        details = \"Bandwidth exhausted or memory limit exceeded\";\n                        break;\n                    case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\n                        code = constants_1.Status.PERMISSION_DENIED;\n                        details = \"Protocol not secure enough\";\n                        break;\n                    case http2.constants.NGHTTP2_INTERNAL_ERROR:\n                        code = constants_1.Status.INTERNAL;\n                        if (this.internalError === null) {\n                            /* This error code was previously handled in the default case, and\n                             * there are several instances of it online, so I wanted to\n                             * preserve the original error message so that people find existing\n                             * information in searches, but also include the more recognizable\n                             * \"Internal server error\" message. */ details = `Received RST_STREAM with code ${http2Stream.rstCode} (Internal server error)`;\n                        } else {\n                            if (this.internalError.code === \"ECONNRESET\" || this.internalError.code === \"ETIMEDOUT\") {\n                                code = constants_1.Status.UNAVAILABLE;\n                                details = this.internalError.message;\n                            } else {\n                                /* The \"Received RST_STREAM with code ...\" error is preserved\n                                 * here for continuity with errors reported online, but the\n                                 * error message at the end will probably be more relevant in\n                                 * most cases. */ details = `Received RST_STREAM with code ${http2Stream.rstCode} triggered by internal client error: ${this.internalError.message}`;\n                            }\n                        }\n                        break;\n                    default:\n                        code = constants_1.Status.INTERNAL;\n                        details = `Received RST_STREAM with code ${http2Stream.rstCode}`;\n                }\n                // This is a no-op if trailers were received at all.\n                // This is OK, because status codes emitted here correspond to more\n                // catastrophic issues that prevent us from receiving trailers in the\n                // first place.\n                this.endCall({\n                    code,\n                    details,\n                    metadata: new metadata_1.Metadata(),\n                    rstCode: http2Stream.rstCode\n                });\n            });\n        });\n        http2Stream.on(\"error\", (err)=>{\n            /* We need an error handler here to stop \"Uncaught Error\" exceptions\n             * from bubbling up. However, errors here should all correspond to\n             * \"close\" events, where we will handle the error more granularly */ /* Specifically looking for stream errors that were *not* constructed\n             * from a RST_STREAM response here:\n             * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267\n             */ if (err.code !== \"ERR_HTTP2_STREAM_ERROR\") {\n                this.trace(\"Node error event: message=\" + err.message + \" code=\" + err.code + \" errno=\" + getSystemErrorName(err.errno) + \" syscall=\" + err.syscall);\n                this.internalError = err;\n            }\n            this.callEventTracker.onStreamEnd(false);\n        });\n    }\n    getDeadlineInfo() {\n        return [\n            `remote_addr=${this.getPeer()}`\n        ];\n    }\n    onDisconnect() {\n        this.connectionDropped = true;\n        /* Give the call an event loop cycle to finish naturally before reporting\n         * the disconnection as an error. */ setImmediate(()=>{\n            this.endCall({\n                code: constants_1.Status.UNAVAILABLE,\n                details: \"Connection dropped\",\n                metadata: new metadata_1.Metadata()\n            });\n        });\n    }\n    outputStatus() {\n        /* Precondition: this.finalStatus !== null */ if (!this.statusOutput) {\n            this.statusOutput = true;\n            this.trace(\"ended with status: code=\" + this.finalStatus.code + ' details=\"' + this.finalStatus.details + '\"');\n            this.callEventTracker.onCallEnd(this.finalStatus);\n            /* We delay the actual action of bubbling up the status to insulate the\n             * cleanup code in this class from any errors that may be thrown in the\n             * upper layers as a result of bubbling up the status. In particular,\n             * if the status is not OK, the \"error\" event may be emitted\n             * synchronously at the top level, which will result in a thrown error if\n             * the user does not handle that event. */ process.nextTick(()=>{\n                this.listener.onReceiveStatus(this.finalStatus);\n            });\n            /* Leave the http2 stream in flowing state to drain incoming messages, to\n             * ensure that the stream closure completes. The call stream already does\n             * not push more messages after the status is output, so the messages go\n             * nowhere either way. */ this.http2Stream.resume();\n        }\n    }\n    trace(text) {\n        logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, \"[\" + this.callId + \"] \" + text);\n    }\n    /**\n     * On first call, emits a 'status' event with the given StatusObject.\n     * Subsequent calls are no-ops.\n     * @param status The status of the call.\n     */ endCall(status) {\n        /* If the status is OK and a new status comes in (e.g. from a\n         * deserialization failure), that new status takes priority */ if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {\n            this.finalStatus = status;\n            this.maybeOutputStatus();\n        }\n        this.destroyHttp2Stream();\n    }\n    maybeOutputStatus() {\n        if (this.finalStatus !== null) {\n            /* The combination check of readsClosed and that the two message buffer\n             * arrays are empty checks that there all incoming data has been fully\n             * processed */ if (this.finalStatus.code !== constants_1.Status.OK || this.readsClosed && this.unpushedReadMessages.length === 0 && !this.isReadFilterPending && !this.isPushPending) {\n                this.outputStatus();\n            }\n        }\n    }\n    push(message) {\n        this.trace(\"pushing to reader message of length \" + (message instanceof Buffer ? message.length : null));\n        this.canPush = false;\n        this.isPushPending = true;\n        process.nextTick(()=>{\n            this.isPushPending = false;\n            /* If we have already output the status any later messages should be\n             * ignored, and can cause out-of-order operation errors higher up in the\n             * stack. Checking as late as possible here to avoid any race conditions.\n             */ if (this.statusOutput) {\n                return;\n            }\n            this.listener.onReceiveMessage(message);\n            this.maybeOutputStatus();\n        });\n    }\n    tryPush(messageBytes) {\n        if (this.canPush) {\n            this.http2Stream.pause();\n            this.push(messageBytes);\n        } else {\n            this.trace(\"unpushedReadMessages.push message of length \" + messageBytes.length);\n            this.unpushedReadMessages.push(messageBytes);\n        }\n    }\n    handleTrailers(headers) {\n        this.serverEndedCall = true;\n        this.callEventTracker.onStreamEnd(true);\n        let headersString = \"\";\n        for (const header of Object.keys(headers)){\n            headersString += \"\t\t\" + header + \": \" + headers[header] + \"\\n\";\n        }\n        this.trace(\"Received server trailers:\\n\" + headersString);\n        let metadata;\n        try {\n            metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n        } catch (e) {\n            metadata = new metadata_1.Metadata();\n        }\n        const metadataMap = metadata.getMap();\n        let status;\n        if (typeof metadataMap[\"grpc-status\"] === \"string\") {\n            const receivedStatus = Number(metadataMap[\"grpc-status\"]);\n            this.trace(\"received status code \" + receivedStatus + \" from server\");\n            metadata.remove(\"grpc-status\");\n            let details = \"\";\n            if (typeof metadataMap[\"grpc-message\"] === \"string\") {\n                try {\n                    details = decodeURI(metadataMap[\"grpc-message\"]);\n                } catch (e) {\n                    details = metadataMap[\"grpc-message\"];\n                }\n                metadata.remove(\"grpc-message\");\n                this.trace('received status details string \"' + details + '\" from server');\n            }\n            status = {\n                code: receivedStatus,\n                details: details,\n                metadata: metadata\n            };\n        } else if (this.httpStatusCode) {\n            status = mapHttpStatusCode(this.httpStatusCode);\n            status.metadata = metadata;\n        } else {\n            status = {\n                code: constants_1.Status.UNKNOWN,\n                details: \"No status information received\",\n                metadata: metadata\n            };\n        }\n        // This is a no-op if the call was already ended when handling headers.\n        this.endCall(status);\n    }\n    destroyHttp2Stream() {\n        var _a;\n        // The http2 stream could already have been destroyed if cancelWithStatus\n        // is called in response to an internal http2 error.\n        if (this.http2Stream.destroyed) {\n            return;\n        }\n        /* If the server ended the call, sending an RST_STREAM is redundant, so we\n         * just half close on the client side instead to finish closing the stream.\n         */ if (this.serverEndedCall) {\n            this.http2Stream.end();\n        } else {\n            /* If the call has ended with an OK status, communicate that when closing\n             * the stream, partly to avoid a situation in which we detect an error\n             * RST_STREAM as a result after we have the status */ let code;\n            if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n                code = http2.constants.NGHTTP2_NO_ERROR;\n            } else {\n                code = http2.constants.NGHTTP2_CANCEL;\n            }\n            this.trace(\"close http2 stream with code \" + code);\n            this.http2Stream.close(code);\n        }\n    }\n    cancelWithStatus(status, details) {\n        this.trace(\"cancelWithStatus code: \" + status + ' details: \"' + details + '\"');\n        this.endCall({\n            code: status,\n            details,\n            metadata: new metadata_1.Metadata()\n        });\n    }\n    getStatus() {\n        return this.finalStatus;\n    }\n    getPeer() {\n        return this.transport.getPeerName();\n    }\n    getCallNumber() {\n        return this.callId;\n    }\n    startRead() {\n        /* If the stream has ended with an error, we should not emit any more\n         * messages and we should communicate that the stream has ended */ if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n            this.readsClosed = true;\n            this.maybeOutputStatus();\n            return;\n        }\n        this.canPush = true;\n        if (this.unpushedReadMessages.length > 0) {\n            const nextMessage = this.unpushedReadMessages.shift();\n            this.push(nextMessage);\n            return;\n        }\n        /* Only resume reading from the http2Stream if we don't have any pending\n         * messages to emit */ this.http2Stream.resume();\n    }\n    sendMessageWithContext(context, message) {\n        this.trace(\"write() called with message of length \" + message.length);\n        const cb = (error)=>{\n            /* nextTick here ensures that no stream action can be taken in the call\n             * stack of the write callback, in order to hopefully work around\n             * https://github.com/nodejs/node/issues/49147 */ process.nextTick(()=>{\n                var _a;\n                let code = constants_1.Status.UNAVAILABLE;\n                if ((error === null || error === void 0 ? void 0 : error.code) === \"ERR_STREAM_WRITE_AFTER_END\") {\n                    code = constants_1.Status.INTERNAL;\n                }\n                if (error) {\n                    this.cancelWithStatus(code, `Write error: ${error.message}`);\n                }\n                (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);\n            });\n        };\n        this.trace(\"sending data chunk of length \" + message.length);\n        this.callEventTracker.addMessageSent();\n        try {\n            this.http2Stream.write(message, cb);\n        } catch (error) {\n            this.endCall({\n                code: constants_1.Status.UNAVAILABLE,\n                details: `Write failed with error ${error.message}`,\n                metadata: new metadata_1.Metadata()\n            });\n        }\n    }\n    halfClose() {\n        this.trace(\"end() called\");\n        this.trace(\"calling end() on HTTP/2 stream\");\n        this.http2Stream.end();\n    }\n}\nexports.Http2SubchannelCall = Http2SubchannelCall; //# sourceMappingURL=subchannel-call.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseSubchannelWrapper = void 0;\nclass BaseSubchannelWrapper {\n    constructor(child){\n        this.child = child;\n        this.healthy = true;\n        this.healthListeners = new Set();\n        child.addHealthStateWatcher((childHealthy)=>{\n            /* A change to the child health state only affects this wrapper's overall\n             * health state if this wrapper is reporting healthy. */ if (this.healthy) {\n                this.updateHealthListeners();\n            }\n        });\n    }\n    updateHealthListeners() {\n        for (const listener of this.healthListeners){\n            listener(this.isHealthy());\n        }\n    }\n    getConnectivityState() {\n        return this.child.getConnectivityState();\n    }\n    addConnectivityStateListener(listener) {\n        this.child.addConnectivityStateListener(listener);\n    }\n    removeConnectivityStateListener(listener) {\n        this.child.removeConnectivityStateListener(listener);\n    }\n    startConnecting() {\n        this.child.startConnecting();\n    }\n    getAddress() {\n        return this.child.getAddress();\n    }\n    throttleKeepalive(newKeepaliveTime) {\n        this.child.throttleKeepalive(newKeepaliveTime);\n    }\n    ref() {\n        this.child.ref();\n    }\n    unref() {\n        this.child.unref();\n    }\n    getChannelzRef() {\n        return this.child.getChannelzRef();\n    }\n    isHealthy() {\n        return this.healthy && this.child.isHealthy();\n    }\n    addHealthStateWatcher(listener) {\n        this.healthListeners.add(listener);\n    }\n    removeHealthStateWatcher(listener) {\n        this.healthListeners.delete(listener);\n    }\n    setHealthy(healthy) {\n        if (healthy !== this.healthy) {\n            this.healthy = healthy;\n            /* A change to this wrapper's health state only affects the overall\n             * reported health state if the child is healthy. */ if (this.child.isHealthy()) {\n                this.updateHealthListeners();\n            }\n        }\n    }\n    getRealSubchannel() {\n        return this.child.getRealSubchannel();\n    }\n    realSubchannelEquals(other) {\n        return this.getRealSubchannel() === other.getRealSubchannel();\n    }\n    getCallCredentials() {\n        return this.child.getCallCredentials();\n    }\n}\nexports.BaseSubchannelWrapper = BaseSubchannelWrapper; //# sourceMappingURL=subchannel-interface.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3ViY2hhbm5lbC1pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHLEtBQUs7QUFDckMsTUFBTUU7SUFDRkMsWUFBWUMsS0FBSyxDQUFFO1FBQ2YsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLGVBQWUsR0FBRyxJQUFJQztRQUMzQkgsTUFBTUkscUJBQXFCLENBQUNDLENBQUFBO1lBQ3hCO2tFQUNzRCxHQUN0RCxJQUFJLElBQUksQ0FBQ0osT0FBTyxFQUFFO2dCQUNkLElBQUksQ0FBQ0sscUJBQXFCO1lBQzlCO1FBQ0o7SUFDSjtJQUNBQSx3QkFBd0I7UUFDcEIsS0FBSyxNQUFNQyxZQUFZLElBQUksQ0FBQ0wsZUFBZSxDQUFFO1lBQ3pDSyxTQUFTLElBQUksQ0FBQ0MsU0FBUztRQUMzQjtJQUNKO0lBQ0FDLHVCQUF1QjtRQUNuQixPQUFPLElBQUksQ0FBQ1QsS0FBSyxDQUFDUyxvQkFBb0I7SUFDMUM7SUFDQUMsNkJBQTZCSCxRQUFRLEVBQUU7UUFDbkMsSUFBSSxDQUFDUCxLQUFLLENBQUNVLDRCQUE0QixDQUFDSDtJQUM1QztJQUNBSSxnQ0FBZ0NKLFFBQVEsRUFBRTtRQUN0QyxJQUFJLENBQUNQLEtBQUssQ0FBQ1csK0JBQStCLENBQUNKO0lBQy9DO0lBQ0FLLGtCQUFrQjtRQUNkLElBQUksQ0FBQ1osS0FBSyxDQUFDWSxlQUFlO0lBQzlCO0lBQ0FDLGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQ2IsS0FBSyxDQUFDYSxVQUFVO0lBQ2hDO0lBQ0FDLGtCQUFrQkMsZ0JBQWdCLEVBQUU7UUFDaEMsSUFBSSxDQUFDZixLQUFLLENBQUNjLGlCQUFpQixDQUFDQztJQUNqQztJQUNBQyxNQUFNO1FBQ0YsSUFBSSxDQUFDaEIsS0FBSyxDQUFDZ0IsR0FBRztJQUNsQjtJQUNBQyxRQUFRO1FBQ0osSUFBSSxDQUFDakIsS0FBSyxDQUFDaUIsS0FBSztJQUNwQjtJQUNBQyxpQkFBaUI7UUFDYixPQUFPLElBQUksQ0FBQ2xCLEtBQUssQ0FBQ2tCLGNBQWM7SUFDcEM7SUFDQVYsWUFBWTtRQUNSLE9BQU8sSUFBSSxDQUFDUCxPQUFPLElBQUksSUFBSSxDQUFDRCxLQUFLLENBQUNRLFNBQVM7SUFDL0M7SUFDQUosc0JBQXNCRyxRQUFRLEVBQUU7UUFDNUIsSUFBSSxDQUFDTCxlQUFlLENBQUNpQixHQUFHLENBQUNaO0lBQzdCO0lBQ0FhLHlCQUF5QmIsUUFBUSxFQUFFO1FBQy9CLElBQUksQ0FBQ0wsZUFBZSxDQUFDbUIsTUFBTSxDQUFDZDtJQUNoQztJQUNBZSxXQUFXckIsT0FBTyxFQUFFO1FBQ2hCLElBQUlBLFlBQVksSUFBSSxDQUFDQSxPQUFPLEVBQUU7WUFDMUIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO1lBQ2Y7OERBQ2tELEdBQ2xELElBQUksSUFBSSxDQUFDRCxLQUFLLENBQUNRLFNBQVMsSUFBSTtnQkFDeEIsSUFBSSxDQUFDRixxQkFBcUI7WUFDOUI7UUFDSjtJQUNKO0lBQ0FpQixvQkFBb0I7UUFDaEIsT0FBTyxJQUFJLENBQUN2QixLQUFLLENBQUN1QixpQkFBaUI7SUFDdkM7SUFDQUMscUJBQXFCQyxLQUFLLEVBQUU7UUFDeEIsT0FBTyxJQUFJLENBQUNGLGlCQUFpQixPQUFPRSxNQUFNRixpQkFBaUI7SUFDL0Q7SUFDQUcscUJBQXFCO1FBQ2pCLE9BQU8sSUFBSSxDQUFDMUIsS0FBSyxDQUFDMEIsa0JBQWtCO0lBQ3hDO0FBQ0o7QUFDQTlCLDZCQUE2QixHQUFHRSx1QkFDaEMsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3N1YmNoYW5uZWwtaW50ZXJmYWNlLmpzPzI4Y2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IDIwMjIgZ1JQQyBhdXRob3JzLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFzZVN1YmNoYW5uZWxXcmFwcGVyID0gdm9pZCAwO1xuY2xhc3MgQmFzZVN1YmNoYW5uZWxXcmFwcGVyIHtcbiAgICBjb25zdHJ1Y3RvcihjaGlsZCkge1xuICAgICAgICB0aGlzLmNoaWxkID0gY2hpbGQ7XG4gICAgICAgIHRoaXMuaGVhbHRoeSA9IHRydWU7XG4gICAgICAgIHRoaXMuaGVhbHRoTGlzdGVuZXJzID0gbmV3IFNldCgpO1xuICAgICAgICBjaGlsZC5hZGRIZWFsdGhTdGF0ZVdhdGNoZXIoY2hpbGRIZWFsdGh5ID0+IHtcbiAgICAgICAgICAgIC8qIEEgY2hhbmdlIHRvIHRoZSBjaGlsZCBoZWFsdGggc3RhdGUgb25seSBhZmZlY3RzIHRoaXMgd3JhcHBlcidzIG92ZXJhbGxcbiAgICAgICAgICAgICAqIGhlYWx0aCBzdGF0ZSBpZiB0aGlzIHdyYXBwZXIgaXMgcmVwb3J0aW5nIGhlYWx0aHkuICovXG4gICAgICAgICAgICBpZiAodGhpcy5oZWFsdGh5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIZWFsdGhMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZUhlYWx0aExpc3RlbmVycygpIHtcbiAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLmhlYWx0aExpc3RlbmVycykge1xuICAgICAgICAgICAgbGlzdGVuZXIodGhpcy5pc0hlYWx0aHkoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0Q29ubmVjdGl2aXR5U3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkLmdldENvbm5lY3Rpdml0eVN0YXRlKCk7XG4gICAgfVxuICAgIGFkZENvbm5lY3Rpdml0eVN0YXRlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5jaGlsZC5hZGRDb25uZWN0aXZpdHlTdGF0ZUxpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICB9XG4gICAgcmVtb3ZlQ29ubmVjdGl2aXR5U3RhdGVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmNoaWxkLnJlbW92ZUNvbm5lY3Rpdml0eVN0YXRlTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIH1cbiAgICBzdGFydENvbm5lY3RpbmcoKSB7XG4gICAgICAgIHRoaXMuY2hpbGQuc3RhcnRDb25uZWN0aW5nKCk7XG4gICAgfVxuICAgIGdldEFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkLmdldEFkZHJlc3MoKTtcbiAgICB9XG4gICAgdGhyb3R0bGVLZWVwYWxpdmUobmV3S2VlcGFsaXZlVGltZSkge1xuICAgICAgICB0aGlzLmNoaWxkLnRocm90dGxlS2VlcGFsaXZlKG5ld0tlZXBhbGl2ZVRpbWUpO1xuICAgIH1cbiAgICByZWYoKSB7XG4gICAgICAgIHRoaXMuY2hpbGQucmVmKCk7XG4gICAgfVxuICAgIHVucmVmKCkge1xuICAgICAgICB0aGlzLmNoaWxkLnVucmVmKCk7XG4gICAgfVxuICAgIGdldENoYW5uZWx6UmVmKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZC5nZXRDaGFubmVselJlZigpO1xuICAgIH1cbiAgICBpc0hlYWx0aHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYWx0aHkgJiYgdGhpcy5jaGlsZC5pc0hlYWx0aHkoKTtcbiAgICB9XG4gICAgYWRkSGVhbHRoU3RhdGVXYXRjaGVyKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuaGVhbHRoTGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgfVxuICAgIHJlbW92ZUhlYWx0aFN0YXRlV2F0Y2hlcihsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmhlYWx0aExpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgIH1cbiAgICBzZXRIZWFsdGh5KGhlYWx0aHkpIHtcbiAgICAgICAgaWYgKGhlYWx0aHkgIT09IHRoaXMuaGVhbHRoeSkge1xuICAgICAgICAgICAgdGhpcy5oZWFsdGh5ID0gaGVhbHRoeTtcbiAgICAgICAgICAgIC8qIEEgY2hhbmdlIHRvIHRoaXMgd3JhcHBlcidzIGhlYWx0aCBzdGF0ZSBvbmx5IGFmZmVjdHMgdGhlIG92ZXJhbGxcbiAgICAgICAgICAgICAqIHJlcG9ydGVkIGhlYWx0aCBzdGF0ZSBpZiB0aGUgY2hpbGQgaXMgaGVhbHRoeS4gKi9cbiAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkLmlzSGVhbHRoeSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVIZWFsdGhMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRSZWFsU3ViY2hhbm5lbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGQuZ2V0UmVhbFN1YmNoYW5uZWwoKTtcbiAgICB9XG4gICAgcmVhbFN1YmNoYW5uZWxFcXVhbHMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVhbFN1YmNoYW5uZWwoKSA9PT0gb3RoZXIuZ2V0UmVhbFN1YmNoYW5uZWwoKTtcbiAgICB9XG4gICAgZ2V0Q2FsbENyZWRlbnRpYWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZC5nZXRDYWxsQ3JlZGVudGlhbHMoKTtcbiAgICB9XG59XG5leHBvcnRzLkJhc2VTdWJjaGFubmVsV3JhcHBlciA9IEJhc2VTdWJjaGFubmVsV3JhcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YmNoYW5uZWwtaW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJhc2VTdWJjaGFubmVsV3JhcHBlciIsImNvbnN0cnVjdG9yIiwiY2hpbGQiLCJoZWFsdGh5IiwiaGVhbHRoTGlzdGVuZXJzIiwiU2V0IiwiYWRkSGVhbHRoU3RhdGVXYXRjaGVyIiwiY2hpbGRIZWFsdGh5IiwidXBkYXRlSGVhbHRoTGlzdGVuZXJzIiwibGlzdGVuZXIiLCJpc0hlYWx0aHkiLCJnZXRDb25uZWN0aXZpdHlTdGF0ZSIsImFkZENvbm5lY3Rpdml0eVN0YXRlTGlzdGVuZXIiLCJyZW1vdmVDb25uZWN0aXZpdHlTdGF0ZUxpc3RlbmVyIiwic3RhcnRDb25uZWN0aW5nIiwiZ2V0QWRkcmVzcyIsInRocm90dGxlS2VlcGFsaXZlIiwibmV3S2VlcGFsaXZlVGltZSIsInJlZiIsInVucmVmIiwiZ2V0Q2hhbm5lbHpSZWYiLCJhZGQiLCJyZW1vdmVIZWFsdGhTdGF0ZVdhdGNoZXIiLCJkZWxldGUiLCJzZXRIZWFsdGh5IiwiZ2V0UmVhbFN1YmNoYW5uZWwiLCJyZWFsU3ViY2hhbm5lbEVxdWFscyIsIm90aGVyIiwiZ2V0Q2FsbENyZWRlbnRpYWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SubchannelPool = void 0;\nexports.getSubchannelPool = getSubchannelPool;\nconst channel_options_1 = __webpack_require__(/*! ./channel-options */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-options.js\");\nconst subchannel_1 = __webpack_require__(/*! ./subchannel */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst transport_1 = __webpack_require__(/*! ./transport */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/transport.js\");\n// 10 seconds in milliseconds. This value is arbitrary.\n/**\n * The amount of time in between checks for dropping subchannels that have no\n * other references\n */ const REF_CHECK_INTERVAL = 10000;\nclass SubchannelPool {\n    /**\n     * A pool of subchannels use for making connections. Subchannels with the\n     * exact same parameters will be reused.\n     */ constructor(){\n        this.pool = Object.create(null);\n        /**\n         * A timer of a task performing a periodic subchannel cleanup.\n         */ this.cleanupTimer = null;\n    }\n    /**\n     * Unrefs all unused subchannels and cancels the cleanup task if all\n     * subchannels have been unrefed.\n     */ unrefUnusedSubchannels() {\n        let allSubchannelsUnrefed = true;\n        /* These objects are created with Object.create(null), so they do not\n         * have a prototype, which means that for (... in ...) loops over them\n         * do not need to be filtered */ // eslint-disable-disable-next-line:forin\n        for(const channelTarget in this.pool){\n            const subchannelObjArray = this.pool[channelTarget];\n            const refedSubchannels = subchannelObjArray.filter((value)=>!value.subchannel.unrefIfOneRef());\n            if (refedSubchannels.length > 0) {\n                allSubchannelsUnrefed = false;\n            }\n            /* For each subchannel in the pool, try to unref it if it has\n             * exactly one ref (which is the ref from the pool itself). If that\n             * does happen, remove the subchannel from the pool */ this.pool[channelTarget] = refedSubchannels;\n        }\n        /* Currently we do not delete keys with empty values. If that results\n         * in significant memory usage we should change it. */ // Cancel the cleanup task if all subchannels have been unrefed.\n        if (allSubchannelsUnrefed && this.cleanupTimer !== null) {\n            clearInterval(this.cleanupTimer);\n            this.cleanupTimer = null;\n        }\n    }\n    /**\n     * Ensures that the cleanup task is spawned.\n     */ ensureCleanupTask() {\n        var _a, _b;\n        if (this.cleanupTimer === null) {\n            this.cleanupTimer = setInterval(()=>{\n                this.unrefUnusedSubchannels();\n            }, REF_CHECK_INTERVAL);\n            // Unref because this timer should not keep the event loop running.\n            // Call unref only if it exists to address electron/electron#21162\n            (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n    }\n    /**\n     * Get a subchannel if one already exists with exactly matching parameters.\n     * Otherwise, create and save a subchannel with those parameters.\n     * @param channelTarget\n     * @param subchannelTarget\n     * @param channelArguments\n     * @param channelCredentials\n     */ getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials) {\n        this.ensureCleanupTask();\n        const channelTarget = (0, uri_parser_1.uriToString)(channelTargetUri);\n        if (channelTarget in this.pool) {\n            const subchannelObjArray = this.pool[channelTarget];\n            for (const subchannelObj of subchannelObjArray){\n                if ((0, subchannel_address_1.subchannelAddressEqual)(subchannelTarget, subchannelObj.subchannelAddress) && (0, channel_options_1.channelOptionsEqual)(channelArguments, subchannelObj.channelArguments) && channelCredentials._equals(subchannelObj.channelCredentials)) {\n                    return subchannelObj.subchannel;\n                }\n            }\n        }\n        // If we get here, no matching subchannel was found\n        const subchannel = new subchannel_1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials, new transport_1.Http2SubchannelConnector(channelTargetUri));\n        if (!(channelTarget in this.pool)) {\n            this.pool[channelTarget] = [];\n        }\n        this.pool[channelTarget].push({\n            subchannelAddress: subchannelTarget,\n            channelArguments,\n            channelCredentials,\n            subchannel\n        });\n        subchannel.ref();\n        return subchannel;\n    }\n}\nexports.SubchannelPool = SubchannelPool;\nconst globalSubchannelPool = new SubchannelPool();\n/**\n * Get either the global subchannel pool, or a new subchannel pool.\n * @param global\n */ function getSubchannelPool(global) {\n    if (global) {\n        return globalSubchannelPool;\n    } else {\n        return new SubchannelPool();\n    }\n} //# sourceMappingURL=subchannel-pool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Subchannel = void 0;\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst TRACER_NAME = \"subchannel\";\n/* setInterval and setTimeout only accept signed 32 bit integers. JS doesn't\n * have a constant for the max signed 32 bit integer, so this is a simple way\n * to calculate it */ const KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\nclass Subchannel {\n    /**\n     * A class representing a connection to a single backend.\n     * @param channelTarget The target string for the channel as a whole\n     * @param subchannelAddress The address for the backend that this subchannel\n     *     will connect to\n     * @param options The channel options, plus any specific subchannel options\n     *     for this subchannel\n     * @param credentials The channel credentials used to establish this\n     *     connection\n     */ constructor(channelTarget, subchannelAddress, options, credentials, connector){\n        var _a;\n        this.channelTarget = channelTarget;\n        this.subchannelAddress = subchannelAddress;\n        this.options = options;\n        this.connector = connector;\n        /**\n         * The subchannel's current connectivity state. Invariant: `session` === `null`\n         * if and only if `connectivityState` is IDLE or TRANSIENT_FAILURE.\n         */ this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\n        /**\n         * The underlying http2 session used to make requests.\n         */ this.transport = null;\n        /**\n         * Indicates that the subchannel should transition from TRANSIENT_FAILURE to\n         * CONNECTING instead of IDLE when the backoff timeout ends.\n         */ this.continueConnecting = false;\n        /**\n         * A list of listener functions that will be called whenever the connectivity\n         * state changes. Will be modified by `addConnectivityStateListener` and\n         * `removeConnectivityStateListener`\n         */ this.stateListeners = new Set();\n        /**\n         * Tracks channels and subchannel pools with references to this subchannel\n         */ this.refcount = 0;\n        // Channelz info\n        this.channelzEnabled = true;\n        const backoffOptions = {\n            initialDelay: options[\"grpc.initial_reconnect_backoff_ms\"],\n            maxDelay: options[\"grpc.max_reconnect_backoff_ms\"]\n        };\n        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(()=>{\n            this.handleBackoffTimer();\n        }, backoffOptions);\n        this.backoffTimeout.unref();\n        this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);\n        this.keepaliveTime = (_a = options[\"grpc.keepalive_time_ms\"]) !== null && _a !== void 0 ? _a : -1;\n        if (options[\"grpc.enable_channelz\"] === 0) {\n            this.channelzEnabled = false;\n            this.channelzTrace = new channelz_1.ChannelzTraceStub();\n            this.callTracker = new channelz_1.ChannelzCallTrackerStub();\n            this.childrenTracker = new channelz_1.ChannelzChildrenTrackerStub();\n            this.streamTracker = new channelz_1.ChannelzCallTrackerStub();\n        } else {\n            this.channelzTrace = new channelz_1.ChannelzTrace();\n            this.callTracker = new channelz_1.ChannelzCallTracker();\n            this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\n            this.streamTracker = new channelz_1.ChannelzCallTracker();\n        }\n        this.channelzRef = (0, channelz_1.registerChannelzSubchannel)(this.subchannelAddressString, ()=>this.getChannelzInfo(), this.channelzEnabled);\n        this.channelzTrace.addTrace(\"CT_INFO\", \"Subchannel created\");\n        this.trace(\"Subchannel constructed with options \" + JSON.stringify(options, undefined, 2));\n        this.secureConnector = credentials._createSecureConnector(channelTarget, options);\n    }\n    getChannelzInfo() {\n        return {\n            state: this.connectivityState,\n            trace: this.channelzTrace,\n            callTracker: this.callTracker,\n            children: this.childrenTracker.getChildLists(),\n            target: this.subchannelAddressString\n        };\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" \" + text);\n    }\n    refTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, \"subchannel_refcount\", \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" \" + text);\n    }\n    handleBackoffTimer() {\n        if (this.continueConnecting) {\n            this.transitionToState([\n                connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE\n            ], connectivity_state_1.ConnectivityState.CONNECTING);\n        } else {\n            this.transitionToState([\n                connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE\n            ], connectivity_state_1.ConnectivityState.IDLE);\n        }\n    }\n    /**\n     * Start a backoff timer with the current nextBackoff timeout\n     */ startBackoff() {\n        this.backoffTimeout.runOnce();\n    }\n    stopBackoff() {\n        this.backoffTimeout.stop();\n        this.backoffTimeout.reset();\n    }\n    startConnectingInternal() {\n        let options = this.options;\n        if (options[\"grpc.keepalive_time_ms\"]) {\n            const adjustedKeepaliveTime = Math.min(this.keepaliveTime, KEEPALIVE_MAX_TIME_MS);\n            options = Object.assign(Object.assign({}, options), {\n                \"grpc.keepalive_time_ms\": adjustedKeepaliveTime\n            });\n        }\n        this.connector.connect(this.subchannelAddress, this.secureConnector, options).then((transport)=>{\n            if (this.transitionToState([\n                connectivity_state_1.ConnectivityState.CONNECTING\n            ], connectivity_state_1.ConnectivityState.READY)) {\n                this.transport = transport;\n                if (this.channelzEnabled) {\n                    this.childrenTracker.refChild(transport.getChannelzRef());\n                }\n                transport.addDisconnectListener((tooManyPings)=>{\n                    this.transitionToState([\n                        connectivity_state_1.ConnectivityState.READY\n                    ], connectivity_state_1.ConnectivityState.IDLE);\n                    if (tooManyPings && this.keepaliveTime > 0) {\n                        this.keepaliveTime *= 2;\n                        logging.log(constants_1.LogVerbosity.ERROR, `Connection to ${(0, uri_parser_1.uriToString)(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTime} ms`);\n                    }\n                });\n            } else {\n                /* If we can't transition from CONNECTING to READY here, we will\n                 * not be using this transport, so release its resources. */ transport.shutdown();\n            }\n        }, (error)=>{\n            this.transitionToState([\n                connectivity_state_1.ConnectivityState.CONNECTING\n            ], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, `${error}`);\n        });\n    }\n    /**\n     * Initiate a state transition from any element of oldStates to the new\n     * state. If the current connectivityState is not in oldStates, do nothing.\n     * @param oldStates The set of states to transition from\n     * @param newState The state to transition to\n     * @returns True if the state changed, false otherwise\n     */ transitionToState(oldStates, newState, errorMessage) {\n        var _a, _b;\n        if (oldStates.indexOf(this.connectivityState) === -1) {\n            return false;\n        }\n        if (errorMessage) {\n            this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] + \" -> \" + connectivity_state_1.ConnectivityState[newState] + ' with error \"' + errorMessage + '\"');\n        } else {\n            this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] + \" -> \" + connectivity_state_1.ConnectivityState[newState]);\n        }\n        if (this.channelzEnabled) {\n            this.channelzTrace.addTrace(\"CT_INFO\", \"Connectivity state change to \" + connectivity_state_1.ConnectivityState[newState]);\n        }\n        const previousState = this.connectivityState;\n        this.connectivityState = newState;\n        switch(newState){\n            case connectivity_state_1.ConnectivityState.READY:\n                this.stopBackoff();\n                break;\n            case connectivity_state_1.ConnectivityState.CONNECTING:\n                this.startBackoff();\n                this.startConnectingInternal();\n                this.continueConnecting = false;\n                break;\n            case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\n                if (this.channelzEnabled && this.transport) {\n                    this.childrenTracker.unrefChild(this.transport.getChannelzRef());\n                }\n                (_a = this.transport) === null || _a === void 0 ? void 0 : _a.shutdown();\n                this.transport = null;\n                /* If the backoff timer has already ended by the time we get to the\n                 * TRANSIENT_FAILURE state, we want to immediately transition out of\n                 * TRANSIENT_FAILURE as though the backoff timer is ending right now */ if (!this.backoffTimeout.isRunning()) {\n                    process.nextTick(()=>{\n                        this.handleBackoffTimer();\n                    });\n                }\n                break;\n            case connectivity_state_1.ConnectivityState.IDLE:\n                if (this.channelzEnabled && this.transport) {\n                    this.childrenTracker.unrefChild(this.transport.getChannelzRef());\n                }\n                (_b = this.transport) === null || _b === void 0 ? void 0 : _b.shutdown();\n                this.transport = null;\n                break;\n            default:\n                throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);\n        }\n        for (const listener of this.stateListeners){\n            listener(this, previousState, newState, this.keepaliveTime, errorMessage);\n        }\n        return true;\n    }\n    ref() {\n        this.refTrace(\"refcount \" + this.refcount + \" -> \" + (this.refcount + 1));\n        this.refcount += 1;\n    }\n    unref() {\n        this.refTrace(\"refcount \" + this.refcount + \" -> \" + (this.refcount - 1));\n        this.refcount -= 1;\n        if (this.refcount === 0) {\n            this.channelzTrace.addTrace(\"CT_INFO\", \"Shutting down\");\n            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n            this.secureConnector.destroy();\n            process.nextTick(()=>{\n                this.transitionToState([\n                    connectivity_state_1.ConnectivityState.CONNECTING,\n                    connectivity_state_1.ConnectivityState.READY\n                ], connectivity_state_1.ConnectivityState.IDLE);\n            });\n        }\n    }\n    unrefIfOneRef() {\n        if (this.refcount === 1) {\n            this.unref();\n            return true;\n        }\n        return false;\n    }\n    createCall(metadata, host, method, listener) {\n        if (!this.transport) {\n            throw new Error(\"Cannot create call, subchannel not READY\");\n        }\n        let statsTracker;\n        if (this.channelzEnabled) {\n            this.callTracker.addCallStarted();\n            this.streamTracker.addCallStarted();\n            statsTracker = {\n                onCallEnd: (status)=>{\n                    if (status.code === constants_1.Status.OK) {\n                        this.callTracker.addCallSucceeded();\n                    } else {\n                        this.callTracker.addCallFailed();\n                    }\n                }\n            };\n        } else {\n            statsTracker = {};\n        }\n        return this.transport.createCall(metadata, host, method, listener, statsTracker);\n    }\n    /**\n     * If the subchannel is currently IDLE, start connecting and switch to the\n     * CONNECTING state. If the subchannel is current in TRANSIENT_FAILURE,\n     * the next time it would transition to IDLE, start connecting again instead.\n     * Otherwise, do nothing.\n     */ startConnecting() {\n        process.nextTick(()=>{\n            /* First, try to transition from IDLE to connecting. If that doesn't happen\n             * because the state is not currently IDLE, check if it is\n             * TRANSIENT_FAILURE, and if so indicate that it should go back to\n             * connecting after the backoff timer ends. Otherwise do nothing */ if (!this.transitionToState([\n                connectivity_state_1.ConnectivityState.IDLE\n            ], connectivity_state_1.ConnectivityState.CONNECTING)) {\n                if (this.connectivityState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                    this.continueConnecting = true;\n                }\n            }\n        });\n    }\n    /**\n     * Get the subchannel's current connectivity state.\n     */ getConnectivityState() {\n        return this.connectivityState;\n    }\n    /**\n     * Add a listener function to be called whenever the subchannel's\n     * connectivity state changes.\n     * @param listener\n     */ addConnectivityStateListener(listener) {\n        this.stateListeners.add(listener);\n    }\n    /**\n     * Remove a listener previously added with `addConnectivityStateListener`\n     * @param listener A reference to a function previously passed to\n     *     `addConnectivityStateListener`\n     */ removeConnectivityStateListener(listener) {\n        this.stateListeners.delete(listener);\n    }\n    /**\n     * Reset the backoff timeout, and immediately start connecting if in backoff.\n     */ resetBackoff() {\n        process.nextTick(()=>{\n            this.backoffTimeout.reset();\n            this.transitionToState([\n                connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE\n            ], connectivity_state_1.ConnectivityState.CONNECTING);\n        });\n    }\n    getAddress() {\n        return this.subchannelAddressString;\n    }\n    getChannelzRef() {\n        return this.channelzRef;\n    }\n    isHealthy() {\n        return true;\n    }\n    addHealthStateWatcher(listener) {\n    // Do nothing with the listener\n    }\n    removeHealthStateWatcher(listener) {\n    // Do nothing with the listener\n    }\n    getRealSubchannel() {\n        return this;\n    }\n    realSubchannelEquals(other) {\n        return other.getRealSubchannel() === this;\n    }\n    throttleKeepalive(newKeepaliveTime) {\n        if (newKeepaliveTime > this.keepaliveTime) {\n            this.keepaliveTime = newKeepaliveTime;\n        }\n    }\n    getCallCredentials() {\n        return this.secureConnector.getCallCredentials();\n    }\n}\nexports.Subchannel = Subchannel; //# sourceMappingURL=subchannel.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/tls-helpers.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CIPHER_SUITES = void 0;\nexports.getDefaultRootsData = getDefaultRootsData;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nexports.CIPHER_SUITES = process.env.GRPC_SSL_CIPHER_SUITES;\nconst DEFAULT_ROOTS_FILE_PATH = process.env.GRPC_DEFAULT_SSL_ROOTS_FILE_PATH;\nlet defaultRootsData = null;\nfunction getDefaultRootsData() {\n    if (DEFAULT_ROOTS_FILE_PATH) {\n        if (defaultRootsData === null) {\n            defaultRootsData = fs.readFileSync(DEFAULT_ROOTS_FILE_PATH);\n        }\n        return defaultRootsData;\n    }\n    return null;\n} //# sourceMappingURL=tls-helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdGxzLWhlbHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7O0NBZUMsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHLEtBQUs7QUFDN0JBLDJCQUEyQixHQUFHRztBQUM5QixNQUFNQyxLQUFLQyxtQkFBT0EsQ0FBQyxjQUFJO0FBQ3ZCTCxxQkFBcUIsR0FBR00sUUFBUUMsR0FBRyxDQUFDQyxzQkFBc0I7QUFDMUQsTUFBTUMsMEJBQTBCSCxRQUFRQyxHQUFHLENBQUNHLGdDQUFnQztBQUM1RSxJQUFJQyxtQkFBbUI7QUFDdkIsU0FBU1I7SUFDTCxJQUFJTSx5QkFBeUI7UUFDekIsSUFBSUUscUJBQXFCLE1BQU07WUFDM0JBLG1CQUFtQlAsR0FBR1EsWUFBWSxDQUFDSDtRQUN2QztRQUNBLE9BQU9FO0lBQ1g7SUFDQSxPQUFPO0FBQ1gsRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdGxzLWhlbHBlcnMuanM/MGVkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DSVBIRVJfU1VJVEVTID0gdm9pZCAwO1xuZXhwb3J0cy5nZXREZWZhdWx0Um9vdHNEYXRhID0gZ2V0RGVmYXVsdFJvb3RzRGF0YTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuZXhwb3J0cy5DSVBIRVJfU1VJVEVTID0gcHJvY2Vzcy5lbnYuR1JQQ19TU0xfQ0lQSEVSX1NVSVRFUztcbmNvbnN0IERFRkFVTFRfUk9PVFNfRklMRV9QQVRIID0gcHJvY2Vzcy5lbnYuR1JQQ19ERUZBVUxUX1NTTF9ST09UU19GSUxFX1BBVEg7XG5sZXQgZGVmYXVsdFJvb3RzRGF0YSA9IG51bGw7XG5mdW5jdGlvbiBnZXREZWZhdWx0Um9vdHNEYXRhKCkge1xuICAgIGlmIChERUZBVUxUX1JPT1RTX0ZJTEVfUEFUSCkge1xuICAgICAgICBpZiAoZGVmYXVsdFJvb3RzRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZGVmYXVsdFJvb3RzRGF0YSA9IGZzLnJlYWRGaWxlU3luYyhERUZBVUxUX1JPT1RTX0ZJTEVfUEFUSCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRSb290c0RhdGE7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGxzLWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ0lQSEVSX1NVSVRFUyIsImdldERlZmF1bHRSb290c0RhdGEiLCJmcyIsInJlcXVpcmUiLCJwcm9jZXNzIiwiZW52IiwiR1JQQ19TU0xfQ0lQSEVSX1NVSVRFUyIsIkRFRkFVTFRfUk9PVFNfRklMRV9QQVRIIiwiR1JQQ19ERUZBVUxUX1NTTF9ST09UU19GSUxFX1BBVEgiLCJkZWZhdWx0Um9vdHNEYXRhIiwicmVhZEZpbGVTeW5jIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/transport.js":
/*!***********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/transport.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright 2023 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Http2SubchannelConnector = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst http_proxy_1 = __webpack_require__(/*! ./http_proxy */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst subchannel_call_1 = __webpack_require__(/*! ./subchannel-call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-call.js\");\nconst call_number_1 = __webpack_require__(/*! ./call-number */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-number.js\");\nconst TRACER_NAME = \"transport\";\nconst FLOW_CONTROL_TRACER_NAME = \"transport_flowctrl\";\nconst clientVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@grpc/grpc-js/package.json\").version);\nconst { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_TE, HTTP2_HEADER_USER_AGENT } = http2.constants;\nconst KEEPALIVE_TIMEOUT_MS = 20000;\nconst tooManyPingsData = Buffer.from(\"too_many_pings\", \"ascii\");\nclass Http2Transport {\n    constructor(session, subchannelAddress, options, /**\n     * Name of the remote server, if it is not the same as the subchannel\n     * address, i.e. if connecting through an HTTP CONNECT proxy.\n     */ remoteName){\n        this.session = session;\n        this.options = options;\n        this.remoteName = remoteName;\n        /**\n         * Timer reference indicating when to send the next ping or when the most recent ping will be considered lost.\n         */ this.keepaliveTimer = null;\n        /**\n         * Indicates that the keepalive timer ran out while there were no active\n         * calls, and a ping should be sent the next time a call starts.\n         */ this.pendingSendKeepalivePing = false;\n        this.activeCalls = new Set();\n        this.disconnectListeners = [];\n        this.disconnectHandled = false;\n        this.channelzEnabled = true;\n        this.keepalivesSent = 0;\n        this.messagesSent = 0;\n        this.messagesReceived = 0;\n        this.lastMessageSentTimestamp = null;\n        this.lastMessageReceivedTimestamp = null;\n        /* Populate subchannelAddressString and channelzRef before doing anything\n         * else, because they are used in the trace methods. */ this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);\n        if (options[\"grpc.enable_channelz\"] === 0) {\n            this.channelzEnabled = false;\n            this.streamTracker = new channelz_1.ChannelzCallTrackerStub();\n        } else {\n            this.streamTracker = new channelz_1.ChannelzCallTracker();\n        }\n        this.channelzRef = (0, channelz_1.registerChannelzSocket)(this.subchannelAddressString, ()=>this.getChannelzInfo(), this.channelzEnabled);\n        // Build user-agent string.\n        this.userAgent = [\n            options[\"grpc.primary_user_agent\"],\n            `grpc-node-js/${clientVersion}`,\n            options[\"grpc.secondary_user_agent\"]\n        ].filter((e)=>e).join(\" \"); // remove falsey values first\n        if (\"grpc.keepalive_time_ms\" in options) {\n            this.keepaliveTimeMs = options[\"grpc.keepalive_time_ms\"];\n        } else {\n            this.keepaliveTimeMs = -1;\n        }\n        if (\"grpc.keepalive_timeout_ms\" in options) {\n            this.keepaliveTimeoutMs = options[\"grpc.keepalive_timeout_ms\"];\n        } else {\n            this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;\n        }\n        if (\"grpc.keepalive_permit_without_calls\" in options) {\n            this.keepaliveWithoutCalls = options[\"grpc.keepalive_permit_without_calls\"] === 1;\n        } else {\n            this.keepaliveWithoutCalls = false;\n        }\n        session.once(\"close\", ()=>{\n            this.trace(\"session closed\");\n            this.handleDisconnect();\n        });\n        session.once(\"goaway\", (errorCode, lastStreamID, opaqueData)=>{\n            let tooManyPings = false;\n            /* See the last paragraph of\n             * https://github.com/grpc/proposal/blob/master/A8-client-side-keepalive.md#basic-keepalive */ if (errorCode === http2.constants.NGHTTP2_ENHANCE_YOUR_CALM && opaqueData && opaqueData.equals(tooManyPingsData)) {\n                tooManyPings = true;\n            }\n            this.trace(\"connection closed by GOAWAY with code \" + errorCode + \" and data \" + (opaqueData === null || opaqueData === void 0 ? void 0 : opaqueData.toString()));\n            this.reportDisconnectToOwner(tooManyPings);\n        });\n        session.once(\"error\", (error)=>{\n            this.trace(\"connection closed with error \" + error.message);\n            this.handleDisconnect();\n        });\n        session.socket.once(\"close\", (hadError)=>{\n            this.trace(\"connection closed. hadError=\" + hadError);\n            this.handleDisconnect();\n        });\n        if (logging.isTracerEnabled(TRACER_NAME)) {\n            session.on(\"remoteSettings\", (settings)=>{\n                this.trace(\"new settings received\" + (this.session !== session ? \" on the old connection\" : \"\") + \": \" + JSON.stringify(settings));\n            });\n            session.on(\"localSettings\", (settings)=>{\n                this.trace(\"local settings acknowledged by remote\" + (this.session !== session ? \" on the old connection\" : \"\") + \": \" + JSON.stringify(settings));\n            });\n        }\n        /* Start the keepalive timer last, because this can trigger trace logs,\n         * which should only happen after everything else is set up. */ if (this.keepaliveWithoutCalls) {\n            this.maybeStartKeepalivePingTimer();\n        }\n    }\n    getChannelzInfo() {\n        var _a, _b, _c;\n        const sessionSocket = this.session.socket;\n        const remoteAddress = sessionSocket.remoteAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;\n        const localAddress = sessionSocket.localAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort) : null;\n        let tlsInfo;\n        if (this.session.encrypted) {\n            const tlsSocket = sessionSocket;\n            const cipherInfo = tlsSocket.getCipher();\n            const certificate = tlsSocket.getCertificate();\n            const peerCertificate = tlsSocket.getPeerCertificate();\n            tlsInfo = {\n                cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,\n                cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n                localCertificate: certificate && \"raw\" in certificate ? certificate.raw : null,\n                remoteCertificate: peerCertificate && \"raw\" in peerCertificate ? peerCertificate.raw : null\n            };\n        } else {\n            tlsInfo = null;\n        }\n        const socketInfo = {\n            remoteAddress: remoteAddress,\n            localAddress: localAddress,\n            security: tlsInfo,\n            remoteName: this.remoteName,\n            streamsStarted: this.streamTracker.callsStarted,\n            streamsSucceeded: this.streamTracker.callsSucceeded,\n            streamsFailed: this.streamTracker.callsFailed,\n            messagesSent: this.messagesSent,\n            messagesReceived: this.messagesReceived,\n            keepAlivesSent: this.keepalivesSent,\n            lastLocalStreamCreatedTimestamp: this.streamTracker.lastCallStartedTimestamp,\n            lastRemoteStreamCreatedTimestamp: null,\n            lastMessageSentTimestamp: this.lastMessageSentTimestamp,\n            lastMessageReceivedTimestamp: this.lastMessageReceivedTimestamp,\n            localFlowControlWindow: (_b = this.session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,\n            remoteFlowControlWindow: (_c = this.session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null\n        };\n        return socketInfo;\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" \" + text);\n    }\n    keepaliveTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, \"keepalive\", \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" \" + text);\n    }\n    flowControlTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, FLOW_CONTROL_TRACER_NAME, \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" \" + text);\n    }\n    internalsTrace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, \"transport_internals\", \"(\" + this.channelzRef.id + \") \" + this.subchannelAddressString + \" \" + text);\n    }\n    /**\n     * Indicate to the owner of this object that this transport should no longer\n     * be used. That happens if the connection drops, or if the server sends a\n     * GOAWAY.\n     * @param tooManyPings If true, this was triggered by a GOAWAY with data\n     * indicating that the session was closed becaues the client sent too many\n     * pings.\n     * @returns\n     */ reportDisconnectToOwner(tooManyPings) {\n        if (this.disconnectHandled) {\n            return;\n        }\n        this.disconnectHandled = true;\n        this.disconnectListeners.forEach((listener)=>listener(tooManyPings));\n    }\n    /**\n     * Handle connection drops, but not GOAWAYs.\n     */ handleDisconnect() {\n        this.clearKeepaliveTimeout();\n        this.reportDisconnectToOwner(false);\n        for (const call of this.activeCalls){\n            call.onDisconnect();\n        }\n        // Wait an event loop cycle before destroying the connection\n        setImmediate(()=>{\n            this.session.destroy();\n        });\n    }\n    addDisconnectListener(listener) {\n        this.disconnectListeners.push(listener);\n    }\n    canSendPing() {\n        return !this.session.destroyed && this.keepaliveTimeMs > 0 && (this.keepaliveWithoutCalls || this.activeCalls.size > 0);\n    }\n    maybeSendPing() {\n        var _a, _b;\n        if (!this.canSendPing()) {\n            this.pendingSendKeepalivePing = true;\n            return;\n        }\n        if (this.keepaliveTimer) {\n            console.error(\"keepaliveTimeout is not null\");\n            return;\n        }\n        if (this.channelzEnabled) {\n            this.keepalivesSent += 1;\n        }\n        this.keepaliveTrace(\"Sending ping with timeout \" + this.keepaliveTimeoutMs + \"ms\");\n        this.keepaliveTimer = setTimeout(()=>{\n            this.keepaliveTimer = null;\n            this.keepaliveTrace(\"Ping timeout passed without response\");\n            this.handleDisconnect();\n        }, this.keepaliveTimeoutMs);\n        (_b = (_a = this.keepaliveTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        let pingSendError = \"\";\n        try {\n            const pingSentSuccessfully = this.session.ping((err, duration, payload)=>{\n                this.clearKeepaliveTimeout();\n                if (err) {\n                    this.keepaliveTrace(\"Ping failed with error \" + err.message);\n                    this.handleDisconnect();\n                } else {\n                    this.keepaliveTrace(\"Received ping response\");\n                    this.maybeStartKeepalivePingTimer();\n                }\n            });\n            if (!pingSentSuccessfully) {\n                pingSendError = \"Ping returned false\";\n            }\n        } catch (e) {\n            // grpc/grpc-node#2139\n            pingSendError = (e instanceof Error ? e.message : \"\") || \"Unknown error\";\n        }\n        if (pingSendError) {\n            this.keepaliveTrace(\"Ping send failed: \" + pingSendError);\n            this.handleDisconnect();\n        }\n    }\n    /**\n     * Starts the keepalive ping timer if appropriate. If the timer already ran\n     * out while there were no active requests, instead send a ping immediately.\n     * If the ping timer is already running or a ping is currently in flight,\n     * instead do nothing and wait for them to resolve.\n     */ maybeStartKeepalivePingTimer() {\n        var _a, _b;\n        if (!this.canSendPing()) {\n            return;\n        }\n        if (this.pendingSendKeepalivePing) {\n            this.pendingSendKeepalivePing = false;\n            this.maybeSendPing();\n        } else if (!this.keepaliveTimer) {\n            this.keepaliveTrace(\"Starting keepalive timer for \" + this.keepaliveTimeMs + \"ms\");\n            this.keepaliveTimer = setTimeout(()=>{\n                this.keepaliveTimer = null;\n                this.maybeSendPing();\n            }, this.keepaliveTimeMs);\n            (_b = (_a = this.keepaliveTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        }\n    /* Otherwise, there is already either a keepalive timer or a ping pending,\n         * wait for those to resolve. */ }\n    /**\n     * Clears whichever keepalive timeout is currently active, if any.\n     */ clearKeepaliveTimeout() {\n        if (this.keepaliveTimer) {\n            clearTimeout(this.keepaliveTimer);\n            this.keepaliveTimer = null;\n        }\n    }\n    removeActiveCall(call) {\n        this.activeCalls.delete(call);\n        if (this.activeCalls.size === 0) {\n            this.session.unref();\n        }\n    }\n    addActiveCall(call) {\n        this.activeCalls.add(call);\n        if (this.activeCalls.size === 1) {\n            this.session.ref();\n            if (!this.keepaliveWithoutCalls) {\n                this.maybeStartKeepalivePingTimer();\n            }\n        }\n    }\n    createCall(metadata, host, method, listener, subchannelCallStatsTracker) {\n        const headers = metadata.toHttp2Headers();\n        headers[HTTP2_HEADER_AUTHORITY] = host;\n        headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;\n        headers[HTTP2_HEADER_CONTENT_TYPE] = \"application/grpc\";\n        headers[HTTP2_HEADER_METHOD] = \"POST\";\n        headers[HTTP2_HEADER_PATH] = method;\n        headers[HTTP2_HEADER_TE] = \"trailers\";\n        let http2Stream;\n        /* In theory, if an error is thrown by session.request because session has\n         * become unusable (e.g. because it has received a goaway), this subchannel\n         * should soon see the corresponding close or goaway event anyway and leave\n         * READY. But we have seen reports that this does not happen\n         * (https://github.com/googleapis/nodejs-firestore/issues/1023#issuecomment-653204096)\n         * so for defense in depth, we just discard the session when we see an\n         * error here.\n         */ try {\n            http2Stream = this.session.request(headers);\n        } catch (e) {\n            this.handleDisconnect();\n            throw e;\n        }\n        this.flowControlTrace(\"local window size: \" + this.session.state.localWindowSize + \" remote window size: \" + this.session.state.remoteWindowSize);\n        this.internalsTrace(\"session.closed=\" + this.session.closed + \" session.destroyed=\" + this.session.destroyed + \" session.socket.destroyed=\" + this.session.socket.destroyed);\n        let eventTracker;\n        // eslint-disable-next-line prefer-const\n        let call;\n        if (this.channelzEnabled) {\n            this.streamTracker.addCallStarted();\n            eventTracker = {\n                addMessageSent: ()=>{\n                    var _a;\n                    this.messagesSent += 1;\n                    this.lastMessageSentTimestamp = new Date();\n                    (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n                },\n                addMessageReceived: ()=>{\n                    var _a;\n                    this.messagesReceived += 1;\n                    this.lastMessageReceivedTimestamp = new Date();\n                    (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n                },\n                onCallEnd: (status)=>{\n                    var _a;\n                    (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);\n                    this.removeActiveCall(call);\n                },\n                onStreamEnd: (success)=>{\n                    var _a;\n                    if (success) {\n                        this.streamTracker.addCallSucceeded();\n                    } else {\n                        this.streamTracker.addCallFailed();\n                    }\n                    (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);\n                }\n            };\n        } else {\n            eventTracker = {\n                addMessageSent: ()=>{\n                    var _a;\n                    (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n                },\n                addMessageReceived: ()=>{\n                    var _a;\n                    (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n                },\n                onCallEnd: (status)=>{\n                    var _a;\n                    (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);\n                    this.removeActiveCall(call);\n                },\n                onStreamEnd: (success)=>{\n                    var _a;\n                    (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);\n                }\n            };\n        }\n        call = new subchannel_call_1.Http2SubchannelCall(http2Stream, eventTracker, listener, this, (0, call_number_1.getNextCallNumber)());\n        this.addActiveCall(call);\n        return call;\n    }\n    getChannelzRef() {\n        return this.channelzRef;\n    }\n    getPeerName() {\n        return this.subchannelAddressString;\n    }\n    getOptions() {\n        return this.options;\n    }\n    shutdown() {\n        this.session.close();\n        (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n    }\n}\nclass Http2SubchannelConnector {\n    constructor(channelTarget){\n        this.channelTarget = channelTarget;\n        this.session = null;\n        this.isShutdown = false;\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, (0, uri_parser_1.uriToString)(this.channelTarget) + \" \" + text);\n    }\n    createSession(secureConnectResult, address, options) {\n        if (this.isShutdown) {\n            return Promise.reject();\n        }\n        if (secureConnectResult.socket.closed) {\n            return Promise.reject(\"Connection closed before starting HTTP/2 handshake\");\n        }\n        return new Promise((resolve, reject)=>{\n            var _a;\n            let remoteName = null;\n            let realTarget = this.channelTarget;\n            if (\"grpc.http_connect_target\" in options) {\n                const parsedTarget = (0, uri_parser_1.parseUri)(options[\"grpc.http_connect_target\"]);\n                if (parsedTarget) {\n                    realTarget = parsedTarget;\n                    remoteName = (0, uri_parser_1.uriToString)(parsedTarget);\n                }\n            }\n            const scheme = secureConnectResult.secure ? \"https\" : \"http\";\n            const targetPath = (0, resolver_1.getDefaultAuthority)(realTarget);\n            const closeHandler = ()=>{\n                var _a;\n                (_a = this.session) === null || _a === void 0 ? void 0 : _a.destroy();\n                this.session = null;\n                // Leave time for error event to happen before rejecting\n                setImmediate(()=>{\n                    if (!reportedError) {\n                        reportedError = true;\n                        reject(`${errorMessage.trim()} (${new Date().toISOString()})`);\n                    }\n                });\n            };\n            const errorHandler = (error)=>{\n                var _a;\n                (_a = this.session) === null || _a === void 0 ? void 0 : _a.destroy();\n                errorMessage = error.message;\n                this.trace(\"connection failed with error \" + errorMessage);\n                if (!reportedError) {\n                    reportedError = true;\n                    reject(`${errorMessage} (${new Date().toISOString()})`);\n                }\n            };\n            const session = http2.connect(`${scheme}://${targetPath}`, {\n                createConnection: (authority, option)=>{\n                    return secureConnectResult.socket;\n                },\n                settings: {\n                    initialWindowSize: (_a = options[\"grpc-node.flow_control_window\"]) !== null && _a !== void 0 ? _a : http2.getDefaultSettings().initialWindowSize\n                }\n            });\n            this.session = session;\n            let errorMessage = \"Failed to connect\";\n            let reportedError = false;\n            session.unref();\n            session.once(\"remoteSettings\", ()=>{\n                session.removeAllListeners();\n                secureConnectResult.socket.removeListener(\"close\", closeHandler);\n                secureConnectResult.socket.removeListener(\"error\", errorHandler);\n                resolve(new Http2Transport(session, address, options, remoteName));\n                this.session = null;\n            });\n            session.once(\"close\", closeHandler);\n            session.once(\"error\", errorHandler);\n            secureConnectResult.socket.once(\"close\", closeHandler);\n            secureConnectResult.socket.once(\"error\", errorHandler);\n        });\n    }\n    tcpConnect(address, options) {\n        return (0, http_proxy_1.getProxiedConnection)(address, options).then((proxiedSocket)=>{\n            if (proxiedSocket) {\n                return proxiedSocket;\n            } else {\n                return new Promise((resolve, reject)=>{\n                    const closeCallback = ()=>{\n                        reject(new Error(\"Socket closed\"));\n                    };\n                    const errorCallback = (error)=>{\n                        reject(error);\n                    };\n                    const socket = net.connect(address, ()=>{\n                        socket.removeListener(\"close\", closeCallback);\n                        socket.removeListener(\"error\", errorCallback);\n                        resolve(socket);\n                    });\n                    socket.once(\"close\", closeCallback);\n                    socket.once(\"error\", errorCallback);\n                });\n            }\n        });\n    }\n    async connect(address, secureConnector, options) {\n        if (this.isShutdown) {\n            return Promise.reject();\n        }\n        let tcpConnection = null;\n        let secureConnectResult = null;\n        const addressString = (0, subchannel_address_1.subchannelAddressToString)(address);\n        try {\n            this.trace(addressString + \" Waiting for secureConnector to be ready\");\n            await secureConnector.waitForReady();\n            this.trace(addressString + \" secureConnector is ready\");\n            tcpConnection = await this.tcpConnect(address, options);\n            this.trace(addressString + \" Established TCP connection\");\n            secureConnectResult = await secureConnector.connect(tcpConnection);\n            this.trace(addressString + \" Established secure connection\");\n            return this.createSession(secureConnectResult, address, options);\n        } catch (e) {\n            tcpConnection === null || tcpConnection === void 0 ? void 0 : tcpConnection.destroy();\n            secureConnectResult === null || secureConnectResult === void 0 ? void 0 : secureConnectResult.socket.destroy();\n            throw e;\n        }\n    }\n    shutdown() {\n        var _a;\n        this.isShutdown = true;\n        (_a = this.session) === null || _a === void 0 ? void 0 : _a.close();\n        this.session = null;\n    }\n}\nexports.Http2SubchannelConnector = Http2SubchannelConnector; //# sourceMappingURL=transport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/transport.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/uri-parser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseUri = parseUri;\nexports.splitHostPort = splitHostPort;\nexports.combineHostPort = combineHostPort;\nexports.uriToString = uriToString;\n/*\n * The groups correspond to URI parts as follows:\n * 1. scheme\n * 2. authority\n * 3. path\n */ const URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\nfunction parseUri(uriString) {\n    const parsedUri = URI_REGEX.exec(uriString);\n    if (parsedUri === null) {\n        return null;\n    }\n    return {\n        scheme: parsedUri[1],\n        authority: parsedUri[2],\n        path: parsedUri[3]\n    };\n}\nconst NUMBER_REGEX = /^\\d+$/;\nfunction splitHostPort(path) {\n    if (path.startsWith(\"[\")) {\n        const hostEnd = path.indexOf(\"]\");\n        if (hostEnd === -1) {\n            return null;\n        }\n        const host = path.substring(1, hostEnd);\n        /* Only an IPv6 address should be in bracketed notation, and an IPv6\n         * address should have at least one colon */ if (host.indexOf(\":\") === -1) {\n            return null;\n        }\n        if (path.length > hostEnd + 1) {\n            if (path[hostEnd + 1] === \":\") {\n                const portString = path.substring(hostEnd + 2);\n                if (NUMBER_REGEX.test(portString)) {\n                    return {\n                        host: host,\n                        port: +portString\n                    };\n                } else {\n                    return null;\n                }\n            } else {\n                return null;\n            }\n        } else {\n            return {\n                host\n            };\n        }\n    } else {\n        const splitPath = path.split(\":\");\n        /* Exactly one colon means that this is host:port. Zero colons means that\n         * there is no port. And multiple colons means that this is a bare IPv6\n         * address with no port */ if (splitPath.length === 2) {\n            if (NUMBER_REGEX.test(splitPath[1])) {\n                return {\n                    host: splitPath[0],\n                    port: +splitPath[1]\n                };\n            } else {\n                return null;\n            }\n        } else {\n            return {\n                host: path\n            };\n        }\n    }\n}\nfunction combineHostPort(hostPort) {\n    if (hostPort.port === undefined) {\n        return hostPort.host;\n    } else {\n        // Only an IPv6 host should include a colon\n        if (hostPort.host.includes(\":\")) {\n            return `[${hostPort.host}]:${hostPort.port}`;\n        } else {\n            return `${hostPort.host}:${hostPort.port}`;\n        }\n    }\n}\nfunction uriToString(uri) {\n    let result = \"\";\n    if (uri.scheme !== undefined) {\n        result += uri.scheme + \":\";\n    }\n    if (uri.authority !== undefined) {\n        result += \"//\" + uri.authority + \"/\";\n    }\n    result += uri.path;\n    return result;\n} //# sourceMappingURL=uri-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/proto-loader/build/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/proto-loader/build/src/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.loadFileDescriptorSetFromObject = exports.loadFileDescriptorSetFromBuffer = exports.fromJSON = exports.loadSync = exports.load = exports.IdempotencyLevel = exports.isAnyExtension = exports.Long = void 0;\nconst camelCase = __webpack_require__(/*! lodash.camelcase */ \"(rsc)/./node_modules/lodash.camelcase/index.js\");\nconst Protobuf = __webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\");\nconst descriptor = __webpack_require__(/*! protobufjs/ext/descriptor */ \"(rsc)/./node_modules/protobufjs/ext/descriptor/index.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@grpc/proto-loader/build/src/util.js\");\nconst Long = __webpack_require__(/*! long */ \"(rsc)/./node_modules/long/umd/index.js\");\nexports.Long = Long;\nfunction isAnyExtension(obj) {\n    return \"@type\" in obj && typeof obj[\"@type\"] === \"string\";\n}\nexports.isAnyExtension = isAnyExtension;\nvar IdempotencyLevel;\n(function(IdempotencyLevel) {\n    IdempotencyLevel[\"IDEMPOTENCY_UNKNOWN\"] = \"IDEMPOTENCY_UNKNOWN\";\n    IdempotencyLevel[\"NO_SIDE_EFFECTS\"] = \"NO_SIDE_EFFECTS\";\n    IdempotencyLevel[\"IDEMPOTENT\"] = \"IDEMPOTENT\";\n})(IdempotencyLevel = exports.IdempotencyLevel || (exports.IdempotencyLevel = {}));\nconst descriptorOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    defaults: true,\n    oneofs: true,\n    json: true\n};\nfunction joinName(baseName, name) {\n    if (baseName === \"\") {\n        return name;\n    } else {\n        return baseName + \".\" + name;\n    }\n}\nfunction isHandledReflectionObject(obj) {\n    return obj instanceof Protobuf.Service || obj instanceof Protobuf.Type || obj instanceof Protobuf.Enum;\n}\nfunction isNamespaceBase(obj) {\n    return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;\n}\nfunction getAllHandledReflectionObjects(obj, parentName) {\n    const objName = joinName(parentName, obj.name);\n    if (isHandledReflectionObject(obj)) {\n        return [\n            [\n                objName,\n                obj\n            ]\n        ];\n    } else {\n        if (isNamespaceBase(obj) && typeof obj.nested !== \"undefined\") {\n            return Object.keys(obj.nested).map((name)=>{\n                return getAllHandledReflectionObjects(obj.nested[name], objName);\n            }).reduce((accumulator, currentValue)=>accumulator.concat(currentValue), []);\n        }\n    }\n    return [];\n}\nfunction createDeserializer(cls, options) {\n    return function deserialize(argBuf) {\n        return cls.toObject(cls.decode(argBuf), options);\n    };\n}\nfunction createSerializer(cls) {\n    return function serialize(arg) {\n        if (Array.isArray(arg)) {\n            throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);\n        }\n        const message = cls.fromObject(arg);\n        return cls.encode(message).finish();\n    };\n}\nfunction mapMethodOptions(options) {\n    return (options || []).reduce((obj, item)=>{\n        for (const [key, value] of Object.entries(item)){\n            switch(key){\n                case \"uninterpreted_option\":\n                    obj.uninterpreted_option.push(item.uninterpreted_option);\n                    break;\n                default:\n                    obj[key] = value;\n            }\n        }\n        return obj;\n    }, {\n        deprecated: false,\n        idempotency_level: IdempotencyLevel.IDEMPOTENCY_UNKNOWN,\n        uninterpreted_option: []\n    });\n}\nfunction createMethodDefinition(method, serviceName, options, fileDescriptors) {\n    /* This is only ever called after the corresponding root.resolveAll(), so we\n     * can assume that the resolved request and response types are non-null */ const requestType = method.resolvedRequestType;\n    const responseType = method.resolvedResponseType;\n    return {\n        path: \"/\" + serviceName + \"/\" + method.name,\n        requestStream: !!method.requestStream,\n        responseStream: !!method.responseStream,\n        requestSerialize: createSerializer(requestType),\n        requestDeserialize: createDeserializer(requestType, options),\n        responseSerialize: createSerializer(responseType),\n        responseDeserialize: createDeserializer(responseType, options),\n        // TODO(murgatroid99): Find a better way to handle this\n        originalName: camelCase(method.name),\n        requestType: createMessageDefinition(requestType, fileDescriptors),\n        responseType: createMessageDefinition(responseType, fileDescriptors),\n        options: mapMethodOptions(method.parsedOptions)\n    };\n}\nfunction createServiceDefinition(service, name, options, fileDescriptors) {\n    const def = {};\n    for (const method of service.methodsArray){\n        def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);\n    }\n    return def;\n}\nfunction createMessageDefinition(message, fileDescriptors) {\n    const messageDescriptor = message.toDescriptor(\"proto3\");\n    return {\n        format: \"Protocol Buffer 3 DescriptorProto\",\n        type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),\n        fileDescriptorProtos: fileDescriptors\n    };\n}\nfunction createEnumDefinition(enumType, fileDescriptors) {\n    const enumDescriptor = enumType.toDescriptor(\"proto3\");\n    return {\n        format: \"Protocol Buffer 3 EnumDescriptorProto\",\n        type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),\n        fileDescriptorProtos: fileDescriptors\n    };\n}\n/**\n * function createDefinition(obj: Protobuf.Service, name: string, options:\n * Options): ServiceDefinition; function createDefinition(obj: Protobuf.Type,\n * name: string, options: Options): MessageTypeDefinition; function\n * createDefinition(obj: Protobuf.Enum, name: string, options: Options):\n * EnumTypeDefinition;\n */ function createDefinition(obj, name, options, fileDescriptors) {\n    if (obj instanceof Protobuf.Service) {\n        return createServiceDefinition(obj, name, options, fileDescriptors);\n    } else if (obj instanceof Protobuf.Type) {\n        return createMessageDefinition(obj, fileDescriptors);\n    } else if (obj instanceof Protobuf.Enum) {\n        return createEnumDefinition(obj, fileDescriptors);\n    } else {\n        throw new Error(\"Type mismatch in reflection object handling\");\n    }\n}\nfunction createPackageDefinition(root, options) {\n    const def = {};\n    root.resolveAll();\n    const descriptorList = root.toDescriptor(\"proto3\").file;\n    const bufferList = descriptorList.map((value)=>Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));\n    for (const [name, obj] of getAllHandledReflectionObjects(root, \"\")){\n        def[name] = createDefinition(obj, name, options, bufferList);\n    }\n    return def;\n}\nfunction createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {\n    options = options || {};\n    const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);\n    root.resolveAll();\n    return createPackageDefinition(root, options);\n}\n/**\n * Load a .proto file with the specified options.\n * @param filename One or multiple file paths to load. Can be an absolute path\n *     or relative to an include path.\n * @param options.keepCase Preserve field names. The default is to change them\n *     to camel case.\n * @param options.longs The type that should be used to represent `long` values.\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\n *     from a library.\n * @param options.enums The type that should be used to represent `enum` values.\n *     The only valid option is `String`. Defaults to the numeric value.\n * @param options.bytes The type that should be used to represent `bytes`\n *     values. Valid options are `Array` and `String`. The default is to use\n *     `Buffer`.\n * @param options.defaults Set default values on output objects. Defaults to\n *     `false`.\n * @param options.arrays Set empty arrays for missing array values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.objects Set empty objects for missing object values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.oneofs Set virtual oneof properties to the present field's\n *     name\n * @param options.json Represent Infinity and NaN as strings in float fields,\n *     and automatically decode google.protobuf.Any values.\n * @param options.includeDirs Paths to search for imported `.proto` files.\n */ function load(filename, options) {\n    return (0, util_1.loadProtosWithOptions)(filename, options).then((loadedRoot)=>{\n        return createPackageDefinition(loadedRoot, options);\n    });\n}\nexports.load = load;\nfunction loadSync(filename, options) {\n    const loadedRoot = (0, util_1.loadProtosWithOptionsSync)(filename, options);\n    return createPackageDefinition(loadedRoot, options);\n}\nexports.loadSync = loadSync;\nfunction fromJSON(json, options) {\n    options = options || {};\n    const loadedRoot = Protobuf.Root.fromJSON(json);\n    loadedRoot.resolveAll();\n    return createPackageDefinition(loadedRoot, options);\n}\nexports.fromJSON = fromJSON;\nfunction loadFileDescriptorSetFromBuffer(descriptorSet, options) {\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;\nfunction loadFileDescriptorSetFromObject(descriptorSet, options) {\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;\n(0, util_1.addCommonProtos)(); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/proto-loader/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/proto-loader/build/src/util.js":
/*!***********************************************************!*\
  !*** ./node_modules/@grpc/proto-loader/build/src/util.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.addCommonProtos = exports.loadProtosWithOptionsSync = exports.loadProtosWithOptions = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst Protobuf = __webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\");\nfunction addIncludePathResolver(root, includePaths) {\n    const originalResolvePath = root.resolvePath;\n    root.resolvePath = (origin, target)=>{\n        if (path.isAbsolute(target)) {\n            return target;\n        }\n        for (const directory of includePaths){\n            const fullPath = path.join(directory, target);\n            try {\n                fs.accessSync(fullPath, fs.constants.R_OK);\n                return fullPath;\n            } catch (err) {\n                continue;\n            }\n        }\n        process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);\n        return originalResolvePath(origin, target);\n    };\n}\nasync function loadProtosWithOptions(filename, options) {\n    const root = new Protobuf.Root();\n    options = options || {};\n    if (!!options.includeDirs) {\n        if (!Array.isArray(options.includeDirs)) {\n            return Promise.reject(new Error(\"The includeDirs option must be an array\"));\n        }\n        addIncludePathResolver(root, options.includeDirs);\n    }\n    const loadedRoot = await root.load(filename, options);\n    loadedRoot.resolveAll();\n    return loadedRoot;\n}\nexports.loadProtosWithOptions = loadProtosWithOptions;\nfunction loadProtosWithOptionsSync(filename, options) {\n    const root = new Protobuf.Root();\n    options = options || {};\n    if (!!options.includeDirs) {\n        if (!Array.isArray(options.includeDirs)) {\n            throw new Error(\"The includeDirs option must be an array\");\n        }\n        addIncludePathResolver(root, options.includeDirs);\n    }\n    const loadedRoot = root.loadSync(filename, options);\n    loadedRoot.resolveAll();\n    return loadedRoot;\n}\nexports.loadProtosWithOptionsSync = loadProtosWithOptionsSync;\n/**\n * Load Google's well-known proto files that aren't exposed by Protobuf.js.\n */ function addCommonProtos() {\n    // Protobuf.js exposes: any, duration, empty, field_mask, struct, timestamp,\n    // and wrappers. compiler/plugin is excluded in Protobuf.js and here.\n    // Using constant strings for compatibility with tools like Webpack\n    const apiDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/api.json */ \"(rsc)/./node_modules/protobufjs/google/protobuf/api.json\");\n    const descriptorDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/descriptor.json */ \"(rsc)/./node_modules/protobufjs/google/protobuf/descriptor.json\");\n    const sourceContextDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/source_context.json */ \"(rsc)/./node_modules/protobufjs/google/protobuf/source_context.json\");\n    const typeDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/type.json */ \"(rsc)/./node_modules/protobufjs/google/protobuf/type.json\");\n    Protobuf.common(\"api\", apiDescriptor.nested.google.nested.protobuf.nested);\n    Protobuf.common(\"descriptor\", descriptorDescriptor.nested.google.nested.protobuf.nested);\n    Protobuf.common(\"source_context\", sourceContextDescriptor.nested.google.nested.protobuf.nested);\n    Protobuf.common(\"type\", typeDescriptor.nested.google.nested.protobuf.nested);\n}\nexports.addCommonProtos = addCommonProtos; //# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/proto-loader/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/package.json":
/*!*************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/package.json ***!
  \*************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@grpc/grpc-js","version":"1.13.0","description":"gRPC Library for Node - pure JS implementation","homepage":"https://grpc.io/","repository":"https://github.com/grpc/grpc-node/tree/master/packages/grpc-js","main":"build/src/index.js","engines":{"node":">=12.10.0"},"keywords":[],"author":{"name":"Google Inc."},"types":"build/src/index.d.ts","license":"Apache-2.0","devDependencies":{"@grpc/proto-loader":"file:../proto-loader","@types/gulp":"^4.0.17","@types/gulp-mocha":"0.0.37","@types/lodash":"^4.14.202","@types/mocha":"^10.0.6","@types/ncp":"^2.0.8","@types/node":">=20.11.20","@types/pify":"^5.0.4","@types/semver":"^7.5.8","@typescript-eslint/eslint-plugin":"^7.1.0","@typescript-eslint/parser":"^7.1.0","@typescript-eslint/typescript-estree":"^7.1.0","clang-format":"^1.8.0","eslint":"^8.42.0","eslint-config-prettier":"^8.8.0","eslint-plugin-node":"^11.1.0","eslint-plugin-prettier":"^4.2.1","execa":"^2.0.3","gulp":"^4.0.2","gulp-mocha":"^6.0.0","lodash":"^4.17.21","madge":"^5.0.1","mocha-jenkins-reporter":"^0.4.1","ncp":"^2.0.0","pify":"^4.0.1","prettier":"^2.8.8","rimraf":"^3.0.2","semver":"^7.6.0","ts-node":"^10.9.2","typescript":"^5.3.3"},"contributors":[{"name":"Google Inc."}],"scripts":{"build":"npm run compile","clean":"rimraf ./build","compile":"tsc -p .","format":"clang-format -i -style=\\"{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}\\" src/*.ts test/*.ts","lint":"eslint src/*.ts test/*.ts","prepare":"npm run generate-types && npm run compile","test":"gulp test","check":"npm run lint","fix":"eslint --fix src/*.ts test/*.ts","pretest":"npm run generate-types && npm run generate-test-types && npm run compile","posttest":"npm run check && madge -c ./build/src","generate-types":"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --includeDirs proto/ --include-dirs test/fixtures/ -O src/generated/ --grpcLib ../index channelz.proto","generate-test-types":"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --include-dirs test/fixtures/ -O test/generated/ --grpcLib ../../src/index test_service.proto"},"dependencies":{"@grpc/proto-loader":"^0.7.13","@js-sdsl/ordered-map":"^4.4.2"},"files":["src/**/*.ts","build/src/**/*.{js,d.ts,js.map}","proto/*.proto","LICENSE","deps/envoy-api/envoy/api/v2/**/*.proto","deps/envoy-api/envoy/config/**/*.proto","deps/envoy-api/envoy/service/**/*.proto","deps/envoy-api/envoy/type/**/*.proto","deps/udpa/udpa/**/*.proto","deps/googleapis/google/api/*.proto","deps/googleapis/google/rpc/*.proto","deps/protoc-gen-validate/validate/**/*.proto"]}');

/***/ })

};
;