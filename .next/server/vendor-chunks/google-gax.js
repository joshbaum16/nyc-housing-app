"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/google-gax";
exports.ids = ["vendor-chunks/google-gax"];
exports.modules = {

/***/ "(rsc)/./node_modules/google-gax/build/protos/iam_service.js":
/*!*************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/iam_service.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n((e)=>{\n     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(function(o) {\n    var e, t, n, r, F, a = o.Reader, i = o.Writer, p = o.util, l = o.roots.iam_protos || (o.roots.iam_protos = {});\n    function B(e, t, n) {\n        o.rpc.Service.call(this, e, t, n);\n    }\n    function s(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function u(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function c(e) {\n        if (this.permissions = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function G(e) {\n        if (this.permissions = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function U(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function d(e) {\n        if (this.bindings = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function g(e) {\n        if (this.members = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function M(e) {\n        if (this.bindingDeltas = [], this.auditConfigDeltas = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function f(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function y(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function L(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function J(e) {\n        if (this.rules = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function h(e) {\n        if (this.additionalBindings = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function _(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function b(e) {\n        if (this.pattern = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function H(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function q(e) {\n        if (this.file = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function m(e) {\n        if (this.dependency = [], this.publicDependency = [], this.weakDependency = [], this.messageType = [], this.enumType = [], this.service = [], this.extension = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function O(e) {\n        if (this.field = [], this.extension = [], this.nestedType = [], this.enumType = [], this.extensionRange = [], this.oneofDecl = [], this.reservedRange = [], this.reservedName = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function v(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function Y(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function z(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function P(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function W(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function w(e) {\n        if (this.value = [], this.reservedRange = [], this.reservedName = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function X(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function j(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function D(e) {\n        if (this.method = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function x(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function S(e) {\n        if (this.uninterpretedOption = [], this[\".google.api.resourceDefinition\"] = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function k(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function T(e) {\n        if (this.uninterpretedOption = [], this[\".google.api.fieldBehavior\"] = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function Q(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function E(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function K(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function A(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function N(e) {\n        if (this.uninterpretedOption = [], this[\".google.api.methodSignature\"] = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function R(e) {\n        if (this.name = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function Z(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function $(e) {\n        if (this.location = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function I(e) {\n        if (this.path = [], this.span = [], this.leadingDetachedComments = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function ee(e) {\n        if (this.annotation = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function C(e) {\n        if (this.path = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function V(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    return l.google = ((F = {}).iam = ((n = {}).v1 = ((t = {}).IAMPolicy = (((B.prototype = Object.create(o.rpc.Service.prototype)).constructor = B).create = function(e, t, n) {\n        return new this(e, t, n);\n    }, Object.defineProperty(B.prototype.setIamPolicy = function e(t, n) {\n        return this.rpcCall(e, l.google.iam.v1.SetIamPolicyRequest, l.google.iam.v1.Policy, t, n);\n    }, \"name\", {\n        value: \"SetIamPolicy\"\n    }), Object.defineProperty(B.prototype.getIamPolicy = function e(t, n) {\n        return this.rpcCall(e, l.google.iam.v1.GetIamPolicyRequest, l.google.iam.v1.Policy, t, n);\n    }, \"name\", {\n        value: \"GetIamPolicy\"\n    }), Object.defineProperty(B.prototype.testIamPermissions = function e(t, n) {\n        return this.rpcCall(e, l.google.iam.v1.TestIamPermissionsRequest, l.google.iam.v1.TestIamPermissionsResponse, t, n);\n    }, \"name\", {\n        value: \"TestIamPermissions\"\n    }), B), t.SetIamPolicyRequest = (s.prototype.resource = \"\", s.prototype.policy = null, s.create = function(e) {\n        return new s(e);\n    }, s.encode = function(e, t) {\n        return t = t || i.create(), null != e.resource && Object.hasOwnProperty.call(e, \"resource\") && t.uint32(10).string(e.resource), null != e.policy && Object.hasOwnProperty.call(e, \"policy\") && l.google.iam.v1.Policy.encode(e.policy, t.uint32(18).fork()).ldelim(), t;\n    }, s.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, s.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.iam.v1.SetIamPolicyRequest; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.resource = e.string();\n                    break;\n                case 2:\n                    o.policy = l.google.iam.v1.Policy.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, s.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, s.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.resource && e.hasOwnProperty(\"resource\") && !p.isString(e.resource)) return \"resource: string expected\";\n        if (null != e.policy && e.hasOwnProperty(\"policy\")) {\n            e = l.google.iam.v1.Policy.verify(e.policy);\n            if (e) return \"policy.\" + e;\n        }\n        return null;\n    }, s.fromObject = function(e) {\n        if (e instanceof l.google.iam.v1.SetIamPolicyRequest) return e;\n        var t = new l.google.iam.v1.SetIamPolicyRequest;\n        if (null != e.resource && (t.resource = String(e.resource)), null != e.policy) {\n            if (\"object\" != typeof e.policy) throw TypeError(\".google.iam.v1.SetIamPolicyRequest.policy: object expected\");\n            t.policy = l.google.iam.v1.Policy.fromObject(e.policy);\n        }\n        return t;\n    }, s.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.resource = \"\", n.policy = null), null != e.resource && e.hasOwnProperty(\"resource\") && (n.resource = e.resource), null != e.policy && e.hasOwnProperty(\"policy\") && (n.policy = l.google.iam.v1.Policy.toObject(e.policy, t)), n;\n    }, s.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, s), t.GetIamPolicyRequest = (u.prototype.resource = \"\", u.prototype.options = null, u.create = function(e) {\n        return new u(e);\n    }, u.encode = function(e, t) {\n        return t = t || i.create(), null != e.resource && Object.hasOwnProperty.call(e, \"resource\") && t.uint32(10).string(e.resource), null != e.options && Object.hasOwnProperty.call(e, \"options\") && l.google.iam.v1.GetPolicyOptions.encode(e.options, t.uint32(18).fork()).ldelim(), t;\n    }, u.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, u.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.iam.v1.GetIamPolicyRequest; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.resource = e.string();\n                    break;\n                case 2:\n                    o.options = l.google.iam.v1.GetPolicyOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, u.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, u.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.resource && e.hasOwnProperty(\"resource\") && !p.isString(e.resource)) return \"resource: string expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            e = l.google.iam.v1.GetPolicyOptions.verify(e.options);\n            if (e) return \"options.\" + e;\n        }\n        return null;\n    }, u.fromObject = function(e) {\n        if (e instanceof l.google.iam.v1.GetIamPolicyRequest) return e;\n        var t = new l.google.iam.v1.GetIamPolicyRequest;\n        if (null != e.resource && (t.resource = String(e.resource)), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.iam.v1.GetIamPolicyRequest.options: object expected\");\n            t.options = l.google.iam.v1.GetPolicyOptions.fromObject(e.options);\n        }\n        return t;\n    }, u.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.resource = \"\", n.options = null), null != e.resource && e.hasOwnProperty(\"resource\") && (n.resource = e.resource), null != e.options && e.hasOwnProperty(\"options\") && (n.options = l.google.iam.v1.GetPolicyOptions.toObject(e.options, t)), n;\n    }, u.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, u), t.TestIamPermissionsRequest = (c.prototype.resource = \"\", c.prototype.permissions = p.emptyArray, c.create = function(e) {\n        return new c(e);\n    }, c.encode = function(e, t) {\n        if (t = t || i.create(), null != e.resource && Object.hasOwnProperty.call(e, \"resource\") && t.uint32(10).string(e.resource), null != e.permissions && e.permissions.length) for(var n = 0; n < e.permissions.length; ++n)t.uint32(18).string(e.permissions[n]);\n        return t;\n    }, c.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, c.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.iam.v1.TestIamPermissionsRequest; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.resource = e.string();\n                    break;\n                case 2:\n                    o.permissions && o.permissions.length || (o.permissions = []), o.permissions.push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, c.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, c.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.resource && e.hasOwnProperty(\"resource\") && !p.isString(e.resource)) return \"resource: string expected\";\n        if (null != e.permissions && e.hasOwnProperty(\"permissions\")) {\n            if (!Array.isArray(e.permissions)) return \"permissions: array expected\";\n            for(var t = 0; t < e.permissions.length; ++t)if (!p.isString(e.permissions[t])) return \"permissions: string[] expected\";\n        }\n        return null;\n    }, c.fromObject = function(e) {\n        if (e instanceof l.google.iam.v1.TestIamPermissionsRequest) return e;\n        var t = new l.google.iam.v1.TestIamPermissionsRequest;\n        if (null != e.resource && (t.resource = String(e.resource)), e.permissions) {\n            if (!Array.isArray(e.permissions)) throw TypeError(\".google.iam.v1.TestIamPermissionsRequest.permissions: array expected\");\n            t.permissions = [];\n            for(var n = 0; n < e.permissions.length; ++n)t.permissions[n] = String(e.permissions[n]);\n        }\n        return t;\n    }, c.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.permissions = []), t.defaults && (n.resource = \"\"), null != e.resource && e.hasOwnProperty(\"resource\") && (n.resource = e.resource), e.permissions && e.permissions.length) {\n            n.permissions = [];\n            for(var o = 0; o < e.permissions.length; ++o)n.permissions[o] = e.permissions[o];\n        }\n        return n;\n    }, c.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, c), t.TestIamPermissionsResponse = (G.prototype.permissions = p.emptyArray, G.create = function(e) {\n        return new G(e);\n    }, G.encode = function(e, t) {\n        if (t = t || i.create(), null != e.permissions && e.permissions.length) for(var n = 0; n < e.permissions.length; ++n)t.uint32(10).string(e.permissions[n]);\n        return t;\n    }, G.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, G.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.iam.v1.TestIamPermissionsResponse; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? (o.permissions && o.permissions.length || (o.permissions = []), o.permissions.push(e.string())) : e.skipType(7 & r);\n        }\n        return o;\n    }, G.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, G.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.permissions && e.hasOwnProperty(\"permissions\")) {\n            if (!Array.isArray(e.permissions)) return \"permissions: array expected\";\n            for(var t = 0; t < e.permissions.length; ++t)if (!p.isString(e.permissions[t])) return \"permissions: string[] expected\";\n        }\n        return null;\n    }, G.fromObject = function(e) {\n        if (e instanceof l.google.iam.v1.TestIamPermissionsResponse) return e;\n        var t = new l.google.iam.v1.TestIamPermissionsResponse;\n        if (e.permissions) {\n            if (!Array.isArray(e.permissions)) throw TypeError(\".google.iam.v1.TestIamPermissionsResponse.permissions: array expected\");\n            t.permissions = [];\n            for(var n = 0; n < e.permissions.length; ++n)t.permissions[n] = String(e.permissions[n]);\n        }\n        return t;\n    }, G.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.permissions = []), e.permissions && e.permissions.length) {\n            n.permissions = [];\n            for(var o = 0; o < e.permissions.length; ++o)n.permissions[o] = e.permissions[o];\n        }\n        return n;\n    }, G.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, G), t.GetPolicyOptions = (U.prototype.requestedPolicyVersion = 0, U.create = function(e) {\n        return new U(e);\n    }, U.encode = function(e, t) {\n        return t = t || i.create(), null != e.requestedPolicyVersion && Object.hasOwnProperty.call(e, \"requestedPolicyVersion\") && t.uint32(8).int32(e.requestedPolicyVersion), t;\n    }, U.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, U.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.iam.v1.GetPolicyOptions; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? o.requestedPolicyVersion = e.int32() : e.skipType(7 & r);\n        }\n        return o;\n    }, U.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, U.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.requestedPolicyVersion && e.hasOwnProperty(\"requestedPolicyVersion\") && !p.isInteger(e.requestedPolicyVersion) ? \"requestedPolicyVersion: integer expected\" : null;\n    }, U.fromObject = function(e) {\n        var t;\n        return e instanceof l.google.iam.v1.GetPolicyOptions ? e : (t = new l.google.iam.v1.GetPolicyOptions, null != e.requestedPolicyVersion && (t.requestedPolicyVersion = 0 | e.requestedPolicyVersion), t);\n    }, U.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.requestedPolicyVersion = 0), null != e.requestedPolicyVersion && e.hasOwnProperty(\"requestedPolicyVersion\") && (n.requestedPolicyVersion = e.requestedPolicyVersion), n;\n    }, U.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, U), t.Policy = (d.prototype.version = 0, d.prototype.bindings = p.emptyArray, d.prototype.etag = p.newBuffer([]), d.create = function(e) {\n        return new d(e);\n    }, d.encode = function(e, t) {\n        if (t = t || i.create(), null != e.version && Object.hasOwnProperty.call(e, \"version\") && t.uint32(8).int32(e.version), null != e.etag && Object.hasOwnProperty.call(e, \"etag\") && t.uint32(26).bytes(e.etag), null != e.bindings && e.bindings.length) for(var n = 0; n < e.bindings.length; ++n)l.google.iam.v1.Binding.encode(e.bindings[n], t.uint32(34).fork()).ldelim();\n        return t;\n    }, d.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, d.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.iam.v1.Policy; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.version = e.int32();\n                    break;\n                case 4:\n                    o.bindings && o.bindings.length || (o.bindings = []), o.bindings.push(l.google.iam.v1.Binding.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.etag = e.bytes();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, d.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, d.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.version && e.hasOwnProperty(\"version\") && !p.isInteger(e.version)) return \"version: integer expected\";\n        if (null != e.bindings && e.hasOwnProperty(\"bindings\")) {\n            if (!Array.isArray(e.bindings)) return \"bindings: array expected\";\n            for(var t = 0; t < e.bindings.length; ++t){\n                var n = l.google.iam.v1.Binding.verify(e.bindings[t]);\n                if (n) return \"bindings.\" + n;\n            }\n        }\n        return null != e.etag && e.hasOwnProperty(\"etag\") && !(e.etag && \"number\" == typeof e.etag.length || p.isString(e.etag)) ? \"etag: buffer expected\" : null;\n    }, d.fromObject = function(e) {\n        if (e instanceof l.google.iam.v1.Policy) return e;\n        var t = new l.google.iam.v1.Policy;\n        if (null != e.version && (t.version = 0 | e.version), e.bindings) {\n            if (!Array.isArray(e.bindings)) throw TypeError(\".google.iam.v1.Policy.bindings: array expected\");\n            t.bindings = [];\n            for(var n = 0; n < e.bindings.length; ++n){\n                if (\"object\" != typeof e.bindings[n]) throw TypeError(\".google.iam.v1.Policy.bindings: object expected\");\n                t.bindings[n] = l.google.iam.v1.Binding.fromObject(e.bindings[n]);\n            }\n        }\n        return null != e.etag && (\"string\" == typeof e.etag ? p.base64.decode(e.etag, t.etag = p.newBuffer(p.base64.length(e.etag)), 0) : e.etag.length && (t.etag = e.etag)), t;\n    }, d.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.bindings = []), t.defaults && (n.version = 0, t.bytes === String ? n.etag = \"\" : (n.etag = [], t.bytes !== Array && (n.etag = p.newBuffer(n.etag)))), null != e.version && e.hasOwnProperty(\"version\") && (n.version = e.version), null != e.etag && e.hasOwnProperty(\"etag\") && (n.etag = t.bytes === String ? p.base64.encode(e.etag, 0, e.etag.length) : t.bytes === Array ? Array.prototype.slice.call(e.etag) : e.etag), e.bindings && e.bindings.length) {\n            n.bindings = [];\n            for(var o = 0; o < e.bindings.length; ++o)n.bindings[o] = l.google.iam.v1.Binding.toObject(e.bindings[o], t);\n        }\n        return n;\n    }, d.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, d), t.Binding = (g.prototype.role = \"\", g.prototype.members = p.emptyArray, g.prototype.condition = null, g.create = function(e) {\n        return new g(e);\n    }, g.encode = function(e, t) {\n        if (t = t || i.create(), null != e.role && Object.hasOwnProperty.call(e, \"role\") && t.uint32(10).string(e.role), null != e.members && e.members.length) for(var n = 0; n < e.members.length; ++n)t.uint32(18).string(e.members[n]);\n        return null != e.condition && Object.hasOwnProperty.call(e, \"condition\") && l.google.type.Expr.encode(e.condition, t.uint32(26).fork()).ldelim(), t;\n    }, g.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, g.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.iam.v1.Binding; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.role = e.string();\n                    break;\n                case 2:\n                    o.members && o.members.length || (o.members = []), o.members.push(e.string());\n                    break;\n                case 3:\n                    o.condition = l.google.type.Expr.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, g.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, g.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.role && e.hasOwnProperty(\"role\") && !p.isString(e.role)) return \"role: string expected\";\n        if (null != e.members && e.hasOwnProperty(\"members\")) {\n            if (!Array.isArray(e.members)) return \"members: array expected\";\n            for(var t = 0; t < e.members.length; ++t)if (!p.isString(e.members[t])) return \"members: string[] expected\";\n        }\n        if (null != e.condition && e.hasOwnProperty(\"condition\")) {\n            var n = l.google.type.Expr.verify(e.condition);\n            if (n) return \"condition.\" + n;\n        }\n        return null;\n    }, g.fromObject = function(e) {\n        if (e instanceof l.google.iam.v1.Binding) return e;\n        var t = new l.google.iam.v1.Binding;\n        if (null != e.role && (t.role = String(e.role)), e.members) {\n            if (!Array.isArray(e.members)) throw TypeError(\".google.iam.v1.Binding.members: array expected\");\n            t.members = [];\n            for(var n = 0; n < e.members.length; ++n)t.members[n] = String(e.members[n]);\n        }\n        if (null != e.condition) {\n            if (\"object\" != typeof e.condition) throw TypeError(\".google.iam.v1.Binding.condition: object expected\");\n            t.condition = l.google.type.Expr.fromObject(e.condition);\n        }\n        return t;\n    }, g.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.members = []), t.defaults && (n.role = \"\", n.condition = null), null != e.role && e.hasOwnProperty(\"role\") && (n.role = e.role), e.members && e.members.length) {\n            n.members = [];\n            for(var o = 0; o < e.members.length; ++o)n.members[o] = e.members[o];\n        }\n        return null != e.condition && e.hasOwnProperty(\"condition\") && (n.condition = l.google.type.Expr.toObject(e.condition, t)), n;\n    }, g.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, g), t.PolicyDelta = (M.prototype.bindingDeltas = p.emptyArray, M.prototype.auditConfigDeltas = p.emptyArray, M.create = function(e) {\n        return new M(e);\n    }, M.encode = function(e, t) {\n        if (t = t || i.create(), null != e.bindingDeltas && e.bindingDeltas.length) for(var n = 0; n < e.bindingDeltas.length; ++n)l.google.iam.v1.BindingDelta.encode(e.bindingDeltas[n], t.uint32(10).fork()).ldelim();\n        if (null != e.auditConfigDeltas && e.auditConfigDeltas.length) for(n = 0; n < e.auditConfigDeltas.length; ++n)l.google.iam.v1.AuditConfigDelta.encode(e.auditConfigDeltas[n], t.uint32(18).fork()).ldelim();\n        return t;\n    }, M.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, M.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.iam.v1.PolicyDelta; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.bindingDeltas && o.bindingDeltas.length || (o.bindingDeltas = []), o.bindingDeltas.push(l.google.iam.v1.BindingDelta.decode(e, e.uint32()));\n                    break;\n                case 2:\n                    o.auditConfigDeltas && o.auditConfigDeltas.length || (o.auditConfigDeltas = []), o.auditConfigDeltas.push(l.google.iam.v1.AuditConfigDelta.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, M.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, M.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.bindingDeltas && e.hasOwnProperty(\"bindingDeltas\")) {\n            if (!Array.isArray(e.bindingDeltas)) return \"bindingDeltas: array expected\";\n            for(var t = 0; t < e.bindingDeltas.length; ++t)if (n = l.google.iam.v1.BindingDelta.verify(e.bindingDeltas[t])) return \"bindingDeltas.\" + n;\n        }\n        if (null != e.auditConfigDeltas && e.hasOwnProperty(\"auditConfigDeltas\")) {\n            if (!Array.isArray(e.auditConfigDeltas)) return \"auditConfigDeltas: array expected\";\n            for(var n, t = 0; t < e.auditConfigDeltas.length; ++t)if (n = l.google.iam.v1.AuditConfigDelta.verify(e.auditConfigDeltas[t])) return \"auditConfigDeltas.\" + n;\n        }\n        return null;\n    }, M.fromObject = function(e) {\n        if (e instanceof l.google.iam.v1.PolicyDelta) return e;\n        var t = new l.google.iam.v1.PolicyDelta;\n        if (e.bindingDeltas) {\n            if (!Array.isArray(e.bindingDeltas)) throw TypeError(\".google.iam.v1.PolicyDelta.bindingDeltas: array expected\");\n            t.bindingDeltas = [];\n            for(var n = 0; n < e.bindingDeltas.length; ++n){\n                if (\"object\" != typeof e.bindingDeltas[n]) throw TypeError(\".google.iam.v1.PolicyDelta.bindingDeltas: object expected\");\n                t.bindingDeltas[n] = l.google.iam.v1.BindingDelta.fromObject(e.bindingDeltas[n]);\n            }\n        }\n        if (e.auditConfigDeltas) {\n            if (!Array.isArray(e.auditConfigDeltas)) throw TypeError(\".google.iam.v1.PolicyDelta.auditConfigDeltas: array expected\");\n            t.auditConfigDeltas = [];\n            for(n = 0; n < e.auditConfigDeltas.length; ++n){\n                if (\"object\" != typeof e.auditConfigDeltas[n]) throw TypeError(\".google.iam.v1.PolicyDelta.auditConfigDeltas: object expected\");\n                t.auditConfigDeltas[n] = l.google.iam.v1.AuditConfigDelta.fromObject(e.auditConfigDeltas[n]);\n            }\n        }\n        return t;\n    }, M.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.bindingDeltas = [], n.auditConfigDeltas = []), e.bindingDeltas && e.bindingDeltas.length) {\n            n.bindingDeltas = [];\n            for(var o = 0; o < e.bindingDeltas.length; ++o)n.bindingDeltas[o] = l.google.iam.v1.BindingDelta.toObject(e.bindingDeltas[o], t);\n        }\n        if (e.auditConfigDeltas && e.auditConfigDeltas.length) {\n            n.auditConfigDeltas = [];\n            for(o = 0; o < e.auditConfigDeltas.length; ++o)n.auditConfigDeltas[o] = l.google.iam.v1.AuditConfigDelta.toObject(e.auditConfigDeltas[o], t);\n        }\n        return n;\n    }, M.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, M), t.BindingDelta = (f.prototype.action = 0, f.prototype.role = \"\", f.prototype.member = \"\", f.prototype.condition = null, f.create = function(e) {\n        return new f(e);\n    }, f.encode = function(e, t) {\n        return t = t || i.create(), null != e.action && Object.hasOwnProperty.call(e, \"action\") && t.uint32(8).int32(e.action), null != e.role && Object.hasOwnProperty.call(e, \"role\") && t.uint32(18).string(e.role), null != e.member && Object.hasOwnProperty.call(e, \"member\") && t.uint32(26).string(e.member), null != e.condition && Object.hasOwnProperty.call(e, \"condition\") && l.google.type.Expr.encode(e.condition, t.uint32(34).fork()).ldelim(), t;\n    }, f.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, f.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.iam.v1.BindingDelta; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.action = e.int32();\n                    break;\n                case 2:\n                    o.role = e.string();\n                    break;\n                case 3:\n                    o.member = e.string();\n                    break;\n                case 4:\n                    o.condition = l.google.type.Expr.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, f.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, f.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.action && e.hasOwnProperty(\"action\")) switch(e.action){\n            default:\n                return \"action: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        if (null != e.role && e.hasOwnProperty(\"role\") && !p.isString(e.role)) return \"role: string expected\";\n        if (null != e.member && e.hasOwnProperty(\"member\") && !p.isString(e.member)) return \"member: string expected\";\n        if (null != e.condition && e.hasOwnProperty(\"condition\")) {\n            e = l.google.type.Expr.verify(e.condition);\n            if (e) return \"condition.\" + e;\n        }\n        return null;\n    }, f.fromObject = function(e) {\n        if (e instanceof l.google.iam.v1.BindingDelta) return e;\n        var t = new l.google.iam.v1.BindingDelta;\n        switch(e.action){\n            case \"ACTION_UNSPECIFIED\":\n            case 0:\n                t.action = 0;\n                break;\n            case \"ADD\":\n            case 1:\n                t.action = 1;\n                break;\n            case \"REMOVE\":\n            case 2:\n                t.action = 2;\n        }\n        if (null != e.role && (t.role = String(e.role)), null != e.member && (t.member = String(e.member)), null != e.condition) {\n            if (\"object\" != typeof e.condition) throw TypeError(\".google.iam.v1.BindingDelta.condition: object expected\");\n            t.condition = l.google.type.Expr.fromObject(e.condition);\n        }\n        return t;\n    }, f.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.action = t.enums === String ? \"ACTION_UNSPECIFIED\" : 0, n.role = \"\", n.member = \"\", n.condition = null), null != e.action && e.hasOwnProperty(\"action\") && (n.action = t.enums === String ? l.google.iam.v1.BindingDelta.Action[e.action] : e.action), null != e.role && e.hasOwnProperty(\"role\") && (n.role = e.role), null != e.member && e.hasOwnProperty(\"member\") && (n.member = e.member), null != e.condition && e.hasOwnProperty(\"condition\") && (n.condition = l.google.type.Expr.toObject(e.condition, t)), n;\n    }, f.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, f.Action = (e = {}, (r = Object.create(e))[e[0] = \"ACTION_UNSPECIFIED\"] = 0, r[e[1] = \"ADD\"] = 1, r[e[2] = \"REMOVE\"] = 2, r), f), t.AuditConfigDelta = (y.prototype.action = 0, y.prototype.service = \"\", y.prototype.exemptedMember = \"\", y.prototype.logType = \"\", y.create = function(e) {\n        return new y(e);\n    }, y.encode = function(e, t) {\n        return t = t || i.create(), null != e.action && Object.hasOwnProperty.call(e, \"action\") && t.uint32(8).int32(e.action), null != e.service && Object.hasOwnProperty.call(e, \"service\") && t.uint32(18).string(e.service), null != e.exemptedMember && Object.hasOwnProperty.call(e, \"exemptedMember\") && t.uint32(26).string(e.exemptedMember), null != e.logType && Object.hasOwnProperty.call(e, \"logType\") && t.uint32(34).string(e.logType), t;\n    }, y.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, y.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.iam.v1.AuditConfigDelta; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.action = e.int32();\n                    break;\n                case 2:\n                    o.service = e.string();\n                    break;\n                case 3:\n                    o.exemptedMember = e.string();\n                    break;\n                case 4:\n                    o.logType = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, y.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, y.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.action && e.hasOwnProperty(\"action\")) switch(e.action){\n            default:\n                return \"action: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        return null != e.service && e.hasOwnProperty(\"service\") && !p.isString(e.service) ? \"service: string expected\" : null != e.exemptedMember && e.hasOwnProperty(\"exemptedMember\") && !p.isString(e.exemptedMember) ? \"exemptedMember: string expected\" : null != e.logType && e.hasOwnProperty(\"logType\") && !p.isString(e.logType) ? \"logType: string expected\" : null;\n    }, y.fromObject = function(e) {\n        if (e instanceof l.google.iam.v1.AuditConfigDelta) return e;\n        var t = new l.google.iam.v1.AuditConfigDelta;\n        switch(e.action){\n            case \"ACTION_UNSPECIFIED\":\n            case 0:\n                t.action = 0;\n                break;\n            case \"ADD\":\n            case 1:\n                t.action = 1;\n                break;\n            case \"REMOVE\":\n            case 2:\n                t.action = 2;\n        }\n        return null != e.service && (t.service = String(e.service)), null != e.exemptedMember && (t.exemptedMember = String(e.exemptedMember)), null != e.logType && (t.logType = String(e.logType)), t;\n    }, y.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.action = t.enums === String ? \"ACTION_UNSPECIFIED\" : 0, n.service = \"\", n.exemptedMember = \"\", n.logType = \"\"), null != e.action && e.hasOwnProperty(\"action\") && (n.action = t.enums === String ? l.google.iam.v1.AuditConfigDelta.Action[e.action] : e.action), null != e.service && e.hasOwnProperty(\"service\") && (n.service = e.service), null != e.exemptedMember && e.hasOwnProperty(\"exemptedMember\") && (n.exemptedMember = e.exemptedMember), null != e.logType && e.hasOwnProperty(\"logType\") && (n.logType = e.logType), n;\n    }, y.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, y.Action = (e = {}, (r = Object.create(e))[e[0] = \"ACTION_UNSPECIFIED\"] = 0, r[e[1] = \"ADD\"] = 1, r[e[2] = \"REMOVE\"] = 2, r), y), t.logging = ((e = {}).AuditData = (L.prototype.policyDelta = null, L.create = function(e) {\n        return new L(e);\n    }, L.encode = function(e, t) {\n        return t = t || i.create(), null != e.policyDelta && Object.hasOwnProperty.call(e, \"policyDelta\") && l.google.iam.v1.PolicyDelta.encode(e.policyDelta, t.uint32(18).fork()).ldelim(), t;\n    }, L.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, L.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.iam.v1.logging.AuditData; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 2 ? o.policyDelta = l.google.iam.v1.PolicyDelta.decode(e, e.uint32()) : e.skipType(7 & r);\n        }\n        return o;\n    }, L.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, L.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.policyDelta && e.hasOwnProperty(\"policyDelta\")) {\n            e = l.google.iam.v1.PolicyDelta.verify(e.policyDelta);\n            if (e) return \"policyDelta.\" + e;\n        }\n        return null;\n    }, L.fromObject = function(e) {\n        if (e instanceof l.google.iam.v1.logging.AuditData) return e;\n        var t = new l.google.iam.v1.logging.AuditData;\n        if (null != e.policyDelta) {\n            if (\"object\" != typeof e.policyDelta) throw TypeError(\".google.iam.v1.logging.AuditData.policyDelta: object expected\");\n            t.policyDelta = l.google.iam.v1.PolicyDelta.fromObject(e.policyDelta);\n        }\n        return t;\n    }, L.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.policyDelta = null), null != e.policyDelta && e.hasOwnProperty(\"policyDelta\") && (n.policyDelta = l.google.iam.v1.PolicyDelta.toObject(e.policyDelta, t)), n;\n    }, L.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, L), e), t), n), F.api = ((r = {}).Http = (J.prototype.rules = p.emptyArray, J.prototype.fullyDecodeReservedExpansion = !1, J.create = function(e) {\n        return new J(e);\n    }, J.encode = function(e, t) {\n        if (t = t || i.create(), null != e.rules && e.rules.length) for(var n = 0; n < e.rules.length; ++n)l.google.api.HttpRule.encode(e.rules[n], t.uint32(10).fork()).ldelim();\n        return null != e.fullyDecodeReservedExpansion && Object.hasOwnProperty.call(e, \"fullyDecodeReservedExpansion\") && t.uint32(16).bool(e.fullyDecodeReservedExpansion), t;\n    }, J.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, J.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.api.Http; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.rules && o.rules.length || (o.rules = []), o.rules.push(l.google.api.HttpRule.decode(e, e.uint32()));\n                    break;\n                case 2:\n                    o.fullyDecodeReservedExpansion = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, J.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, J.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.rules && e.hasOwnProperty(\"rules\")) {\n            if (!Array.isArray(e.rules)) return \"rules: array expected\";\n            for(var t = 0; t < e.rules.length; ++t){\n                var n = l.google.api.HttpRule.verify(e.rules[t]);\n                if (n) return \"rules.\" + n;\n            }\n        }\n        return null != e.fullyDecodeReservedExpansion && e.hasOwnProperty(\"fullyDecodeReservedExpansion\") && \"boolean\" != typeof e.fullyDecodeReservedExpansion ? \"fullyDecodeReservedExpansion: boolean expected\" : null;\n    }, J.fromObject = function(e) {\n        if (e instanceof l.google.api.Http) return e;\n        var t = new l.google.api.Http;\n        if (e.rules) {\n            if (!Array.isArray(e.rules)) throw TypeError(\".google.api.Http.rules: array expected\");\n            t.rules = [];\n            for(var n = 0; n < e.rules.length; ++n){\n                if (\"object\" != typeof e.rules[n]) throw TypeError(\".google.api.Http.rules: object expected\");\n                t.rules[n] = l.google.api.HttpRule.fromObject(e.rules[n]);\n            }\n        }\n        return null != e.fullyDecodeReservedExpansion && (t.fullyDecodeReservedExpansion = Boolean(e.fullyDecodeReservedExpansion)), t;\n    }, J.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.rules = []), t.defaults && (n.fullyDecodeReservedExpansion = !1), e.rules && e.rules.length) {\n            n.rules = [];\n            for(var o = 0; o < e.rules.length; ++o)n.rules[o] = l.google.api.HttpRule.toObject(e.rules[o], t);\n        }\n        return null != e.fullyDecodeReservedExpansion && e.hasOwnProperty(\"fullyDecodeReservedExpansion\") && (n.fullyDecodeReservedExpansion = e.fullyDecodeReservedExpansion), n;\n    }, J.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, J), r.HttpRule = (h.prototype.selector = \"\", h.prototype.get = \"\", h.prototype.put = \"\", h.prototype.post = \"\", h.prototype.delete = \"\", h.prototype.patch = \"\", h.prototype.custom = null, h.prototype.body = \"\", h.prototype.responseBody = \"\", h.prototype.additionalBindings = p.emptyArray, Object.defineProperty(h.prototype, \"pattern\", {\n        get: p.oneOfGetter(e = [\n            \"get\",\n            \"put\",\n            \"post\",\n            \"delete\",\n            \"patch\",\n            \"custom\"\n        ]),\n        set: p.oneOfSetter(e)\n    }), h.create = function(e) {\n        return new h(e);\n    }, h.encode = function(e, t) {\n        if (t = t || i.create(), null != e.selector && Object.hasOwnProperty.call(e, \"selector\") && t.uint32(10).string(e.selector), null != e.get && Object.hasOwnProperty.call(e, \"get\") && t.uint32(18).string(e.get), null != e.put && Object.hasOwnProperty.call(e, \"put\") && t.uint32(26).string(e.put), null != e.post && Object.hasOwnProperty.call(e, \"post\") && t.uint32(34).string(e.post), null != e.delete && Object.hasOwnProperty.call(e, \"delete\") && t.uint32(42).string(e.delete), null != e.patch && Object.hasOwnProperty.call(e, \"patch\") && t.uint32(50).string(e.patch), null != e.body && Object.hasOwnProperty.call(e, \"body\") && t.uint32(58).string(e.body), null != e.custom && Object.hasOwnProperty.call(e, \"custom\") && l.google.api.CustomHttpPattern.encode(e.custom, t.uint32(66).fork()).ldelim(), null != e.additionalBindings && e.additionalBindings.length) for(var n = 0; n < e.additionalBindings.length; ++n)l.google.api.HttpRule.encode(e.additionalBindings[n], t.uint32(90).fork()).ldelim();\n        return null != e.responseBody && Object.hasOwnProperty.call(e, \"responseBody\") && t.uint32(98).string(e.responseBody), t;\n    }, h.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, h.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.api.HttpRule; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.selector = e.string();\n                    break;\n                case 2:\n                    o.get = e.string();\n                    break;\n                case 3:\n                    o.put = e.string();\n                    break;\n                case 4:\n                    o.post = e.string();\n                    break;\n                case 5:\n                    o.delete = e.string();\n                    break;\n                case 6:\n                    o.patch = e.string();\n                    break;\n                case 8:\n                    o.custom = l.google.api.CustomHttpPattern.decode(e, e.uint32());\n                    break;\n                case 7:\n                    o.body = e.string();\n                    break;\n                case 12:\n                    o.responseBody = e.string();\n                    break;\n                case 11:\n                    o.additionalBindings && o.additionalBindings.length || (o.additionalBindings = []), o.additionalBindings.push(l.google.api.HttpRule.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, h.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, h.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        var t = {};\n        if (null != e.selector && e.hasOwnProperty(\"selector\") && !p.isString(e.selector)) return \"selector: string expected\";\n        if (null != e.get && e.hasOwnProperty(\"get\") && (t.pattern = 1, !p.isString(e.get))) return \"get: string expected\";\n        if (null != e.put && e.hasOwnProperty(\"put\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !p.isString(e.put)) return \"put: string expected\";\n        }\n        if (null != e.post && e.hasOwnProperty(\"post\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !p.isString(e.post)) return \"post: string expected\";\n        }\n        if (null != e.delete && e.hasOwnProperty(\"delete\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !p.isString(e.delete)) return \"delete: string expected\";\n        }\n        if (null != e.patch && e.hasOwnProperty(\"patch\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !p.isString(e.patch)) return \"patch: string expected\";\n        }\n        if (null != e.custom && e.hasOwnProperty(\"custom\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, n = l.google.api.CustomHttpPattern.verify(e.custom)) return \"custom.\" + n;\n        }\n        if (null != e.body && e.hasOwnProperty(\"body\") && !p.isString(e.body)) return \"body: string expected\";\n        if (null != e.responseBody && e.hasOwnProperty(\"responseBody\") && !p.isString(e.responseBody)) return \"responseBody: string expected\";\n        if (null != e.additionalBindings && e.hasOwnProperty(\"additionalBindings\")) {\n            if (!Array.isArray(e.additionalBindings)) return \"additionalBindings: array expected\";\n            for(var n, o = 0; o < e.additionalBindings.length; ++o)if (n = l.google.api.HttpRule.verify(e.additionalBindings[o])) return \"additionalBindings.\" + n;\n        }\n        return null;\n    }, h.fromObject = function(e) {\n        if (e instanceof l.google.api.HttpRule) return e;\n        var t = new l.google.api.HttpRule;\n        if (null != e.selector && (t.selector = String(e.selector)), null != e.get && (t.get = String(e.get)), null != e.put && (t.put = String(e.put)), null != e.post && (t.post = String(e.post)), null != e.delete && (t.delete = String(e.delete)), null != e.patch && (t.patch = String(e.patch)), null != e.custom) {\n            if (\"object\" != typeof e.custom) throw TypeError(\".google.api.HttpRule.custom: object expected\");\n            t.custom = l.google.api.CustomHttpPattern.fromObject(e.custom);\n        }\n        if (null != e.body && (t.body = String(e.body)), null != e.responseBody && (t.responseBody = String(e.responseBody)), e.additionalBindings) {\n            if (!Array.isArray(e.additionalBindings)) throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");\n            t.additionalBindings = [];\n            for(var n = 0; n < e.additionalBindings.length; ++n){\n                if (\"object\" != typeof e.additionalBindings[n]) throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");\n                t.additionalBindings[n] = l.google.api.HttpRule.fromObject(e.additionalBindings[n]);\n            }\n        }\n        return t;\n    }, h.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.additionalBindings = []), t.defaults && (n.selector = \"\", n.body = \"\", n.responseBody = \"\"), null != e.selector && e.hasOwnProperty(\"selector\") && (n.selector = e.selector), null != e.get && e.hasOwnProperty(\"get\") && (n.get = e.get, t.oneofs) && (n.pattern = \"get\"), null != e.put && e.hasOwnProperty(\"put\") && (n.put = e.put, t.oneofs) && (n.pattern = \"put\"), null != e.post && e.hasOwnProperty(\"post\") && (n.post = e.post, t.oneofs) && (n.pattern = \"post\"), null != e.delete && e.hasOwnProperty(\"delete\") && (n.delete = e.delete, t.oneofs) && (n.pattern = \"delete\"), null != e.patch && e.hasOwnProperty(\"patch\") && (n.patch = e.patch, t.oneofs) && (n.pattern = \"patch\"), null != e.body && e.hasOwnProperty(\"body\") && (n.body = e.body), null != e.custom && e.hasOwnProperty(\"custom\") && (n.custom = l.google.api.CustomHttpPattern.toObject(e.custom, t), t.oneofs) && (n.pattern = \"custom\"), e.additionalBindings && e.additionalBindings.length) {\n            n.additionalBindings = [];\n            for(var o = 0; o < e.additionalBindings.length; ++o)n.additionalBindings[o] = l.google.api.HttpRule.toObject(e.additionalBindings[o], t);\n        }\n        return null != e.responseBody && e.hasOwnProperty(\"responseBody\") && (n.responseBody = e.responseBody), n;\n    }, h.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, h), r.CustomHttpPattern = (_.prototype.kind = \"\", _.prototype.path = \"\", _.create = function(e) {\n        return new _(e);\n    }, _.encode = function(e, t) {\n        return t = t || i.create(), null != e.kind && Object.hasOwnProperty.call(e, \"kind\") && t.uint32(10).string(e.kind), null != e.path && Object.hasOwnProperty.call(e, \"path\") && t.uint32(18).string(e.path), t;\n    }, _.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, _.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.api.CustomHttpPattern; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.kind = e.string();\n                    break;\n                case 2:\n                    o.path = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, _.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, _.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.kind && e.hasOwnProperty(\"kind\") && !p.isString(e.kind) ? \"kind: string expected\" : null != e.path && e.hasOwnProperty(\"path\") && !p.isString(e.path) ? \"path: string expected\" : null;\n    }, _.fromObject = function(e) {\n        var t;\n        return e instanceof l.google.api.CustomHttpPattern ? e : (t = new l.google.api.CustomHttpPattern, null != e.kind && (t.kind = String(e.kind)), null != e.path && (t.path = String(e.path)), t);\n    }, _.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.kind = \"\", n.path = \"\"), null != e.kind && e.hasOwnProperty(\"kind\") && (n.kind = e.kind), null != e.path && e.hasOwnProperty(\"path\") && (n.path = e.path), n;\n    }, _.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, _), r.FieldBehavior = (e = {}, (t = Object.create(e))[e[0] = \"FIELD_BEHAVIOR_UNSPECIFIED\"] = 0, t[e[1] = \"OPTIONAL\"] = 1, t[e[2] = \"REQUIRED\"] = 2, t[e[3] = \"OUTPUT_ONLY\"] = 3, t[e[4] = \"INPUT_ONLY\"] = 4, t[e[5] = \"IMMUTABLE\"] = 5, t), r.ResourceDescriptor = (b.prototype.type = \"\", b.prototype.pattern = p.emptyArray, b.prototype.nameField = \"\", b.prototype.history = 0, b.prototype.plural = \"\", b.prototype.singular = \"\", b.create = function(e) {\n        return new b(e);\n    }, b.encode = function(e, t) {\n        if (t = t || i.create(), null != e.type && Object.hasOwnProperty.call(e, \"type\") && t.uint32(10).string(e.type), null != e.pattern && e.pattern.length) for(var n = 0; n < e.pattern.length; ++n)t.uint32(18).string(e.pattern[n]);\n        return null != e.nameField && Object.hasOwnProperty.call(e, \"nameField\") && t.uint32(26).string(e.nameField), null != e.history && Object.hasOwnProperty.call(e, \"history\") && t.uint32(32).int32(e.history), null != e.plural && Object.hasOwnProperty.call(e, \"plural\") && t.uint32(42).string(e.plural), null != e.singular && Object.hasOwnProperty.call(e, \"singular\") && t.uint32(50).string(e.singular), t;\n    }, b.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, b.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.api.ResourceDescriptor; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.type = e.string();\n                    break;\n                case 2:\n                    o.pattern && o.pattern.length || (o.pattern = []), o.pattern.push(e.string());\n                    break;\n                case 3:\n                    o.nameField = e.string();\n                    break;\n                case 4:\n                    o.history = e.int32();\n                    break;\n                case 5:\n                    o.plural = e.string();\n                    break;\n                case 6:\n                    o.singular = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, b.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, b.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.type && e.hasOwnProperty(\"type\") && !p.isString(e.type)) return \"type: string expected\";\n        if (null != e.pattern && e.hasOwnProperty(\"pattern\")) {\n            if (!Array.isArray(e.pattern)) return \"pattern: array expected\";\n            for(var t = 0; t < e.pattern.length; ++t)if (!p.isString(e.pattern[t])) return \"pattern: string[] expected\";\n        }\n        if (null != e.nameField && e.hasOwnProperty(\"nameField\") && !p.isString(e.nameField)) return \"nameField: string expected\";\n        if (null != e.history && e.hasOwnProperty(\"history\")) switch(e.history){\n            default:\n                return \"history: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        return null != e.plural && e.hasOwnProperty(\"plural\") && !p.isString(e.plural) ? \"plural: string expected\" : null != e.singular && e.hasOwnProperty(\"singular\") && !p.isString(e.singular) ? \"singular: string expected\" : null;\n    }, b.fromObject = function(e) {\n        if (e instanceof l.google.api.ResourceDescriptor) return e;\n        var t = new l.google.api.ResourceDescriptor;\n        if (null != e.type && (t.type = String(e.type)), e.pattern) {\n            if (!Array.isArray(e.pattern)) throw TypeError(\".google.api.ResourceDescriptor.pattern: array expected\");\n            t.pattern = [];\n            for(var n = 0; n < e.pattern.length; ++n)t.pattern[n] = String(e.pattern[n]);\n        }\n        switch(null != e.nameField && (t.nameField = String(e.nameField)), e.history){\n            case \"HISTORY_UNSPECIFIED\":\n            case 0:\n                t.history = 0;\n                break;\n            case \"ORIGINALLY_SINGLE_PATTERN\":\n            case 1:\n                t.history = 1;\n                break;\n            case \"FUTURE_MULTI_PATTERN\":\n            case 2:\n                t.history = 2;\n        }\n        return null != e.plural && (t.plural = String(e.plural)), null != e.singular && (t.singular = String(e.singular)), t;\n    }, b.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.pattern = []), t.defaults && (n.type = \"\", n.nameField = \"\", n.history = t.enums === String ? \"HISTORY_UNSPECIFIED\" : 0, n.plural = \"\", n.singular = \"\"), null != e.type && e.hasOwnProperty(\"type\") && (n.type = e.type), e.pattern && e.pattern.length) {\n            n.pattern = [];\n            for(var o = 0; o < e.pattern.length; ++o)n.pattern[o] = e.pattern[o];\n        }\n        return null != e.nameField && e.hasOwnProperty(\"nameField\") && (n.nameField = e.nameField), null != e.history && e.hasOwnProperty(\"history\") && (n.history = t.enums === String ? l.google.api.ResourceDescriptor.History[e.history] : e.history), null != e.plural && e.hasOwnProperty(\"plural\") && (n.plural = e.plural), null != e.singular && e.hasOwnProperty(\"singular\") && (n.singular = e.singular), n;\n    }, b.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, b.History = (e = {}, (t = Object.create(e))[e[0] = \"HISTORY_UNSPECIFIED\"] = 0, t[e[1] = \"ORIGINALLY_SINGLE_PATTERN\"] = 1, t[e[2] = \"FUTURE_MULTI_PATTERN\"] = 2, t), b), r.ResourceReference = (H.prototype.type = \"\", H.prototype.childType = \"\", H.create = function(e) {\n        return new H(e);\n    }, H.encode = function(e, t) {\n        return t = t || i.create(), null != e.type && Object.hasOwnProperty.call(e, \"type\") && t.uint32(10).string(e.type), null != e.childType && Object.hasOwnProperty.call(e, \"childType\") && t.uint32(18).string(e.childType), t;\n    }, H.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, H.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.api.ResourceReference; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.type = e.string();\n                    break;\n                case 2:\n                    o.childType = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, H.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, H.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.type && e.hasOwnProperty(\"type\") && !p.isString(e.type) ? \"type: string expected\" : null != e.childType && e.hasOwnProperty(\"childType\") && !p.isString(e.childType) ? \"childType: string expected\" : null;\n    }, H.fromObject = function(e) {\n        var t;\n        return e instanceof l.google.api.ResourceReference ? e : (t = new l.google.api.ResourceReference, null != e.type && (t.type = String(e.type)), null != e.childType && (t.childType = String(e.childType)), t);\n    }, H.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.type = \"\", n.childType = \"\"), null != e.type && e.hasOwnProperty(\"type\") && (n.type = e.type), null != e.childType && e.hasOwnProperty(\"childType\") && (n.childType = e.childType), n;\n    }, H.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, H), r), F.protobuf = ((n = {}).FileDescriptorSet = (q.prototype.file = p.emptyArray, q.create = function(e) {\n        return new q(e);\n    }, q.encode = function(e, t) {\n        if (t = t || i.create(), null != e.file && e.file.length) for(var n = 0; n < e.file.length; ++n)l.google.protobuf.FileDescriptorProto.encode(e.file[n], t.uint32(10).fork()).ldelim();\n        return t;\n    }, q.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, q.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.FileDescriptorSet; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? (o.file && o.file.length || (o.file = []), o.file.push(l.google.protobuf.FileDescriptorProto.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, q.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, q.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.file && e.hasOwnProperty(\"file\")) {\n            if (!Array.isArray(e.file)) return \"file: array expected\";\n            for(var t = 0; t < e.file.length; ++t){\n                var n = l.google.protobuf.FileDescriptorProto.verify(e.file[t]);\n                if (n) return \"file.\" + n;\n            }\n        }\n        return null;\n    }, q.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.FileDescriptorSet) return e;\n        var t = new l.google.protobuf.FileDescriptorSet;\n        if (e.file) {\n            if (!Array.isArray(e.file)) throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");\n            t.file = [];\n            for(var n = 0; n < e.file.length; ++n){\n                if (\"object\" != typeof e.file[n]) throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");\n                t.file[n] = l.google.protobuf.FileDescriptorProto.fromObject(e.file[n]);\n            }\n        }\n        return t;\n    }, q.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.file = []), e.file && e.file.length) {\n            n.file = [];\n            for(var o = 0; o < e.file.length; ++o)n.file[o] = l.google.protobuf.FileDescriptorProto.toObject(e.file[o], t);\n        }\n        return n;\n    }, q.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, q), n.FileDescriptorProto = (m.prototype.name = \"\", m.prototype.package = \"\", m.prototype.dependency = p.emptyArray, m.prototype.publicDependency = p.emptyArray, m.prototype.weakDependency = p.emptyArray, m.prototype.messageType = p.emptyArray, m.prototype.enumType = p.emptyArray, m.prototype.service = p.emptyArray, m.prototype.extension = p.emptyArray, m.prototype.options = null, m.prototype.sourceCodeInfo = null, m.prototype.syntax = \"\", m.create = function(e) {\n        return new m(e);\n    }, m.encode = function(e, t) {\n        if (t = t || i.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.package && Object.hasOwnProperty.call(e, \"package\") && t.uint32(18).string(e.package), null != e.dependency && e.dependency.length) for(var n = 0; n < e.dependency.length; ++n)t.uint32(26).string(e.dependency[n]);\n        if (null != e.messageType && e.messageType.length) for(n = 0; n < e.messageType.length; ++n)l.google.protobuf.DescriptorProto.encode(e.messageType[n], t.uint32(34).fork()).ldelim();\n        if (null != e.enumType && e.enumType.length) for(n = 0; n < e.enumType.length; ++n)l.google.protobuf.EnumDescriptorProto.encode(e.enumType[n], t.uint32(42).fork()).ldelim();\n        if (null != e.service && e.service.length) for(n = 0; n < e.service.length; ++n)l.google.protobuf.ServiceDescriptorProto.encode(e.service[n], t.uint32(50).fork()).ldelim();\n        if (null != e.extension && e.extension.length) for(n = 0; n < e.extension.length; ++n)l.google.protobuf.FieldDescriptorProto.encode(e.extension[n], t.uint32(58).fork()).ldelim();\n        if (null != e.options && Object.hasOwnProperty.call(e, \"options\") && l.google.protobuf.FileOptions.encode(e.options, t.uint32(66).fork()).ldelim(), null != e.sourceCodeInfo && Object.hasOwnProperty.call(e, \"sourceCodeInfo\") && l.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo, t.uint32(74).fork()).ldelim(), null != e.publicDependency && e.publicDependency.length) for(n = 0; n < e.publicDependency.length; ++n)t.uint32(80).int32(e.publicDependency[n]);\n        if (null != e.weakDependency && e.weakDependency.length) for(n = 0; n < e.weakDependency.length; ++n)t.uint32(88).int32(e.weakDependency[n]);\n        return null != e.syntax && Object.hasOwnProperty.call(e, \"syntax\") && t.uint32(98).string(e.syntax), t;\n    }, m.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, m.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.FileDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.package = e.string();\n                    break;\n                case 3:\n                    o.dependency && o.dependency.length || (o.dependency = []), o.dependency.push(e.string());\n                    break;\n                case 10:\n                    if (o.publicDependency && o.publicDependency.length || (o.publicDependency = []), 2 == (7 & r)) for(var i = e.uint32() + e.pos; e.pos < i;)o.publicDependency.push(e.int32());\n                    else o.publicDependency.push(e.int32());\n                    break;\n                case 11:\n                    if (o.weakDependency && o.weakDependency.length || (o.weakDependency = []), 2 == (7 & r)) for(i = e.uint32() + e.pos; e.pos < i;)o.weakDependency.push(e.int32());\n                    else o.weakDependency.push(e.int32());\n                    break;\n                case 4:\n                    o.messageType && o.messageType.length || (o.messageType = []), o.messageType.push(l.google.protobuf.DescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 5:\n                    o.enumType && o.enumType.length || (o.enumType = []), o.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 6:\n                    o.service && o.service.length || (o.service = []), o.service.push(l.google.protobuf.ServiceDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 7:\n                    o.extension && o.extension.length || (o.extension = []), o.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 8:\n                    o.options = l.google.protobuf.FileOptions.decode(e, e.uint32());\n                    break;\n                case 9:\n                    o.sourceCodeInfo = l.google.protobuf.SourceCodeInfo.decode(e, e.uint32());\n                    break;\n                case 12:\n                    o.syntax = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, m.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, m.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !p.isString(e.name)) return \"name: string expected\";\n        if (null != e.package && e.hasOwnProperty(\"package\") && !p.isString(e.package)) return \"package: string expected\";\n        if (null != e.dependency && e.hasOwnProperty(\"dependency\")) {\n            if (!Array.isArray(e.dependency)) return \"dependency: array expected\";\n            for(var t = 0; t < e.dependency.length; ++t)if (!p.isString(e.dependency[t])) return \"dependency: string[] expected\";\n        }\n        if (null != e.publicDependency && e.hasOwnProperty(\"publicDependency\")) {\n            if (!Array.isArray(e.publicDependency)) return \"publicDependency: array expected\";\n            for(t = 0; t < e.publicDependency.length; ++t)if (!p.isInteger(e.publicDependency[t])) return \"publicDependency: integer[] expected\";\n        }\n        if (null != e.weakDependency && e.hasOwnProperty(\"weakDependency\")) {\n            if (!Array.isArray(e.weakDependency)) return \"weakDependency: array expected\";\n            for(t = 0; t < e.weakDependency.length; ++t)if (!p.isInteger(e.weakDependency[t])) return \"weakDependency: integer[] expected\";\n        }\n        if (null != e.messageType && e.hasOwnProperty(\"messageType\")) {\n            if (!Array.isArray(e.messageType)) return \"messageType: array expected\";\n            for(t = 0; t < e.messageType.length; ++t)if (n = l.google.protobuf.DescriptorProto.verify(e.messageType[t])) return \"messageType.\" + n;\n        }\n        if (null != e.enumType && e.hasOwnProperty(\"enumType\")) {\n            if (!Array.isArray(e.enumType)) return \"enumType: array expected\";\n            for(t = 0; t < e.enumType.length; ++t)if (n = l.google.protobuf.EnumDescriptorProto.verify(e.enumType[t])) return \"enumType.\" + n;\n        }\n        if (null != e.service && e.hasOwnProperty(\"service\")) {\n            if (!Array.isArray(e.service)) return \"service: array expected\";\n            for(t = 0; t < e.service.length; ++t)if (n = l.google.protobuf.ServiceDescriptorProto.verify(e.service[t])) return \"service.\" + n;\n        }\n        if (null != e.extension && e.hasOwnProperty(\"extension\")) {\n            if (!Array.isArray(e.extension)) return \"extension: array expected\";\n            for(t = 0; t < e.extension.length; ++t)if (n = l.google.protobuf.FieldDescriptorProto.verify(e.extension[t])) return \"extension.\" + n;\n        }\n        var n;\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = l.google.protobuf.FileOptions.verify(e.options))) return \"options.\" + n;\n        if (null != e.sourceCodeInfo && e.hasOwnProperty(\"sourceCodeInfo\") && (n = l.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo))) return \"sourceCodeInfo.\" + n;\n        return null != e.syntax && e.hasOwnProperty(\"syntax\") && !p.isString(e.syntax) ? \"syntax: string expected\" : null;\n    }, m.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.FileDescriptorProto) return e;\n        var t = new l.google.protobuf.FileDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.package && (t.package = String(e.package)), e.dependency) {\n            if (!Array.isArray(e.dependency)) throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");\n            t.dependency = [];\n            for(var n = 0; n < e.dependency.length; ++n)t.dependency[n] = String(e.dependency[n]);\n        }\n        if (e.publicDependency) {\n            if (!Array.isArray(e.publicDependency)) throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");\n            t.publicDependency = [];\n            for(n = 0; n < e.publicDependency.length; ++n)t.publicDependency[n] = 0 | e.publicDependency[n];\n        }\n        if (e.weakDependency) {\n            if (!Array.isArray(e.weakDependency)) throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");\n            t.weakDependency = [];\n            for(n = 0; n < e.weakDependency.length; ++n)t.weakDependency[n] = 0 | e.weakDependency[n];\n        }\n        if (e.messageType) {\n            if (!Array.isArray(e.messageType)) throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");\n            t.messageType = [];\n            for(n = 0; n < e.messageType.length; ++n){\n                if (\"object\" != typeof e.messageType[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");\n                t.messageType[n] = l.google.protobuf.DescriptorProto.fromObject(e.messageType[n]);\n            }\n        }\n        if (e.enumType) {\n            if (!Array.isArray(e.enumType)) throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");\n            t.enumType = [];\n            for(n = 0; n < e.enumType.length; ++n){\n                if (\"object\" != typeof e.enumType[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");\n                t.enumType[n] = l.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n]);\n            }\n        }\n        if (e.service) {\n            if (!Array.isArray(e.service)) throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");\n            t.service = [];\n            for(n = 0; n < e.service.length; ++n){\n                if (\"object\" != typeof e.service[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");\n                t.service[n] = l.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n]);\n            }\n        }\n        if (e.extension) {\n            if (!Array.isArray(e.extension)) throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");\n            t.extension = [];\n            for(n = 0; n < e.extension.length; ++n){\n                if (\"object\" != typeof e.extension[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");\n                t.extension[n] = l.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");\n            t.options = l.google.protobuf.FileOptions.fromObject(e.options);\n        }\n        if (null != e.sourceCodeInfo) {\n            if (\"object\" != typeof e.sourceCodeInfo) throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");\n            t.sourceCodeInfo = l.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo);\n        }\n        return null != e.syntax && (t.syntax = String(e.syntax)), t;\n    }, m.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.dependency = [], n.messageType = [], n.enumType = [], n.service = [], n.extension = [], n.publicDependency = [], n.weakDependency = []), t.defaults && (n.name = \"\", n.package = \"\", n.options = null, n.sourceCodeInfo = null, n.syntax = \"\"), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.package && e.hasOwnProperty(\"package\") && (n.package = e.package), e.dependency && e.dependency.length) {\n            n.dependency = [];\n            for(var o = 0; o < e.dependency.length; ++o)n.dependency[o] = e.dependency[o];\n        }\n        if (e.messageType && e.messageType.length) {\n            n.messageType = [];\n            for(o = 0; o < e.messageType.length; ++o)n.messageType[o] = l.google.protobuf.DescriptorProto.toObject(e.messageType[o], t);\n        }\n        if (e.enumType && e.enumType.length) {\n            n.enumType = [];\n            for(o = 0; o < e.enumType.length; ++o)n.enumType[o] = l.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o], t);\n        }\n        if (e.service && e.service.length) {\n            n.service = [];\n            for(o = 0; o < e.service.length; ++o)n.service[o] = l.google.protobuf.ServiceDescriptorProto.toObject(e.service[o], t);\n        }\n        if (e.extension && e.extension.length) {\n            n.extension = [];\n            for(o = 0; o < e.extension.length; ++o)n.extension[o] = l.google.protobuf.FieldDescriptorProto.toObject(e.extension[o], t);\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n.options = l.google.protobuf.FileOptions.toObject(e.options, t)), null != e.sourceCodeInfo && e.hasOwnProperty(\"sourceCodeInfo\") && (n.sourceCodeInfo = l.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo, t)), e.publicDependency && e.publicDependency.length) {\n            n.publicDependency = [];\n            for(o = 0; o < e.publicDependency.length; ++o)n.publicDependency[o] = e.publicDependency[o];\n        }\n        if (e.weakDependency && e.weakDependency.length) {\n            n.weakDependency = [];\n            for(o = 0; o < e.weakDependency.length; ++o)n.weakDependency[o] = e.weakDependency[o];\n        }\n        return null != e.syntax && e.hasOwnProperty(\"syntax\") && (n.syntax = e.syntax), n;\n    }, m.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, m), n.DescriptorProto = (O.prototype.name = \"\", O.prototype.field = p.emptyArray, O.prototype.extension = p.emptyArray, O.prototype.nestedType = p.emptyArray, O.prototype.enumType = p.emptyArray, O.prototype.extensionRange = p.emptyArray, O.prototype.oneofDecl = p.emptyArray, O.prototype.options = null, O.prototype.reservedRange = p.emptyArray, O.prototype.reservedName = p.emptyArray, O.create = function(e) {\n        return new O(e);\n    }, O.encode = function(e, t) {\n        if (t = t || i.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.field && e.field.length) for(var n = 0; n < e.field.length; ++n)l.google.protobuf.FieldDescriptorProto.encode(e.field[n], t.uint32(18).fork()).ldelim();\n        if (null != e.nestedType && e.nestedType.length) for(n = 0; n < e.nestedType.length; ++n)l.google.protobuf.DescriptorProto.encode(e.nestedType[n], t.uint32(26).fork()).ldelim();\n        if (null != e.enumType && e.enumType.length) for(n = 0; n < e.enumType.length; ++n)l.google.protobuf.EnumDescriptorProto.encode(e.enumType[n], t.uint32(34).fork()).ldelim();\n        if (null != e.extensionRange && e.extensionRange.length) for(n = 0; n < e.extensionRange.length; ++n)l.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n], t.uint32(42).fork()).ldelim();\n        if (null != e.extension && e.extension.length) for(n = 0; n < e.extension.length; ++n)l.google.protobuf.FieldDescriptorProto.encode(e.extension[n], t.uint32(50).fork()).ldelim();\n        if (null != e.options && Object.hasOwnProperty.call(e, \"options\") && l.google.protobuf.MessageOptions.encode(e.options, t.uint32(58).fork()).ldelim(), null != e.oneofDecl && e.oneofDecl.length) for(n = 0; n < e.oneofDecl.length; ++n)l.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n], t.uint32(66).fork()).ldelim();\n        if (null != e.reservedRange && e.reservedRange.length) for(n = 0; n < e.reservedRange.length; ++n)l.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n], t.uint32(74).fork()).ldelim();\n        if (null != e.reservedName && e.reservedName.length) for(n = 0; n < e.reservedName.length; ++n)t.uint32(82).string(e.reservedName[n]);\n        return t;\n    }, O.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, O.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.DescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.field && o.field.length || (o.field = []), o.field.push(l.google.protobuf.FieldDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 6:\n                    o.extension && o.extension.length || (o.extension = []), o.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.nestedType && o.nestedType.length || (o.nestedType = []), o.nestedType.push(l.google.protobuf.DescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 4:\n                    o.enumType && o.enumType.length || (o.enumType = []), o.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 5:\n                    o.extensionRange && o.extensionRange.length || (o.extensionRange = []), o.extensionRange.push(l.google.protobuf.DescriptorProto.ExtensionRange.decode(e, e.uint32()));\n                    break;\n                case 8:\n                    o.oneofDecl && o.oneofDecl.length || (o.oneofDecl = []), o.oneofDecl.push(l.google.protobuf.OneofDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 7:\n                    o.options = l.google.protobuf.MessageOptions.decode(e, e.uint32());\n                    break;\n                case 9:\n                    o.reservedRange && o.reservedRange.length || (o.reservedRange = []), o.reservedRange.push(l.google.protobuf.DescriptorProto.ReservedRange.decode(e, e.uint32()));\n                    break;\n                case 10:\n                    o.reservedName && o.reservedName.length || (o.reservedName = []), o.reservedName.push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, O.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, O.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !p.isString(e.name)) return \"name: string expected\";\n        if (null != e.field && e.hasOwnProperty(\"field\")) {\n            if (!Array.isArray(e.field)) return \"field: array expected\";\n            for(var t = 0; t < e.field.length; ++t)if (n = l.google.protobuf.FieldDescriptorProto.verify(e.field[t])) return \"field.\" + n;\n        }\n        if (null != e.extension && e.hasOwnProperty(\"extension\")) {\n            if (!Array.isArray(e.extension)) return \"extension: array expected\";\n            for(t = 0; t < e.extension.length; ++t)if (n = l.google.protobuf.FieldDescriptorProto.verify(e.extension[t])) return \"extension.\" + n;\n        }\n        if (null != e.nestedType && e.hasOwnProperty(\"nestedType\")) {\n            if (!Array.isArray(e.nestedType)) return \"nestedType: array expected\";\n            for(t = 0; t < e.nestedType.length; ++t)if (n = l.google.protobuf.DescriptorProto.verify(e.nestedType[t])) return \"nestedType.\" + n;\n        }\n        if (null != e.enumType && e.hasOwnProperty(\"enumType\")) {\n            if (!Array.isArray(e.enumType)) return \"enumType: array expected\";\n            for(t = 0; t < e.enumType.length; ++t)if (n = l.google.protobuf.EnumDescriptorProto.verify(e.enumType[t])) return \"enumType.\" + n;\n        }\n        if (null != e.extensionRange && e.hasOwnProperty(\"extensionRange\")) {\n            if (!Array.isArray(e.extensionRange)) return \"extensionRange: array expected\";\n            for(t = 0; t < e.extensionRange.length; ++t)if (n = l.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t])) return \"extensionRange.\" + n;\n        }\n        if (null != e.oneofDecl && e.hasOwnProperty(\"oneofDecl\")) {\n            if (!Array.isArray(e.oneofDecl)) return \"oneofDecl: array expected\";\n            for(t = 0; t < e.oneofDecl.length; ++t)if (n = l.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t])) return \"oneofDecl.\" + n;\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = l.google.protobuf.MessageOptions.verify(e.options))) return \"options.\" + n;\n        if (null != e.reservedRange && e.hasOwnProperty(\"reservedRange\")) {\n            if (!Array.isArray(e.reservedRange)) return \"reservedRange: array expected\";\n            for(var n, t = 0; t < e.reservedRange.length; ++t)if (n = l.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t])) return \"reservedRange.\" + n;\n        }\n        if (null != e.reservedName && e.hasOwnProperty(\"reservedName\")) {\n            if (!Array.isArray(e.reservedName)) return \"reservedName: array expected\";\n            for(t = 0; t < e.reservedName.length; ++t)if (!p.isString(e.reservedName[t])) return \"reservedName: string[] expected\";\n        }\n        return null;\n    }, O.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.DescriptorProto) return e;\n        var t = new l.google.protobuf.DescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), e.field) {\n            if (!Array.isArray(e.field)) throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");\n            t.field = [];\n            for(var n = 0; n < e.field.length; ++n){\n                if (\"object\" != typeof e.field[n]) throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");\n                t.field[n] = l.google.protobuf.FieldDescriptorProto.fromObject(e.field[n]);\n            }\n        }\n        if (e.extension) {\n            if (!Array.isArray(e.extension)) throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");\n            t.extension = [];\n            for(n = 0; n < e.extension.length; ++n){\n                if (\"object\" != typeof e.extension[n]) throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");\n                t.extension[n] = l.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n]);\n            }\n        }\n        if (e.nestedType) {\n            if (!Array.isArray(e.nestedType)) throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");\n            t.nestedType = [];\n            for(n = 0; n < e.nestedType.length; ++n){\n                if (\"object\" != typeof e.nestedType[n]) throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");\n                t.nestedType[n] = l.google.protobuf.DescriptorProto.fromObject(e.nestedType[n]);\n            }\n        }\n        if (e.enumType) {\n            if (!Array.isArray(e.enumType)) throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");\n            t.enumType = [];\n            for(n = 0; n < e.enumType.length; ++n){\n                if (\"object\" != typeof e.enumType[n]) throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");\n                t.enumType[n] = l.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n]);\n            }\n        }\n        if (e.extensionRange) {\n            if (!Array.isArray(e.extensionRange)) throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");\n            t.extensionRange = [];\n            for(n = 0; n < e.extensionRange.length; ++n){\n                if (\"object\" != typeof e.extensionRange[n]) throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");\n                t.extensionRange[n] = l.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n]);\n            }\n        }\n        if (e.oneofDecl) {\n            if (!Array.isArray(e.oneofDecl)) throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");\n            t.oneofDecl = [];\n            for(n = 0; n < e.oneofDecl.length; ++n){\n                if (\"object\" != typeof e.oneofDecl[n]) throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");\n                t.oneofDecl[n] = l.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");\n            t.options = l.google.protobuf.MessageOptions.fromObject(e.options);\n        }\n        if (e.reservedRange) {\n            if (!Array.isArray(e.reservedRange)) throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");\n            t.reservedRange = [];\n            for(n = 0; n < e.reservedRange.length; ++n){\n                if (\"object\" != typeof e.reservedRange[n]) throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");\n                t.reservedRange[n] = l.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n]);\n            }\n        }\n        if (e.reservedName) {\n            if (!Array.isArray(e.reservedName)) throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");\n            t.reservedName = [];\n            for(n = 0; n < e.reservedName.length; ++n)t.reservedName[n] = String(e.reservedName[n]);\n        }\n        return t;\n    }, O.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.field = [], n.nestedType = [], n.enumType = [], n.extensionRange = [], n.extension = [], n.oneofDecl = [], n.reservedRange = [], n.reservedName = []), t.defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), e.field && e.field.length) {\n            n.field = [];\n            for(var o = 0; o < e.field.length; ++o)n.field[o] = l.google.protobuf.FieldDescriptorProto.toObject(e.field[o], t);\n        }\n        if (e.nestedType && e.nestedType.length) {\n            n.nestedType = [];\n            for(o = 0; o < e.nestedType.length; ++o)n.nestedType[o] = l.google.protobuf.DescriptorProto.toObject(e.nestedType[o], t);\n        }\n        if (e.enumType && e.enumType.length) {\n            n.enumType = [];\n            for(o = 0; o < e.enumType.length; ++o)n.enumType[o] = l.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o], t);\n        }\n        if (e.extensionRange && e.extensionRange.length) {\n            n.extensionRange = [];\n            for(o = 0; o < e.extensionRange.length; ++o)n.extensionRange[o] = l.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o], t);\n        }\n        if (e.extension && e.extension.length) {\n            n.extension = [];\n            for(o = 0; o < e.extension.length; ++o)n.extension[o] = l.google.protobuf.FieldDescriptorProto.toObject(e.extension[o], t);\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n.options = l.google.protobuf.MessageOptions.toObject(e.options, t)), e.oneofDecl && e.oneofDecl.length) {\n            n.oneofDecl = [];\n            for(o = 0; o < e.oneofDecl.length; ++o)n.oneofDecl[o] = l.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o], t);\n        }\n        if (e.reservedRange && e.reservedRange.length) {\n            n.reservedRange = [];\n            for(o = 0; o < e.reservedRange.length; ++o)n.reservedRange[o] = l.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o], t);\n        }\n        if (e.reservedName && e.reservedName.length) {\n            n.reservedName = [];\n            for(o = 0; o < e.reservedName.length; ++o)n.reservedName[o] = e.reservedName[o];\n        }\n        return n;\n    }, O.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, O.ExtensionRange = (v.prototype.start = 0, v.prototype.end = 0, v.prototype.options = null, v.create = function(e) {\n        return new v(e);\n    }, v.encode = function(e, t) {\n        return t = t || i.create(), null != e.start && Object.hasOwnProperty.call(e, \"start\") && t.uint32(8).int32(e.start), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(16).int32(e.end), null != e.options && Object.hasOwnProperty.call(e, \"options\") && l.google.protobuf.ExtensionRangeOptions.encode(e.options, t.uint32(26).fork()).ldelim(), t;\n    }, v.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, v.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.DescriptorProto.ExtensionRange; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.start = e.int32();\n                    break;\n                case 2:\n                    o.end = e.int32();\n                    break;\n                case 3:\n                    o.options = l.google.protobuf.ExtensionRangeOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, v.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, v.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.start && e.hasOwnProperty(\"start\") && !p.isInteger(e.start)) return \"start: integer expected\";\n        if (null != e.end && e.hasOwnProperty(\"end\") && !p.isInteger(e.end)) return \"end: integer expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            e = l.google.protobuf.ExtensionRangeOptions.verify(e.options);\n            if (e) return \"options.\" + e;\n        }\n        return null;\n    }, v.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.DescriptorProto.ExtensionRange) return e;\n        var t = new l.google.protobuf.DescriptorProto.ExtensionRange;\n        if (null != e.start && (t.start = 0 | e.start), null != e.end && (t.end = 0 | e.end), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");\n            t.options = l.google.protobuf.ExtensionRangeOptions.fromObject(e.options);\n        }\n        return t;\n    }, v.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.start = 0, n.end = 0, n.options = null), null != e.start && e.hasOwnProperty(\"start\") && (n.start = e.start), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), null != e.options && e.hasOwnProperty(\"options\") && (n.options = l.google.protobuf.ExtensionRangeOptions.toObject(e.options, t)), n;\n    }, v.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, v), O.ReservedRange = (Y.prototype.start = 0, Y.prototype.end = 0, Y.create = function(e) {\n        return new Y(e);\n    }, Y.encode = function(e, t) {\n        return t = t || i.create(), null != e.start && Object.hasOwnProperty.call(e, \"start\") && t.uint32(8).int32(e.start), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(16).int32(e.end), t;\n    }, Y.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, Y.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.DescriptorProto.ReservedRange; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.start = e.int32();\n                    break;\n                case 2:\n                    o.end = e.int32();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, Y.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, Y.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.start && e.hasOwnProperty(\"start\") && !p.isInteger(e.start) ? \"start: integer expected\" : null != e.end && e.hasOwnProperty(\"end\") && !p.isInteger(e.end) ? \"end: integer expected\" : null;\n    }, Y.fromObject = function(e) {\n        var t;\n        return e instanceof l.google.protobuf.DescriptorProto.ReservedRange ? e : (t = new l.google.protobuf.DescriptorProto.ReservedRange, null != e.start && (t.start = 0 | e.start), null != e.end && (t.end = 0 | e.end), t);\n    }, Y.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.start = 0, n.end = 0), null != e.start && e.hasOwnProperty(\"start\") && (n.start = e.start), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), n;\n    }, Y.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, Y), O), n.ExtensionRangeOptions = (z.prototype.uninterpretedOption = p.emptyArray, z.create = function(e) {\n        return new z(e);\n    }, z.encode = function(e, t) {\n        if (t = t || i.create(), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, z.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, z.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.ExtensionRangeOptions; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 999 ? (o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, z.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, z.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, z.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.ExtensionRangeOptions) return e;\n        var t = new l.google.protobuf.ExtensionRangeOptions;\n        if (e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, z.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, z.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, z), n.FieldDescriptorProto = (P.prototype.name = \"\", P.prototype.number = 0, P.prototype.label = 1, P.prototype.type = 1, P.prototype.typeName = \"\", P.prototype.extendee = \"\", P.prototype.defaultValue = \"\", P.prototype.oneofIndex = 0, P.prototype.jsonName = \"\", P.prototype.options = null, P.prototype.proto3Optional = !1, P.create = function(e) {\n        return new P(e);\n    }, P.encode = function(e, t) {\n        return t = t || i.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.extendee && Object.hasOwnProperty.call(e, \"extendee\") && t.uint32(18).string(e.extendee), null != e.number && Object.hasOwnProperty.call(e, \"number\") && t.uint32(24).int32(e.number), null != e.label && Object.hasOwnProperty.call(e, \"label\") && t.uint32(32).int32(e.label), null != e.type && Object.hasOwnProperty.call(e, \"type\") && t.uint32(40).int32(e.type), null != e.typeName && Object.hasOwnProperty.call(e, \"typeName\") && t.uint32(50).string(e.typeName), null != e.defaultValue && Object.hasOwnProperty.call(e, \"defaultValue\") && t.uint32(58).string(e.defaultValue), null != e.options && Object.hasOwnProperty.call(e, \"options\") && l.google.protobuf.FieldOptions.encode(e.options, t.uint32(66).fork()).ldelim(), null != e.oneofIndex && Object.hasOwnProperty.call(e, \"oneofIndex\") && t.uint32(72).int32(e.oneofIndex), null != e.jsonName && Object.hasOwnProperty.call(e, \"jsonName\") && t.uint32(82).string(e.jsonName), null != e.proto3Optional && Object.hasOwnProperty.call(e, \"proto3Optional\") && t.uint32(136).bool(e.proto3Optional), t;\n    }, P.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, P.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.FieldDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 3:\n                    o.number = e.int32();\n                    break;\n                case 4:\n                    o.label = e.int32();\n                    break;\n                case 5:\n                    o.type = e.int32();\n                    break;\n                case 6:\n                    o.typeName = e.string();\n                    break;\n                case 2:\n                    o.extendee = e.string();\n                    break;\n                case 7:\n                    o.defaultValue = e.string();\n                    break;\n                case 9:\n                    o.oneofIndex = e.int32();\n                    break;\n                case 10:\n                    o.jsonName = e.string();\n                    break;\n                case 8:\n                    o.options = l.google.protobuf.FieldOptions.decode(e, e.uint32());\n                    break;\n                case 17:\n                    o.proto3Optional = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, P.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, P.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !p.isString(e.name)) return \"name: string expected\";\n        if (null != e.number && e.hasOwnProperty(\"number\") && !p.isInteger(e.number)) return \"number: integer expected\";\n        if (null != e.label && e.hasOwnProperty(\"label\")) switch(e.label){\n            default:\n                return \"label: enum value expected\";\n            case 1:\n            case 2:\n            case 3:\n        }\n        if (null != e.type && e.hasOwnProperty(\"type\")) switch(e.type){\n            default:\n                return \"type: enum value expected\";\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n            case 16:\n            case 17:\n            case 18:\n        }\n        if (null != e.typeName && e.hasOwnProperty(\"typeName\") && !p.isString(e.typeName)) return \"typeName: string expected\";\n        if (null != e.extendee && e.hasOwnProperty(\"extendee\") && !p.isString(e.extendee)) return \"extendee: string expected\";\n        if (null != e.defaultValue && e.hasOwnProperty(\"defaultValue\") && !p.isString(e.defaultValue)) return \"defaultValue: string expected\";\n        if (null != e.oneofIndex && e.hasOwnProperty(\"oneofIndex\") && !p.isInteger(e.oneofIndex)) return \"oneofIndex: integer expected\";\n        if (null != e.jsonName && e.hasOwnProperty(\"jsonName\") && !p.isString(e.jsonName)) return \"jsonName: string expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            var t = l.google.protobuf.FieldOptions.verify(e.options);\n            if (t) return \"options.\" + t;\n        }\n        return null != e.proto3Optional && e.hasOwnProperty(\"proto3Optional\") && \"boolean\" != typeof e.proto3Optional ? \"proto3Optional: boolean expected\" : null;\n    }, P.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.FieldDescriptorProto) return e;\n        var t = new l.google.protobuf.FieldDescriptorProto;\n        switch(null != e.name && (t.name = String(e.name)), null != e.number && (t.number = 0 | e.number), e.label){\n            case \"LABEL_OPTIONAL\":\n            case 1:\n                t.label = 1;\n                break;\n            case \"LABEL_REQUIRED\":\n            case 2:\n                t.label = 2;\n                break;\n            case \"LABEL_REPEATED\":\n            case 3:\n                t.label = 3;\n        }\n        switch(e.type){\n            case \"TYPE_DOUBLE\":\n            case 1:\n                t.type = 1;\n                break;\n            case \"TYPE_FLOAT\":\n            case 2:\n                t.type = 2;\n                break;\n            case \"TYPE_INT64\":\n            case 3:\n                t.type = 3;\n                break;\n            case \"TYPE_UINT64\":\n            case 4:\n                t.type = 4;\n                break;\n            case \"TYPE_INT32\":\n            case 5:\n                t.type = 5;\n                break;\n            case \"TYPE_FIXED64\":\n            case 6:\n                t.type = 6;\n                break;\n            case \"TYPE_FIXED32\":\n            case 7:\n                t.type = 7;\n                break;\n            case \"TYPE_BOOL\":\n            case 8:\n                t.type = 8;\n                break;\n            case \"TYPE_STRING\":\n            case 9:\n                t.type = 9;\n                break;\n            case \"TYPE_GROUP\":\n            case 10:\n                t.type = 10;\n                break;\n            case \"TYPE_MESSAGE\":\n            case 11:\n                t.type = 11;\n                break;\n            case \"TYPE_BYTES\":\n            case 12:\n                t.type = 12;\n                break;\n            case \"TYPE_UINT32\":\n            case 13:\n                t.type = 13;\n                break;\n            case \"TYPE_ENUM\":\n            case 14:\n                t.type = 14;\n                break;\n            case \"TYPE_SFIXED32\":\n            case 15:\n                t.type = 15;\n                break;\n            case \"TYPE_SFIXED64\":\n            case 16:\n                t.type = 16;\n                break;\n            case \"TYPE_SINT32\":\n            case 17:\n                t.type = 17;\n                break;\n            case \"TYPE_SINT64\":\n            case 18:\n                t.type = 18;\n        }\n        if (null != e.typeName && (t.typeName = String(e.typeName)), null != e.extendee && (t.extendee = String(e.extendee)), null != e.defaultValue && (t.defaultValue = String(e.defaultValue)), null != e.oneofIndex && (t.oneofIndex = 0 | e.oneofIndex), null != e.jsonName && (t.jsonName = String(e.jsonName)), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");\n            t.options = l.google.protobuf.FieldOptions.fromObject(e.options);\n        }\n        return null != e.proto3Optional && (t.proto3Optional = Boolean(e.proto3Optional)), t;\n    }, P.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.extendee = \"\", n.number = 0, n.label = t.enums === String ? \"LABEL_OPTIONAL\" : 1, n.type = t.enums === String ? \"TYPE_DOUBLE\" : 1, n.typeName = \"\", n.defaultValue = \"\", n.options = null, n.oneofIndex = 0, n.jsonName = \"\", n.proto3Optional = !1), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.extendee && e.hasOwnProperty(\"extendee\") && (n.extendee = e.extendee), null != e.number && e.hasOwnProperty(\"number\") && (n.number = e.number), null != e.label && e.hasOwnProperty(\"label\") && (n.label = t.enums === String ? l.google.protobuf.FieldDescriptorProto.Label[e.label] : e.label), null != e.type && e.hasOwnProperty(\"type\") && (n.type = t.enums === String ? l.google.protobuf.FieldDescriptorProto.Type[e.type] : e.type), null != e.typeName && e.hasOwnProperty(\"typeName\") && (n.typeName = e.typeName), null != e.defaultValue && e.hasOwnProperty(\"defaultValue\") && (n.defaultValue = e.defaultValue), null != e.options && e.hasOwnProperty(\"options\") && (n.options = l.google.protobuf.FieldOptions.toObject(e.options, t)), null != e.oneofIndex && e.hasOwnProperty(\"oneofIndex\") && (n.oneofIndex = e.oneofIndex), null != e.jsonName && e.hasOwnProperty(\"jsonName\") && (n.jsonName = e.jsonName), null != e.proto3Optional && e.hasOwnProperty(\"proto3Optional\") && (n.proto3Optional = e.proto3Optional), n;\n    }, P.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, P.Type = (e = {}, (t = Object.create(e))[e[1] = \"TYPE_DOUBLE\"] = 1, t[e[2] = \"TYPE_FLOAT\"] = 2, t[e[3] = \"TYPE_INT64\"] = 3, t[e[4] = \"TYPE_UINT64\"] = 4, t[e[5] = \"TYPE_INT32\"] = 5, t[e[6] = \"TYPE_FIXED64\"] = 6, t[e[7] = \"TYPE_FIXED32\"] = 7, t[e[8] = \"TYPE_BOOL\"] = 8, t[e[9] = \"TYPE_STRING\"] = 9, t[e[10] = \"TYPE_GROUP\"] = 10, t[e[11] = \"TYPE_MESSAGE\"] = 11, t[e[12] = \"TYPE_BYTES\"] = 12, t[e[13] = \"TYPE_UINT32\"] = 13, t[e[14] = \"TYPE_ENUM\"] = 14, t[e[15] = \"TYPE_SFIXED32\"] = 15, t[e[16] = \"TYPE_SFIXED64\"] = 16, t[e[17] = \"TYPE_SINT32\"] = 17, t[e[18] = \"TYPE_SINT64\"] = 18, t), P.Label = (e = {}, (t = Object.create(e))[e[1] = \"LABEL_OPTIONAL\"] = 1, t[e[2] = \"LABEL_REQUIRED\"] = 2, t[e[3] = \"LABEL_REPEATED\"] = 3, t), P), n.OneofDescriptorProto = (W.prototype.name = \"\", W.prototype.options = null, W.create = function(e) {\n        return new W(e);\n    }, W.encode = function(e, t) {\n        return t = t || i.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.options && Object.hasOwnProperty.call(e, \"options\") && l.google.protobuf.OneofOptions.encode(e.options, t.uint32(18).fork()).ldelim(), t;\n    }, W.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, W.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.OneofDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.options = l.google.protobuf.OneofOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, W.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, W.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !p.isString(e.name)) return \"name: string expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            e = l.google.protobuf.OneofOptions.verify(e.options);\n            if (e) return \"options.\" + e;\n        }\n        return null;\n    }, W.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.OneofDescriptorProto) return e;\n        var t = new l.google.protobuf.OneofDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");\n            t.options = l.google.protobuf.OneofOptions.fromObject(e.options);\n        }\n        return t;\n    }, W.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.options && e.hasOwnProperty(\"options\") && (n.options = l.google.protobuf.OneofOptions.toObject(e.options, t)), n;\n    }, W.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, W), n.EnumDescriptorProto = (w.prototype.name = \"\", w.prototype.value = p.emptyArray, w.prototype.options = null, w.prototype.reservedRange = p.emptyArray, w.prototype.reservedName = p.emptyArray, w.create = function(e) {\n        return new w(e);\n    }, w.encode = function(e, t) {\n        if (t = t || i.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.value && e.value.length) for(var n = 0; n < e.value.length; ++n)l.google.protobuf.EnumValueDescriptorProto.encode(e.value[n], t.uint32(18).fork()).ldelim();\n        if (null != e.options && Object.hasOwnProperty.call(e, \"options\") && l.google.protobuf.EnumOptions.encode(e.options, t.uint32(26).fork()).ldelim(), null != e.reservedRange && e.reservedRange.length) for(n = 0; n < e.reservedRange.length; ++n)l.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n], t.uint32(34).fork()).ldelim();\n        if (null != e.reservedName && e.reservedName.length) for(n = 0; n < e.reservedName.length; ++n)t.uint32(42).string(e.reservedName[n]);\n        return t;\n    }, w.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, w.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.EnumDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.value && o.value.length || (o.value = []), o.value.push(l.google.protobuf.EnumValueDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.options = l.google.protobuf.EnumOptions.decode(e, e.uint32());\n                    break;\n                case 4:\n                    o.reservedRange && o.reservedRange.length || (o.reservedRange = []), o.reservedRange.push(l.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e, e.uint32()));\n                    break;\n                case 5:\n                    o.reservedName && o.reservedName.length || (o.reservedName = []), o.reservedName.push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, w.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, w.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !p.isString(e.name)) return \"name: string expected\";\n        if (null != e.value && e.hasOwnProperty(\"value\")) {\n            if (!Array.isArray(e.value)) return \"value: array expected\";\n            for(var t = 0; t < e.value.length; ++t)if (n = l.google.protobuf.EnumValueDescriptorProto.verify(e.value[t])) return \"value.\" + n;\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = l.google.protobuf.EnumOptions.verify(e.options))) return \"options.\" + n;\n        if (null != e.reservedRange && e.hasOwnProperty(\"reservedRange\")) {\n            if (!Array.isArray(e.reservedRange)) return \"reservedRange: array expected\";\n            for(var n, t = 0; t < e.reservedRange.length; ++t)if (n = l.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t])) return \"reservedRange.\" + n;\n        }\n        if (null != e.reservedName && e.hasOwnProperty(\"reservedName\")) {\n            if (!Array.isArray(e.reservedName)) return \"reservedName: array expected\";\n            for(t = 0; t < e.reservedName.length; ++t)if (!p.isString(e.reservedName[t])) return \"reservedName: string[] expected\";\n        }\n        return null;\n    }, w.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.EnumDescriptorProto) return e;\n        var t = new l.google.protobuf.EnumDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), e.value) {\n            if (!Array.isArray(e.value)) throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");\n            t.value = [];\n            for(var n = 0; n < e.value.length; ++n){\n                if (\"object\" != typeof e.value[n]) throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");\n                t.value[n] = l.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");\n            t.options = l.google.protobuf.EnumOptions.fromObject(e.options);\n        }\n        if (e.reservedRange) {\n            if (!Array.isArray(e.reservedRange)) throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");\n            t.reservedRange = [];\n            for(n = 0; n < e.reservedRange.length; ++n){\n                if (\"object\" != typeof e.reservedRange[n]) throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");\n                t.reservedRange[n] = l.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n]);\n            }\n        }\n        if (e.reservedName) {\n            if (!Array.isArray(e.reservedName)) throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");\n            t.reservedName = [];\n            for(n = 0; n < e.reservedName.length; ++n)t.reservedName[n] = String(e.reservedName[n]);\n        }\n        return t;\n    }, w.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.value = [], n.reservedRange = [], n.reservedName = []), t.defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), e.value && e.value.length) {\n            n.value = [];\n            for(var o = 0; o < e.value.length; ++o)n.value[o] = l.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o], t);\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n.options = l.google.protobuf.EnumOptions.toObject(e.options, t)), e.reservedRange && e.reservedRange.length) {\n            n.reservedRange = [];\n            for(o = 0; o < e.reservedRange.length; ++o)n.reservedRange[o] = l.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o], t);\n        }\n        if (e.reservedName && e.reservedName.length) {\n            n.reservedName = [];\n            for(o = 0; o < e.reservedName.length; ++o)n.reservedName[o] = e.reservedName[o];\n        }\n        return n;\n    }, w.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, w.EnumReservedRange = (X.prototype.start = 0, X.prototype.end = 0, X.create = function(e) {\n        return new X(e);\n    }, X.encode = function(e, t) {\n        return t = t || i.create(), null != e.start && Object.hasOwnProperty.call(e, \"start\") && t.uint32(8).int32(e.start), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(16).int32(e.end), t;\n    }, X.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, X.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.EnumDescriptorProto.EnumReservedRange; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.start = e.int32();\n                    break;\n                case 2:\n                    o.end = e.int32();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, X.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, X.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.start && e.hasOwnProperty(\"start\") && !p.isInteger(e.start) ? \"start: integer expected\" : null != e.end && e.hasOwnProperty(\"end\") && !p.isInteger(e.end) ? \"end: integer expected\" : null;\n    }, X.fromObject = function(e) {\n        var t;\n        return e instanceof l.google.protobuf.EnumDescriptorProto.EnumReservedRange ? e : (t = new l.google.protobuf.EnumDescriptorProto.EnumReservedRange, null != e.start && (t.start = 0 | e.start), null != e.end && (t.end = 0 | e.end), t);\n    }, X.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.start = 0, n.end = 0), null != e.start && e.hasOwnProperty(\"start\") && (n.start = e.start), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), n;\n    }, X.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, X), w), n.EnumValueDescriptorProto = (j.prototype.name = \"\", j.prototype.number = 0, j.prototype.options = null, j.create = function(e) {\n        return new j(e);\n    }, j.encode = function(e, t) {\n        return t = t || i.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.number && Object.hasOwnProperty.call(e, \"number\") && t.uint32(16).int32(e.number), null != e.options && Object.hasOwnProperty.call(e, \"options\") && l.google.protobuf.EnumValueOptions.encode(e.options, t.uint32(26).fork()).ldelim(), t;\n    }, j.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, j.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.EnumValueDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.number = e.int32();\n                    break;\n                case 3:\n                    o.options = l.google.protobuf.EnumValueOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, j.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, j.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !p.isString(e.name)) return \"name: string expected\";\n        if (null != e.number && e.hasOwnProperty(\"number\") && !p.isInteger(e.number)) return \"number: integer expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            e = l.google.protobuf.EnumValueOptions.verify(e.options);\n            if (e) return \"options.\" + e;\n        }\n        return null;\n    }, j.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.EnumValueDescriptorProto) return e;\n        var t = new l.google.protobuf.EnumValueDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.number && (t.number = 0 | e.number), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");\n            t.options = l.google.protobuf.EnumValueOptions.fromObject(e.options);\n        }\n        return t;\n    }, j.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.number = 0, n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.number && e.hasOwnProperty(\"number\") && (n.number = e.number), null != e.options && e.hasOwnProperty(\"options\") && (n.options = l.google.protobuf.EnumValueOptions.toObject(e.options, t)), n;\n    }, j.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, j), n.ServiceDescriptorProto = (D.prototype.name = \"\", D.prototype.method = p.emptyArray, D.prototype.options = null, D.create = function(e) {\n        return new D(e);\n    }, D.encode = function(e, t) {\n        if (t = t || i.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.method && e.method.length) for(var n = 0; n < e.method.length; ++n)l.google.protobuf.MethodDescriptorProto.encode(e.method[n], t.uint32(18).fork()).ldelim();\n        return null != e.options && Object.hasOwnProperty.call(e, \"options\") && l.google.protobuf.ServiceOptions.encode(e.options, t.uint32(26).fork()).ldelim(), t;\n    }, D.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, D.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.ServiceDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.method && o.method.length || (o.method = []), o.method.push(l.google.protobuf.MethodDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.options = l.google.protobuf.ServiceOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, D.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, D.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !p.isString(e.name)) return \"name: string expected\";\n        if (null != e.method && e.hasOwnProperty(\"method\")) {\n            if (!Array.isArray(e.method)) return \"method: array expected\";\n            for(var t = 0; t < e.method.length; ++t)if (n = l.google.protobuf.MethodDescriptorProto.verify(e.method[t])) return \"method.\" + n;\n        }\n        var n;\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = l.google.protobuf.ServiceOptions.verify(e.options))) return \"options.\" + n;\n        return null;\n    }, D.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.ServiceDescriptorProto) return e;\n        var t = new l.google.protobuf.ServiceDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), e.method) {\n            if (!Array.isArray(e.method)) throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");\n            t.method = [];\n            for(var n = 0; n < e.method.length; ++n){\n                if (\"object\" != typeof e.method[n]) throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");\n                t.method[n] = l.google.protobuf.MethodDescriptorProto.fromObject(e.method[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");\n            t.options = l.google.protobuf.ServiceOptions.fromObject(e.options);\n        }\n        return t;\n    }, D.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.method = []), t.defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), e.method && e.method.length) {\n            n.method = [];\n            for(var o = 0; o < e.method.length; ++o)n.method[o] = l.google.protobuf.MethodDescriptorProto.toObject(e.method[o], t);\n        }\n        return null != e.options && e.hasOwnProperty(\"options\") && (n.options = l.google.protobuf.ServiceOptions.toObject(e.options, t)), n;\n    }, D.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, D), n.MethodDescriptorProto = (x.prototype.name = \"\", x.prototype.inputType = \"\", x.prototype.outputType = \"\", x.prototype.options = null, x.prototype.clientStreaming = !1, x.prototype.serverStreaming = !1, x.create = function(e) {\n        return new x(e);\n    }, x.encode = function(e, t) {\n        return t = t || i.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.inputType && Object.hasOwnProperty.call(e, \"inputType\") && t.uint32(18).string(e.inputType), null != e.outputType && Object.hasOwnProperty.call(e, \"outputType\") && t.uint32(26).string(e.outputType), null != e.options && Object.hasOwnProperty.call(e, \"options\") && l.google.protobuf.MethodOptions.encode(e.options, t.uint32(34).fork()).ldelim(), null != e.clientStreaming && Object.hasOwnProperty.call(e, \"clientStreaming\") && t.uint32(40).bool(e.clientStreaming), null != e.serverStreaming && Object.hasOwnProperty.call(e, \"serverStreaming\") && t.uint32(48).bool(e.serverStreaming), t;\n    }, x.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, x.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.MethodDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.inputType = e.string();\n                    break;\n                case 3:\n                    o.outputType = e.string();\n                    break;\n                case 4:\n                    o.options = l.google.protobuf.MethodOptions.decode(e, e.uint32());\n                    break;\n                case 5:\n                    o.clientStreaming = e.bool();\n                    break;\n                case 6:\n                    o.serverStreaming = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, x.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, x.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !p.isString(e.name)) return \"name: string expected\";\n        if (null != e.inputType && e.hasOwnProperty(\"inputType\") && !p.isString(e.inputType)) return \"inputType: string expected\";\n        if (null != e.outputType && e.hasOwnProperty(\"outputType\") && !p.isString(e.outputType)) return \"outputType: string expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            var t = l.google.protobuf.MethodOptions.verify(e.options);\n            if (t) return \"options.\" + t;\n        }\n        return null != e.clientStreaming && e.hasOwnProperty(\"clientStreaming\") && \"boolean\" != typeof e.clientStreaming ? \"clientStreaming: boolean expected\" : null != e.serverStreaming && e.hasOwnProperty(\"serverStreaming\") && \"boolean\" != typeof e.serverStreaming ? \"serverStreaming: boolean expected\" : null;\n    }, x.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.MethodDescriptorProto) return e;\n        var t = new l.google.protobuf.MethodDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.inputType && (t.inputType = String(e.inputType)), null != e.outputType && (t.outputType = String(e.outputType)), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");\n            t.options = l.google.protobuf.MethodOptions.fromObject(e.options);\n        }\n        return null != e.clientStreaming && (t.clientStreaming = Boolean(e.clientStreaming)), null != e.serverStreaming && (t.serverStreaming = Boolean(e.serverStreaming)), t;\n    }, x.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.inputType = \"\", n.outputType = \"\", n.options = null, n.clientStreaming = !1, n.serverStreaming = !1), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.inputType && e.hasOwnProperty(\"inputType\") && (n.inputType = e.inputType), null != e.outputType && e.hasOwnProperty(\"outputType\") && (n.outputType = e.outputType), null != e.options && e.hasOwnProperty(\"options\") && (n.options = l.google.protobuf.MethodOptions.toObject(e.options, t)), null != e.clientStreaming && e.hasOwnProperty(\"clientStreaming\") && (n.clientStreaming = e.clientStreaming), null != e.serverStreaming && e.hasOwnProperty(\"serverStreaming\") && (n.serverStreaming = e.serverStreaming), n;\n    }, x.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, x), n.FileOptions = (S.prototype.javaPackage = \"\", S.prototype.javaOuterClassname = \"\", S.prototype.javaMultipleFiles = !1, S.prototype.javaGenerateEqualsAndHash = !1, S.prototype.javaStringCheckUtf8 = !1, S.prototype.optimizeFor = 1, S.prototype.goPackage = \"\", S.prototype.ccGenericServices = !1, S.prototype.javaGenericServices = !1, S.prototype.pyGenericServices = !1, S.prototype.phpGenericServices = !1, S.prototype.deprecated = !1, S.prototype.ccEnableArenas = !0, S.prototype.objcClassPrefix = \"\", S.prototype.csharpNamespace = \"\", S.prototype.swiftPrefix = \"\", S.prototype.phpClassPrefix = \"\", S.prototype.phpNamespace = \"\", S.prototype.phpMetadataNamespace = \"\", S.prototype.rubyPackage = \"\", S.prototype.uninterpretedOption = p.emptyArray, S.prototype[\".google.api.resourceDefinition\"] = p.emptyArray, S.create = function(e) {\n        return new S(e);\n    }, S.encode = function(e, t) {\n        if (t = t || i.create(), null != e.javaPackage && Object.hasOwnProperty.call(e, \"javaPackage\") && t.uint32(10).string(e.javaPackage), null != e.javaOuterClassname && Object.hasOwnProperty.call(e, \"javaOuterClassname\") && t.uint32(66).string(e.javaOuterClassname), null != e.optimizeFor && Object.hasOwnProperty.call(e, \"optimizeFor\") && t.uint32(72).int32(e.optimizeFor), null != e.javaMultipleFiles && Object.hasOwnProperty.call(e, \"javaMultipleFiles\") && t.uint32(80).bool(e.javaMultipleFiles), null != e.goPackage && Object.hasOwnProperty.call(e, \"goPackage\") && t.uint32(90).string(e.goPackage), null != e.ccGenericServices && Object.hasOwnProperty.call(e, \"ccGenericServices\") && t.uint32(128).bool(e.ccGenericServices), null != e.javaGenericServices && Object.hasOwnProperty.call(e, \"javaGenericServices\") && t.uint32(136).bool(e.javaGenericServices), null != e.pyGenericServices && Object.hasOwnProperty.call(e, \"pyGenericServices\") && t.uint32(144).bool(e.pyGenericServices), null != e.javaGenerateEqualsAndHash && Object.hasOwnProperty.call(e, \"javaGenerateEqualsAndHash\") && t.uint32(160).bool(e.javaGenerateEqualsAndHash), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(184).bool(e.deprecated), null != e.javaStringCheckUtf8 && Object.hasOwnProperty.call(e, \"javaStringCheckUtf8\") && t.uint32(216).bool(e.javaStringCheckUtf8), null != e.ccEnableArenas && Object.hasOwnProperty.call(e, \"ccEnableArenas\") && t.uint32(248).bool(e.ccEnableArenas), null != e.objcClassPrefix && Object.hasOwnProperty.call(e, \"objcClassPrefix\") && t.uint32(290).string(e.objcClassPrefix), null != e.csharpNamespace && Object.hasOwnProperty.call(e, \"csharpNamespace\") && t.uint32(298).string(e.csharpNamespace), null != e.swiftPrefix && Object.hasOwnProperty.call(e, \"swiftPrefix\") && t.uint32(314).string(e.swiftPrefix), null != e.phpClassPrefix && Object.hasOwnProperty.call(e, \"phpClassPrefix\") && t.uint32(322).string(e.phpClassPrefix), null != e.phpNamespace && Object.hasOwnProperty.call(e, \"phpNamespace\") && t.uint32(330).string(e.phpNamespace), null != e.phpGenericServices && Object.hasOwnProperty.call(e, \"phpGenericServices\") && t.uint32(336).bool(e.phpGenericServices), null != e.phpMetadataNamespace && Object.hasOwnProperty.call(e, \"phpMetadataNamespace\") && t.uint32(354).string(e.phpMetadataNamespace), null != e.rubyPackage && Object.hasOwnProperty.call(e, \"rubyPackage\") && t.uint32(362).string(e.rubyPackage), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        if (null != e[\".google.api.resourceDefinition\"] && e[\".google.api.resourceDefinition\"].length) for(n = 0; n < e[\".google.api.resourceDefinition\"].length; ++n)l.google.api.ResourceDescriptor.encode(e[\".google.api.resourceDefinition\"][n], t.uint32(8426).fork()).ldelim();\n        return t;\n    }, S.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, S.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.FileOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.javaPackage = e.string();\n                    break;\n                case 8:\n                    o.javaOuterClassname = e.string();\n                    break;\n                case 10:\n                    o.javaMultipleFiles = e.bool();\n                    break;\n                case 20:\n                    o.javaGenerateEqualsAndHash = e.bool();\n                    break;\n                case 27:\n                    o.javaStringCheckUtf8 = e.bool();\n                    break;\n                case 9:\n                    o.optimizeFor = e.int32();\n                    break;\n                case 11:\n                    o.goPackage = e.string();\n                    break;\n                case 16:\n                    o.ccGenericServices = e.bool();\n                    break;\n                case 17:\n                    o.javaGenericServices = e.bool();\n                    break;\n                case 18:\n                    o.pyGenericServices = e.bool();\n                    break;\n                case 42:\n                    o.phpGenericServices = e.bool();\n                    break;\n                case 23:\n                    o.deprecated = e.bool();\n                    break;\n                case 31:\n                    o.ccEnableArenas = e.bool();\n                    break;\n                case 36:\n                    o.objcClassPrefix = e.string();\n                    break;\n                case 37:\n                    o.csharpNamespace = e.string();\n                    break;\n                case 39:\n                    o.swiftPrefix = e.string();\n                    break;\n                case 40:\n                    o.phpClassPrefix = e.string();\n                    break;\n                case 41:\n                    o.phpNamespace = e.string();\n                    break;\n                case 44:\n                    o.phpMetadataNamespace = e.string();\n                    break;\n                case 45:\n                    o.rubyPackage = e.string();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                case 1053:\n                    o[\".google.api.resourceDefinition\"] && o[\".google.api.resourceDefinition\"].length || (o[\".google.api.resourceDefinition\"] = []), o[\".google.api.resourceDefinition\"].push(l.google.api.ResourceDescriptor.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, S.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, S.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.javaPackage && e.hasOwnProperty(\"javaPackage\") && !p.isString(e.javaPackage)) return \"javaPackage: string expected\";\n        if (null != e.javaOuterClassname && e.hasOwnProperty(\"javaOuterClassname\") && !p.isString(e.javaOuterClassname)) return \"javaOuterClassname: string expected\";\n        if (null != e.javaMultipleFiles && e.hasOwnProperty(\"javaMultipleFiles\") && \"boolean\" != typeof e.javaMultipleFiles) return \"javaMultipleFiles: boolean expected\";\n        if (null != e.javaGenerateEqualsAndHash && e.hasOwnProperty(\"javaGenerateEqualsAndHash\") && \"boolean\" != typeof e.javaGenerateEqualsAndHash) return \"javaGenerateEqualsAndHash: boolean expected\";\n        if (null != e.javaStringCheckUtf8 && e.hasOwnProperty(\"javaStringCheckUtf8\") && \"boolean\" != typeof e.javaStringCheckUtf8) return \"javaStringCheckUtf8: boolean expected\";\n        if (null != e.optimizeFor && e.hasOwnProperty(\"optimizeFor\")) switch(e.optimizeFor){\n            default:\n                return \"optimizeFor: enum value expected\";\n            case 1:\n            case 2:\n            case 3:\n        }\n        if (null != e.goPackage && e.hasOwnProperty(\"goPackage\") && !p.isString(e.goPackage)) return \"goPackage: string expected\";\n        if (null != e.ccGenericServices && e.hasOwnProperty(\"ccGenericServices\") && \"boolean\" != typeof e.ccGenericServices) return \"ccGenericServices: boolean expected\";\n        if (null != e.javaGenericServices && e.hasOwnProperty(\"javaGenericServices\") && \"boolean\" != typeof e.javaGenericServices) return \"javaGenericServices: boolean expected\";\n        if (null != e.pyGenericServices && e.hasOwnProperty(\"pyGenericServices\") && \"boolean\" != typeof e.pyGenericServices) return \"pyGenericServices: boolean expected\";\n        if (null != e.phpGenericServices && e.hasOwnProperty(\"phpGenericServices\") && \"boolean\" != typeof e.phpGenericServices) return \"phpGenericServices: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.ccEnableArenas && e.hasOwnProperty(\"ccEnableArenas\") && \"boolean\" != typeof e.ccEnableArenas) return \"ccEnableArenas: boolean expected\";\n        if (null != e.objcClassPrefix && e.hasOwnProperty(\"objcClassPrefix\") && !p.isString(e.objcClassPrefix)) return \"objcClassPrefix: string expected\";\n        if (null != e.csharpNamespace && e.hasOwnProperty(\"csharpNamespace\") && !p.isString(e.csharpNamespace)) return \"csharpNamespace: string expected\";\n        if (null != e.swiftPrefix && e.hasOwnProperty(\"swiftPrefix\") && !p.isString(e.swiftPrefix)) return \"swiftPrefix: string expected\";\n        if (null != e.phpClassPrefix && e.hasOwnProperty(\"phpClassPrefix\") && !p.isString(e.phpClassPrefix)) return \"phpClassPrefix: string expected\";\n        if (null != e.phpNamespace && e.hasOwnProperty(\"phpNamespace\") && !p.isString(e.phpNamespace)) return \"phpNamespace: string expected\";\n        if (null != e.phpMetadataNamespace && e.hasOwnProperty(\"phpMetadataNamespace\") && !p.isString(e.phpMetadataNamespace)) return \"phpMetadataNamespace: string expected\";\n        if (null != e.rubyPackage && e.hasOwnProperty(\"rubyPackage\") && !p.isString(e.rubyPackage)) return \"rubyPackage: string expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t)if (n = l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t])) return \"uninterpretedOption.\" + n;\n        }\n        if (null != e[\".google.api.resourceDefinition\"] && e.hasOwnProperty(\".google.api.resourceDefinition\")) {\n            if (!Array.isArray(e[\".google.api.resourceDefinition\"])) return \".google.api.resourceDefinition: array expected\";\n            for(var n, t = 0; t < e[\".google.api.resourceDefinition\"].length; ++t)if (n = l.google.api.ResourceDescriptor.verify(e[\".google.api.resourceDefinition\"][t])) return \".google.api.resourceDefinition.\" + n;\n        }\n        return null;\n    }, S.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.FileOptions) return e;\n        var t = new l.google.protobuf.FileOptions;\n        switch(null != e.javaPackage && (t.javaPackage = String(e.javaPackage)), null != e.javaOuterClassname && (t.javaOuterClassname = String(e.javaOuterClassname)), null != e.javaMultipleFiles && (t.javaMultipleFiles = Boolean(e.javaMultipleFiles)), null != e.javaGenerateEqualsAndHash && (t.javaGenerateEqualsAndHash = Boolean(e.javaGenerateEqualsAndHash)), null != e.javaStringCheckUtf8 && (t.javaStringCheckUtf8 = Boolean(e.javaStringCheckUtf8)), e.optimizeFor){\n            case \"SPEED\":\n            case 1:\n                t.optimizeFor = 1;\n                break;\n            case \"CODE_SIZE\":\n            case 2:\n                t.optimizeFor = 2;\n                break;\n            case \"LITE_RUNTIME\":\n            case 3:\n                t.optimizeFor = 3;\n        }\n        if (null != e.goPackage && (t.goPackage = String(e.goPackage)), null != e.ccGenericServices && (t.ccGenericServices = Boolean(e.ccGenericServices)), null != e.javaGenericServices && (t.javaGenericServices = Boolean(e.javaGenericServices)), null != e.pyGenericServices && (t.pyGenericServices = Boolean(e.pyGenericServices)), null != e.phpGenericServices && (t.phpGenericServices = Boolean(e.phpGenericServices)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), null != e.ccEnableArenas && (t.ccEnableArenas = Boolean(e.ccEnableArenas)), null != e.objcClassPrefix && (t.objcClassPrefix = String(e.objcClassPrefix)), null != e.csharpNamespace && (t.csharpNamespace = String(e.csharpNamespace)), null != e.swiftPrefix && (t.swiftPrefix = String(e.swiftPrefix)), null != e.phpClassPrefix && (t.phpClassPrefix = String(e.phpClassPrefix)), null != e.phpNamespace && (t.phpNamespace = String(e.phpNamespace)), null != e.phpMetadataNamespace && (t.phpMetadataNamespace = String(e.phpMetadataNamespace)), null != e.rubyPackage && (t.rubyPackage = String(e.rubyPackage)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        if (e[\".google.api.resourceDefinition\"]) {\n            if (!Array.isArray(e[\".google.api.resourceDefinition\"])) throw TypeError(\".google.protobuf.FileOptions..google.api.resourceDefinition: array expected\");\n            t[\".google.api.resourceDefinition\"] = [];\n            for(n = 0; n < e[\".google.api.resourceDefinition\"].length; ++n){\n                if (\"object\" != typeof e[\".google.api.resourceDefinition\"][n]) throw TypeError(\".google.protobuf.FileOptions..google.api.resourceDefinition: object expected\");\n                t[\".google.api.resourceDefinition\"][n] = l.google.api.ResourceDescriptor.fromObject(e[\".google.api.resourceDefinition\"][n]);\n            }\n        }\n        return t;\n    }, S.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = [], n[\".google.api.resourceDefinition\"] = []), t.defaults && (n.javaPackage = \"\", n.javaOuterClassname = \"\", n.optimizeFor = t.enums === String ? \"SPEED\" : 1, n.javaMultipleFiles = !1, n.goPackage = \"\", n.ccGenericServices = !1, n.javaGenericServices = !1, n.pyGenericServices = !1, n.javaGenerateEqualsAndHash = !1, n.deprecated = !1, n.javaStringCheckUtf8 = !1, n.ccEnableArenas = !0, n.objcClassPrefix = \"\", n.csharpNamespace = \"\", n.swiftPrefix = \"\", n.phpClassPrefix = \"\", n.phpNamespace = \"\", n.phpGenericServices = !1, n.phpMetadataNamespace = \"\", n.rubyPackage = \"\"), null != e.javaPackage && e.hasOwnProperty(\"javaPackage\") && (n.javaPackage = e.javaPackage), null != e.javaOuterClassname && e.hasOwnProperty(\"javaOuterClassname\") && (n.javaOuterClassname = e.javaOuterClassname), null != e.optimizeFor && e.hasOwnProperty(\"optimizeFor\") && (n.optimizeFor = t.enums === String ? l.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor] : e.optimizeFor), null != e.javaMultipleFiles && e.hasOwnProperty(\"javaMultipleFiles\") && (n.javaMultipleFiles = e.javaMultipleFiles), null != e.goPackage && e.hasOwnProperty(\"goPackage\") && (n.goPackage = e.goPackage), null != e.ccGenericServices && e.hasOwnProperty(\"ccGenericServices\") && (n.ccGenericServices = e.ccGenericServices), null != e.javaGenericServices && e.hasOwnProperty(\"javaGenericServices\") && (n.javaGenericServices = e.javaGenericServices), null != e.pyGenericServices && e.hasOwnProperty(\"pyGenericServices\") && (n.pyGenericServices = e.pyGenericServices), null != e.javaGenerateEqualsAndHash && e.hasOwnProperty(\"javaGenerateEqualsAndHash\") && (n.javaGenerateEqualsAndHash = e.javaGenerateEqualsAndHash), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.javaStringCheckUtf8 && e.hasOwnProperty(\"javaStringCheckUtf8\") && (n.javaStringCheckUtf8 = e.javaStringCheckUtf8), null != e.ccEnableArenas && e.hasOwnProperty(\"ccEnableArenas\") && (n.ccEnableArenas = e.ccEnableArenas), null != e.objcClassPrefix && e.hasOwnProperty(\"objcClassPrefix\") && (n.objcClassPrefix = e.objcClassPrefix), null != e.csharpNamespace && e.hasOwnProperty(\"csharpNamespace\") && (n.csharpNamespace = e.csharpNamespace), null != e.swiftPrefix && e.hasOwnProperty(\"swiftPrefix\") && (n.swiftPrefix = e.swiftPrefix), null != e.phpClassPrefix && e.hasOwnProperty(\"phpClassPrefix\") && (n.phpClassPrefix = e.phpClassPrefix), null != e.phpNamespace && e.hasOwnProperty(\"phpNamespace\") && (n.phpNamespace = e.phpNamespace), null != e.phpGenericServices && e.hasOwnProperty(\"phpGenericServices\") && (n.phpGenericServices = e.phpGenericServices), null != e.phpMetadataNamespace && e.hasOwnProperty(\"phpMetadataNamespace\") && (n.phpMetadataNamespace = e.phpMetadataNamespace), null != e.rubyPackage && e.hasOwnProperty(\"rubyPackage\") && (n.rubyPackage = e.rubyPackage), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        if (e[\".google.api.resourceDefinition\"] && e[\".google.api.resourceDefinition\"].length) {\n            n[\".google.api.resourceDefinition\"] = [];\n            for(o = 0; o < e[\".google.api.resourceDefinition\"].length; ++o)n[\".google.api.resourceDefinition\"][o] = l.google.api.ResourceDescriptor.toObject(e[\".google.api.resourceDefinition\"][o], t);\n        }\n        return n;\n    }, S.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, S.OptimizeMode = (e = {}, (t = Object.create(e))[e[1] = \"SPEED\"] = 1, t[e[2] = \"CODE_SIZE\"] = 2, t[e[3] = \"LITE_RUNTIME\"] = 3, t), S), n.MessageOptions = (k.prototype.messageSetWireFormat = !1, k.prototype.noStandardDescriptorAccessor = !1, k.prototype.deprecated = !1, k.prototype.mapEntry = !1, k.prototype.uninterpretedOption = p.emptyArray, k.prototype[\".google.api.resource\"] = null, k.create = function(e) {\n        return new k(e);\n    }, k.encode = function(e, t) {\n        if (t = t || i.create(), null != e.messageSetWireFormat && Object.hasOwnProperty.call(e, \"messageSetWireFormat\") && t.uint32(8).bool(e.messageSetWireFormat), null != e.noStandardDescriptorAccessor && Object.hasOwnProperty.call(e, \"noStandardDescriptorAccessor\") && t.uint32(16).bool(e.noStandardDescriptorAccessor), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(24).bool(e.deprecated), null != e.mapEntry && Object.hasOwnProperty.call(e, \"mapEntry\") && t.uint32(56).bool(e.mapEntry), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return null != e[\".google.api.resource\"] && Object.hasOwnProperty.call(e, \".google.api.resource\") && l.google.api.ResourceDescriptor.encode(e[\".google.api.resource\"], t.uint32(8426).fork()).ldelim(), t;\n    }, k.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, k.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.MessageOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.messageSetWireFormat = e.bool();\n                    break;\n                case 2:\n                    o.noStandardDescriptorAccessor = e.bool();\n                    break;\n                case 3:\n                    o.deprecated = e.bool();\n                    break;\n                case 7:\n                    o.mapEntry = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                case 1053:\n                    o[\".google.api.resource\"] = l.google.api.ResourceDescriptor.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, k.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, k.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.messageSetWireFormat && e.hasOwnProperty(\"messageSetWireFormat\") && \"boolean\" != typeof e.messageSetWireFormat) return \"messageSetWireFormat: boolean expected\";\n        if (null != e.noStandardDescriptorAccessor && e.hasOwnProperty(\"noStandardDescriptorAccessor\") && \"boolean\" != typeof e.noStandardDescriptorAccessor) return \"noStandardDescriptorAccessor: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.mapEntry && e.hasOwnProperty(\"mapEntry\") && \"boolean\" != typeof e.mapEntry) return \"mapEntry: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t)if (n = l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t])) return \"uninterpretedOption.\" + n;\n        }\n        var n;\n        if (null != e[\".google.api.resource\"] && e.hasOwnProperty(\".google.api.resource\") && (n = l.google.api.ResourceDescriptor.verify(e[\".google.api.resource\"]))) return \".google.api.resource.\" + n;\n        return null;\n    }, k.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.MessageOptions) return e;\n        var t = new l.google.protobuf.MessageOptions;\n        if (null != e.messageSetWireFormat && (t.messageSetWireFormat = Boolean(e.messageSetWireFormat)), null != e.noStandardDescriptorAccessor && (t.noStandardDescriptorAccessor = Boolean(e.noStandardDescriptorAccessor)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), null != e.mapEntry && (t.mapEntry = Boolean(e.mapEntry)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        if (null != e[\".google.api.resource\"]) {\n            if (\"object\" != typeof e[\".google.api.resource\"]) throw TypeError(\".google.protobuf.MessageOptions..google.api.resource: object expected\");\n            t[\".google.api.resource\"] = l.google.api.ResourceDescriptor.fromObject(e[\".google.api.resource\"]);\n        }\n        return t;\n    }, k.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.messageSetWireFormat = !1, n.noStandardDescriptorAccessor = !1, n.deprecated = !1, n.mapEntry = !1, n[\".google.api.resource\"] = null), null != e.messageSetWireFormat && e.hasOwnProperty(\"messageSetWireFormat\") && (n.messageSetWireFormat = e.messageSetWireFormat), null != e.noStandardDescriptorAccessor && e.hasOwnProperty(\"noStandardDescriptorAccessor\") && (n.noStandardDescriptorAccessor = e.noStandardDescriptorAccessor), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.mapEntry && e.hasOwnProperty(\"mapEntry\") && (n.mapEntry = e.mapEntry), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return null != e[\".google.api.resource\"] && e.hasOwnProperty(\".google.api.resource\") && (n[\".google.api.resource\"] = l.google.api.ResourceDescriptor.toObject(e[\".google.api.resource\"], t)), n;\n    }, k.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, k), n.FieldOptions = (T.prototype.ctype = 0, T.prototype.packed = !1, T.prototype.jstype = 0, T.prototype.lazy = !1, T.prototype.deprecated = !1, T.prototype.weak = !1, T.prototype.uninterpretedOption = p.emptyArray, T.prototype[\".google.api.fieldBehavior\"] = p.emptyArray, T.prototype[\".google.api.resourceReference\"] = null, T.create = function(e) {\n        return new T(e);\n    }, T.encode = function(e, t) {\n        if (t = t || i.create(), null != e.ctype && Object.hasOwnProperty.call(e, \"ctype\") && t.uint32(8).int32(e.ctype), null != e.packed && Object.hasOwnProperty.call(e, \"packed\") && t.uint32(16).bool(e.packed), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(24).bool(e.deprecated), null != e.lazy && Object.hasOwnProperty.call(e, \"lazy\") && t.uint32(40).bool(e.lazy), null != e.jstype && Object.hasOwnProperty.call(e, \"jstype\") && t.uint32(48).int32(e.jstype), null != e.weak && Object.hasOwnProperty.call(e, \"weak\") && t.uint32(80).bool(e.weak), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        if (null != e[\".google.api.fieldBehavior\"] && e[\".google.api.fieldBehavior\"].length) {\n            t.uint32(8418).fork();\n            for(n = 0; n < e[\".google.api.fieldBehavior\"].length; ++n)t.int32(e[\".google.api.fieldBehavior\"][n]);\n            t.ldelim();\n        }\n        return null != e[\".google.api.resourceReference\"] && Object.hasOwnProperty.call(e, \".google.api.resourceReference\") && l.google.api.ResourceReference.encode(e[\".google.api.resourceReference\"], t.uint32(8442).fork()).ldelim(), t;\n    }, T.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, T.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.FieldOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.ctype = e.int32();\n                    break;\n                case 2:\n                    o.packed = e.bool();\n                    break;\n                case 6:\n                    o.jstype = e.int32();\n                    break;\n                case 5:\n                    o.lazy = e.bool();\n                    break;\n                case 3:\n                    o.deprecated = e.bool();\n                    break;\n                case 10:\n                    o.weak = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                case 1052:\n                    if (o[\".google.api.fieldBehavior\"] && o[\".google.api.fieldBehavior\"].length || (o[\".google.api.fieldBehavior\"] = []), 2 == (7 & r)) for(var i = e.uint32() + e.pos; e.pos < i;)o[\".google.api.fieldBehavior\"].push(e.int32());\n                    else o[\".google.api.fieldBehavior\"].push(e.int32());\n                    break;\n                case 1055:\n                    o[\".google.api.resourceReference\"] = l.google.api.ResourceReference.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, T.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, T.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.ctype && e.hasOwnProperty(\"ctype\")) switch(e.ctype){\n            default:\n                return \"ctype: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        if (null != e.packed && e.hasOwnProperty(\"packed\") && \"boolean\" != typeof e.packed) return \"packed: boolean expected\";\n        if (null != e.jstype && e.hasOwnProperty(\"jstype\")) switch(e.jstype){\n            default:\n                return \"jstype: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        if (null != e.lazy && e.hasOwnProperty(\"lazy\") && \"boolean\" != typeof e.lazy) return \"lazy: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.weak && e.hasOwnProperty(\"weak\") && \"boolean\" != typeof e.weak) return \"weak: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t)if (n = l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t])) return \"uninterpretedOption.\" + n;\n        }\n        if (null != e[\".google.api.fieldBehavior\"] && e.hasOwnProperty(\".google.api.fieldBehavior\")) {\n            if (!Array.isArray(e[\".google.api.fieldBehavior\"])) return \".google.api.fieldBehavior: array expected\";\n            for(t = 0; t < e[\".google.api.fieldBehavior\"].length; ++t)switch(e[\".google.api.fieldBehavior\"][t]){\n                default:\n                    return \".google.api.fieldBehavior: enum value[] expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n            }\n        }\n        var n;\n        if (null != e[\".google.api.resourceReference\"] && e.hasOwnProperty(\".google.api.resourceReference\") && (n = l.google.api.ResourceReference.verify(e[\".google.api.resourceReference\"]))) return \".google.api.resourceReference.\" + n;\n        return null;\n    }, T.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.FieldOptions) return e;\n        var t = new l.google.protobuf.FieldOptions;\n        switch(e.ctype){\n            case \"STRING\":\n            case 0:\n                t.ctype = 0;\n                break;\n            case \"CORD\":\n            case 1:\n                t.ctype = 1;\n                break;\n            case \"STRING_PIECE\":\n            case 2:\n                t.ctype = 2;\n        }\n        switch(null != e.packed && (t.packed = Boolean(e.packed)), e.jstype){\n            case \"JS_NORMAL\":\n            case 0:\n                t.jstype = 0;\n                break;\n            case \"JS_STRING\":\n            case 1:\n                t.jstype = 1;\n                break;\n            case \"JS_NUMBER\":\n            case 2:\n                t.jstype = 2;\n        }\n        if (null != e.lazy && (t.lazy = Boolean(e.lazy)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), null != e.weak && (t.weak = Boolean(e.weak)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        if (e[\".google.api.fieldBehavior\"]) {\n            if (!Array.isArray(e[\".google.api.fieldBehavior\"])) throw TypeError(\".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected\");\n            t[\".google.api.fieldBehavior\"] = [];\n            for(n = 0; n < e[\".google.api.fieldBehavior\"].length; ++n)switch(e[\".google.api.fieldBehavior\"][n]){\n                default:\n                case \"FIELD_BEHAVIOR_UNSPECIFIED\":\n                case 0:\n                    t[\".google.api.fieldBehavior\"][n] = 0;\n                    break;\n                case \"OPTIONAL\":\n                case 1:\n                    t[\".google.api.fieldBehavior\"][n] = 1;\n                    break;\n                case \"REQUIRED\":\n                case 2:\n                    t[\".google.api.fieldBehavior\"][n] = 2;\n                    break;\n                case \"OUTPUT_ONLY\":\n                case 3:\n                    t[\".google.api.fieldBehavior\"][n] = 3;\n                    break;\n                case \"INPUT_ONLY\":\n                case 4:\n                    t[\".google.api.fieldBehavior\"][n] = 4;\n                    break;\n                case \"IMMUTABLE\":\n                case 5:\n                    t[\".google.api.fieldBehavior\"][n] = 5;\n            }\n        }\n        if (null != e[\".google.api.resourceReference\"]) {\n            if (\"object\" != typeof e[\".google.api.resourceReference\"]) throw TypeError(\".google.protobuf.FieldOptions..google.api.resourceReference: object expected\");\n            t[\".google.api.resourceReference\"] = l.google.api.ResourceReference.fromObject(e[\".google.api.resourceReference\"]);\n        }\n        return t;\n    }, T.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = [], n[\".google.api.fieldBehavior\"] = []), t.defaults && (n.ctype = t.enums === String ? \"STRING\" : 0, n.packed = !1, n.deprecated = !1, n.lazy = !1, n.jstype = t.enums === String ? \"JS_NORMAL\" : 0, n.weak = !1, n[\".google.api.resourceReference\"] = null), null != e.ctype && e.hasOwnProperty(\"ctype\") && (n.ctype = t.enums === String ? l.google.protobuf.FieldOptions.CType[e.ctype] : e.ctype), null != e.packed && e.hasOwnProperty(\"packed\") && (n.packed = e.packed), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.lazy && e.hasOwnProperty(\"lazy\") && (n.lazy = e.lazy), null != e.jstype && e.hasOwnProperty(\"jstype\") && (n.jstype = t.enums === String ? l.google.protobuf.FieldOptions.JSType[e.jstype] : e.jstype), null != e.weak && e.hasOwnProperty(\"weak\") && (n.weak = e.weak), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        if (e[\".google.api.fieldBehavior\"] && e[\".google.api.fieldBehavior\"].length) {\n            n[\".google.api.fieldBehavior\"] = [];\n            for(o = 0; o < e[\".google.api.fieldBehavior\"].length; ++o)n[\".google.api.fieldBehavior\"][o] = t.enums === String ? l.google.api.FieldBehavior[e[\".google.api.fieldBehavior\"][o]] : e[\".google.api.fieldBehavior\"][o];\n        }\n        return null != e[\".google.api.resourceReference\"] && e.hasOwnProperty(\".google.api.resourceReference\") && (n[\".google.api.resourceReference\"] = l.google.api.ResourceReference.toObject(e[\".google.api.resourceReference\"], t)), n;\n    }, T.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, T.CType = (e = {}, (t = Object.create(e))[e[0] = \"STRING\"] = 0, t[e[1] = \"CORD\"] = 1, t[e[2] = \"STRING_PIECE\"] = 2, t), T.JSType = (e = {}, (t = Object.create(e))[e[0] = \"JS_NORMAL\"] = 0, t[e[1] = \"JS_STRING\"] = 1, t[e[2] = \"JS_NUMBER\"] = 2, t), T), n.OneofOptions = (Q.prototype.uninterpretedOption = p.emptyArray, Q.create = function(e) {\n        return new Q(e);\n    }, Q.encode = function(e, t) {\n        if (t = t || i.create(), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, Q.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, Q.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.OneofOptions; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 999 ? (o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, Q.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, Q.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, Q.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.OneofOptions) return e;\n        var t = new l.google.protobuf.OneofOptions;\n        if (e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, Q.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, Q.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, Q), n.EnumOptions = (E.prototype.allowAlias = !1, E.prototype.deprecated = !1, E.prototype.uninterpretedOption = p.emptyArray, E.create = function(e) {\n        return new E(e);\n    }, E.encode = function(e, t) {\n        if (t = t || i.create(), null != e.allowAlias && Object.hasOwnProperty.call(e, \"allowAlias\") && t.uint32(16).bool(e.allowAlias), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(24).bool(e.deprecated), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, E.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, E.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.EnumOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 2:\n                    o.allowAlias = e.bool();\n                    break;\n                case 3:\n                    o.deprecated = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, E.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, E.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.allowAlias && e.hasOwnProperty(\"allowAlias\") && \"boolean\" != typeof e.allowAlias) return \"allowAlias: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, E.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.EnumOptions) return e;\n        var t = new l.google.protobuf.EnumOptions;\n        if (null != e.allowAlias && (t.allowAlias = Boolean(e.allowAlias)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, E.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.allowAlias = !1, n.deprecated = !1), null != e.allowAlias && e.hasOwnProperty(\"allowAlias\") && (n.allowAlias = e.allowAlias), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, E.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, E), n.EnumValueOptions = (K.prototype.deprecated = !1, K.prototype.uninterpretedOption = p.emptyArray, K.create = function(e) {\n        return new K(e);\n    }, K.encode = function(e, t) {\n        if (t = t || i.create(), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(8).bool(e.deprecated), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, K.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, K.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.EnumValueOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.deprecated = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, K.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, K.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, K.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.EnumValueOptions) return e;\n        var t = new l.google.protobuf.EnumValueOptions;\n        if (null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, K.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.deprecated = !1), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, K.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, K), n.ServiceOptions = (A.prototype.deprecated = !1, A.prototype.uninterpretedOption = p.emptyArray, A.prototype[\".google.api.defaultHost\"] = \"\", A.prototype[\".google.api.oauthScopes\"] = \"\", A.create = function(e) {\n        return new A(e);\n    }, A.encode = function(e, t) {\n        if (t = t || i.create(), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(264).bool(e.deprecated), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return null != e[\".google.api.defaultHost\"] && Object.hasOwnProperty.call(e, \".google.api.defaultHost\") && t.uint32(8394).string(e[\".google.api.defaultHost\"]), null != e[\".google.api.oauthScopes\"] && Object.hasOwnProperty.call(e, \".google.api.oauthScopes\") && t.uint32(8402).string(e[\".google.api.oauthScopes\"]), t;\n    }, A.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, A.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.ServiceOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 33:\n                    o.deprecated = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                case 1049:\n                    o[\".google.api.defaultHost\"] = e.string();\n                    break;\n                case 1050:\n                    o[\".google.api.oauthScopes\"] = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, A.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, A.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null != e[\".google.api.defaultHost\"] && e.hasOwnProperty(\".google.api.defaultHost\") && !p.isString(e[\".google.api.defaultHost\"]) ? \".google.api.defaultHost: string expected\" : null != e[\".google.api.oauthScopes\"] && e.hasOwnProperty(\".google.api.oauthScopes\") && !p.isString(e[\".google.api.oauthScopes\"]) ? \".google.api.oauthScopes: string expected\" : null;\n    }, A.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.ServiceOptions) return e;\n        var t = new l.google.protobuf.ServiceOptions;\n        if (null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return null != e[\".google.api.defaultHost\"] && (t[\".google.api.defaultHost\"] = String(e[\".google.api.defaultHost\"])), null != e[\".google.api.oauthScopes\"] && (t[\".google.api.oauthScopes\"] = String(e[\".google.api.oauthScopes\"])), t;\n    }, A.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.deprecated = !1, n[\".google.api.defaultHost\"] = \"\", n[\".google.api.oauthScopes\"] = \"\"), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return null != e[\".google.api.defaultHost\"] && e.hasOwnProperty(\".google.api.defaultHost\") && (n[\".google.api.defaultHost\"] = e[\".google.api.defaultHost\"]), null != e[\".google.api.oauthScopes\"] && e.hasOwnProperty(\".google.api.oauthScopes\") && (n[\".google.api.oauthScopes\"] = e[\".google.api.oauthScopes\"]), n;\n    }, A.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, A), n.MethodOptions = (N.prototype.deprecated = !1, N.prototype.idempotencyLevel = 0, N.prototype.uninterpretedOption = p.emptyArray, N.prototype[\".google.api.http\"] = null, N.prototype[\".google.api.methodSignature\"] = p.emptyArray, N.create = function(e) {\n        return new N(e);\n    }, N.encode = function(e, t) {\n        if (t = t || i.create(), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(264).bool(e.deprecated), null != e.idempotencyLevel && Object.hasOwnProperty.call(e, \"idempotencyLevel\") && t.uint32(272).int32(e.idempotencyLevel), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        if (null != e[\".google.api.methodSignature\"] && e[\".google.api.methodSignature\"].length) for(n = 0; n < e[\".google.api.methodSignature\"].length; ++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);\n        return null != e[\".google.api.http\"] && Object.hasOwnProperty.call(e, \".google.api.http\") && l.google.api.HttpRule.encode(e[\".google.api.http\"], t.uint32(578365826).fork()).ldelim(), t;\n    }, N.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, N.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.MethodOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 33:\n                    o.deprecated = e.bool();\n                    break;\n                case 34:\n                    o.idempotencyLevel = e.int32();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                case 72295728:\n                    o[\".google.api.http\"] = l.google.api.HttpRule.decode(e, e.uint32());\n                    break;\n                case 1051:\n                    o[\".google.api.methodSignature\"] && o[\".google.api.methodSignature\"].length || (o[\".google.api.methodSignature\"] = []), o[\".google.api.methodSignature\"].push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, N.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, N.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.idempotencyLevel && e.hasOwnProperty(\"idempotencyLevel\")) switch(e.idempotencyLevel){\n            default:\n                return \"idempotencyLevel: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t)if (n = l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t])) return \"uninterpretedOption.\" + n;\n        }\n        var n;\n        if (null != e[\".google.api.http\"] && e.hasOwnProperty(\".google.api.http\") && (n = l.google.api.HttpRule.verify(e[\".google.api.http\"]))) return \".google.api.http.\" + n;\n        if (null != e[\".google.api.methodSignature\"] && e.hasOwnProperty(\".google.api.methodSignature\")) {\n            if (!Array.isArray(e[\".google.api.methodSignature\"])) return \".google.api.methodSignature: array expected\";\n            for(t = 0; t < e[\".google.api.methodSignature\"].length; ++t)if (!p.isString(e[\".google.api.methodSignature\"][t])) return \".google.api.methodSignature: string[] expected\";\n        }\n        return null;\n    }, N.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.MethodOptions) return e;\n        var t = new l.google.protobuf.MethodOptions;\n        switch(null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.idempotencyLevel){\n            case \"IDEMPOTENCY_UNKNOWN\":\n            case 0:\n                t.idempotencyLevel = 0;\n                break;\n            case \"NO_SIDE_EFFECTS\":\n            case 1:\n                t.idempotencyLevel = 1;\n                break;\n            case \"IDEMPOTENT\":\n            case 2:\n                t.idempotencyLevel = 2;\n        }\n        if (e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        if (null != e[\".google.api.http\"]) {\n            if (\"object\" != typeof e[\".google.api.http\"]) throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");\n            t[\".google.api.http\"] = l.google.api.HttpRule.fromObject(e[\".google.api.http\"]);\n        }\n        if (e[\".google.api.methodSignature\"]) {\n            if (!Array.isArray(e[\".google.api.methodSignature\"])) throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");\n            t[\".google.api.methodSignature\"] = [];\n            for(n = 0; n < e[\".google.api.methodSignature\"].length; ++n)t[\".google.api.methodSignature\"][n] = String(e[\".google.api.methodSignature\"][n]);\n        }\n        return t;\n    }, N.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = [], n[\".google.api.methodSignature\"] = []), t.defaults && (n.deprecated = !1, n.idempotencyLevel = t.enums === String ? \"IDEMPOTENCY_UNKNOWN\" : 0, n[\".google.api.http\"] = null), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.idempotencyLevel && e.hasOwnProperty(\"idempotencyLevel\") && (n.idempotencyLevel = t.enums === String ? l.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel] : e.idempotencyLevel), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        if (e[\".google.api.methodSignature\"] && e[\".google.api.methodSignature\"].length) {\n            n[\".google.api.methodSignature\"] = [];\n            for(o = 0; o < e[\".google.api.methodSignature\"].length; ++o)n[\".google.api.methodSignature\"][o] = e[\".google.api.methodSignature\"][o];\n        }\n        return null != e[\".google.api.http\"] && e.hasOwnProperty(\".google.api.http\") && (n[\".google.api.http\"] = l.google.api.HttpRule.toObject(e[\".google.api.http\"], t)), n;\n    }, N.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, N.IdempotencyLevel = (e = {}, (t = Object.create(e))[e[0] = \"IDEMPOTENCY_UNKNOWN\"] = 0, t[e[1] = \"NO_SIDE_EFFECTS\"] = 1, t[e[2] = \"IDEMPOTENT\"] = 2, t), N), n.UninterpretedOption = (R.prototype.name = p.emptyArray, R.prototype.identifierValue = \"\", R.prototype.positiveIntValue = p.Long ? p.Long.fromBits(0, 0, !0) : 0, R.prototype.negativeIntValue = p.Long ? p.Long.fromBits(0, 0, !1) : 0, R.prototype.doubleValue = 0, R.prototype.stringValue = p.newBuffer([]), R.prototype.aggregateValue = \"\", R.create = function(e) {\n        return new R(e);\n    }, R.encode = function(e, t) {\n        if (t = t || i.create(), null != e.name && e.name.length) for(var n = 0; n < e.name.length; ++n)l.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n], t.uint32(18).fork()).ldelim();\n        return null != e.identifierValue && Object.hasOwnProperty.call(e, \"identifierValue\") && t.uint32(26).string(e.identifierValue), null != e.positiveIntValue && Object.hasOwnProperty.call(e, \"positiveIntValue\") && t.uint32(32).uint64(e.positiveIntValue), null != e.negativeIntValue && Object.hasOwnProperty.call(e, \"negativeIntValue\") && t.uint32(40).int64(e.negativeIntValue), null != e.doubleValue && Object.hasOwnProperty.call(e, \"doubleValue\") && t.uint32(49).double(e.doubleValue), null != e.stringValue && Object.hasOwnProperty.call(e, \"stringValue\") && t.uint32(58).bytes(e.stringValue), null != e.aggregateValue && Object.hasOwnProperty.call(e, \"aggregateValue\") && t.uint32(66).string(e.aggregateValue), t;\n    }, R.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, R.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.UninterpretedOption; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 2:\n                    o.name && o.name.length || (o.name = []), o.name.push(l.google.protobuf.UninterpretedOption.NamePart.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.identifierValue = e.string();\n                    break;\n                case 4:\n                    o.positiveIntValue = e.uint64();\n                    break;\n                case 5:\n                    o.negativeIntValue = e.int64();\n                    break;\n                case 6:\n                    o.doubleValue = e.double();\n                    break;\n                case 7:\n                    o.stringValue = e.bytes();\n                    break;\n                case 8:\n                    o.aggregateValue = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, R.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, R.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\")) {\n            if (!Array.isArray(e.name)) return \"name: array expected\";\n            for(var t = 0; t < e.name.length; ++t){\n                var n = l.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);\n                if (n) return \"name.\" + n;\n            }\n        }\n        return null != e.identifierValue && e.hasOwnProperty(\"identifierValue\") && !p.isString(e.identifierValue) ? \"identifierValue: string expected\" : null != e.positiveIntValue && e.hasOwnProperty(\"positiveIntValue\") && !(p.isInteger(e.positiveIntValue) || e.positiveIntValue && p.isInteger(e.positiveIntValue.low) && p.isInteger(e.positiveIntValue.high)) ? \"positiveIntValue: integer|Long expected\" : null != e.negativeIntValue && e.hasOwnProperty(\"negativeIntValue\") && !(p.isInteger(e.negativeIntValue) || e.negativeIntValue && p.isInteger(e.negativeIntValue.low) && p.isInteger(e.negativeIntValue.high)) ? \"negativeIntValue: integer|Long expected\" : null != e.doubleValue && e.hasOwnProperty(\"doubleValue\") && \"number\" != typeof e.doubleValue ? \"doubleValue: number expected\" : null != e.stringValue && e.hasOwnProperty(\"stringValue\") && !(e.stringValue && \"number\" == typeof e.stringValue.length || p.isString(e.stringValue)) ? \"stringValue: buffer expected\" : null != e.aggregateValue && e.hasOwnProperty(\"aggregateValue\") && !p.isString(e.aggregateValue) ? \"aggregateValue: string expected\" : null;\n    }, R.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.UninterpretedOption) return e;\n        var t = new l.google.protobuf.UninterpretedOption;\n        if (e.name) {\n            if (!Array.isArray(e.name)) throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");\n            t.name = [];\n            for(var n = 0; n < e.name.length; ++n){\n                if (\"object\" != typeof e.name[n]) throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");\n                t.name[n] = l.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n]);\n            }\n        }\n        return null != e.identifierValue && (t.identifierValue = String(e.identifierValue)), null != e.positiveIntValue && (p.Long ? (t.positiveIntValue = p.Long.fromValue(e.positiveIntValue)).unsigned = !0 : \"string\" == typeof e.positiveIntValue ? t.positiveIntValue = parseInt(e.positiveIntValue, 10) : \"number\" == typeof e.positiveIntValue ? t.positiveIntValue = e.positiveIntValue : \"object\" == typeof e.positiveIntValue && (t.positiveIntValue = new p.LongBits(e.positiveIntValue.low >>> 0, e.positiveIntValue.high >>> 0).toNumber(!0))), null != e.negativeIntValue && (p.Long ? (t.negativeIntValue = p.Long.fromValue(e.negativeIntValue)).unsigned = !1 : \"string\" == typeof e.negativeIntValue ? t.negativeIntValue = parseInt(e.negativeIntValue, 10) : \"number\" == typeof e.negativeIntValue ? t.negativeIntValue = e.negativeIntValue : \"object\" == typeof e.negativeIntValue && (t.negativeIntValue = new p.LongBits(e.negativeIntValue.low >>> 0, e.negativeIntValue.high >>> 0).toNumber())), null != e.doubleValue && (t.doubleValue = Number(e.doubleValue)), null != e.stringValue && (\"string\" == typeof e.stringValue ? p.base64.decode(e.stringValue, t.stringValue = p.newBuffer(p.base64.length(e.stringValue)), 0) : e.stringValue.length && (t.stringValue = e.stringValue)), null != e.aggregateValue && (t.aggregateValue = String(e.aggregateValue)), t;\n    }, R.toObject = function(e, t) {\n        var n, o = {};\n        if (((t = t || {}).arrays || t.defaults) && (o.name = []), t.defaults && (o.identifierValue = \"\", p.Long ? (n = new p.Long(0, 0, !0), o.positiveIntValue = t.longs === String ? n.toString() : t.longs === Number ? n.toNumber() : n) : o.positiveIntValue = t.longs === String ? \"0\" : 0, p.Long ? (n = new p.Long(0, 0, !1), o.negativeIntValue = t.longs === String ? n.toString() : t.longs === Number ? n.toNumber() : n) : o.negativeIntValue = t.longs === String ? \"0\" : 0, o.doubleValue = 0, t.bytes === String ? o.stringValue = \"\" : (o.stringValue = [], t.bytes !== Array && (o.stringValue = p.newBuffer(o.stringValue))), o.aggregateValue = \"\"), e.name && e.name.length) {\n            o.name = [];\n            for(var r = 0; r < e.name.length; ++r)o.name[r] = l.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r], t);\n        }\n        return null != e.identifierValue && e.hasOwnProperty(\"identifierValue\") && (o.identifierValue = e.identifierValue), null != e.positiveIntValue && e.hasOwnProperty(\"positiveIntValue\") && (\"number\" == typeof e.positiveIntValue ? o.positiveIntValue = t.longs === String ? String(e.positiveIntValue) : e.positiveIntValue : o.positiveIntValue = t.longs === String ? p.Long.prototype.toString.call(e.positiveIntValue) : t.longs === Number ? new p.LongBits(e.positiveIntValue.low >>> 0, e.positiveIntValue.high >>> 0).toNumber(!0) : e.positiveIntValue), null != e.negativeIntValue && e.hasOwnProperty(\"negativeIntValue\") && (\"number\" == typeof e.negativeIntValue ? o.negativeIntValue = t.longs === String ? String(e.negativeIntValue) : e.negativeIntValue : o.negativeIntValue = t.longs === String ? p.Long.prototype.toString.call(e.negativeIntValue) : t.longs === Number ? new p.LongBits(e.negativeIntValue.low >>> 0, e.negativeIntValue.high >>> 0).toNumber() : e.negativeIntValue), null != e.doubleValue && e.hasOwnProperty(\"doubleValue\") && (o.doubleValue = t.json && !isFinite(e.doubleValue) ? String(e.doubleValue) : e.doubleValue), null != e.stringValue && e.hasOwnProperty(\"stringValue\") && (o.stringValue = t.bytes === String ? p.base64.encode(e.stringValue, 0, e.stringValue.length) : t.bytes === Array ? Array.prototype.slice.call(e.stringValue) : e.stringValue), null != e.aggregateValue && e.hasOwnProperty(\"aggregateValue\") && (o.aggregateValue = e.aggregateValue), o;\n    }, R.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, R.NamePart = (Z.prototype.namePart = \"\", Z.prototype.isExtension = !1, Z.create = function(e) {\n        return new Z(e);\n    }, Z.encode = function(e, t) {\n        return (t = t || i.create()).uint32(10).string(e.namePart), t.uint32(16).bool(e.isExtension), t;\n    }, Z.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, Z.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.UninterpretedOption.NamePart; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.namePart = e.string();\n                    break;\n                case 2:\n                    o.isExtension = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        if (!o.hasOwnProperty(\"namePart\")) throw p.ProtocolError(\"missing required 'namePart'\", {\n            instance: o\n        });\n        if (o.hasOwnProperty(\"isExtension\")) return o;\n        throw p.ProtocolError(\"missing required 'isExtension'\", {\n            instance: o\n        });\n    }, Z.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, Z.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : p.isString(e.namePart) ? \"boolean\" != typeof e.isExtension ? \"isExtension: boolean expected\" : null : \"namePart: string expected\";\n    }, Z.fromObject = function(e) {\n        var t;\n        return e instanceof l.google.protobuf.UninterpretedOption.NamePart ? e : (t = new l.google.protobuf.UninterpretedOption.NamePart, null != e.namePart && (t.namePart = String(e.namePart)), null != e.isExtension && (t.isExtension = Boolean(e.isExtension)), t);\n    }, Z.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.namePart = \"\", n.isExtension = !1), null != e.namePart && e.hasOwnProperty(\"namePart\") && (n.namePart = e.namePart), null != e.isExtension && e.hasOwnProperty(\"isExtension\") && (n.isExtension = e.isExtension), n;\n    }, Z.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, Z), R), n.SourceCodeInfo = ($.prototype.location = p.emptyArray, $.create = function(e) {\n        return new $(e);\n    }, $.encode = function(e, t) {\n        if (t = t || i.create(), null != e.location && e.location.length) for(var n = 0; n < e.location.length; ++n)l.google.protobuf.SourceCodeInfo.Location.encode(e.location[n], t.uint32(10).fork()).ldelim();\n        return t;\n    }, $.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, $.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.SourceCodeInfo; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? (o.location && o.location.length || (o.location = []), o.location.push(l.google.protobuf.SourceCodeInfo.Location.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, $.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, $.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.location && e.hasOwnProperty(\"location\")) {\n            if (!Array.isArray(e.location)) return \"location: array expected\";\n            for(var t = 0; t < e.location.length; ++t){\n                var n = l.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);\n                if (n) return \"location.\" + n;\n            }\n        }\n        return null;\n    }, $.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.SourceCodeInfo) return e;\n        var t = new l.google.protobuf.SourceCodeInfo;\n        if (e.location) {\n            if (!Array.isArray(e.location)) throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");\n            t.location = [];\n            for(var n = 0; n < e.location.length; ++n){\n                if (\"object\" != typeof e.location[n]) throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");\n                t.location[n] = l.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n]);\n            }\n        }\n        return t;\n    }, $.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.location = []), e.location && e.location.length) {\n            n.location = [];\n            for(var o = 0; o < e.location.length; ++o)n.location[o] = l.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o], t);\n        }\n        return n;\n    }, $.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, $.Location = (I.prototype.path = p.emptyArray, I.prototype.span = p.emptyArray, I.prototype.leadingComments = \"\", I.prototype.trailingComments = \"\", I.prototype.leadingDetachedComments = p.emptyArray, I.create = function(e) {\n        return new I(e);\n    }, I.encode = function(e, t) {\n        if (t = t || i.create(), null != e.path && e.path.length) {\n            t.uint32(10).fork();\n            for(var n = 0; n < e.path.length; ++n)t.int32(e.path[n]);\n            t.ldelim();\n        }\n        if (null != e.span && e.span.length) {\n            t.uint32(18).fork();\n            for(n = 0; n < e.span.length; ++n)t.int32(e.span[n]);\n            t.ldelim();\n        }\n        if (null != e.leadingComments && Object.hasOwnProperty.call(e, \"leadingComments\") && t.uint32(26).string(e.leadingComments), null != e.trailingComments && Object.hasOwnProperty.call(e, \"trailingComments\") && t.uint32(34).string(e.trailingComments), null != e.leadingDetachedComments && e.leadingDetachedComments.length) for(n = 0; n < e.leadingDetachedComments.length; ++n)t.uint32(50).string(e.leadingDetachedComments[n]);\n        return t;\n    }, I.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, I.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.SourceCodeInfo.Location; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    if (o.path && o.path.length || (o.path = []), 2 == (7 & r)) for(var i = e.uint32() + e.pos; e.pos < i;)o.path.push(e.int32());\n                    else o.path.push(e.int32());\n                    break;\n                case 2:\n                    if (o.span && o.span.length || (o.span = []), 2 == (7 & r)) for(i = e.uint32() + e.pos; e.pos < i;)o.span.push(e.int32());\n                    else o.span.push(e.int32());\n                    break;\n                case 3:\n                    o.leadingComments = e.string();\n                    break;\n                case 4:\n                    o.trailingComments = e.string();\n                    break;\n                case 6:\n                    o.leadingDetachedComments && o.leadingDetachedComments.length || (o.leadingDetachedComments = []), o.leadingDetachedComments.push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, I.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, I.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.path && e.hasOwnProperty(\"path\")) {\n            if (!Array.isArray(e.path)) return \"path: array expected\";\n            for(var t = 0; t < e.path.length; ++t)if (!p.isInteger(e.path[t])) return \"path: integer[] expected\";\n        }\n        if (null != e.span && e.hasOwnProperty(\"span\")) {\n            if (!Array.isArray(e.span)) return \"span: array expected\";\n            for(t = 0; t < e.span.length; ++t)if (!p.isInteger(e.span[t])) return \"span: integer[] expected\";\n        }\n        if (null != e.leadingComments && e.hasOwnProperty(\"leadingComments\") && !p.isString(e.leadingComments)) return \"leadingComments: string expected\";\n        if (null != e.trailingComments && e.hasOwnProperty(\"trailingComments\") && !p.isString(e.trailingComments)) return \"trailingComments: string expected\";\n        if (null != e.leadingDetachedComments && e.hasOwnProperty(\"leadingDetachedComments\")) {\n            if (!Array.isArray(e.leadingDetachedComments)) return \"leadingDetachedComments: array expected\";\n            for(t = 0; t < e.leadingDetachedComments.length; ++t)if (!p.isString(e.leadingDetachedComments[t])) return \"leadingDetachedComments: string[] expected\";\n        }\n        return null;\n    }, I.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.SourceCodeInfo.Location) return e;\n        var t = new l.google.protobuf.SourceCodeInfo.Location;\n        if (e.path) {\n            if (!Array.isArray(e.path)) throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");\n            t.path = [];\n            for(var n = 0; n < e.path.length; ++n)t.path[n] = 0 | e.path[n];\n        }\n        if (e.span) {\n            if (!Array.isArray(e.span)) throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");\n            t.span = [];\n            for(n = 0; n < e.span.length; ++n)t.span[n] = 0 | e.span[n];\n        }\n        if (null != e.leadingComments && (t.leadingComments = String(e.leadingComments)), null != e.trailingComments && (t.trailingComments = String(e.trailingComments)), e.leadingDetachedComments) {\n            if (!Array.isArray(e.leadingDetachedComments)) throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");\n            t.leadingDetachedComments = [];\n            for(n = 0; n < e.leadingDetachedComments.length; ++n)t.leadingDetachedComments[n] = String(e.leadingDetachedComments[n]);\n        }\n        return t;\n    }, I.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.path = [], n.span = [], n.leadingDetachedComments = []), t.defaults && (n.leadingComments = \"\", n.trailingComments = \"\"), e.path && e.path.length) {\n            n.path = [];\n            for(var o = 0; o < e.path.length; ++o)n.path[o] = e.path[o];\n        }\n        if (e.span && e.span.length) {\n            n.span = [];\n            for(o = 0; o < e.span.length; ++o)n.span[o] = e.span[o];\n        }\n        if (null != e.leadingComments && e.hasOwnProperty(\"leadingComments\") && (n.leadingComments = e.leadingComments), null != e.trailingComments && e.hasOwnProperty(\"trailingComments\") && (n.trailingComments = e.trailingComments), e.leadingDetachedComments && e.leadingDetachedComments.length) {\n            n.leadingDetachedComments = [];\n            for(o = 0; o < e.leadingDetachedComments.length; ++o)n.leadingDetachedComments[o] = e.leadingDetachedComments[o];\n        }\n        return n;\n    }, I.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, I), $), n.GeneratedCodeInfo = (ee.prototype.annotation = p.emptyArray, ee.create = function(e) {\n        return new ee(e);\n    }, ee.encode = function(e, t) {\n        if (t = t || i.create(), null != e.annotation && e.annotation.length) for(var n = 0; n < e.annotation.length; ++n)l.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n], t.uint32(10).fork()).ldelim();\n        return t;\n    }, ee.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, ee.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.GeneratedCodeInfo; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? (o.annotation && o.annotation.length || (o.annotation = []), o.annotation.push(l.google.protobuf.GeneratedCodeInfo.Annotation.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, ee.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, ee.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.annotation && e.hasOwnProperty(\"annotation\")) {\n            if (!Array.isArray(e.annotation)) return \"annotation: array expected\";\n            for(var t = 0; t < e.annotation.length; ++t){\n                var n = l.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);\n                if (n) return \"annotation.\" + n;\n            }\n        }\n        return null;\n    }, ee.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.GeneratedCodeInfo) return e;\n        var t = new l.google.protobuf.GeneratedCodeInfo;\n        if (e.annotation) {\n            if (!Array.isArray(e.annotation)) throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");\n            t.annotation = [];\n            for(var n = 0; n < e.annotation.length; ++n){\n                if (\"object\" != typeof e.annotation[n]) throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");\n                t.annotation[n] = l.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n]);\n            }\n        }\n        return t;\n    }, ee.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.annotation = []), e.annotation && e.annotation.length) {\n            n.annotation = [];\n            for(var o = 0; o < e.annotation.length; ++o)n.annotation[o] = l.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o], t);\n        }\n        return n;\n    }, ee.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, ee.Annotation = (C.prototype.path = p.emptyArray, C.prototype.sourceFile = \"\", C.prototype.begin = 0, C.prototype.end = 0, C.create = function(e) {\n        return new C(e);\n    }, C.encode = function(e, t) {\n        if (t = t || i.create(), null != e.path && e.path.length) {\n            t.uint32(10).fork();\n            for(var n = 0; n < e.path.length; ++n)t.int32(e.path[n]);\n            t.ldelim();\n        }\n        return null != e.sourceFile && Object.hasOwnProperty.call(e, \"sourceFile\") && t.uint32(18).string(e.sourceFile), null != e.begin && Object.hasOwnProperty.call(e, \"begin\") && t.uint32(24).int32(e.begin), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(32).int32(e.end), t;\n    }, C.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, C.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.protobuf.GeneratedCodeInfo.Annotation; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    if (o.path && o.path.length || (o.path = []), 2 == (7 & r)) for(var i = e.uint32() + e.pos; e.pos < i;)o.path.push(e.int32());\n                    else o.path.push(e.int32());\n                    break;\n                case 2:\n                    o.sourceFile = e.string();\n                    break;\n                case 3:\n                    o.begin = e.int32();\n                    break;\n                case 4:\n                    o.end = e.int32();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, C.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, C.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.path && e.hasOwnProperty(\"path\")) {\n            if (!Array.isArray(e.path)) return \"path: array expected\";\n            for(var t = 0; t < e.path.length; ++t)if (!p.isInteger(e.path[t])) return \"path: integer[] expected\";\n        }\n        return null != e.sourceFile && e.hasOwnProperty(\"sourceFile\") && !p.isString(e.sourceFile) ? \"sourceFile: string expected\" : null != e.begin && e.hasOwnProperty(\"begin\") && !p.isInteger(e.begin) ? \"begin: integer expected\" : null != e.end && e.hasOwnProperty(\"end\") && !p.isInteger(e.end) ? \"end: integer expected\" : null;\n    }, C.fromObject = function(e) {\n        if (e instanceof l.google.protobuf.GeneratedCodeInfo.Annotation) return e;\n        var t = new l.google.protobuf.GeneratedCodeInfo.Annotation;\n        if (e.path) {\n            if (!Array.isArray(e.path)) throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");\n            t.path = [];\n            for(var n = 0; n < e.path.length; ++n)t.path[n] = 0 | e.path[n];\n        }\n        return null != e.sourceFile && (t.sourceFile = String(e.sourceFile)), null != e.begin && (t.begin = 0 | e.begin), null != e.end && (t.end = 0 | e.end), t;\n    }, C.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.path = []), t.defaults && (n.sourceFile = \"\", n.begin = 0, n.end = 0), e.path && e.path.length) {\n            n.path = [];\n            for(var o = 0; o < e.path.length; ++o)n.path[o] = e.path[o];\n        }\n        return null != e.sourceFile && e.hasOwnProperty(\"sourceFile\") && (n.sourceFile = e.sourceFile), null != e.begin && e.hasOwnProperty(\"begin\") && (n.begin = e.begin), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), n;\n    }, C.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, C), ee), n), F.type = ((r = {}).Expr = (V.prototype.expression = \"\", V.prototype.title = \"\", V.prototype.description = \"\", V.prototype.location = \"\", V.create = function(e) {\n        return new V(e);\n    }, V.encode = function(e, t) {\n        return t = t || i.create(), null != e.expression && Object.hasOwnProperty.call(e, \"expression\") && t.uint32(10).string(e.expression), null != e.title && Object.hasOwnProperty.call(e, \"title\") && t.uint32(18).string(e.title), null != e.description && Object.hasOwnProperty.call(e, \"description\") && t.uint32(26).string(e.description), null != e.location && Object.hasOwnProperty.call(e, \"location\") && t.uint32(34).string(e.location), t;\n    }, V.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, V.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new l.google.type.Expr; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.expression = e.string();\n                    break;\n                case 2:\n                    o.title = e.string();\n                    break;\n                case 3:\n                    o.description = e.string();\n                    break;\n                case 4:\n                    o.location = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, V.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, V.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.expression && e.hasOwnProperty(\"expression\") && !p.isString(e.expression) ? \"expression: string expected\" : null != e.title && e.hasOwnProperty(\"title\") && !p.isString(e.title) ? \"title: string expected\" : null != e.description && e.hasOwnProperty(\"description\") && !p.isString(e.description) ? \"description: string expected\" : null != e.location && e.hasOwnProperty(\"location\") && !p.isString(e.location) ? \"location: string expected\" : null;\n    }, V.fromObject = function(e) {\n        var t;\n        return e instanceof l.google.type.Expr ? e : (t = new l.google.type.Expr, null != e.expression && (t.expression = String(e.expression)), null != e.title && (t.title = String(e.title)), null != e.description && (t.description = String(e.description)), null != e.location && (t.location = String(e.location)), t);\n    }, V.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.expression = \"\", n.title = \"\", n.description = \"\", n.location = \"\"), null != e.expression && e.hasOwnProperty(\"expression\") && (n.expression = e.expression), null != e.title && e.hasOwnProperty(\"title\") && (n.title = e.title), null != e.description && e.hasOwnProperty(\"description\") && (n.description = e.description), null != e.location && e.hasOwnProperty(\"location\") && (n.location = e.location), n;\n    }, V.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, V), r), F), l;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/iam_service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/locations.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/protos/locations.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n((e)=>{\n     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(function(o) {\n    var e, t, n, F, s = o.Reader, r = o.Writer, u = o.util, c = o.roots.locations_protos || (o.roots.locations_protos = {});\n    function L(e, t, n) {\n        o.rpc.Service.call(this, e, t, n);\n    }\n    function i(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function a(e) {\n        if (this.locations = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function G(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function p(e) {\n        if (this.labels = {}, e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function l(e) {\n        if (this.rules = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function d(e) {\n        if (this.additionalBindings = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function g(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function B(e) {\n        if (this.file = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function f(e) {\n        if (this.dependency = [], this.publicDependency = [], this.weakDependency = [], this.messageType = [], this.enumType = [], this.service = [], this.extension = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function y(e) {\n        if (this.field = [], this.extension = [], this.nestedType = [], this.enumType = [], this.extensionRange = [], this.oneofDecl = [], this.reservedRange = [], this.reservedName = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function h(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function b(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function U(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function O(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function m(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function v(e) {\n        if (this.value = [], this.reservedRange = [], this.reservedName = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function P(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function w(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function j(e) {\n        if (this.method = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function x(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function S(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function k(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function D(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function M(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function T(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function E(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function A(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function N(e) {\n        if (this.uninterpretedOption = [], this[\".google.api.methodSignature\"] = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function I(e) {\n        if (this.name = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function R(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function _(e) {\n        if (this.location = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function C(e) {\n        if (this.path = [], this.span = [], this.leadingDetachedComments = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function J(e) {\n        if (this.annotation = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function V(e) {\n        if (this.path = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function H(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    return c.google = ((F = {}).cloud = ((n = {}).location = ((e = {}).Locations = (((L.prototype = Object.create(o.rpc.Service.prototype)).constructor = L).create = function(e, t, n) {\n        return new this(e, t, n);\n    }, Object.defineProperty(L.prototype.listLocations = function e(t, n) {\n        return this.rpcCall(e, c.google.cloud.location.ListLocationsRequest, c.google.cloud.location.ListLocationsResponse, t, n);\n    }, \"name\", {\n        value: \"ListLocations\"\n    }), Object.defineProperty(L.prototype.getLocation = function e(t, n) {\n        return this.rpcCall(e, c.google.cloud.location.GetLocationRequest, c.google.cloud.location.Location, t, n);\n    }, \"name\", {\n        value: \"GetLocation\"\n    }), L), e.ListLocationsRequest = (i.prototype.name = \"\", i.prototype.filter = \"\", i.prototype.pageSize = 0, i.prototype.pageToken = \"\", i.create = function(e) {\n        return new i(e);\n    }, i.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.filter && Object.hasOwnProperty.call(e, \"filter\") && t.uint32(18).string(e.filter), null != e.pageSize && Object.hasOwnProperty.call(e, \"pageSize\") && t.uint32(24).int32(e.pageSize), null != e.pageToken && Object.hasOwnProperty.call(e, \"pageToken\") && t.uint32(34).string(e.pageToken), t;\n    }, i.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, i.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.cloud.location.ListLocationsRequest; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.filter = e.string();\n                    break;\n                case 3:\n                    o.pageSize = e.int32();\n                    break;\n                case 4:\n                    o.pageToken = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, i.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, i.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.name && e.hasOwnProperty(\"name\") && !u.isString(e.name) ? \"name: string expected\" : null != e.filter && e.hasOwnProperty(\"filter\") && !u.isString(e.filter) ? \"filter: string expected\" : null != e.pageSize && e.hasOwnProperty(\"pageSize\") && !u.isInteger(e.pageSize) ? \"pageSize: integer expected\" : null != e.pageToken && e.hasOwnProperty(\"pageToken\") && !u.isString(e.pageToken) ? \"pageToken: string expected\" : null;\n    }, i.fromObject = function(e) {\n        var t;\n        return e instanceof c.google.cloud.location.ListLocationsRequest ? e : (t = new c.google.cloud.location.ListLocationsRequest, null != e.name && (t.name = String(e.name)), null != e.filter && (t.filter = String(e.filter)), null != e.pageSize && (t.pageSize = 0 | e.pageSize), null != e.pageToken && (t.pageToken = String(e.pageToken)), t);\n    }, i.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.filter = \"\", n.pageSize = 0, n.pageToken = \"\"), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.filter && e.hasOwnProperty(\"filter\") && (n.filter = e.filter), null != e.pageSize && e.hasOwnProperty(\"pageSize\") && (n.pageSize = e.pageSize), null != e.pageToken && e.hasOwnProperty(\"pageToken\") && (n.pageToken = e.pageToken), n;\n    }, i.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, i), e.ListLocationsResponse = (a.prototype.locations = u.emptyArray, a.prototype.nextPageToken = \"\", a.create = function(e) {\n        return new a(e);\n    }, a.encode = function(e, t) {\n        if (t = t || r.create(), null != e.locations && e.locations.length) for(var n = 0; n < e.locations.length; ++n)c.google.cloud.location.Location.encode(e.locations[n], t.uint32(10).fork()).ldelim();\n        return null != e.nextPageToken && Object.hasOwnProperty.call(e, \"nextPageToken\") && t.uint32(18).string(e.nextPageToken), t;\n    }, a.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, a.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.cloud.location.ListLocationsResponse; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.locations && o.locations.length || (o.locations = []), o.locations.push(c.google.cloud.location.Location.decode(e, e.uint32()));\n                    break;\n                case 2:\n                    o.nextPageToken = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, a.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, a.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.locations && e.hasOwnProperty(\"locations\")) {\n            if (!Array.isArray(e.locations)) return \"locations: array expected\";\n            for(var t = 0; t < e.locations.length; ++t){\n                var n = c.google.cloud.location.Location.verify(e.locations[t]);\n                if (n) return \"locations.\" + n;\n            }\n        }\n        return null != e.nextPageToken && e.hasOwnProperty(\"nextPageToken\") && !u.isString(e.nextPageToken) ? \"nextPageToken: string expected\" : null;\n    }, a.fromObject = function(e) {\n        if (e instanceof c.google.cloud.location.ListLocationsResponse) return e;\n        var t = new c.google.cloud.location.ListLocationsResponse;\n        if (e.locations) {\n            if (!Array.isArray(e.locations)) throw TypeError(\".google.cloud.location.ListLocationsResponse.locations: array expected\");\n            t.locations = [];\n            for(var n = 0; n < e.locations.length; ++n){\n                if (\"object\" != typeof e.locations[n]) throw TypeError(\".google.cloud.location.ListLocationsResponse.locations: object expected\");\n                t.locations[n] = c.google.cloud.location.Location.fromObject(e.locations[n]);\n            }\n        }\n        return null != e.nextPageToken && (t.nextPageToken = String(e.nextPageToken)), t;\n    }, a.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.locations = []), t.defaults && (n.nextPageToken = \"\"), e.locations && e.locations.length) {\n            n.locations = [];\n            for(var o = 0; o < e.locations.length; ++o)n.locations[o] = c.google.cloud.location.Location.toObject(e.locations[o], t);\n        }\n        return null != e.nextPageToken && e.hasOwnProperty(\"nextPageToken\") && (n.nextPageToken = e.nextPageToken), n;\n    }, a.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, a), e.GetLocationRequest = (G.prototype.name = \"\", G.create = function(e) {\n        return new G(e);\n    }, G.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), t;\n    }, G.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, G.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.cloud.location.GetLocationRequest; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? o.name = e.string() : e.skipType(7 & r);\n        }\n        return o;\n    }, G.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, G.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.name && e.hasOwnProperty(\"name\") && !u.isString(e.name) ? \"name: string expected\" : null;\n    }, G.fromObject = function(e) {\n        var t;\n        return e instanceof c.google.cloud.location.GetLocationRequest ? e : (t = new c.google.cloud.location.GetLocationRequest, null != e.name && (t.name = String(e.name)), t);\n    }, G.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\"), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), n;\n    }, G.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, G), e.Location = (p.prototype.name = \"\", p.prototype.locationId = \"\", p.prototype.displayName = \"\", p.prototype.labels = u.emptyObject, p.prototype.metadata = null, p.create = function(e) {\n        return new p(e);\n    }, p.encode = function(e, t) {\n        if (t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.labels && Object.hasOwnProperty.call(e, \"labels\")) for(var n = Object.keys(e.labels), o = 0; o < n.length; ++o)t.uint32(18).fork().uint32(10).string(n[o]).uint32(18).string(e.labels[n[o]]).ldelim();\n        return null != e.metadata && Object.hasOwnProperty.call(e, \"metadata\") && c.google.protobuf.Any.encode(e.metadata, t.uint32(26).fork()).ldelim(), null != e.locationId && Object.hasOwnProperty.call(e, \"locationId\") && t.uint32(34).string(e.locationId), null != e.displayName && Object.hasOwnProperty.call(e, \"displayName\") && t.uint32(42).string(e.displayName), t;\n    }, p.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, p.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.cloud.location.Location; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 4:\n                    o.locationId = e.string();\n                    break;\n                case 5:\n                    o.displayName = e.string();\n                    break;\n                case 2:\n                    o.labels === u.emptyObject && (o.labels = {});\n                    for(var i = e.uint32() + e.pos, a = \"\", p = \"\"; e.pos < i;){\n                        var l = e.uint32();\n                        switch(l >>> 3){\n                            case 1:\n                                a = e.string();\n                                break;\n                            case 2:\n                                p = e.string();\n                                break;\n                            default:\n                                e.skipType(7 & l);\n                        }\n                    }\n                    o.labels[a] = p;\n                    break;\n                case 3:\n                    o.metadata = c.google.protobuf.Any.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, p.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, p.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !u.isString(e.name)) return \"name: string expected\";\n        if (null != e.locationId && e.hasOwnProperty(\"locationId\") && !u.isString(e.locationId)) return \"locationId: string expected\";\n        if (null != e.displayName && e.hasOwnProperty(\"displayName\") && !u.isString(e.displayName)) return \"displayName: string expected\";\n        if (null != e.labels && e.hasOwnProperty(\"labels\")) {\n            if (!u.isObject(e.labels)) return \"labels: object expected\";\n            for(var t = Object.keys(e.labels), n = 0; n < t.length; ++n)if (!u.isString(e.labels[t[n]])) return \"labels: string{k:string} expected\";\n        }\n        if (null != e.metadata && e.hasOwnProperty(\"metadata\")) {\n            var o = c.google.protobuf.Any.verify(e.metadata);\n            if (o) return \"metadata.\" + o;\n        }\n        return null;\n    }, p.fromObject = function(e) {\n        if (e instanceof c.google.cloud.location.Location) return e;\n        var t = new c.google.cloud.location.Location;\n        if (null != e.name && (t.name = String(e.name)), null != e.locationId && (t.locationId = String(e.locationId)), null != e.displayName && (t.displayName = String(e.displayName)), e.labels) {\n            if (\"object\" != typeof e.labels) throw TypeError(\".google.cloud.location.Location.labels: object expected\");\n            t.labels = {};\n            for(var n = Object.keys(e.labels), o = 0; o < n.length; ++o)t.labels[n[o]] = String(e.labels[n[o]]);\n        }\n        if (null != e.metadata) {\n            if (\"object\" != typeof e.metadata) throw TypeError(\".google.cloud.location.Location.metadata: object expected\");\n            t.metadata = c.google.protobuf.Any.fromObject(e.metadata);\n        }\n        return t;\n    }, p.toObject = function(e, t) {\n        var n, o = {};\n        if (((t = t || {}).objects || t.defaults) && (o.labels = {}), t.defaults && (o.name = \"\", o.metadata = null, o.locationId = \"\", o.displayName = \"\"), null != e.name && e.hasOwnProperty(\"name\") && (o.name = e.name), e.labels && (n = Object.keys(e.labels)).length) {\n            o.labels = {};\n            for(var r = 0; r < n.length; ++r)o.labels[n[r]] = e.labels[n[r]];\n        }\n        return null != e.metadata && e.hasOwnProperty(\"metadata\") && (o.metadata = c.google.protobuf.Any.toObject(e.metadata, t)), null != e.locationId && e.hasOwnProperty(\"locationId\") && (o.locationId = e.locationId), null != e.displayName && e.hasOwnProperty(\"displayName\") && (o.displayName = e.displayName), o;\n    }, p.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, p), e), n), F.api = ((e = {}).Http = (l.prototype.rules = u.emptyArray, l.prototype.fullyDecodeReservedExpansion = !1, l.create = function(e) {\n        return new l(e);\n    }, l.encode = function(e, t) {\n        if (t = t || r.create(), null != e.rules && e.rules.length) for(var n = 0; n < e.rules.length; ++n)c.google.api.HttpRule.encode(e.rules[n], t.uint32(10).fork()).ldelim();\n        return null != e.fullyDecodeReservedExpansion && Object.hasOwnProperty.call(e, \"fullyDecodeReservedExpansion\") && t.uint32(16).bool(e.fullyDecodeReservedExpansion), t;\n    }, l.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, l.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.api.Http; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.rules && o.rules.length || (o.rules = []), o.rules.push(c.google.api.HttpRule.decode(e, e.uint32()));\n                    break;\n                case 2:\n                    o.fullyDecodeReservedExpansion = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, l.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, l.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.rules && e.hasOwnProperty(\"rules\")) {\n            if (!Array.isArray(e.rules)) return \"rules: array expected\";\n            for(var t = 0; t < e.rules.length; ++t){\n                var n = c.google.api.HttpRule.verify(e.rules[t]);\n                if (n) return \"rules.\" + n;\n            }\n        }\n        return null != e.fullyDecodeReservedExpansion && e.hasOwnProperty(\"fullyDecodeReservedExpansion\") && \"boolean\" != typeof e.fullyDecodeReservedExpansion ? \"fullyDecodeReservedExpansion: boolean expected\" : null;\n    }, l.fromObject = function(e) {\n        if (e instanceof c.google.api.Http) return e;\n        var t = new c.google.api.Http;\n        if (e.rules) {\n            if (!Array.isArray(e.rules)) throw TypeError(\".google.api.Http.rules: array expected\");\n            t.rules = [];\n            for(var n = 0; n < e.rules.length; ++n){\n                if (\"object\" != typeof e.rules[n]) throw TypeError(\".google.api.Http.rules: object expected\");\n                t.rules[n] = c.google.api.HttpRule.fromObject(e.rules[n]);\n            }\n        }\n        return null != e.fullyDecodeReservedExpansion && (t.fullyDecodeReservedExpansion = Boolean(e.fullyDecodeReservedExpansion)), t;\n    }, l.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.rules = []), t.defaults && (n.fullyDecodeReservedExpansion = !1), e.rules && e.rules.length) {\n            n.rules = [];\n            for(var o = 0; o < e.rules.length; ++o)n.rules[o] = c.google.api.HttpRule.toObject(e.rules[o], t);\n        }\n        return null != e.fullyDecodeReservedExpansion && e.hasOwnProperty(\"fullyDecodeReservedExpansion\") && (n.fullyDecodeReservedExpansion = e.fullyDecodeReservedExpansion), n;\n    }, l.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, l), e.HttpRule = (d.prototype.selector = \"\", d.prototype.get = null, d.prototype.put = null, d.prototype.post = null, d.prototype.delete = null, d.prototype.patch = null, d.prototype.custom = null, d.prototype.body = \"\", d.prototype.responseBody = \"\", d.prototype.additionalBindings = u.emptyArray, Object.defineProperty(d.prototype, \"pattern\", {\n        get: u.oneOfGetter(n = [\n            \"get\",\n            \"put\",\n            \"post\",\n            \"delete\",\n            \"patch\",\n            \"custom\"\n        ]),\n        set: u.oneOfSetter(n)\n    }), d.create = function(e) {\n        return new d(e);\n    }, d.encode = function(e, t) {\n        if (t = t || r.create(), null != e.selector && Object.hasOwnProperty.call(e, \"selector\") && t.uint32(10).string(e.selector), null != e.get && Object.hasOwnProperty.call(e, \"get\") && t.uint32(18).string(e.get), null != e.put && Object.hasOwnProperty.call(e, \"put\") && t.uint32(26).string(e.put), null != e.post && Object.hasOwnProperty.call(e, \"post\") && t.uint32(34).string(e.post), null != e.delete && Object.hasOwnProperty.call(e, \"delete\") && t.uint32(42).string(e.delete), null != e.patch && Object.hasOwnProperty.call(e, \"patch\") && t.uint32(50).string(e.patch), null != e.body && Object.hasOwnProperty.call(e, \"body\") && t.uint32(58).string(e.body), null != e.custom && Object.hasOwnProperty.call(e, \"custom\") && c.google.api.CustomHttpPattern.encode(e.custom, t.uint32(66).fork()).ldelim(), null != e.additionalBindings && e.additionalBindings.length) for(var n = 0; n < e.additionalBindings.length; ++n)c.google.api.HttpRule.encode(e.additionalBindings[n], t.uint32(90).fork()).ldelim();\n        return null != e.responseBody && Object.hasOwnProperty.call(e, \"responseBody\") && t.uint32(98).string(e.responseBody), t;\n    }, d.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, d.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.api.HttpRule; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.selector = e.string();\n                    break;\n                case 2:\n                    o.get = e.string();\n                    break;\n                case 3:\n                    o.put = e.string();\n                    break;\n                case 4:\n                    o.post = e.string();\n                    break;\n                case 5:\n                    o.delete = e.string();\n                    break;\n                case 6:\n                    o.patch = e.string();\n                    break;\n                case 8:\n                    o.custom = c.google.api.CustomHttpPattern.decode(e, e.uint32());\n                    break;\n                case 7:\n                    o.body = e.string();\n                    break;\n                case 12:\n                    o.responseBody = e.string();\n                    break;\n                case 11:\n                    o.additionalBindings && o.additionalBindings.length || (o.additionalBindings = []), o.additionalBindings.push(c.google.api.HttpRule.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, d.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, d.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        var t = {};\n        if (null != e.selector && e.hasOwnProperty(\"selector\") && !u.isString(e.selector)) return \"selector: string expected\";\n        if (null != e.get && e.hasOwnProperty(\"get\") && (t.pattern = 1, !u.isString(e.get))) return \"get: string expected\";\n        if (null != e.put && e.hasOwnProperty(\"put\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !u.isString(e.put)) return \"put: string expected\";\n        }\n        if (null != e.post && e.hasOwnProperty(\"post\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !u.isString(e.post)) return \"post: string expected\";\n        }\n        if (null != e.delete && e.hasOwnProperty(\"delete\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !u.isString(e.delete)) return \"delete: string expected\";\n        }\n        if (null != e.patch && e.hasOwnProperty(\"patch\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !u.isString(e.patch)) return \"patch: string expected\";\n        }\n        if (null != e.custom && e.hasOwnProperty(\"custom\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, n = c.google.api.CustomHttpPattern.verify(e.custom)) return \"custom.\" + n;\n        }\n        if (null != e.body && e.hasOwnProperty(\"body\") && !u.isString(e.body)) return \"body: string expected\";\n        if (null != e.responseBody && e.hasOwnProperty(\"responseBody\") && !u.isString(e.responseBody)) return \"responseBody: string expected\";\n        if (null != e.additionalBindings && e.hasOwnProperty(\"additionalBindings\")) {\n            if (!Array.isArray(e.additionalBindings)) return \"additionalBindings: array expected\";\n            for(var n, o = 0; o < e.additionalBindings.length; ++o)if (n = c.google.api.HttpRule.verify(e.additionalBindings[o])) return \"additionalBindings.\" + n;\n        }\n        return null;\n    }, d.fromObject = function(e) {\n        if (e instanceof c.google.api.HttpRule) return e;\n        var t = new c.google.api.HttpRule;\n        if (null != e.selector && (t.selector = String(e.selector)), null != e.get && (t.get = String(e.get)), null != e.put && (t.put = String(e.put)), null != e.post && (t.post = String(e.post)), null != e.delete && (t.delete = String(e.delete)), null != e.patch && (t.patch = String(e.patch)), null != e.custom) {\n            if (\"object\" != typeof e.custom) throw TypeError(\".google.api.HttpRule.custom: object expected\");\n            t.custom = c.google.api.CustomHttpPattern.fromObject(e.custom);\n        }\n        if (null != e.body && (t.body = String(e.body)), null != e.responseBody && (t.responseBody = String(e.responseBody)), e.additionalBindings) {\n            if (!Array.isArray(e.additionalBindings)) throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");\n            t.additionalBindings = [];\n            for(var n = 0; n < e.additionalBindings.length; ++n){\n                if (\"object\" != typeof e.additionalBindings[n]) throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");\n                t.additionalBindings[n] = c.google.api.HttpRule.fromObject(e.additionalBindings[n]);\n            }\n        }\n        return t;\n    }, d.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.additionalBindings = []), t.defaults && (n.selector = \"\", n.body = \"\", n.responseBody = \"\"), null != e.selector && e.hasOwnProperty(\"selector\") && (n.selector = e.selector), null != e.get && e.hasOwnProperty(\"get\") && (n.get = e.get, t.oneofs) && (n.pattern = \"get\"), null != e.put && e.hasOwnProperty(\"put\") && (n.put = e.put, t.oneofs) && (n.pattern = \"put\"), null != e.post && e.hasOwnProperty(\"post\") && (n.post = e.post, t.oneofs) && (n.pattern = \"post\"), null != e.delete && e.hasOwnProperty(\"delete\") && (n.delete = e.delete, t.oneofs) && (n.pattern = \"delete\"), null != e.patch && e.hasOwnProperty(\"patch\") && (n.patch = e.patch, t.oneofs) && (n.pattern = \"patch\"), null != e.body && e.hasOwnProperty(\"body\") && (n.body = e.body), null != e.custom && e.hasOwnProperty(\"custom\") && (n.custom = c.google.api.CustomHttpPattern.toObject(e.custom, t), t.oneofs) && (n.pattern = \"custom\"), e.additionalBindings && e.additionalBindings.length) {\n            n.additionalBindings = [];\n            for(var o = 0; o < e.additionalBindings.length; ++o)n.additionalBindings[o] = c.google.api.HttpRule.toObject(e.additionalBindings[o], t);\n        }\n        return null != e.responseBody && e.hasOwnProperty(\"responseBody\") && (n.responseBody = e.responseBody), n;\n    }, d.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, d), e.CustomHttpPattern = (g.prototype.kind = \"\", g.prototype.path = \"\", g.create = function(e) {\n        return new g(e);\n    }, g.encode = function(e, t) {\n        return t = t || r.create(), null != e.kind && Object.hasOwnProperty.call(e, \"kind\") && t.uint32(10).string(e.kind), null != e.path && Object.hasOwnProperty.call(e, \"path\") && t.uint32(18).string(e.path), t;\n    }, g.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, g.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.api.CustomHttpPattern; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.kind = e.string();\n                    break;\n                case 2:\n                    o.path = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, g.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, g.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.kind && e.hasOwnProperty(\"kind\") && !u.isString(e.kind) ? \"kind: string expected\" : null != e.path && e.hasOwnProperty(\"path\") && !u.isString(e.path) ? \"path: string expected\" : null;\n    }, g.fromObject = function(e) {\n        var t;\n        return e instanceof c.google.api.CustomHttpPattern ? e : (t = new c.google.api.CustomHttpPattern, null != e.kind && (t.kind = String(e.kind)), null != e.path && (t.path = String(e.path)), t);\n    }, g.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.kind = \"\", n.path = \"\"), null != e.kind && e.hasOwnProperty(\"kind\") && (n.kind = e.kind), null != e.path && e.hasOwnProperty(\"path\") && (n.path = e.path), n;\n    }, g.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, g), e), F.protobuf = ((n = {}).FileDescriptorSet = (B.prototype.file = u.emptyArray, B.create = function(e) {\n        return new B(e);\n    }, B.encode = function(e, t) {\n        if (t = t || r.create(), null != e.file && e.file.length) for(var n = 0; n < e.file.length; ++n)c.google.protobuf.FileDescriptorProto.encode(e.file[n], t.uint32(10).fork()).ldelim();\n        return t;\n    }, B.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, B.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.FileDescriptorSet; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? (o.file && o.file.length || (o.file = []), o.file.push(c.google.protobuf.FileDescriptorProto.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, B.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, B.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.file && e.hasOwnProperty(\"file\")) {\n            if (!Array.isArray(e.file)) return \"file: array expected\";\n            for(var t = 0; t < e.file.length; ++t){\n                var n = c.google.protobuf.FileDescriptorProto.verify(e.file[t]);\n                if (n) return \"file.\" + n;\n            }\n        }\n        return null;\n    }, B.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.FileDescriptorSet) return e;\n        var t = new c.google.protobuf.FileDescriptorSet;\n        if (e.file) {\n            if (!Array.isArray(e.file)) throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");\n            t.file = [];\n            for(var n = 0; n < e.file.length; ++n){\n                if (\"object\" != typeof e.file[n]) throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");\n                t.file[n] = c.google.protobuf.FileDescriptorProto.fromObject(e.file[n]);\n            }\n        }\n        return t;\n    }, B.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.file = []), e.file && e.file.length) {\n            n.file = [];\n            for(var o = 0; o < e.file.length; ++o)n.file[o] = c.google.protobuf.FileDescriptorProto.toObject(e.file[o], t);\n        }\n        return n;\n    }, B.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, B), n.FileDescriptorProto = (f.prototype.name = \"\", f.prototype.package = \"\", f.prototype.dependency = u.emptyArray, f.prototype.publicDependency = u.emptyArray, f.prototype.weakDependency = u.emptyArray, f.prototype.messageType = u.emptyArray, f.prototype.enumType = u.emptyArray, f.prototype.service = u.emptyArray, f.prototype.extension = u.emptyArray, f.prototype.options = null, f.prototype.sourceCodeInfo = null, f.prototype.syntax = \"\", f.create = function(e) {\n        return new f(e);\n    }, f.encode = function(e, t) {\n        if (t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.package && Object.hasOwnProperty.call(e, \"package\") && t.uint32(18).string(e.package), null != e.dependency && e.dependency.length) for(var n = 0; n < e.dependency.length; ++n)t.uint32(26).string(e.dependency[n]);\n        if (null != e.messageType && e.messageType.length) for(n = 0; n < e.messageType.length; ++n)c.google.protobuf.DescriptorProto.encode(e.messageType[n], t.uint32(34).fork()).ldelim();\n        if (null != e.enumType && e.enumType.length) for(n = 0; n < e.enumType.length; ++n)c.google.protobuf.EnumDescriptorProto.encode(e.enumType[n], t.uint32(42).fork()).ldelim();\n        if (null != e.service && e.service.length) for(n = 0; n < e.service.length; ++n)c.google.protobuf.ServiceDescriptorProto.encode(e.service[n], t.uint32(50).fork()).ldelim();\n        if (null != e.extension && e.extension.length) for(n = 0; n < e.extension.length; ++n)c.google.protobuf.FieldDescriptorProto.encode(e.extension[n], t.uint32(58).fork()).ldelim();\n        if (null != e.options && Object.hasOwnProperty.call(e, \"options\") && c.google.protobuf.FileOptions.encode(e.options, t.uint32(66).fork()).ldelim(), null != e.sourceCodeInfo && Object.hasOwnProperty.call(e, \"sourceCodeInfo\") && c.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo, t.uint32(74).fork()).ldelim(), null != e.publicDependency && e.publicDependency.length) for(n = 0; n < e.publicDependency.length; ++n)t.uint32(80).int32(e.publicDependency[n]);\n        if (null != e.weakDependency && e.weakDependency.length) for(n = 0; n < e.weakDependency.length; ++n)t.uint32(88).int32(e.weakDependency[n]);\n        return null != e.syntax && Object.hasOwnProperty.call(e, \"syntax\") && t.uint32(98).string(e.syntax), t;\n    }, f.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, f.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.FileDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.package = e.string();\n                    break;\n                case 3:\n                    o.dependency && o.dependency.length || (o.dependency = []), o.dependency.push(e.string());\n                    break;\n                case 10:\n                    if (o.publicDependency && o.publicDependency.length || (o.publicDependency = []), 2 == (7 & r)) for(var i = e.uint32() + e.pos; e.pos < i;)o.publicDependency.push(e.int32());\n                    else o.publicDependency.push(e.int32());\n                    break;\n                case 11:\n                    if (o.weakDependency && o.weakDependency.length || (o.weakDependency = []), 2 == (7 & r)) for(i = e.uint32() + e.pos; e.pos < i;)o.weakDependency.push(e.int32());\n                    else o.weakDependency.push(e.int32());\n                    break;\n                case 4:\n                    o.messageType && o.messageType.length || (o.messageType = []), o.messageType.push(c.google.protobuf.DescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 5:\n                    o.enumType && o.enumType.length || (o.enumType = []), o.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 6:\n                    o.service && o.service.length || (o.service = []), o.service.push(c.google.protobuf.ServiceDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 7:\n                    o.extension && o.extension.length || (o.extension = []), o.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 8:\n                    o.options = c.google.protobuf.FileOptions.decode(e, e.uint32());\n                    break;\n                case 9:\n                    o.sourceCodeInfo = c.google.protobuf.SourceCodeInfo.decode(e, e.uint32());\n                    break;\n                case 12:\n                    o.syntax = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, f.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, f.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !u.isString(e.name)) return \"name: string expected\";\n        if (null != e.package && e.hasOwnProperty(\"package\") && !u.isString(e.package)) return \"package: string expected\";\n        if (null != e.dependency && e.hasOwnProperty(\"dependency\")) {\n            if (!Array.isArray(e.dependency)) return \"dependency: array expected\";\n            for(var t = 0; t < e.dependency.length; ++t)if (!u.isString(e.dependency[t])) return \"dependency: string[] expected\";\n        }\n        if (null != e.publicDependency && e.hasOwnProperty(\"publicDependency\")) {\n            if (!Array.isArray(e.publicDependency)) return \"publicDependency: array expected\";\n            for(t = 0; t < e.publicDependency.length; ++t)if (!u.isInteger(e.publicDependency[t])) return \"publicDependency: integer[] expected\";\n        }\n        if (null != e.weakDependency && e.hasOwnProperty(\"weakDependency\")) {\n            if (!Array.isArray(e.weakDependency)) return \"weakDependency: array expected\";\n            for(t = 0; t < e.weakDependency.length; ++t)if (!u.isInteger(e.weakDependency[t])) return \"weakDependency: integer[] expected\";\n        }\n        if (null != e.messageType && e.hasOwnProperty(\"messageType\")) {\n            if (!Array.isArray(e.messageType)) return \"messageType: array expected\";\n            for(t = 0; t < e.messageType.length; ++t)if (n = c.google.protobuf.DescriptorProto.verify(e.messageType[t])) return \"messageType.\" + n;\n        }\n        if (null != e.enumType && e.hasOwnProperty(\"enumType\")) {\n            if (!Array.isArray(e.enumType)) return \"enumType: array expected\";\n            for(t = 0; t < e.enumType.length; ++t)if (n = c.google.protobuf.EnumDescriptorProto.verify(e.enumType[t])) return \"enumType.\" + n;\n        }\n        if (null != e.service && e.hasOwnProperty(\"service\")) {\n            if (!Array.isArray(e.service)) return \"service: array expected\";\n            for(t = 0; t < e.service.length; ++t)if (n = c.google.protobuf.ServiceDescriptorProto.verify(e.service[t])) return \"service.\" + n;\n        }\n        if (null != e.extension && e.hasOwnProperty(\"extension\")) {\n            if (!Array.isArray(e.extension)) return \"extension: array expected\";\n            for(t = 0; t < e.extension.length; ++t)if (n = c.google.protobuf.FieldDescriptorProto.verify(e.extension[t])) return \"extension.\" + n;\n        }\n        var n;\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = c.google.protobuf.FileOptions.verify(e.options))) return \"options.\" + n;\n        if (null != e.sourceCodeInfo && e.hasOwnProperty(\"sourceCodeInfo\") && (n = c.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo))) return \"sourceCodeInfo.\" + n;\n        return null != e.syntax && e.hasOwnProperty(\"syntax\") && !u.isString(e.syntax) ? \"syntax: string expected\" : null;\n    }, f.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.FileDescriptorProto) return e;\n        var t = new c.google.protobuf.FileDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.package && (t.package = String(e.package)), e.dependency) {\n            if (!Array.isArray(e.dependency)) throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");\n            t.dependency = [];\n            for(var n = 0; n < e.dependency.length; ++n)t.dependency[n] = String(e.dependency[n]);\n        }\n        if (e.publicDependency) {\n            if (!Array.isArray(e.publicDependency)) throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");\n            t.publicDependency = [];\n            for(n = 0; n < e.publicDependency.length; ++n)t.publicDependency[n] = 0 | e.publicDependency[n];\n        }\n        if (e.weakDependency) {\n            if (!Array.isArray(e.weakDependency)) throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");\n            t.weakDependency = [];\n            for(n = 0; n < e.weakDependency.length; ++n)t.weakDependency[n] = 0 | e.weakDependency[n];\n        }\n        if (e.messageType) {\n            if (!Array.isArray(e.messageType)) throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");\n            t.messageType = [];\n            for(n = 0; n < e.messageType.length; ++n){\n                if (\"object\" != typeof e.messageType[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");\n                t.messageType[n] = c.google.protobuf.DescriptorProto.fromObject(e.messageType[n]);\n            }\n        }\n        if (e.enumType) {\n            if (!Array.isArray(e.enumType)) throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");\n            t.enumType = [];\n            for(n = 0; n < e.enumType.length; ++n){\n                if (\"object\" != typeof e.enumType[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");\n                t.enumType[n] = c.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n]);\n            }\n        }\n        if (e.service) {\n            if (!Array.isArray(e.service)) throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");\n            t.service = [];\n            for(n = 0; n < e.service.length; ++n){\n                if (\"object\" != typeof e.service[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");\n                t.service[n] = c.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n]);\n            }\n        }\n        if (e.extension) {\n            if (!Array.isArray(e.extension)) throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");\n            t.extension = [];\n            for(n = 0; n < e.extension.length; ++n){\n                if (\"object\" != typeof e.extension[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");\n                t.extension[n] = c.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");\n            t.options = c.google.protobuf.FileOptions.fromObject(e.options);\n        }\n        if (null != e.sourceCodeInfo) {\n            if (\"object\" != typeof e.sourceCodeInfo) throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");\n            t.sourceCodeInfo = c.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo);\n        }\n        return null != e.syntax && (t.syntax = String(e.syntax)), t;\n    }, f.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.dependency = [], n.messageType = [], n.enumType = [], n.service = [], n.extension = [], n.publicDependency = [], n.weakDependency = []), t.defaults && (n.name = \"\", n.package = \"\", n.options = null, n.sourceCodeInfo = null, n.syntax = \"\"), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.package && e.hasOwnProperty(\"package\") && (n.package = e.package), e.dependency && e.dependency.length) {\n            n.dependency = [];\n            for(var o = 0; o < e.dependency.length; ++o)n.dependency[o] = e.dependency[o];\n        }\n        if (e.messageType && e.messageType.length) {\n            n.messageType = [];\n            for(o = 0; o < e.messageType.length; ++o)n.messageType[o] = c.google.protobuf.DescriptorProto.toObject(e.messageType[o], t);\n        }\n        if (e.enumType && e.enumType.length) {\n            n.enumType = [];\n            for(o = 0; o < e.enumType.length; ++o)n.enumType[o] = c.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o], t);\n        }\n        if (e.service && e.service.length) {\n            n.service = [];\n            for(o = 0; o < e.service.length; ++o)n.service[o] = c.google.protobuf.ServiceDescriptorProto.toObject(e.service[o], t);\n        }\n        if (e.extension && e.extension.length) {\n            n.extension = [];\n            for(o = 0; o < e.extension.length; ++o)n.extension[o] = c.google.protobuf.FieldDescriptorProto.toObject(e.extension[o], t);\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n.options = c.google.protobuf.FileOptions.toObject(e.options, t)), null != e.sourceCodeInfo && e.hasOwnProperty(\"sourceCodeInfo\") && (n.sourceCodeInfo = c.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo, t)), e.publicDependency && e.publicDependency.length) {\n            n.publicDependency = [];\n            for(o = 0; o < e.publicDependency.length; ++o)n.publicDependency[o] = e.publicDependency[o];\n        }\n        if (e.weakDependency && e.weakDependency.length) {\n            n.weakDependency = [];\n            for(o = 0; o < e.weakDependency.length; ++o)n.weakDependency[o] = e.weakDependency[o];\n        }\n        return null != e.syntax && e.hasOwnProperty(\"syntax\") && (n.syntax = e.syntax), n;\n    }, f.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, f), n.DescriptorProto = (y.prototype.name = \"\", y.prototype.field = u.emptyArray, y.prototype.extension = u.emptyArray, y.prototype.nestedType = u.emptyArray, y.prototype.enumType = u.emptyArray, y.prototype.extensionRange = u.emptyArray, y.prototype.oneofDecl = u.emptyArray, y.prototype.options = null, y.prototype.reservedRange = u.emptyArray, y.prototype.reservedName = u.emptyArray, y.create = function(e) {\n        return new y(e);\n    }, y.encode = function(e, t) {\n        if (t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.field && e.field.length) for(var n = 0; n < e.field.length; ++n)c.google.protobuf.FieldDescriptorProto.encode(e.field[n], t.uint32(18).fork()).ldelim();\n        if (null != e.nestedType && e.nestedType.length) for(n = 0; n < e.nestedType.length; ++n)c.google.protobuf.DescriptorProto.encode(e.nestedType[n], t.uint32(26).fork()).ldelim();\n        if (null != e.enumType && e.enumType.length) for(n = 0; n < e.enumType.length; ++n)c.google.protobuf.EnumDescriptorProto.encode(e.enumType[n], t.uint32(34).fork()).ldelim();\n        if (null != e.extensionRange && e.extensionRange.length) for(n = 0; n < e.extensionRange.length; ++n)c.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n], t.uint32(42).fork()).ldelim();\n        if (null != e.extension && e.extension.length) for(n = 0; n < e.extension.length; ++n)c.google.protobuf.FieldDescriptorProto.encode(e.extension[n], t.uint32(50).fork()).ldelim();\n        if (null != e.options && Object.hasOwnProperty.call(e, \"options\") && c.google.protobuf.MessageOptions.encode(e.options, t.uint32(58).fork()).ldelim(), null != e.oneofDecl && e.oneofDecl.length) for(n = 0; n < e.oneofDecl.length; ++n)c.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n], t.uint32(66).fork()).ldelim();\n        if (null != e.reservedRange && e.reservedRange.length) for(n = 0; n < e.reservedRange.length; ++n)c.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n], t.uint32(74).fork()).ldelim();\n        if (null != e.reservedName && e.reservedName.length) for(n = 0; n < e.reservedName.length; ++n)t.uint32(82).string(e.reservedName[n]);\n        return t;\n    }, y.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, y.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.DescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.field && o.field.length || (o.field = []), o.field.push(c.google.protobuf.FieldDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 6:\n                    o.extension && o.extension.length || (o.extension = []), o.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.nestedType && o.nestedType.length || (o.nestedType = []), o.nestedType.push(c.google.protobuf.DescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 4:\n                    o.enumType && o.enumType.length || (o.enumType = []), o.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 5:\n                    o.extensionRange && o.extensionRange.length || (o.extensionRange = []), o.extensionRange.push(c.google.protobuf.DescriptorProto.ExtensionRange.decode(e, e.uint32()));\n                    break;\n                case 8:\n                    o.oneofDecl && o.oneofDecl.length || (o.oneofDecl = []), o.oneofDecl.push(c.google.protobuf.OneofDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 7:\n                    o.options = c.google.protobuf.MessageOptions.decode(e, e.uint32());\n                    break;\n                case 9:\n                    o.reservedRange && o.reservedRange.length || (o.reservedRange = []), o.reservedRange.push(c.google.protobuf.DescriptorProto.ReservedRange.decode(e, e.uint32()));\n                    break;\n                case 10:\n                    o.reservedName && o.reservedName.length || (o.reservedName = []), o.reservedName.push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, y.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, y.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !u.isString(e.name)) return \"name: string expected\";\n        if (null != e.field && e.hasOwnProperty(\"field\")) {\n            if (!Array.isArray(e.field)) return \"field: array expected\";\n            for(var t = 0; t < e.field.length; ++t)if (n = c.google.protobuf.FieldDescriptorProto.verify(e.field[t])) return \"field.\" + n;\n        }\n        if (null != e.extension && e.hasOwnProperty(\"extension\")) {\n            if (!Array.isArray(e.extension)) return \"extension: array expected\";\n            for(t = 0; t < e.extension.length; ++t)if (n = c.google.protobuf.FieldDescriptorProto.verify(e.extension[t])) return \"extension.\" + n;\n        }\n        if (null != e.nestedType && e.hasOwnProperty(\"nestedType\")) {\n            if (!Array.isArray(e.nestedType)) return \"nestedType: array expected\";\n            for(t = 0; t < e.nestedType.length; ++t)if (n = c.google.protobuf.DescriptorProto.verify(e.nestedType[t])) return \"nestedType.\" + n;\n        }\n        if (null != e.enumType && e.hasOwnProperty(\"enumType\")) {\n            if (!Array.isArray(e.enumType)) return \"enumType: array expected\";\n            for(t = 0; t < e.enumType.length; ++t)if (n = c.google.protobuf.EnumDescriptorProto.verify(e.enumType[t])) return \"enumType.\" + n;\n        }\n        if (null != e.extensionRange && e.hasOwnProperty(\"extensionRange\")) {\n            if (!Array.isArray(e.extensionRange)) return \"extensionRange: array expected\";\n            for(t = 0; t < e.extensionRange.length; ++t)if (n = c.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t])) return \"extensionRange.\" + n;\n        }\n        if (null != e.oneofDecl && e.hasOwnProperty(\"oneofDecl\")) {\n            if (!Array.isArray(e.oneofDecl)) return \"oneofDecl: array expected\";\n            for(t = 0; t < e.oneofDecl.length; ++t)if (n = c.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t])) return \"oneofDecl.\" + n;\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = c.google.protobuf.MessageOptions.verify(e.options))) return \"options.\" + n;\n        if (null != e.reservedRange && e.hasOwnProperty(\"reservedRange\")) {\n            if (!Array.isArray(e.reservedRange)) return \"reservedRange: array expected\";\n            for(var n, t = 0; t < e.reservedRange.length; ++t)if (n = c.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t])) return \"reservedRange.\" + n;\n        }\n        if (null != e.reservedName && e.hasOwnProperty(\"reservedName\")) {\n            if (!Array.isArray(e.reservedName)) return \"reservedName: array expected\";\n            for(t = 0; t < e.reservedName.length; ++t)if (!u.isString(e.reservedName[t])) return \"reservedName: string[] expected\";\n        }\n        return null;\n    }, y.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.DescriptorProto) return e;\n        var t = new c.google.protobuf.DescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), e.field) {\n            if (!Array.isArray(e.field)) throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");\n            t.field = [];\n            for(var n = 0; n < e.field.length; ++n){\n                if (\"object\" != typeof e.field[n]) throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");\n                t.field[n] = c.google.protobuf.FieldDescriptorProto.fromObject(e.field[n]);\n            }\n        }\n        if (e.extension) {\n            if (!Array.isArray(e.extension)) throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");\n            t.extension = [];\n            for(n = 0; n < e.extension.length; ++n){\n                if (\"object\" != typeof e.extension[n]) throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");\n                t.extension[n] = c.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n]);\n            }\n        }\n        if (e.nestedType) {\n            if (!Array.isArray(e.nestedType)) throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");\n            t.nestedType = [];\n            for(n = 0; n < e.nestedType.length; ++n){\n                if (\"object\" != typeof e.nestedType[n]) throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");\n                t.nestedType[n] = c.google.protobuf.DescriptorProto.fromObject(e.nestedType[n]);\n            }\n        }\n        if (e.enumType) {\n            if (!Array.isArray(e.enumType)) throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");\n            t.enumType = [];\n            for(n = 0; n < e.enumType.length; ++n){\n                if (\"object\" != typeof e.enumType[n]) throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");\n                t.enumType[n] = c.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n]);\n            }\n        }\n        if (e.extensionRange) {\n            if (!Array.isArray(e.extensionRange)) throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");\n            t.extensionRange = [];\n            for(n = 0; n < e.extensionRange.length; ++n){\n                if (\"object\" != typeof e.extensionRange[n]) throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");\n                t.extensionRange[n] = c.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n]);\n            }\n        }\n        if (e.oneofDecl) {\n            if (!Array.isArray(e.oneofDecl)) throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");\n            t.oneofDecl = [];\n            for(n = 0; n < e.oneofDecl.length; ++n){\n                if (\"object\" != typeof e.oneofDecl[n]) throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");\n                t.oneofDecl[n] = c.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");\n            t.options = c.google.protobuf.MessageOptions.fromObject(e.options);\n        }\n        if (e.reservedRange) {\n            if (!Array.isArray(e.reservedRange)) throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");\n            t.reservedRange = [];\n            for(n = 0; n < e.reservedRange.length; ++n){\n                if (\"object\" != typeof e.reservedRange[n]) throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");\n                t.reservedRange[n] = c.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n]);\n            }\n        }\n        if (e.reservedName) {\n            if (!Array.isArray(e.reservedName)) throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");\n            t.reservedName = [];\n            for(n = 0; n < e.reservedName.length; ++n)t.reservedName[n] = String(e.reservedName[n]);\n        }\n        return t;\n    }, y.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.field = [], n.nestedType = [], n.enumType = [], n.extensionRange = [], n.extension = [], n.oneofDecl = [], n.reservedRange = [], n.reservedName = []), t.defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), e.field && e.field.length) {\n            n.field = [];\n            for(var o = 0; o < e.field.length; ++o)n.field[o] = c.google.protobuf.FieldDescriptorProto.toObject(e.field[o], t);\n        }\n        if (e.nestedType && e.nestedType.length) {\n            n.nestedType = [];\n            for(o = 0; o < e.nestedType.length; ++o)n.nestedType[o] = c.google.protobuf.DescriptorProto.toObject(e.nestedType[o], t);\n        }\n        if (e.enumType && e.enumType.length) {\n            n.enumType = [];\n            for(o = 0; o < e.enumType.length; ++o)n.enumType[o] = c.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o], t);\n        }\n        if (e.extensionRange && e.extensionRange.length) {\n            n.extensionRange = [];\n            for(o = 0; o < e.extensionRange.length; ++o)n.extensionRange[o] = c.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o], t);\n        }\n        if (e.extension && e.extension.length) {\n            n.extension = [];\n            for(o = 0; o < e.extension.length; ++o)n.extension[o] = c.google.protobuf.FieldDescriptorProto.toObject(e.extension[o], t);\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n.options = c.google.protobuf.MessageOptions.toObject(e.options, t)), e.oneofDecl && e.oneofDecl.length) {\n            n.oneofDecl = [];\n            for(o = 0; o < e.oneofDecl.length; ++o)n.oneofDecl[o] = c.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o], t);\n        }\n        if (e.reservedRange && e.reservedRange.length) {\n            n.reservedRange = [];\n            for(o = 0; o < e.reservedRange.length; ++o)n.reservedRange[o] = c.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o], t);\n        }\n        if (e.reservedName && e.reservedName.length) {\n            n.reservedName = [];\n            for(o = 0; o < e.reservedName.length; ++o)n.reservedName[o] = e.reservedName[o];\n        }\n        return n;\n    }, y.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, y.ExtensionRange = (h.prototype.start = 0, h.prototype.end = 0, h.prototype.options = null, h.create = function(e) {\n        return new h(e);\n    }, h.encode = function(e, t) {\n        return t = t || r.create(), null != e.start && Object.hasOwnProperty.call(e, \"start\") && t.uint32(8).int32(e.start), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(16).int32(e.end), null != e.options && Object.hasOwnProperty.call(e, \"options\") && c.google.protobuf.ExtensionRangeOptions.encode(e.options, t.uint32(26).fork()).ldelim(), t;\n    }, h.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, h.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.DescriptorProto.ExtensionRange; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.start = e.int32();\n                    break;\n                case 2:\n                    o.end = e.int32();\n                    break;\n                case 3:\n                    o.options = c.google.protobuf.ExtensionRangeOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, h.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, h.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.start && e.hasOwnProperty(\"start\") && !u.isInteger(e.start)) return \"start: integer expected\";\n        if (null != e.end && e.hasOwnProperty(\"end\") && !u.isInteger(e.end)) return \"end: integer expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            e = c.google.protobuf.ExtensionRangeOptions.verify(e.options);\n            if (e) return \"options.\" + e;\n        }\n        return null;\n    }, h.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.DescriptorProto.ExtensionRange) return e;\n        var t = new c.google.protobuf.DescriptorProto.ExtensionRange;\n        if (null != e.start && (t.start = 0 | e.start), null != e.end && (t.end = 0 | e.end), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");\n            t.options = c.google.protobuf.ExtensionRangeOptions.fromObject(e.options);\n        }\n        return t;\n    }, h.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.start = 0, n.end = 0, n.options = null), null != e.start && e.hasOwnProperty(\"start\") && (n.start = e.start), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), null != e.options && e.hasOwnProperty(\"options\") && (n.options = c.google.protobuf.ExtensionRangeOptions.toObject(e.options, t)), n;\n    }, h.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, h), y.ReservedRange = (b.prototype.start = 0, b.prototype.end = 0, b.create = function(e) {\n        return new b(e);\n    }, b.encode = function(e, t) {\n        return t = t || r.create(), null != e.start && Object.hasOwnProperty.call(e, \"start\") && t.uint32(8).int32(e.start), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(16).int32(e.end), t;\n    }, b.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, b.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.DescriptorProto.ReservedRange; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.start = e.int32();\n                    break;\n                case 2:\n                    o.end = e.int32();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, b.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, b.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.start && e.hasOwnProperty(\"start\") && !u.isInteger(e.start) ? \"start: integer expected\" : null != e.end && e.hasOwnProperty(\"end\") && !u.isInteger(e.end) ? \"end: integer expected\" : null;\n    }, b.fromObject = function(e) {\n        var t;\n        return e instanceof c.google.protobuf.DescriptorProto.ReservedRange ? e : (t = new c.google.protobuf.DescriptorProto.ReservedRange, null != e.start && (t.start = 0 | e.start), null != e.end && (t.end = 0 | e.end), t);\n    }, b.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.start = 0, n.end = 0), null != e.start && e.hasOwnProperty(\"start\") && (n.start = e.start), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), n;\n    }, b.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, b), y), n.ExtensionRangeOptions = (U.prototype.uninterpretedOption = u.emptyArray, U.create = function(e) {\n        return new U(e);\n    }, U.encode = function(e, t) {\n        if (t = t || r.create(), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, U.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, U.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.ExtensionRangeOptions; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 999 ? (o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, U.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, U.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, U.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.ExtensionRangeOptions) return e;\n        var t = new c.google.protobuf.ExtensionRangeOptions;\n        if (e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, U.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, U.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, U), n.FieldDescriptorProto = (O.prototype.name = \"\", O.prototype.number = 0, O.prototype.label = 1, O.prototype.type = 1, O.prototype.typeName = \"\", O.prototype.extendee = \"\", O.prototype.defaultValue = \"\", O.prototype.oneofIndex = 0, O.prototype.jsonName = \"\", O.prototype.options = null, O.prototype.proto3Optional = !1, O.create = function(e) {\n        return new O(e);\n    }, O.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.extendee && Object.hasOwnProperty.call(e, \"extendee\") && t.uint32(18).string(e.extendee), null != e.number && Object.hasOwnProperty.call(e, \"number\") && t.uint32(24).int32(e.number), null != e.label && Object.hasOwnProperty.call(e, \"label\") && t.uint32(32).int32(e.label), null != e.type && Object.hasOwnProperty.call(e, \"type\") && t.uint32(40).int32(e.type), null != e.typeName && Object.hasOwnProperty.call(e, \"typeName\") && t.uint32(50).string(e.typeName), null != e.defaultValue && Object.hasOwnProperty.call(e, \"defaultValue\") && t.uint32(58).string(e.defaultValue), null != e.options && Object.hasOwnProperty.call(e, \"options\") && c.google.protobuf.FieldOptions.encode(e.options, t.uint32(66).fork()).ldelim(), null != e.oneofIndex && Object.hasOwnProperty.call(e, \"oneofIndex\") && t.uint32(72).int32(e.oneofIndex), null != e.jsonName && Object.hasOwnProperty.call(e, \"jsonName\") && t.uint32(82).string(e.jsonName), null != e.proto3Optional && Object.hasOwnProperty.call(e, \"proto3Optional\") && t.uint32(136).bool(e.proto3Optional), t;\n    }, O.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, O.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.FieldDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 3:\n                    o.number = e.int32();\n                    break;\n                case 4:\n                    o.label = e.int32();\n                    break;\n                case 5:\n                    o.type = e.int32();\n                    break;\n                case 6:\n                    o.typeName = e.string();\n                    break;\n                case 2:\n                    o.extendee = e.string();\n                    break;\n                case 7:\n                    o.defaultValue = e.string();\n                    break;\n                case 9:\n                    o.oneofIndex = e.int32();\n                    break;\n                case 10:\n                    o.jsonName = e.string();\n                    break;\n                case 8:\n                    o.options = c.google.protobuf.FieldOptions.decode(e, e.uint32());\n                    break;\n                case 17:\n                    o.proto3Optional = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, O.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, O.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !u.isString(e.name)) return \"name: string expected\";\n        if (null != e.number && e.hasOwnProperty(\"number\") && !u.isInteger(e.number)) return \"number: integer expected\";\n        if (null != e.label && e.hasOwnProperty(\"label\")) switch(e.label){\n            default:\n                return \"label: enum value expected\";\n            case 1:\n            case 2:\n            case 3:\n        }\n        if (null != e.type && e.hasOwnProperty(\"type\")) switch(e.type){\n            default:\n                return \"type: enum value expected\";\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n            case 16:\n            case 17:\n            case 18:\n        }\n        if (null != e.typeName && e.hasOwnProperty(\"typeName\") && !u.isString(e.typeName)) return \"typeName: string expected\";\n        if (null != e.extendee && e.hasOwnProperty(\"extendee\") && !u.isString(e.extendee)) return \"extendee: string expected\";\n        if (null != e.defaultValue && e.hasOwnProperty(\"defaultValue\") && !u.isString(e.defaultValue)) return \"defaultValue: string expected\";\n        if (null != e.oneofIndex && e.hasOwnProperty(\"oneofIndex\") && !u.isInteger(e.oneofIndex)) return \"oneofIndex: integer expected\";\n        if (null != e.jsonName && e.hasOwnProperty(\"jsonName\") && !u.isString(e.jsonName)) return \"jsonName: string expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            var t = c.google.protobuf.FieldOptions.verify(e.options);\n            if (t) return \"options.\" + t;\n        }\n        return null != e.proto3Optional && e.hasOwnProperty(\"proto3Optional\") && \"boolean\" != typeof e.proto3Optional ? \"proto3Optional: boolean expected\" : null;\n    }, O.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.FieldDescriptorProto) return e;\n        var t = new c.google.protobuf.FieldDescriptorProto;\n        switch(null != e.name && (t.name = String(e.name)), null != e.number && (t.number = 0 | e.number), e.label){\n            case \"LABEL_OPTIONAL\":\n            case 1:\n                t.label = 1;\n                break;\n            case \"LABEL_REQUIRED\":\n            case 2:\n                t.label = 2;\n                break;\n            case \"LABEL_REPEATED\":\n            case 3:\n                t.label = 3;\n        }\n        switch(e.type){\n            case \"TYPE_DOUBLE\":\n            case 1:\n                t.type = 1;\n                break;\n            case \"TYPE_FLOAT\":\n            case 2:\n                t.type = 2;\n                break;\n            case \"TYPE_INT64\":\n            case 3:\n                t.type = 3;\n                break;\n            case \"TYPE_UINT64\":\n            case 4:\n                t.type = 4;\n                break;\n            case \"TYPE_INT32\":\n            case 5:\n                t.type = 5;\n                break;\n            case \"TYPE_FIXED64\":\n            case 6:\n                t.type = 6;\n                break;\n            case \"TYPE_FIXED32\":\n            case 7:\n                t.type = 7;\n                break;\n            case \"TYPE_BOOL\":\n            case 8:\n                t.type = 8;\n                break;\n            case \"TYPE_STRING\":\n            case 9:\n                t.type = 9;\n                break;\n            case \"TYPE_GROUP\":\n            case 10:\n                t.type = 10;\n                break;\n            case \"TYPE_MESSAGE\":\n            case 11:\n                t.type = 11;\n                break;\n            case \"TYPE_BYTES\":\n            case 12:\n                t.type = 12;\n                break;\n            case \"TYPE_UINT32\":\n            case 13:\n                t.type = 13;\n                break;\n            case \"TYPE_ENUM\":\n            case 14:\n                t.type = 14;\n                break;\n            case \"TYPE_SFIXED32\":\n            case 15:\n                t.type = 15;\n                break;\n            case \"TYPE_SFIXED64\":\n            case 16:\n                t.type = 16;\n                break;\n            case \"TYPE_SINT32\":\n            case 17:\n                t.type = 17;\n                break;\n            case \"TYPE_SINT64\":\n            case 18:\n                t.type = 18;\n        }\n        if (null != e.typeName && (t.typeName = String(e.typeName)), null != e.extendee && (t.extendee = String(e.extendee)), null != e.defaultValue && (t.defaultValue = String(e.defaultValue)), null != e.oneofIndex && (t.oneofIndex = 0 | e.oneofIndex), null != e.jsonName && (t.jsonName = String(e.jsonName)), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");\n            t.options = c.google.protobuf.FieldOptions.fromObject(e.options);\n        }\n        return null != e.proto3Optional && (t.proto3Optional = Boolean(e.proto3Optional)), t;\n    }, O.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.extendee = \"\", n.number = 0, n.label = t.enums === String ? \"LABEL_OPTIONAL\" : 1, n.type = t.enums === String ? \"TYPE_DOUBLE\" : 1, n.typeName = \"\", n.defaultValue = \"\", n.options = null, n.oneofIndex = 0, n.jsonName = \"\", n.proto3Optional = !1), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.extendee && e.hasOwnProperty(\"extendee\") && (n.extendee = e.extendee), null != e.number && e.hasOwnProperty(\"number\") && (n.number = e.number), null != e.label && e.hasOwnProperty(\"label\") && (n.label = t.enums === String ? c.google.protobuf.FieldDescriptorProto.Label[e.label] : e.label), null != e.type && e.hasOwnProperty(\"type\") && (n.type = t.enums === String ? c.google.protobuf.FieldDescriptorProto.Type[e.type] : e.type), null != e.typeName && e.hasOwnProperty(\"typeName\") && (n.typeName = e.typeName), null != e.defaultValue && e.hasOwnProperty(\"defaultValue\") && (n.defaultValue = e.defaultValue), null != e.options && e.hasOwnProperty(\"options\") && (n.options = c.google.protobuf.FieldOptions.toObject(e.options, t)), null != e.oneofIndex && e.hasOwnProperty(\"oneofIndex\") && (n.oneofIndex = e.oneofIndex), null != e.jsonName && e.hasOwnProperty(\"jsonName\") && (n.jsonName = e.jsonName), null != e.proto3Optional && e.hasOwnProperty(\"proto3Optional\") && (n.proto3Optional = e.proto3Optional), n;\n    }, O.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, O.Type = (e = {}, (t = Object.create(e))[e[1] = \"TYPE_DOUBLE\"] = 1, t[e[2] = \"TYPE_FLOAT\"] = 2, t[e[3] = \"TYPE_INT64\"] = 3, t[e[4] = \"TYPE_UINT64\"] = 4, t[e[5] = \"TYPE_INT32\"] = 5, t[e[6] = \"TYPE_FIXED64\"] = 6, t[e[7] = \"TYPE_FIXED32\"] = 7, t[e[8] = \"TYPE_BOOL\"] = 8, t[e[9] = \"TYPE_STRING\"] = 9, t[e[10] = \"TYPE_GROUP\"] = 10, t[e[11] = \"TYPE_MESSAGE\"] = 11, t[e[12] = \"TYPE_BYTES\"] = 12, t[e[13] = \"TYPE_UINT32\"] = 13, t[e[14] = \"TYPE_ENUM\"] = 14, t[e[15] = \"TYPE_SFIXED32\"] = 15, t[e[16] = \"TYPE_SFIXED64\"] = 16, t[e[17] = \"TYPE_SINT32\"] = 17, t[e[18] = \"TYPE_SINT64\"] = 18, t), O.Label = (e = {}, (t = Object.create(e))[e[1] = \"LABEL_OPTIONAL\"] = 1, t[e[2] = \"LABEL_REQUIRED\"] = 2, t[e[3] = \"LABEL_REPEATED\"] = 3, t), O), n.OneofDescriptorProto = (m.prototype.name = \"\", m.prototype.options = null, m.create = function(e) {\n        return new m(e);\n    }, m.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.options && Object.hasOwnProperty.call(e, \"options\") && c.google.protobuf.OneofOptions.encode(e.options, t.uint32(18).fork()).ldelim(), t;\n    }, m.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, m.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.OneofDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.options = c.google.protobuf.OneofOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, m.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, m.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !u.isString(e.name)) return \"name: string expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            e = c.google.protobuf.OneofOptions.verify(e.options);\n            if (e) return \"options.\" + e;\n        }\n        return null;\n    }, m.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.OneofDescriptorProto) return e;\n        var t = new c.google.protobuf.OneofDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");\n            t.options = c.google.protobuf.OneofOptions.fromObject(e.options);\n        }\n        return t;\n    }, m.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.options && e.hasOwnProperty(\"options\") && (n.options = c.google.protobuf.OneofOptions.toObject(e.options, t)), n;\n    }, m.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, m), n.EnumDescriptorProto = (v.prototype.name = \"\", v.prototype.value = u.emptyArray, v.prototype.options = null, v.prototype.reservedRange = u.emptyArray, v.prototype.reservedName = u.emptyArray, v.create = function(e) {\n        return new v(e);\n    }, v.encode = function(e, t) {\n        if (t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.value && e.value.length) for(var n = 0; n < e.value.length; ++n)c.google.protobuf.EnumValueDescriptorProto.encode(e.value[n], t.uint32(18).fork()).ldelim();\n        if (null != e.options && Object.hasOwnProperty.call(e, \"options\") && c.google.protobuf.EnumOptions.encode(e.options, t.uint32(26).fork()).ldelim(), null != e.reservedRange && e.reservedRange.length) for(n = 0; n < e.reservedRange.length; ++n)c.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n], t.uint32(34).fork()).ldelim();\n        if (null != e.reservedName && e.reservedName.length) for(n = 0; n < e.reservedName.length; ++n)t.uint32(42).string(e.reservedName[n]);\n        return t;\n    }, v.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, v.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.EnumDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.value && o.value.length || (o.value = []), o.value.push(c.google.protobuf.EnumValueDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.options = c.google.protobuf.EnumOptions.decode(e, e.uint32());\n                    break;\n                case 4:\n                    o.reservedRange && o.reservedRange.length || (o.reservedRange = []), o.reservedRange.push(c.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e, e.uint32()));\n                    break;\n                case 5:\n                    o.reservedName && o.reservedName.length || (o.reservedName = []), o.reservedName.push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, v.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, v.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !u.isString(e.name)) return \"name: string expected\";\n        if (null != e.value && e.hasOwnProperty(\"value\")) {\n            if (!Array.isArray(e.value)) return \"value: array expected\";\n            for(var t = 0; t < e.value.length; ++t)if (n = c.google.protobuf.EnumValueDescriptorProto.verify(e.value[t])) return \"value.\" + n;\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = c.google.protobuf.EnumOptions.verify(e.options))) return \"options.\" + n;\n        if (null != e.reservedRange && e.hasOwnProperty(\"reservedRange\")) {\n            if (!Array.isArray(e.reservedRange)) return \"reservedRange: array expected\";\n            for(var n, t = 0; t < e.reservedRange.length; ++t)if (n = c.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t])) return \"reservedRange.\" + n;\n        }\n        if (null != e.reservedName && e.hasOwnProperty(\"reservedName\")) {\n            if (!Array.isArray(e.reservedName)) return \"reservedName: array expected\";\n            for(t = 0; t < e.reservedName.length; ++t)if (!u.isString(e.reservedName[t])) return \"reservedName: string[] expected\";\n        }\n        return null;\n    }, v.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.EnumDescriptorProto) return e;\n        var t = new c.google.protobuf.EnumDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), e.value) {\n            if (!Array.isArray(e.value)) throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");\n            t.value = [];\n            for(var n = 0; n < e.value.length; ++n){\n                if (\"object\" != typeof e.value[n]) throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");\n                t.value[n] = c.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");\n            t.options = c.google.protobuf.EnumOptions.fromObject(e.options);\n        }\n        if (e.reservedRange) {\n            if (!Array.isArray(e.reservedRange)) throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");\n            t.reservedRange = [];\n            for(n = 0; n < e.reservedRange.length; ++n){\n                if (\"object\" != typeof e.reservedRange[n]) throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");\n                t.reservedRange[n] = c.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n]);\n            }\n        }\n        if (e.reservedName) {\n            if (!Array.isArray(e.reservedName)) throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");\n            t.reservedName = [];\n            for(n = 0; n < e.reservedName.length; ++n)t.reservedName[n] = String(e.reservedName[n]);\n        }\n        return t;\n    }, v.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.value = [], n.reservedRange = [], n.reservedName = []), t.defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), e.value && e.value.length) {\n            n.value = [];\n            for(var o = 0; o < e.value.length; ++o)n.value[o] = c.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o], t);\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n.options = c.google.protobuf.EnumOptions.toObject(e.options, t)), e.reservedRange && e.reservedRange.length) {\n            n.reservedRange = [];\n            for(o = 0; o < e.reservedRange.length; ++o)n.reservedRange[o] = c.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o], t);\n        }\n        if (e.reservedName && e.reservedName.length) {\n            n.reservedName = [];\n            for(o = 0; o < e.reservedName.length; ++o)n.reservedName[o] = e.reservedName[o];\n        }\n        return n;\n    }, v.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, v.EnumReservedRange = (P.prototype.start = 0, P.prototype.end = 0, P.create = function(e) {\n        return new P(e);\n    }, P.encode = function(e, t) {\n        return t = t || r.create(), null != e.start && Object.hasOwnProperty.call(e, \"start\") && t.uint32(8).int32(e.start), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(16).int32(e.end), t;\n    }, P.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, P.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.EnumDescriptorProto.EnumReservedRange; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.start = e.int32();\n                    break;\n                case 2:\n                    o.end = e.int32();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, P.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, P.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.start && e.hasOwnProperty(\"start\") && !u.isInteger(e.start) ? \"start: integer expected\" : null != e.end && e.hasOwnProperty(\"end\") && !u.isInteger(e.end) ? \"end: integer expected\" : null;\n    }, P.fromObject = function(e) {\n        var t;\n        return e instanceof c.google.protobuf.EnumDescriptorProto.EnumReservedRange ? e : (t = new c.google.protobuf.EnumDescriptorProto.EnumReservedRange, null != e.start && (t.start = 0 | e.start), null != e.end && (t.end = 0 | e.end), t);\n    }, P.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.start = 0, n.end = 0), null != e.start && e.hasOwnProperty(\"start\") && (n.start = e.start), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), n;\n    }, P.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, P), v), n.EnumValueDescriptorProto = (w.prototype.name = \"\", w.prototype.number = 0, w.prototype.options = null, w.create = function(e) {\n        return new w(e);\n    }, w.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.number && Object.hasOwnProperty.call(e, \"number\") && t.uint32(16).int32(e.number), null != e.options && Object.hasOwnProperty.call(e, \"options\") && c.google.protobuf.EnumValueOptions.encode(e.options, t.uint32(26).fork()).ldelim(), t;\n    }, w.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, w.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.EnumValueDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.number = e.int32();\n                    break;\n                case 3:\n                    o.options = c.google.protobuf.EnumValueOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, w.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, w.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !u.isString(e.name)) return \"name: string expected\";\n        if (null != e.number && e.hasOwnProperty(\"number\") && !u.isInteger(e.number)) return \"number: integer expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            e = c.google.protobuf.EnumValueOptions.verify(e.options);\n            if (e) return \"options.\" + e;\n        }\n        return null;\n    }, w.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.EnumValueDescriptorProto) return e;\n        var t = new c.google.protobuf.EnumValueDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.number && (t.number = 0 | e.number), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");\n            t.options = c.google.protobuf.EnumValueOptions.fromObject(e.options);\n        }\n        return t;\n    }, w.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.number = 0, n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.number && e.hasOwnProperty(\"number\") && (n.number = e.number), null != e.options && e.hasOwnProperty(\"options\") && (n.options = c.google.protobuf.EnumValueOptions.toObject(e.options, t)), n;\n    }, w.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, w), n.ServiceDescriptorProto = (j.prototype.name = \"\", j.prototype.method = u.emptyArray, j.prototype.options = null, j.create = function(e) {\n        return new j(e);\n    }, j.encode = function(e, t) {\n        if (t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.method && e.method.length) for(var n = 0; n < e.method.length; ++n)c.google.protobuf.MethodDescriptorProto.encode(e.method[n], t.uint32(18).fork()).ldelim();\n        return null != e.options && Object.hasOwnProperty.call(e, \"options\") && c.google.protobuf.ServiceOptions.encode(e.options, t.uint32(26).fork()).ldelim(), t;\n    }, j.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, j.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.ServiceDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.method && o.method.length || (o.method = []), o.method.push(c.google.protobuf.MethodDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.options = c.google.protobuf.ServiceOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, j.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, j.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !u.isString(e.name)) return \"name: string expected\";\n        if (null != e.method && e.hasOwnProperty(\"method\")) {\n            if (!Array.isArray(e.method)) return \"method: array expected\";\n            for(var t = 0; t < e.method.length; ++t)if (n = c.google.protobuf.MethodDescriptorProto.verify(e.method[t])) return \"method.\" + n;\n        }\n        var n;\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = c.google.protobuf.ServiceOptions.verify(e.options))) return \"options.\" + n;\n        return null;\n    }, j.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.ServiceDescriptorProto) return e;\n        var t = new c.google.protobuf.ServiceDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), e.method) {\n            if (!Array.isArray(e.method)) throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");\n            t.method = [];\n            for(var n = 0; n < e.method.length; ++n){\n                if (\"object\" != typeof e.method[n]) throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");\n                t.method[n] = c.google.protobuf.MethodDescriptorProto.fromObject(e.method[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");\n            t.options = c.google.protobuf.ServiceOptions.fromObject(e.options);\n        }\n        return t;\n    }, j.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.method = []), t.defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), e.method && e.method.length) {\n            n.method = [];\n            for(var o = 0; o < e.method.length; ++o)n.method[o] = c.google.protobuf.MethodDescriptorProto.toObject(e.method[o], t);\n        }\n        return null != e.options && e.hasOwnProperty(\"options\") && (n.options = c.google.protobuf.ServiceOptions.toObject(e.options, t)), n;\n    }, j.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, j), n.MethodDescriptorProto = (x.prototype.name = \"\", x.prototype.inputType = \"\", x.prototype.outputType = \"\", x.prototype.options = null, x.prototype.clientStreaming = !1, x.prototype.serverStreaming = !1, x.create = function(e) {\n        return new x(e);\n    }, x.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.inputType && Object.hasOwnProperty.call(e, \"inputType\") && t.uint32(18).string(e.inputType), null != e.outputType && Object.hasOwnProperty.call(e, \"outputType\") && t.uint32(26).string(e.outputType), null != e.options && Object.hasOwnProperty.call(e, \"options\") && c.google.protobuf.MethodOptions.encode(e.options, t.uint32(34).fork()).ldelim(), null != e.clientStreaming && Object.hasOwnProperty.call(e, \"clientStreaming\") && t.uint32(40).bool(e.clientStreaming), null != e.serverStreaming && Object.hasOwnProperty.call(e, \"serverStreaming\") && t.uint32(48).bool(e.serverStreaming), t;\n    }, x.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, x.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.MethodDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.inputType = e.string();\n                    break;\n                case 3:\n                    o.outputType = e.string();\n                    break;\n                case 4:\n                    o.options = c.google.protobuf.MethodOptions.decode(e, e.uint32());\n                    break;\n                case 5:\n                    o.clientStreaming = e.bool();\n                    break;\n                case 6:\n                    o.serverStreaming = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, x.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, x.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !u.isString(e.name)) return \"name: string expected\";\n        if (null != e.inputType && e.hasOwnProperty(\"inputType\") && !u.isString(e.inputType)) return \"inputType: string expected\";\n        if (null != e.outputType && e.hasOwnProperty(\"outputType\") && !u.isString(e.outputType)) return \"outputType: string expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            var t = c.google.protobuf.MethodOptions.verify(e.options);\n            if (t) return \"options.\" + t;\n        }\n        return null != e.clientStreaming && e.hasOwnProperty(\"clientStreaming\") && \"boolean\" != typeof e.clientStreaming ? \"clientStreaming: boolean expected\" : null != e.serverStreaming && e.hasOwnProperty(\"serverStreaming\") && \"boolean\" != typeof e.serverStreaming ? \"serverStreaming: boolean expected\" : null;\n    }, x.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.MethodDescriptorProto) return e;\n        var t = new c.google.protobuf.MethodDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.inputType && (t.inputType = String(e.inputType)), null != e.outputType && (t.outputType = String(e.outputType)), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");\n            t.options = c.google.protobuf.MethodOptions.fromObject(e.options);\n        }\n        return null != e.clientStreaming && (t.clientStreaming = Boolean(e.clientStreaming)), null != e.serverStreaming && (t.serverStreaming = Boolean(e.serverStreaming)), t;\n    }, x.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.inputType = \"\", n.outputType = \"\", n.options = null, n.clientStreaming = !1, n.serverStreaming = !1), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.inputType && e.hasOwnProperty(\"inputType\") && (n.inputType = e.inputType), null != e.outputType && e.hasOwnProperty(\"outputType\") && (n.outputType = e.outputType), null != e.options && e.hasOwnProperty(\"options\") && (n.options = c.google.protobuf.MethodOptions.toObject(e.options, t)), null != e.clientStreaming && e.hasOwnProperty(\"clientStreaming\") && (n.clientStreaming = e.clientStreaming), null != e.serverStreaming && e.hasOwnProperty(\"serverStreaming\") && (n.serverStreaming = e.serverStreaming), n;\n    }, x.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, x), n.FileOptions = (S.prototype.javaPackage = \"\", S.prototype.javaOuterClassname = \"\", S.prototype.javaMultipleFiles = !1, S.prototype.javaGenerateEqualsAndHash = !1, S.prototype.javaStringCheckUtf8 = !1, S.prototype.optimizeFor = 1, S.prototype.goPackage = \"\", S.prototype.ccGenericServices = !1, S.prototype.javaGenericServices = !1, S.prototype.pyGenericServices = !1, S.prototype.phpGenericServices = !1, S.prototype.deprecated = !1, S.prototype.ccEnableArenas = !0, S.prototype.objcClassPrefix = \"\", S.prototype.csharpNamespace = \"\", S.prototype.swiftPrefix = \"\", S.prototype.phpClassPrefix = \"\", S.prototype.phpNamespace = \"\", S.prototype.phpMetadataNamespace = \"\", S.prototype.rubyPackage = \"\", S.prototype.uninterpretedOption = u.emptyArray, S.create = function(e) {\n        return new S(e);\n    }, S.encode = function(e, t) {\n        if (t = t || r.create(), null != e.javaPackage && Object.hasOwnProperty.call(e, \"javaPackage\") && t.uint32(10).string(e.javaPackage), null != e.javaOuterClassname && Object.hasOwnProperty.call(e, \"javaOuterClassname\") && t.uint32(66).string(e.javaOuterClassname), null != e.optimizeFor && Object.hasOwnProperty.call(e, \"optimizeFor\") && t.uint32(72).int32(e.optimizeFor), null != e.javaMultipleFiles && Object.hasOwnProperty.call(e, \"javaMultipleFiles\") && t.uint32(80).bool(e.javaMultipleFiles), null != e.goPackage && Object.hasOwnProperty.call(e, \"goPackage\") && t.uint32(90).string(e.goPackage), null != e.ccGenericServices && Object.hasOwnProperty.call(e, \"ccGenericServices\") && t.uint32(128).bool(e.ccGenericServices), null != e.javaGenericServices && Object.hasOwnProperty.call(e, \"javaGenericServices\") && t.uint32(136).bool(e.javaGenericServices), null != e.pyGenericServices && Object.hasOwnProperty.call(e, \"pyGenericServices\") && t.uint32(144).bool(e.pyGenericServices), null != e.javaGenerateEqualsAndHash && Object.hasOwnProperty.call(e, \"javaGenerateEqualsAndHash\") && t.uint32(160).bool(e.javaGenerateEqualsAndHash), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(184).bool(e.deprecated), null != e.javaStringCheckUtf8 && Object.hasOwnProperty.call(e, \"javaStringCheckUtf8\") && t.uint32(216).bool(e.javaStringCheckUtf8), null != e.ccEnableArenas && Object.hasOwnProperty.call(e, \"ccEnableArenas\") && t.uint32(248).bool(e.ccEnableArenas), null != e.objcClassPrefix && Object.hasOwnProperty.call(e, \"objcClassPrefix\") && t.uint32(290).string(e.objcClassPrefix), null != e.csharpNamespace && Object.hasOwnProperty.call(e, \"csharpNamespace\") && t.uint32(298).string(e.csharpNamespace), null != e.swiftPrefix && Object.hasOwnProperty.call(e, \"swiftPrefix\") && t.uint32(314).string(e.swiftPrefix), null != e.phpClassPrefix && Object.hasOwnProperty.call(e, \"phpClassPrefix\") && t.uint32(322).string(e.phpClassPrefix), null != e.phpNamespace && Object.hasOwnProperty.call(e, \"phpNamespace\") && t.uint32(330).string(e.phpNamespace), null != e.phpGenericServices && Object.hasOwnProperty.call(e, \"phpGenericServices\") && t.uint32(336).bool(e.phpGenericServices), null != e.phpMetadataNamespace && Object.hasOwnProperty.call(e, \"phpMetadataNamespace\") && t.uint32(354).string(e.phpMetadataNamespace), null != e.rubyPackage && Object.hasOwnProperty.call(e, \"rubyPackage\") && t.uint32(362).string(e.rubyPackage), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, S.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, S.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.FileOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.javaPackage = e.string();\n                    break;\n                case 8:\n                    o.javaOuterClassname = e.string();\n                    break;\n                case 10:\n                    o.javaMultipleFiles = e.bool();\n                    break;\n                case 20:\n                    o.javaGenerateEqualsAndHash = e.bool();\n                    break;\n                case 27:\n                    o.javaStringCheckUtf8 = e.bool();\n                    break;\n                case 9:\n                    o.optimizeFor = e.int32();\n                    break;\n                case 11:\n                    o.goPackage = e.string();\n                    break;\n                case 16:\n                    o.ccGenericServices = e.bool();\n                    break;\n                case 17:\n                    o.javaGenericServices = e.bool();\n                    break;\n                case 18:\n                    o.pyGenericServices = e.bool();\n                    break;\n                case 42:\n                    o.phpGenericServices = e.bool();\n                    break;\n                case 23:\n                    o.deprecated = e.bool();\n                    break;\n                case 31:\n                    o.ccEnableArenas = e.bool();\n                    break;\n                case 36:\n                    o.objcClassPrefix = e.string();\n                    break;\n                case 37:\n                    o.csharpNamespace = e.string();\n                    break;\n                case 39:\n                    o.swiftPrefix = e.string();\n                    break;\n                case 40:\n                    o.phpClassPrefix = e.string();\n                    break;\n                case 41:\n                    o.phpNamespace = e.string();\n                    break;\n                case 44:\n                    o.phpMetadataNamespace = e.string();\n                    break;\n                case 45:\n                    o.rubyPackage = e.string();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, S.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, S.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.javaPackage && e.hasOwnProperty(\"javaPackage\") && !u.isString(e.javaPackage)) return \"javaPackage: string expected\";\n        if (null != e.javaOuterClassname && e.hasOwnProperty(\"javaOuterClassname\") && !u.isString(e.javaOuterClassname)) return \"javaOuterClassname: string expected\";\n        if (null != e.javaMultipleFiles && e.hasOwnProperty(\"javaMultipleFiles\") && \"boolean\" != typeof e.javaMultipleFiles) return \"javaMultipleFiles: boolean expected\";\n        if (null != e.javaGenerateEqualsAndHash && e.hasOwnProperty(\"javaGenerateEqualsAndHash\") && \"boolean\" != typeof e.javaGenerateEqualsAndHash) return \"javaGenerateEqualsAndHash: boolean expected\";\n        if (null != e.javaStringCheckUtf8 && e.hasOwnProperty(\"javaStringCheckUtf8\") && \"boolean\" != typeof e.javaStringCheckUtf8) return \"javaStringCheckUtf8: boolean expected\";\n        if (null != e.optimizeFor && e.hasOwnProperty(\"optimizeFor\")) switch(e.optimizeFor){\n            default:\n                return \"optimizeFor: enum value expected\";\n            case 1:\n            case 2:\n            case 3:\n        }\n        if (null != e.goPackage && e.hasOwnProperty(\"goPackage\") && !u.isString(e.goPackage)) return \"goPackage: string expected\";\n        if (null != e.ccGenericServices && e.hasOwnProperty(\"ccGenericServices\") && \"boolean\" != typeof e.ccGenericServices) return \"ccGenericServices: boolean expected\";\n        if (null != e.javaGenericServices && e.hasOwnProperty(\"javaGenericServices\") && \"boolean\" != typeof e.javaGenericServices) return \"javaGenericServices: boolean expected\";\n        if (null != e.pyGenericServices && e.hasOwnProperty(\"pyGenericServices\") && \"boolean\" != typeof e.pyGenericServices) return \"pyGenericServices: boolean expected\";\n        if (null != e.phpGenericServices && e.hasOwnProperty(\"phpGenericServices\") && \"boolean\" != typeof e.phpGenericServices) return \"phpGenericServices: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.ccEnableArenas && e.hasOwnProperty(\"ccEnableArenas\") && \"boolean\" != typeof e.ccEnableArenas) return \"ccEnableArenas: boolean expected\";\n        if (null != e.objcClassPrefix && e.hasOwnProperty(\"objcClassPrefix\") && !u.isString(e.objcClassPrefix)) return \"objcClassPrefix: string expected\";\n        if (null != e.csharpNamespace && e.hasOwnProperty(\"csharpNamespace\") && !u.isString(e.csharpNamespace)) return \"csharpNamespace: string expected\";\n        if (null != e.swiftPrefix && e.hasOwnProperty(\"swiftPrefix\") && !u.isString(e.swiftPrefix)) return \"swiftPrefix: string expected\";\n        if (null != e.phpClassPrefix && e.hasOwnProperty(\"phpClassPrefix\") && !u.isString(e.phpClassPrefix)) return \"phpClassPrefix: string expected\";\n        if (null != e.phpNamespace && e.hasOwnProperty(\"phpNamespace\") && !u.isString(e.phpNamespace)) return \"phpNamespace: string expected\";\n        if (null != e.phpMetadataNamespace && e.hasOwnProperty(\"phpMetadataNamespace\") && !u.isString(e.phpMetadataNamespace)) return \"phpMetadataNamespace: string expected\";\n        if (null != e.rubyPackage && e.hasOwnProperty(\"rubyPackage\") && !u.isString(e.rubyPackage)) return \"rubyPackage: string expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, S.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.FileOptions) return e;\n        var t = new c.google.protobuf.FileOptions;\n        switch(null != e.javaPackage && (t.javaPackage = String(e.javaPackage)), null != e.javaOuterClassname && (t.javaOuterClassname = String(e.javaOuterClassname)), null != e.javaMultipleFiles && (t.javaMultipleFiles = Boolean(e.javaMultipleFiles)), null != e.javaGenerateEqualsAndHash && (t.javaGenerateEqualsAndHash = Boolean(e.javaGenerateEqualsAndHash)), null != e.javaStringCheckUtf8 && (t.javaStringCheckUtf8 = Boolean(e.javaStringCheckUtf8)), e.optimizeFor){\n            case \"SPEED\":\n            case 1:\n                t.optimizeFor = 1;\n                break;\n            case \"CODE_SIZE\":\n            case 2:\n                t.optimizeFor = 2;\n                break;\n            case \"LITE_RUNTIME\":\n            case 3:\n                t.optimizeFor = 3;\n        }\n        if (null != e.goPackage && (t.goPackage = String(e.goPackage)), null != e.ccGenericServices && (t.ccGenericServices = Boolean(e.ccGenericServices)), null != e.javaGenericServices && (t.javaGenericServices = Boolean(e.javaGenericServices)), null != e.pyGenericServices && (t.pyGenericServices = Boolean(e.pyGenericServices)), null != e.phpGenericServices && (t.phpGenericServices = Boolean(e.phpGenericServices)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), null != e.ccEnableArenas && (t.ccEnableArenas = Boolean(e.ccEnableArenas)), null != e.objcClassPrefix && (t.objcClassPrefix = String(e.objcClassPrefix)), null != e.csharpNamespace && (t.csharpNamespace = String(e.csharpNamespace)), null != e.swiftPrefix && (t.swiftPrefix = String(e.swiftPrefix)), null != e.phpClassPrefix && (t.phpClassPrefix = String(e.phpClassPrefix)), null != e.phpNamespace && (t.phpNamespace = String(e.phpNamespace)), null != e.phpMetadataNamespace && (t.phpMetadataNamespace = String(e.phpMetadataNamespace)), null != e.rubyPackage && (t.rubyPackage = String(e.rubyPackage)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, S.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.javaPackage = \"\", n.javaOuterClassname = \"\", n.optimizeFor = t.enums === String ? \"SPEED\" : 1, n.javaMultipleFiles = !1, n.goPackage = \"\", n.ccGenericServices = !1, n.javaGenericServices = !1, n.pyGenericServices = !1, n.javaGenerateEqualsAndHash = !1, n.deprecated = !1, n.javaStringCheckUtf8 = !1, n.ccEnableArenas = !0, n.objcClassPrefix = \"\", n.csharpNamespace = \"\", n.swiftPrefix = \"\", n.phpClassPrefix = \"\", n.phpNamespace = \"\", n.phpGenericServices = !1, n.phpMetadataNamespace = \"\", n.rubyPackage = \"\"), null != e.javaPackage && e.hasOwnProperty(\"javaPackage\") && (n.javaPackage = e.javaPackage), null != e.javaOuterClassname && e.hasOwnProperty(\"javaOuterClassname\") && (n.javaOuterClassname = e.javaOuterClassname), null != e.optimizeFor && e.hasOwnProperty(\"optimizeFor\") && (n.optimizeFor = t.enums === String ? c.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor] : e.optimizeFor), null != e.javaMultipleFiles && e.hasOwnProperty(\"javaMultipleFiles\") && (n.javaMultipleFiles = e.javaMultipleFiles), null != e.goPackage && e.hasOwnProperty(\"goPackage\") && (n.goPackage = e.goPackage), null != e.ccGenericServices && e.hasOwnProperty(\"ccGenericServices\") && (n.ccGenericServices = e.ccGenericServices), null != e.javaGenericServices && e.hasOwnProperty(\"javaGenericServices\") && (n.javaGenericServices = e.javaGenericServices), null != e.pyGenericServices && e.hasOwnProperty(\"pyGenericServices\") && (n.pyGenericServices = e.pyGenericServices), null != e.javaGenerateEqualsAndHash && e.hasOwnProperty(\"javaGenerateEqualsAndHash\") && (n.javaGenerateEqualsAndHash = e.javaGenerateEqualsAndHash), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.javaStringCheckUtf8 && e.hasOwnProperty(\"javaStringCheckUtf8\") && (n.javaStringCheckUtf8 = e.javaStringCheckUtf8), null != e.ccEnableArenas && e.hasOwnProperty(\"ccEnableArenas\") && (n.ccEnableArenas = e.ccEnableArenas), null != e.objcClassPrefix && e.hasOwnProperty(\"objcClassPrefix\") && (n.objcClassPrefix = e.objcClassPrefix), null != e.csharpNamespace && e.hasOwnProperty(\"csharpNamespace\") && (n.csharpNamespace = e.csharpNamespace), null != e.swiftPrefix && e.hasOwnProperty(\"swiftPrefix\") && (n.swiftPrefix = e.swiftPrefix), null != e.phpClassPrefix && e.hasOwnProperty(\"phpClassPrefix\") && (n.phpClassPrefix = e.phpClassPrefix), null != e.phpNamespace && e.hasOwnProperty(\"phpNamespace\") && (n.phpNamespace = e.phpNamespace), null != e.phpGenericServices && e.hasOwnProperty(\"phpGenericServices\") && (n.phpGenericServices = e.phpGenericServices), null != e.phpMetadataNamespace && e.hasOwnProperty(\"phpMetadataNamespace\") && (n.phpMetadataNamespace = e.phpMetadataNamespace), null != e.rubyPackage && e.hasOwnProperty(\"rubyPackage\") && (n.rubyPackage = e.rubyPackage), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, S.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, S.OptimizeMode = (e = {}, (t = Object.create(e))[e[1] = \"SPEED\"] = 1, t[e[2] = \"CODE_SIZE\"] = 2, t[e[3] = \"LITE_RUNTIME\"] = 3, t), S), n.MessageOptions = (k.prototype.messageSetWireFormat = !1, k.prototype.noStandardDescriptorAccessor = !1, k.prototype.deprecated = !1, k.prototype.mapEntry = !1, k.prototype.uninterpretedOption = u.emptyArray, k.create = function(e) {\n        return new k(e);\n    }, k.encode = function(e, t) {\n        if (t = t || r.create(), null != e.messageSetWireFormat && Object.hasOwnProperty.call(e, \"messageSetWireFormat\") && t.uint32(8).bool(e.messageSetWireFormat), null != e.noStandardDescriptorAccessor && Object.hasOwnProperty.call(e, \"noStandardDescriptorAccessor\") && t.uint32(16).bool(e.noStandardDescriptorAccessor), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(24).bool(e.deprecated), null != e.mapEntry && Object.hasOwnProperty.call(e, \"mapEntry\") && t.uint32(56).bool(e.mapEntry), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, k.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, k.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.MessageOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.messageSetWireFormat = e.bool();\n                    break;\n                case 2:\n                    o.noStandardDescriptorAccessor = e.bool();\n                    break;\n                case 3:\n                    o.deprecated = e.bool();\n                    break;\n                case 7:\n                    o.mapEntry = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, k.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, k.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.messageSetWireFormat && e.hasOwnProperty(\"messageSetWireFormat\") && \"boolean\" != typeof e.messageSetWireFormat) return \"messageSetWireFormat: boolean expected\";\n        if (null != e.noStandardDescriptorAccessor && e.hasOwnProperty(\"noStandardDescriptorAccessor\") && \"boolean\" != typeof e.noStandardDescriptorAccessor) return \"noStandardDescriptorAccessor: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.mapEntry && e.hasOwnProperty(\"mapEntry\") && \"boolean\" != typeof e.mapEntry) return \"mapEntry: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, k.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.MessageOptions) return e;\n        var t = new c.google.protobuf.MessageOptions;\n        if (null != e.messageSetWireFormat && (t.messageSetWireFormat = Boolean(e.messageSetWireFormat)), null != e.noStandardDescriptorAccessor && (t.noStandardDescriptorAccessor = Boolean(e.noStandardDescriptorAccessor)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), null != e.mapEntry && (t.mapEntry = Boolean(e.mapEntry)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, k.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.messageSetWireFormat = !1, n.noStandardDescriptorAccessor = !1, n.deprecated = !1, n.mapEntry = !1), null != e.messageSetWireFormat && e.hasOwnProperty(\"messageSetWireFormat\") && (n.messageSetWireFormat = e.messageSetWireFormat), null != e.noStandardDescriptorAccessor && e.hasOwnProperty(\"noStandardDescriptorAccessor\") && (n.noStandardDescriptorAccessor = e.noStandardDescriptorAccessor), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.mapEntry && e.hasOwnProperty(\"mapEntry\") && (n.mapEntry = e.mapEntry), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, k.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, k), n.FieldOptions = (D.prototype.ctype = 0, D.prototype.packed = !1, D.prototype.jstype = 0, D.prototype.lazy = !1, D.prototype.deprecated = !1, D.prototype.weak = !1, D.prototype.uninterpretedOption = u.emptyArray, D.create = function(e) {\n        return new D(e);\n    }, D.encode = function(e, t) {\n        if (t = t || r.create(), null != e.ctype && Object.hasOwnProperty.call(e, \"ctype\") && t.uint32(8).int32(e.ctype), null != e.packed && Object.hasOwnProperty.call(e, \"packed\") && t.uint32(16).bool(e.packed), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(24).bool(e.deprecated), null != e.lazy && Object.hasOwnProperty.call(e, \"lazy\") && t.uint32(40).bool(e.lazy), null != e.jstype && Object.hasOwnProperty.call(e, \"jstype\") && t.uint32(48).int32(e.jstype), null != e.weak && Object.hasOwnProperty.call(e, \"weak\") && t.uint32(80).bool(e.weak), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, D.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, D.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.FieldOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.ctype = e.int32();\n                    break;\n                case 2:\n                    o.packed = e.bool();\n                    break;\n                case 6:\n                    o.jstype = e.int32();\n                    break;\n                case 5:\n                    o.lazy = e.bool();\n                    break;\n                case 3:\n                    o.deprecated = e.bool();\n                    break;\n                case 10:\n                    o.weak = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, D.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, D.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.ctype && e.hasOwnProperty(\"ctype\")) switch(e.ctype){\n            default:\n                return \"ctype: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        if (null != e.packed && e.hasOwnProperty(\"packed\") && \"boolean\" != typeof e.packed) return \"packed: boolean expected\";\n        if (null != e.jstype && e.hasOwnProperty(\"jstype\")) switch(e.jstype){\n            default:\n                return \"jstype: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        if (null != e.lazy && e.hasOwnProperty(\"lazy\") && \"boolean\" != typeof e.lazy) return \"lazy: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.weak && e.hasOwnProperty(\"weak\") && \"boolean\" != typeof e.weak) return \"weak: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, D.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.FieldOptions) return e;\n        var t = new c.google.protobuf.FieldOptions;\n        switch(e.ctype){\n            case \"STRING\":\n            case 0:\n                t.ctype = 0;\n                break;\n            case \"CORD\":\n            case 1:\n                t.ctype = 1;\n                break;\n            case \"STRING_PIECE\":\n            case 2:\n                t.ctype = 2;\n        }\n        switch(null != e.packed && (t.packed = Boolean(e.packed)), e.jstype){\n            case \"JS_NORMAL\":\n            case 0:\n                t.jstype = 0;\n                break;\n            case \"JS_STRING\":\n            case 1:\n                t.jstype = 1;\n                break;\n            case \"JS_NUMBER\":\n            case 2:\n                t.jstype = 2;\n        }\n        if (null != e.lazy && (t.lazy = Boolean(e.lazy)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), null != e.weak && (t.weak = Boolean(e.weak)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, D.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.ctype = t.enums === String ? \"STRING\" : 0, n.packed = !1, n.deprecated = !1, n.lazy = !1, n.jstype = t.enums === String ? \"JS_NORMAL\" : 0, n.weak = !1), null != e.ctype && e.hasOwnProperty(\"ctype\") && (n.ctype = t.enums === String ? c.google.protobuf.FieldOptions.CType[e.ctype] : e.ctype), null != e.packed && e.hasOwnProperty(\"packed\") && (n.packed = e.packed), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.lazy && e.hasOwnProperty(\"lazy\") && (n.lazy = e.lazy), null != e.jstype && e.hasOwnProperty(\"jstype\") && (n.jstype = t.enums === String ? c.google.protobuf.FieldOptions.JSType[e.jstype] : e.jstype), null != e.weak && e.hasOwnProperty(\"weak\") && (n.weak = e.weak), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, D.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, D.CType = (e = {}, (t = Object.create(e))[e[0] = \"STRING\"] = 0, t[e[1] = \"CORD\"] = 1, t[e[2] = \"STRING_PIECE\"] = 2, t), D.JSType = (e = {}, (t = Object.create(e))[e[0] = \"JS_NORMAL\"] = 0, t[e[1] = \"JS_STRING\"] = 1, t[e[2] = \"JS_NUMBER\"] = 2, t), D), n.OneofOptions = (M.prototype.uninterpretedOption = u.emptyArray, M.create = function(e) {\n        return new M(e);\n    }, M.encode = function(e, t) {\n        if (t = t || r.create(), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, M.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, M.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.OneofOptions; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 999 ? (o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, M.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, M.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, M.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.OneofOptions) return e;\n        var t = new c.google.protobuf.OneofOptions;\n        if (e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, M.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, M.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, M), n.EnumOptions = (T.prototype.allowAlias = !1, T.prototype.deprecated = !1, T.prototype.uninterpretedOption = u.emptyArray, T.create = function(e) {\n        return new T(e);\n    }, T.encode = function(e, t) {\n        if (t = t || r.create(), null != e.allowAlias && Object.hasOwnProperty.call(e, \"allowAlias\") && t.uint32(16).bool(e.allowAlias), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(24).bool(e.deprecated), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, T.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, T.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.EnumOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 2:\n                    o.allowAlias = e.bool();\n                    break;\n                case 3:\n                    o.deprecated = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, T.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, T.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.allowAlias && e.hasOwnProperty(\"allowAlias\") && \"boolean\" != typeof e.allowAlias) return \"allowAlias: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, T.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.EnumOptions) return e;\n        var t = new c.google.protobuf.EnumOptions;\n        if (null != e.allowAlias && (t.allowAlias = Boolean(e.allowAlias)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, T.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.allowAlias = !1, n.deprecated = !1), null != e.allowAlias && e.hasOwnProperty(\"allowAlias\") && (n.allowAlias = e.allowAlias), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, T.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, T), n.EnumValueOptions = (E.prototype.deprecated = !1, E.prototype.uninterpretedOption = u.emptyArray, E.create = function(e) {\n        return new E(e);\n    }, E.encode = function(e, t) {\n        if (t = t || r.create(), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(8).bool(e.deprecated), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, E.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, E.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.EnumValueOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.deprecated = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, E.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, E.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, E.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.EnumValueOptions) return e;\n        var t = new c.google.protobuf.EnumValueOptions;\n        if (null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, E.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.deprecated = !1), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, E.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, E), n.ServiceOptions = (A.prototype.deprecated = !1, A.prototype.uninterpretedOption = u.emptyArray, A.prototype[\".google.api.defaultHost\"] = \"\", A.prototype[\".google.api.oauthScopes\"] = \"\", A.create = function(e) {\n        return new A(e);\n    }, A.encode = function(e, t) {\n        if (t = t || r.create(), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(264).bool(e.deprecated), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return null != e[\".google.api.defaultHost\"] && Object.hasOwnProperty.call(e, \".google.api.defaultHost\") && t.uint32(8394).string(e[\".google.api.defaultHost\"]), null != e[\".google.api.oauthScopes\"] && Object.hasOwnProperty.call(e, \".google.api.oauthScopes\") && t.uint32(8402).string(e[\".google.api.oauthScopes\"]), t;\n    }, A.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, A.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.ServiceOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 33:\n                    o.deprecated = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                case 1049:\n                    o[\".google.api.defaultHost\"] = e.string();\n                    break;\n                case 1050:\n                    o[\".google.api.oauthScopes\"] = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, A.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, A.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null != e[\".google.api.defaultHost\"] && e.hasOwnProperty(\".google.api.defaultHost\") && !u.isString(e[\".google.api.defaultHost\"]) ? \".google.api.defaultHost: string expected\" : null != e[\".google.api.oauthScopes\"] && e.hasOwnProperty(\".google.api.oauthScopes\") && !u.isString(e[\".google.api.oauthScopes\"]) ? \".google.api.oauthScopes: string expected\" : null;\n    }, A.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.ServiceOptions) return e;\n        var t = new c.google.protobuf.ServiceOptions;\n        if (null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return null != e[\".google.api.defaultHost\"] && (t[\".google.api.defaultHost\"] = String(e[\".google.api.defaultHost\"])), null != e[\".google.api.oauthScopes\"] && (t[\".google.api.oauthScopes\"] = String(e[\".google.api.oauthScopes\"])), t;\n    }, A.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.deprecated = !1, n[\".google.api.defaultHost\"] = \"\", n[\".google.api.oauthScopes\"] = \"\"), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return null != e[\".google.api.defaultHost\"] && e.hasOwnProperty(\".google.api.defaultHost\") && (n[\".google.api.defaultHost\"] = e[\".google.api.defaultHost\"]), null != e[\".google.api.oauthScopes\"] && e.hasOwnProperty(\".google.api.oauthScopes\") && (n[\".google.api.oauthScopes\"] = e[\".google.api.oauthScopes\"]), n;\n    }, A.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, A), n.MethodOptions = (N.prototype.deprecated = !1, N.prototype.idempotencyLevel = 0, N.prototype.uninterpretedOption = u.emptyArray, N.prototype[\".google.api.http\"] = null, N.prototype[\".google.api.methodSignature\"] = u.emptyArray, N.create = function(e) {\n        return new N(e);\n    }, N.encode = function(e, t) {\n        if (t = t || r.create(), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(264).bool(e.deprecated), null != e.idempotencyLevel && Object.hasOwnProperty.call(e, \"idempotencyLevel\") && t.uint32(272).int32(e.idempotencyLevel), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        if (null != e[\".google.api.methodSignature\"] && e[\".google.api.methodSignature\"].length) for(n = 0; n < e[\".google.api.methodSignature\"].length; ++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);\n        return null != e[\".google.api.http\"] && Object.hasOwnProperty.call(e, \".google.api.http\") && c.google.api.HttpRule.encode(e[\".google.api.http\"], t.uint32(578365826).fork()).ldelim(), t;\n    }, N.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, N.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.MethodOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 33:\n                    o.deprecated = e.bool();\n                    break;\n                case 34:\n                    o.idempotencyLevel = e.int32();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                case 72295728:\n                    o[\".google.api.http\"] = c.google.api.HttpRule.decode(e, e.uint32());\n                    break;\n                case 1051:\n                    o[\".google.api.methodSignature\"] && o[\".google.api.methodSignature\"].length || (o[\".google.api.methodSignature\"] = []), o[\".google.api.methodSignature\"].push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, N.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, N.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.idempotencyLevel && e.hasOwnProperty(\"idempotencyLevel\")) switch(e.idempotencyLevel){\n            default:\n                return \"idempotencyLevel: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t)if (n = c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t])) return \"uninterpretedOption.\" + n;\n        }\n        var n;\n        if (null != e[\".google.api.http\"] && e.hasOwnProperty(\".google.api.http\") && (n = c.google.api.HttpRule.verify(e[\".google.api.http\"]))) return \".google.api.http.\" + n;\n        if (null != e[\".google.api.methodSignature\"] && e.hasOwnProperty(\".google.api.methodSignature\")) {\n            if (!Array.isArray(e[\".google.api.methodSignature\"])) return \".google.api.methodSignature: array expected\";\n            for(t = 0; t < e[\".google.api.methodSignature\"].length; ++t)if (!u.isString(e[\".google.api.methodSignature\"][t])) return \".google.api.methodSignature: string[] expected\";\n        }\n        return null;\n    }, N.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.MethodOptions) return e;\n        var t = new c.google.protobuf.MethodOptions;\n        switch(null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.idempotencyLevel){\n            case \"IDEMPOTENCY_UNKNOWN\":\n            case 0:\n                t.idempotencyLevel = 0;\n                break;\n            case \"NO_SIDE_EFFECTS\":\n            case 1:\n                t.idempotencyLevel = 1;\n                break;\n            case \"IDEMPOTENT\":\n            case 2:\n                t.idempotencyLevel = 2;\n        }\n        if (e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        if (null != e[\".google.api.http\"]) {\n            if (\"object\" != typeof e[\".google.api.http\"]) throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");\n            t[\".google.api.http\"] = c.google.api.HttpRule.fromObject(e[\".google.api.http\"]);\n        }\n        if (e[\".google.api.methodSignature\"]) {\n            if (!Array.isArray(e[\".google.api.methodSignature\"])) throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");\n            t[\".google.api.methodSignature\"] = [];\n            for(n = 0; n < e[\".google.api.methodSignature\"].length; ++n)t[\".google.api.methodSignature\"][n] = String(e[\".google.api.methodSignature\"][n]);\n        }\n        return t;\n    }, N.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = [], n[\".google.api.methodSignature\"] = []), t.defaults && (n.deprecated = !1, n.idempotencyLevel = t.enums === String ? \"IDEMPOTENCY_UNKNOWN\" : 0, n[\".google.api.http\"] = null), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.idempotencyLevel && e.hasOwnProperty(\"idempotencyLevel\") && (n.idempotencyLevel = t.enums === String ? c.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel] : e.idempotencyLevel), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        if (e[\".google.api.methodSignature\"] && e[\".google.api.methodSignature\"].length) {\n            n[\".google.api.methodSignature\"] = [];\n            for(o = 0; o < e[\".google.api.methodSignature\"].length; ++o)n[\".google.api.methodSignature\"][o] = e[\".google.api.methodSignature\"][o];\n        }\n        return null != e[\".google.api.http\"] && e.hasOwnProperty(\".google.api.http\") && (n[\".google.api.http\"] = c.google.api.HttpRule.toObject(e[\".google.api.http\"], t)), n;\n    }, N.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, N.IdempotencyLevel = (e = {}, (t = Object.create(e))[e[0] = \"IDEMPOTENCY_UNKNOWN\"] = 0, t[e[1] = \"NO_SIDE_EFFECTS\"] = 1, t[e[2] = \"IDEMPOTENT\"] = 2, t), N), n.UninterpretedOption = (I.prototype.name = u.emptyArray, I.prototype.identifierValue = \"\", I.prototype.positiveIntValue = u.Long ? u.Long.fromBits(0, 0, !0) : 0, I.prototype.negativeIntValue = u.Long ? u.Long.fromBits(0, 0, !1) : 0, I.prototype.doubleValue = 0, I.prototype.stringValue = u.newBuffer([]), I.prototype.aggregateValue = \"\", I.create = function(e) {\n        return new I(e);\n    }, I.encode = function(e, t) {\n        if (t = t || r.create(), null != e.name && e.name.length) for(var n = 0; n < e.name.length; ++n)c.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n], t.uint32(18).fork()).ldelim();\n        return null != e.identifierValue && Object.hasOwnProperty.call(e, \"identifierValue\") && t.uint32(26).string(e.identifierValue), null != e.positiveIntValue && Object.hasOwnProperty.call(e, \"positiveIntValue\") && t.uint32(32).uint64(e.positiveIntValue), null != e.negativeIntValue && Object.hasOwnProperty.call(e, \"negativeIntValue\") && t.uint32(40).int64(e.negativeIntValue), null != e.doubleValue && Object.hasOwnProperty.call(e, \"doubleValue\") && t.uint32(49).double(e.doubleValue), null != e.stringValue && Object.hasOwnProperty.call(e, \"stringValue\") && t.uint32(58).bytes(e.stringValue), null != e.aggregateValue && Object.hasOwnProperty.call(e, \"aggregateValue\") && t.uint32(66).string(e.aggregateValue), t;\n    }, I.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, I.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.UninterpretedOption; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 2:\n                    o.name && o.name.length || (o.name = []), o.name.push(c.google.protobuf.UninterpretedOption.NamePart.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.identifierValue = e.string();\n                    break;\n                case 4:\n                    o.positiveIntValue = e.uint64();\n                    break;\n                case 5:\n                    o.negativeIntValue = e.int64();\n                    break;\n                case 6:\n                    o.doubleValue = e.double();\n                    break;\n                case 7:\n                    o.stringValue = e.bytes();\n                    break;\n                case 8:\n                    o.aggregateValue = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, I.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, I.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\")) {\n            if (!Array.isArray(e.name)) return \"name: array expected\";\n            for(var t = 0; t < e.name.length; ++t){\n                var n = c.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);\n                if (n) return \"name.\" + n;\n            }\n        }\n        return null != e.identifierValue && e.hasOwnProperty(\"identifierValue\") && !u.isString(e.identifierValue) ? \"identifierValue: string expected\" : null != e.positiveIntValue && e.hasOwnProperty(\"positiveIntValue\") && !(u.isInteger(e.positiveIntValue) || e.positiveIntValue && u.isInteger(e.positiveIntValue.low) && u.isInteger(e.positiveIntValue.high)) ? \"positiveIntValue: integer|Long expected\" : null != e.negativeIntValue && e.hasOwnProperty(\"negativeIntValue\") && !(u.isInteger(e.negativeIntValue) || e.negativeIntValue && u.isInteger(e.negativeIntValue.low) && u.isInteger(e.negativeIntValue.high)) ? \"negativeIntValue: integer|Long expected\" : null != e.doubleValue && e.hasOwnProperty(\"doubleValue\") && \"number\" != typeof e.doubleValue ? \"doubleValue: number expected\" : null != e.stringValue && e.hasOwnProperty(\"stringValue\") && !(e.stringValue && \"number\" == typeof e.stringValue.length || u.isString(e.stringValue)) ? \"stringValue: buffer expected\" : null != e.aggregateValue && e.hasOwnProperty(\"aggregateValue\") && !u.isString(e.aggregateValue) ? \"aggregateValue: string expected\" : null;\n    }, I.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.UninterpretedOption) return e;\n        var t = new c.google.protobuf.UninterpretedOption;\n        if (e.name) {\n            if (!Array.isArray(e.name)) throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");\n            t.name = [];\n            for(var n = 0; n < e.name.length; ++n){\n                if (\"object\" != typeof e.name[n]) throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");\n                t.name[n] = c.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n]);\n            }\n        }\n        return null != e.identifierValue && (t.identifierValue = String(e.identifierValue)), null != e.positiveIntValue && (u.Long ? (t.positiveIntValue = u.Long.fromValue(e.positiveIntValue)).unsigned = !0 : \"string\" == typeof e.positiveIntValue ? t.positiveIntValue = parseInt(e.positiveIntValue, 10) : \"number\" == typeof e.positiveIntValue ? t.positiveIntValue = e.positiveIntValue : \"object\" == typeof e.positiveIntValue && (t.positiveIntValue = new u.LongBits(e.positiveIntValue.low >>> 0, e.positiveIntValue.high >>> 0).toNumber(!0))), null != e.negativeIntValue && (u.Long ? (t.negativeIntValue = u.Long.fromValue(e.negativeIntValue)).unsigned = !1 : \"string\" == typeof e.negativeIntValue ? t.negativeIntValue = parseInt(e.negativeIntValue, 10) : \"number\" == typeof e.negativeIntValue ? t.negativeIntValue = e.negativeIntValue : \"object\" == typeof e.negativeIntValue && (t.negativeIntValue = new u.LongBits(e.negativeIntValue.low >>> 0, e.negativeIntValue.high >>> 0).toNumber())), null != e.doubleValue && (t.doubleValue = Number(e.doubleValue)), null != e.stringValue && (\"string\" == typeof e.stringValue ? u.base64.decode(e.stringValue, t.stringValue = u.newBuffer(u.base64.length(e.stringValue)), 0) : e.stringValue.length && (t.stringValue = e.stringValue)), null != e.aggregateValue && (t.aggregateValue = String(e.aggregateValue)), t;\n    }, I.toObject = function(e, t) {\n        var n, o = {};\n        if (((t = t || {}).arrays || t.defaults) && (o.name = []), t.defaults && (o.identifierValue = \"\", u.Long ? (n = new u.Long(0, 0, !0), o.positiveIntValue = t.longs === String ? n.toString() : t.longs === Number ? n.toNumber() : n) : o.positiveIntValue = t.longs === String ? \"0\" : 0, u.Long ? (n = new u.Long(0, 0, !1), o.negativeIntValue = t.longs === String ? n.toString() : t.longs === Number ? n.toNumber() : n) : o.negativeIntValue = t.longs === String ? \"0\" : 0, o.doubleValue = 0, t.bytes === String ? o.stringValue = \"\" : (o.stringValue = [], t.bytes !== Array && (o.stringValue = u.newBuffer(o.stringValue))), o.aggregateValue = \"\"), e.name && e.name.length) {\n            o.name = [];\n            for(var r = 0; r < e.name.length; ++r)o.name[r] = c.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r], t);\n        }\n        return null != e.identifierValue && e.hasOwnProperty(\"identifierValue\") && (o.identifierValue = e.identifierValue), null != e.positiveIntValue && e.hasOwnProperty(\"positiveIntValue\") && (\"number\" == typeof e.positiveIntValue ? o.positiveIntValue = t.longs === String ? String(e.positiveIntValue) : e.positiveIntValue : o.positiveIntValue = t.longs === String ? u.Long.prototype.toString.call(e.positiveIntValue) : t.longs === Number ? new u.LongBits(e.positiveIntValue.low >>> 0, e.positiveIntValue.high >>> 0).toNumber(!0) : e.positiveIntValue), null != e.negativeIntValue && e.hasOwnProperty(\"negativeIntValue\") && (\"number\" == typeof e.negativeIntValue ? o.negativeIntValue = t.longs === String ? String(e.negativeIntValue) : e.negativeIntValue : o.negativeIntValue = t.longs === String ? u.Long.prototype.toString.call(e.negativeIntValue) : t.longs === Number ? new u.LongBits(e.negativeIntValue.low >>> 0, e.negativeIntValue.high >>> 0).toNumber() : e.negativeIntValue), null != e.doubleValue && e.hasOwnProperty(\"doubleValue\") && (o.doubleValue = t.json && !isFinite(e.doubleValue) ? String(e.doubleValue) : e.doubleValue), null != e.stringValue && e.hasOwnProperty(\"stringValue\") && (o.stringValue = t.bytes === String ? u.base64.encode(e.stringValue, 0, e.stringValue.length) : t.bytes === Array ? Array.prototype.slice.call(e.stringValue) : e.stringValue), null != e.aggregateValue && e.hasOwnProperty(\"aggregateValue\") && (o.aggregateValue = e.aggregateValue), o;\n    }, I.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, I.NamePart = (R.prototype.namePart = \"\", R.prototype.isExtension = !1, R.create = function(e) {\n        return new R(e);\n    }, R.encode = function(e, t) {\n        return (t = t || r.create()).uint32(10).string(e.namePart), t.uint32(16).bool(e.isExtension), t;\n    }, R.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, R.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.UninterpretedOption.NamePart; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.namePart = e.string();\n                    break;\n                case 2:\n                    o.isExtension = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        if (!o.hasOwnProperty(\"namePart\")) throw u.ProtocolError(\"missing required 'namePart'\", {\n            instance: o\n        });\n        if (o.hasOwnProperty(\"isExtension\")) return o;\n        throw u.ProtocolError(\"missing required 'isExtension'\", {\n            instance: o\n        });\n    }, R.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, R.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : u.isString(e.namePart) ? \"boolean\" != typeof e.isExtension ? \"isExtension: boolean expected\" : null : \"namePart: string expected\";\n    }, R.fromObject = function(e) {\n        var t;\n        return e instanceof c.google.protobuf.UninterpretedOption.NamePart ? e : (t = new c.google.protobuf.UninterpretedOption.NamePart, null != e.namePart && (t.namePart = String(e.namePart)), null != e.isExtension && (t.isExtension = Boolean(e.isExtension)), t);\n    }, R.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.namePart = \"\", n.isExtension = !1), null != e.namePart && e.hasOwnProperty(\"namePart\") && (n.namePart = e.namePart), null != e.isExtension && e.hasOwnProperty(\"isExtension\") && (n.isExtension = e.isExtension), n;\n    }, R.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, R), I), n.SourceCodeInfo = (_.prototype.location = u.emptyArray, _.create = function(e) {\n        return new _(e);\n    }, _.encode = function(e, t) {\n        if (t = t || r.create(), null != e.location && e.location.length) for(var n = 0; n < e.location.length; ++n)c.google.protobuf.SourceCodeInfo.Location.encode(e.location[n], t.uint32(10).fork()).ldelim();\n        return t;\n    }, _.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, _.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.SourceCodeInfo; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? (o.location && o.location.length || (o.location = []), o.location.push(c.google.protobuf.SourceCodeInfo.Location.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, _.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, _.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.location && e.hasOwnProperty(\"location\")) {\n            if (!Array.isArray(e.location)) return \"location: array expected\";\n            for(var t = 0; t < e.location.length; ++t){\n                var n = c.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);\n                if (n) return \"location.\" + n;\n            }\n        }\n        return null;\n    }, _.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.SourceCodeInfo) return e;\n        var t = new c.google.protobuf.SourceCodeInfo;\n        if (e.location) {\n            if (!Array.isArray(e.location)) throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");\n            t.location = [];\n            for(var n = 0; n < e.location.length; ++n){\n                if (\"object\" != typeof e.location[n]) throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");\n                t.location[n] = c.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n]);\n            }\n        }\n        return t;\n    }, _.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.location = []), e.location && e.location.length) {\n            n.location = [];\n            for(var o = 0; o < e.location.length; ++o)n.location[o] = c.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o], t);\n        }\n        return n;\n    }, _.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, _.Location = (C.prototype.path = u.emptyArray, C.prototype.span = u.emptyArray, C.prototype.leadingComments = \"\", C.prototype.trailingComments = \"\", C.prototype.leadingDetachedComments = u.emptyArray, C.create = function(e) {\n        return new C(e);\n    }, C.encode = function(e, t) {\n        if (t = t || r.create(), null != e.path && e.path.length) {\n            t.uint32(10).fork();\n            for(var n = 0; n < e.path.length; ++n)t.int32(e.path[n]);\n            t.ldelim();\n        }\n        if (null != e.span && e.span.length) {\n            t.uint32(18).fork();\n            for(n = 0; n < e.span.length; ++n)t.int32(e.span[n]);\n            t.ldelim();\n        }\n        if (null != e.leadingComments && Object.hasOwnProperty.call(e, \"leadingComments\") && t.uint32(26).string(e.leadingComments), null != e.trailingComments && Object.hasOwnProperty.call(e, \"trailingComments\") && t.uint32(34).string(e.trailingComments), null != e.leadingDetachedComments && e.leadingDetachedComments.length) for(n = 0; n < e.leadingDetachedComments.length; ++n)t.uint32(50).string(e.leadingDetachedComments[n]);\n        return t;\n    }, C.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, C.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.SourceCodeInfo.Location; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    if (o.path && o.path.length || (o.path = []), 2 == (7 & r)) for(var i = e.uint32() + e.pos; e.pos < i;)o.path.push(e.int32());\n                    else o.path.push(e.int32());\n                    break;\n                case 2:\n                    if (o.span && o.span.length || (o.span = []), 2 == (7 & r)) for(i = e.uint32() + e.pos; e.pos < i;)o.span.push(e.int32());\n                    else o.span.push(e.int32());\n                    break;\n                case 3:\n                    o.leadingComments = e.string();\n                    break;\n                case 4:\n                    o.trailingComments = e.string();\n                    break;\n                case 6:\n                    o.leadingDetachedComments && o.leadingDetachedComments.length || (o.leadingDetachedComments = []), o.leadingDetachedComments.push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, C.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, C.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.path && e.hasOwnProperty(\"path\")) {\n            if (!Array.isArray(e.path)) return \"path: array expected\";\n            for(var t = 0; t < e.path.length; ++t)if (!u.isInteger(e.path[t])) return \"path: integer[] expected\";\n        }\n        if (null != e.span && e.hasOwnProperty(\"span\")) {\n            if (!Array.isArray(e.span)) return \"span: array expected\";\n            for(t = 0; t < e.span.length; ++t)if (!u.isInteger(e.span[t])) return \"span: integer[] expected\";\n        }\n        if (null != e.leadingComments && e.hasOwnProperty(\"leadingComments\") && !u.isString(e.leadingComments)) return \"leadingComments: string expected\";\n        if (null != e.trailingComments && e.hasOwnProperty(\"trailingComments\") && !u.isString(e.trailingComments)) return \"trailingComments: string expected\";\n        if (null != e.leadingDetachedComments && e.hasOwnProperty(\"leadingDetachedComments\")) {\n            if (!Array.isArray(e.leadingDetachedComments)) return \"leadingDetachedComments: array expected\";\n            for(t = 0; t < e.leadingDetachedComments.length; ++t)if (!u.isString(e.leadingDetachedComments[t])) return \"leadingDetachedComments: string[] expected\";\n        }\n        return null;\n    }, C.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.SourceCodeInfo.Location) return e;\n        var t = new c.google.protobuf.SourceCodeInfo.Location;\n        if (e.path) {\n            if (!Array.isArray(e.path)) throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");\n            t.path = [];\n            for(var n = 0; n < e.path.length; ++n)t.path[n] = 0 | e.path[n];\n        }\n        if (e.span) {\n            if (!Array.isArray(e.span)) throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");\n            t.span = [];\n            for(n = 0; n < e.span.length; ++n)t.span[n] = 0 | e.span[n];\n        }\n        if (null != e.leadingComments && (t.leadingComments = String(e.leadingComments)), null != e.trailingComments && (t.trailingComments = String(e.trailingComments)), e.leadingDetachedComments) {\n            if (!Array.isArray(e.leadingDetachedComments)) throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");\n            t.leadingDetachedComments = [];\n            for(n = 0; n < e.leadingDetachedComments.length; ++n)t.leadingDetachedComments[n] = String(e.leadingDetachedComments[n]);\n        }\n        return t;\n    }, C.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.path = [], n.span = [], n.leadingDetachedComments = []), t.defaults && (n.leadingComments = \"\", n.trailingComments = \"\"), e.path && e.path.length) {\n            n.path = [];\n            for(var o = 0; o < e.path.length; ++o)n.path[o] = e.path[o];\n        }\n        if (e.span && e.span.length) {\n            n.span = [];\n            for(o = 0; o < e.span.length; ++o)n.span[o] = e.span[o];\n        }\n        if (null != e.leadingComments && e.hasOwnProperty(\"leadingComments\") && (n.leadingComments = e.leadingComments), null != e.trailingComments && e.hasOwnProperty(\"trailingComments\") && (n.trailingComments = e.trailingComments), e.leadingDetachedComments && e.leadingDetachedComments.length) {\n            n.leadingDetachedComments = [];\n            for(o = 0; o < e.leadingDetachedComments.length; ++o)n.leadingDetachedComments[o] = e.leadingDetachedComments[o];\n        }\n        return n;\n    }, C.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, C), _), n.GeneratedCodeInfo = (J.prototype.annotation = u.emptyArray, J.create = function(e) {\n        return new J(e);\n    }, J.encode = function(e, t) {\n        if (t = t || r.create(), null != e.annotation && e.annotation.length) for(var n = 0; n < e.annotation.length; ++n)c.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n], t.uint32(10).fork()).ldelim();\n        return t;\n    }, J.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, J.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.GeneratedCodeInfo; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? (o.annotation && o.annotation.length || (o.annotation = []), o.annotation.push(c.google.protobuf.GeneratedCodeInfo.Annotation.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, J.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, J.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.annotation && e.hasOwnProperty(\"annotation\")) {\n            if (!Array.isArray(e.annotation)) return \"annotation: array expected\";\n            for(var t = 0; t < e.annotation.length; ++t){\n                var n = c.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);\n                if (n) return \"annotation.\" + n;\n            }\n        }\n        return null;\n    }, J.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.GeneratedCodeInfo) return e;\n        var t = new c.google.protobuf.GeneratedCodeInfo;\n        if (e.annotation) {\n            if (!Array.isArray(e.annotation)) throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");\n            t.annotation = [];\n            for(var n = 0; n < e.annotation.length; ++n){\n                if (\"object\" != typeof e.annotation[n]) throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");\n                t.annotation[n] = c.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n]);\n            }\n        }\n        return t;\n    }, J.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.annotation = []), e.annotation && e.annotation.length) {\n            n.annotation = [];\n            for(var o = 0; o < e.annotation.length; ++o)n.annotation[o] = c.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o], t);\n        }\n        return n;\n    }, J.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, J.Annotation = (V.prototype.path = u.emptyArray, V.prototype.sourceFile = \"\", V.prototype.begin = 0, V.prototype.end = 0, V.create = function(e) {\n        return new V(e);\n    }, V.encode = function(e, t) {\n        if (t = t || r.create(), null != e.path && e.path.length) {\n            t.uint32(10).fork();\n            for(var n = 0; n < e.path.length; ++n)t.int32(e.path[n]);\n            t.ldelim();\n        }\n        return null != e.sourceFile && Object.hasOwnProperty.call(e, \"sourceFile\") && t.uint32(18).string(e.sourceFile), null != e.begin && Object.hasOwnProperty.call(e, \"begin\") && t.uint32(24).int32(e.begin), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(32).int32(e.end), t;\n    }, V.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, V.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.GeneratedCodeInfo.Annotation; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    if (o.path && o.path.length || (o.path = []), 2 == (7 & r)) for(var i = e.uint32() + e.pos; e.pos < i;)o.path.push(e.int32());\n                    else o.path.push(e.int32());\n                    break;\n                case 2:\n                    o.sourceFile = e.string();\n                    break;\n                case 3:\n                    o.begin = e.int32();\n                    break;\n                case 4:\n                    o.end = e.int32();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, V.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, V.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.path && e.hasOwnProperty(\"path\")) {\n            if (!Array.isArray(e.path)) return \"path: array expected\";\n            for(var t = 0; t < e.path.length; ++t)if (!u.isInteger(e.path[t])) return \"path: integer[] expected\";\n        }\n        return null != e.sourceFile && e.hasOwnProperty(\"sourceFile\") && !u.isString(e.sourceFile) ? \"sourceFile: string expected\" : null != e.begin && e.hasOwnProperty(\"begin\") && !u.isInteger(e.begin) ? \"begin: integer expected\" : null != e.end && e.hasOwnProperty(\"end\") && !u.isInteger(e.end) ? \"end: integer expected\" : null;\n    }, V.fromObject = function(e) {\n        if (e instanceof c.google.protobuf.GeneratedCodeInfo.Annotation) return e;\n        var t = new c.google.protobuf.GeneratedCodeInfo.Annotation;\n        if (e.path) {\n            if (!Array.isArray(e.path)) throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");\n            t.path = [];\n            for(var n = 0; n < e.path.length; ++n)t.path[n] = 0 | e.path[n];\n        }\n        return null != e.sourceFile && (t.sourceFile = String(e.sourceFile)), null != e.begin && (t.begin = 0 | e.begin), null != e.end && (t.end = 0 | e.end), t;\n    }, V.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.path = []), t.defaults && (n.sourceFile = \"\", n.begin = 0, n.end = 0), e.path && e.path.length) {\n            n.path = [];\n            for(var o = 0; o < e.path.length; ++o)n.path[o] = e.path[o];\n        }\n        return null != e.sourceFile && e.hasOwnProperty(\"sourceFile\") && (n.sourceFile = e.sourceFile), null != e.begin && e.hasOwnProperty(\"begin\") && (n.begin = e.begin), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), n;\n    }, V.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, V), J), n.Any = (H.prototype.type_url = \"\", H.prototype.value = u.newBuffer([]), H.create = function(e) {\n        return new H(e);\n    }, H.encode = function(e, t) {\n        return t = t || r.create(), null != e.type_url && Object.hasOwnProperty.call(e, \"type_url\") && t.uint32(10).string(e.type_url), null != e.value && Object.hasOwnProperty.call(e, \"value\") && t.uint32(18).bytes(e.value), t;\n    }, H.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, H.decode = function(e, t) {\n        e instanceof s || (e = s.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new c.google.protobuf.Any; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.type_url = e.string();\n                    break;\n                case 2:\n                    o.value = e.bytes();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, H.decodeDelimited = function(e) {\n        return e instanceof s || (e = new s(e)), this.decode(e, e.uint32());\n    }, H.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.type_url && e.hasOwnProperty(\"type_url\") && !u.isString(e.type_url) ? \"type_url: string expected\" : null != e.value && e.hasOwnProperty(\"value\") && !(e.value && \"number\" == typeof e.value.length || u.isString(e.value)) ? \"value: buffer expected\" : null;\n    }, H.fromObject = function(e) {\n        var t;\n        return e instanceof c.google.protobuf.Any ? e : (t = new c.google.protobuf.Any, null != e.type_url && (t.type_url = String(e.type_url)), null != e.value && (\"string\" == typeof e.value ? u.base64.decode(e.value, t.value = u.newBuffer(u.base64.length(e.value)), 0) : e.value.length && (t.value = e.value)), t);\n    }, H.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.type_url = \"\", t.bytes === String ? n.value = \"\" : (n.value = [], t.bytes !== Array && (n.value = u.newBuffer(n.value)))), null != e.type_url && e.hasOwnProperty(\"type_url\") && (n.type_url = e.type_url), null != e.value && e.hasOwnProperty(\"value\") && (n.value = t.bytes === String ? u.base64.encode(e.value, 0, e.value.length) : t.bytes === Array ? Array.prototype.slice.call(e.value) : e.value), n;\n    }, H.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, H), n), F), c;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/locations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/operations.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/operations.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n((e)=>{\n     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")\n    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(function(o) {\n    var e, t, n, F, a = o.Reader, r = o.Writer, i = o.util, p = o.roots.operations_protos || (o.roots.operations_protos = {});\n    function G(e, t, n) {\n        o.rpc.Service.call(this, e, t, n);\n    }\n    function l(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function B(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function s(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function u(e) {\n        if (this.operations = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function L(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function U(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function c(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function d(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function g(e) {\n        if (this.rules = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function f(e) {\n        if (this.additionalBindings = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function y(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function J(e) {\n        if (this.file = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function h(e) {\n        if (this.dependency = [], this.publicDependency = [], this.weakDependency = [], this.messageType = [], this.enumType = [], this.service = [], this.extension = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function O(e) {\n        if (this.field = [], this.extension = [], this.nestedType = [], this.enumType = [], this.extensionRange = [], this.oneofDecl = [], this.reservedRange = [], this.reservedName = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function b(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function m(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function M(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function v(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function w(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function P(e) {\n        if (this.value = [], this.reservedRange = [], this.reservedName = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function _(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function j(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function S(e) {\n        if (this.method = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function x(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function k(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function D(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function T(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function H(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function E(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function z(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function A(e) {\n        if (this.uninterpretedOption = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function N(e) {\n        if (this.uninterpretedOption = [], this[\".google.api.methodSignature\"] = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function I(e) {\n        if (this.name = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function q(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function Y(e) {\n        if (this.location = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function R(e) {\n        if (this.path = [], this.span = [], this.leadingDetachedComments = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function W(e) {\n        if (this.annotation = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function C(e) {\n        if (this.path = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function X(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function K(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function Q(e) {\n        if (e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    function V(e) {\n        if (this.details = [], e) for(var t = Object.keys(e), n = 0; n < t.length; ++n)null != e[t[n]] && (this[t[n]] = e[t[n]]);\n    }\n    return p.google = ((F = {}).longrunning = ((t = {}).Operations = (((G.prototype = Object.create(o.rpc.Service.prototype)).constructor = G).create = function(e, t, n) {\n        return new this(e, t, n);\n    }, Object.defineProperty(G.prototype.listOperations = function e(t, n) {\n        return this.rpcCall(e, p.google.longrunning.ListOperationsRequest, p.google.longrunning.ListOperationsResponse, t, n);\n    }, \"name\", {\n        value: \"ListOperations\"\n    }), Object.defineProperty(G.prototype.getOperation = function e(t, n) {\n        return this.rpcCall(e, p.google.longrunning.GetOperationRequest, p.google.longrunning.Operation, t, n);\n    }, \"name\", {\n        value: \"GetOperation\"\n    }), Object.defineProperty(G.prototype.deleteOperation = function e(t, n) {\n        return this.rpcCall(e, p.google.longrunning.DeleteOperationRequest, p.google.protobuf.Empty, t, n);\n    }, \"name\", {\n        value: \"DeleteOperation\"\n    }), Object.defineProperty(G.prototype.cancelOperation = function e(t, n) {\n        return this.rpcCall(e, p.google.longrunning.CancelOperationRequest, p.google.protobuf.Empty, t, n);\n    }, \"name\", {\n        value: \"CancelOperation\"\n    }), Object.defineProperty(G.prototype.waitOperation = function e(t, n) {\n        return this.rpcCall(e, p.google.longrunning.WaitOperationRequest, p.google.longrunning.Operation, t, n);\n    }, \"name\", {\n        value: \"WaitOperation\"\n    }), G), t.Operation = (l.prototype.name = \"\", l.prototype.metadata = null, l.prototype.done = !1, l.prototype.error = null, l.prototype.response = null, Object.defineProperty(l.prototype, \"result\", {\n        get: i.oneOfGetter(n = [\n            \"error\",\n            \"response\"\n        ]),\n        set: i.oneOfSetter(n)\n    }), l.create = function(e) {\n        return new l(e);\n    }, l.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.metadata && Object.hasOwnProperty.call(e, \"metadata\") && p.google.protobuf.Any.encode(e.metadata, t.uint32(18).fork()).ldelim(), null != e.done && Object.hasOwnProperty.call(e, \"done\") && t.uint32(24).bool(e.done), null != e.error && Object.hasOwnProperty.call(e, \"error\") && p.google.rpc.Status.encode(e.error, t.uint32(34).fork()).ldelim(), null != e.response && Object.hasOwnProperty.call(e, \"response\") && p.google.protobuf.Any.encode(e.response, t.uint32(42).fork()).ldelim(), t;\n    }, l.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, l.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.longrunning.Operation; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.metadata = p.google.protobuf.Any.decode(e, e.uint32());\n                    break;\n                case 3:\n                    o.done = e.bool();\n                    break;\n                case 4:\n                    o.error = p.google.rpc.Status.decode(e, e.uint32());\n                    break;\n                case 5:\n                    o.response = p.google.protobuf.Any.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, l.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, l.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        var t, n = {};\n        if (null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name)) return \"name: string expected\";\n        if (null != e.metadata && e.hasOwnProperty(\"metadata\") && (t = p.google.protobuf.Any.verify(e.metadata))) return \"metadata.\" + t;\n        if (null != e.done && e.hasOwnProperty(\"done\") && \"boolean\" != typeof e.done) return \"done: boolean expected\";\n        if (null != e.error && e.hasOwnProperty(\"error\") && (n.result = 1, t = p.google.rpc.Status.verify(e.error))) return \"error.\" + t;\n        if (null != e.response && e.hasOwnProperty(\"response\")) {\n            if (1 === n.result) return \"result: multiple values\";\n            if (n.result = 1, t = p.google.protobuf.Any.verify(e.response)) return \"response.\" + t;\n        }\n        return null;\n    }, l.fromObject = function(e) {\n        if (e instanceof p.google.longrunning.Operation) return e;\n        var t = new p.google.longrunning.Operation;\n        if (null != e.name && (t.name = String(e.name)), null != e.metadata) {\n            if (\"object\" != typeof e.metadata) throw TypeError(\".google.longrunning.Operation.metadata: object expected\");\n            t.metadata = p.google.protobuf.Any.fromObject(e.metadata);\n        }\n        if (null != e.done && (t.done = Boolean(e.done)), null != e.error) {\n            if (\"object\" != typeof e.error) throw TypeError(\".google.longrunning.Operation.error: object expected\");\n            t.error = p.google.rpc.Status.fromObject(e.error);\n        }\n        if (null != e.response) {\n            if (\"object\" != typeof e.response) throw TypeError(\".google.longrunning.Operation.response: object expected\");\n            t.response = p.google.protobuf.Any.fromObject(e.response);\n        }\n        return t;\n    }, l.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.metadata = null, n.done = !1), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.metadata && e.hasOwnProperty(\"metadata\") && (n.metadata = p.google.protobuf.Any.toObject(e.metadata, t)), null != e.done && e.hasOwnProperty(\"done\") && (n.done = e.done), null != e.error && e.hasOwnProperty(\"error\") && (n.error = p.google.rpc.Status.toObject(e.error, t), t.oneofs) && (n.result = \"error\"), null != e.response && e.hasOwnProperty(\"response\") && (n.response = p.google.protobuf.Any.toObject(e.response, t), t.oneofs) && (n.result = \"response\"), n;\n    }, l.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, l), t.GetOperationRequest = (B.prototype.name = \"\", B.create = function(e) {\n        return new B(e);\n    }, B.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), t;\n    }, B.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, B.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.longrunning.GetOperationRequest; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? o.name = e.string() : e.skipType(7 & r);\n        }\n        return o;\n    }, B.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, B.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name) ? \"name: string expected\" : null;\n    }, B.fromObject = function(e) {\n        var t;\n        return e instanceof p.google.longrunning.GetOperationRequest ? e : (t = new p.google.longrunning.GetOperationRequest, null != e.name && (t.name = String(e.name)), t);\n    }, B.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\"), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), n;\n    }, B.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, B), t.ListOperationsRequest = (s.prototype.name = \"\", s.prototype.filter = \"\", s.prototype.pageSize = 0, s.prototype.pageToken = \"\", s.create = function(e) {\n        return new s(e);\n    }, s.encode = function(e, t) {\n        return t = t || r.create(), null != e.filter && Object.hasOwnProperty.call(e, \"filter\") && t.uint32(10).string(e.filter), null != e.pageSize && Object.hasOwnProperty.call(e, \"pageSize\") && t.uint32(16).int32(e.pageSize), null != e.pageToken && Object.hasOwnProperty.call(e, \"pageToken\") && t.uint32(26).string(e.pageToken), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(34).string(e.name), t;\n    }, s.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, s.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.longrunning.ListOperationsRequest; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 4:\n                    o.name = e.string();\n                    break;\n                case 1:\n                    o.filter = e.string();\n                    break;\n                case 2:\n                    o.pageSize = e.int32();\n                    break;\n                case 3:\n                    o.pageToken = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, s.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, s.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name) ? \"name: string expected\" : null != e.filter && e.hasOwnProperty(\"filter\") && !i.isString(e.filter) ? \"filter: string expected\" : null != e.pageSize && e.hasOwnProperty(\"pageSize\") && !i.isInteger(e.pageSize) ? \"pageSize: integer expected\" : null != e.pageToken && e.hasOwnProperty(\"pageToken\") && !i.isString(e.pageToken) ? \"pageToken: string expected\" : null;\n    }, s.fromObject = function(e) {\n        var t;\n        return e instanceof p.google.longrunning.ListOperationsRequest ? e : (t = new p.google.longrunning.ListOperationsRequest, null != e.name && (t.name = String(e.name)), null != e.filter && (t.filter = String(e.filter)), null != e.pageSize && (t.pageSize = 0 | e.pageSize), null != e.pageToken && (t.pageToken = String(e.pageToken)), t);\n    }, s.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.filter = \"\", n.pageSize = 0, n.pageToken = \"\", n.name = \"\"), null != e.filter && e.hasOwnProperty(\"filter\") && (n.filter = e.filter), null != e.pageSize && e.hasOwnProperty(\"pageSize\") && (n.pageSize = e.pageSize), null != e.pageToken && e.hasOwnProperty(\"pageToken\") && (n.pageToken = e.pageToken), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), n;\n    }, s.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, s), t.ListOperationsResponse = (u.prototype.operations = i.emptyArray, u.prototype.nextPageToken = \"\", u.create = function(e) {\n        return new u(e);\n    }, u.encode = function(e, t) {\n        if (t = t || r.create(), null != e.operations && e.operations.length) for(var n = 0; n < e.operations.length; ++n)p.google.longrunning.Operation.encode(e.operations[n], t.uint32(10).fork()).ldelim();\n        return null != e.nextPageToken && Object.hasOwnProperty.call(e, \"nextPageToken\") && t.uint32(18).string(e.nextPageToken), t;\n    }, u.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, u.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.longrunning.ListOperationsResponse; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.operations && o.operations.length || (o.operations = []), o.operations.push(p.google.longrunning.Operation.decode(e, e.uint32()));\n                    break;\n                case 2:\n                    o.nextPageToken = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, u.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, u.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.operations && e.hasOwnProperty(\"operations\")) {\n            if (!Array.isArray(e.operations)) return \"operations: array expected\";\n            for(var t = 0; t < e.operations.length; ++t){\n                var n = p.google.longrunning.Operation.verify(e.operations[t]);\n                if (n) return \"operations.\" + n;\n            }\n        }\n        return null != e.nextPageToken && e.hasOwnProperty(\"nextPageToken\") && !i.isString(e.nextPageToken) ? \"nextPageToken: string expected\" : null;\n    }, u.fromObject = function(e) {\n        if (e instanceof p.google.longrunning.ListOperationsResponse) return e;\n        var t = new p.google.longrunning.ListOperationsResponse;\n        if (e.operations) {\n            if (!Array.isArray(e.operations)) throw TypeError(\".google.longrunning.ListOperationsResponse.operations: array expected\");\n            t.operations = [];\n            for(var n = 0; n < e.operations.length; ++n){\n                if (\"object\" != typeof e.operations[n]) throw TypeError(\".google.longrunning.ListOperationsResponse.operations: object expected\");\n                t.operations[n] = p.google.longrunning.Operation.fromObject(e.operations[n]);\n            }\n        }\n        return null != e.nextPageToken && (t.nextPageToken = String(e.nextPageToken)), t;\n    }, u.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.operations = []), t.defaults && (n.nextPageToken = \"\"), e.operations && e.operations.length) {\n            n.operations = [];\n            for(var o = 0; o < e.operations.length; ++o)n.operations[o] = p.google.longrunning.Operation.toObject(e.operations[o], t);\n        }\n        return null != e.nextPageToken && e.hasOwnProperty(\"nextPageToken\") && (n.nextPageToken = e.nextPageToken), n;\n    }, u.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, u), t.CancelOperationRequest = (L.prototype.name = \"\", L.create = function(e) {\n        return new L(e);\n    }, L.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), t;\n    }, L.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, L.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.longrunning.CancelOperationRequest; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? o.name = e.string() : e.skipType(7 & r);\n        }\n        return o;\n    }, L.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, L.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name) ? \"name: string expected\" : null;\n    }, L.fromObject = function(e) {\n        var t;\n        return e instanceof p.google.longrunning.CancelOperationRequest ? e : (t = new p.google.longrunning.CancelOperationRequest, null != e.name && (t.name = String(e.name)), t);\n    }, L.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\"), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), n;\n    }, L.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, L), t.DeleteOperationRequest = (U.prototype.name = \"\", U.create = function(e) {\n        return new U(e);\n    }, U.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), t;\n    }, U.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, U.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.longrunning.DeleteOperationRequest; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? o.name = e.string() : e.skipType(7 & r);\n        }\n        return o;\n    }, U.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, U.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name) ? \"name: string expected\" : null;\n    }, U.fromObject = function(e) {\n        var t;\n        return e instanceof p.google.longrunning.DeleteOperationRequest ? e : (t = new p.google.longrunning.DeleteOperationRequest, null != e.name && (t.name = String(e.name)), t);\n    }, U.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\"), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), n;\n    }, U.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, U), t.WaitOperationRequest = (c.prototype.name = \"\", c.prototype.timeout = null, c.create = function(e) {\n        return new c(e);\n    }, c.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.timeout && Object.hasOwnProperty.call(e, \"timeout\") && p.google.protobuf.Duration.encode(e.timeout, t.uint32(18).fork()).ldelim(), t;\n    }, c.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, c.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.longrunning.WaitOperationRequest; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.timeout = p.google.protobuf.Duration.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, c.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, c.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name)) return \"name: string expected\";\n        if (null != e.timeout && e.hasOwnProperty(\"timeout\")) {\n            e = p.google.protobuf.Duration.verify(e.timeout);\n            if (e) return \"timeout.\" + e;\n        }\n        return null;\n    }, c.fromObject = function(e) {\n        if (e instanceof p.google.longrunning.WaitOperationRequest) return e;\n        var t = new p.google.longrunning.WaitOperationRequest;\n        if (null != e.name && (t.name = String(e.name)), null != e.timeout) {\n            if (\"object\" != typeof e.timeout) throw TypeError(\".google.longrunning.WaitOperationRequest.timeout: object expected\");\n            t.timeout = p.google.protobuf.Duration.fromObject(e.timeout);\n        }\n        return t;\n    }, c.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.timeout = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.timeout && e.hasOwnProperty(\"timeout\") && (n.timeout = p.google.protobuf.Duration.toObject(e.timeout, t)), n;\n    }, c.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, c), t.OperationInfo = (d.prototype.responseType = \"\", d.prototype.metadataType = \"\", d.create = function(e) {\n        return new d(e);\n    }, d.encode = function(e, t) {\n        return t = t || r.create(), null != e.responseType && Object.hasOwnProperty.call(e, \"responseType\") && t.uint32(10).string(e.responseType), null != e.metadataType && Object.hasOwnProperty.call(e, \"metadataType\") && t.uint32(18).string(e.metadataType), t;\n    }, d.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, d.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.longrunning.OperationInfo; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.responseType = e.string();\n                    break;\n                case 2:\n                    o.metadataType = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, d.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, d.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.responseType && e.hasOwnProperty(\"responseType\") && !i.isString(e.responseType) ? \"responseType: string expected\" : null != e.metadataType && e.hasOwnProperty(\"metadataType\") && !i.isString(e.metadataType) ? \"metadataType: string expected\" : null;\n    }, d.fromObject = function(e) {\n        var t;\n        return e instanceof p.google.longrunning.OperationInfo ? e : (t = new p.google.longrunning.OperationInfo, null != e.responseType && (t.responseType = String(e.responseType)), null != e.metadataType && (t.metadataType = String(e.metadataType)), t);\n    }, d.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.responseType = \"\", n.metadataType = \"\"), null != e.responseType && e.hasOwnProperty(\"responseType\") && (n.responseType = e.responseType), null != e.metadataType && e.hasOwnProperty(\"metadataType\") && (n.metadataType = e.metadataType), n;\n    }, d.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, d), t), F.api = ((n = {}).Http = (g.prototype.rules = i.emptyArray, g.prototype.fullyDecodeReservedExpansion = !1, g.create = function(e) {\n        return new g(e);\n    }, g.encode = function(e, t) {\n        if (t = t || r.create(), null != e.rules && e.rules.length) for(var n = 0; n < e.rules.length; ++n)p.google.api.HttpRule.encode(e.rules[n], t.uint32(10).fork()).ldelim();\n        return null != e.fullyDecodeReservedExpansion && Object.hasOwnProperty.call(e, \"fullyDecodeReservedExpansion\") && t.uint32(16).bool(e.fullyDecodeReservedExpansion), t;\n    }, g.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, g.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.api.Http; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.rules && o.rules.length || (o.rules = []), o.rules.push(p.google.api.HttpRule.decode(e, e.uint32()));\n                    break;\n                case 2:\n                    o.fullyDecodeReservedExpansion = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, g.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, g.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.rules && e.hasOwnProperty(\"rules\")) {\n            if (!Array.isArray(e.rules)) return \"rules: array expected\";\n            for(var t = 0; t < e.rules.length; ++t){\n                var n = p.google.api.HttpRule.verify(e.rules[t]);\n                if (n) return \"rules.\" + n;\n            }\n        }\n        return null != e.fullyDecodeReservedExpansion && e.hasOwnProperty(\"fullyDecodeReservedExpansion\") && \"boolean\" != typeof e.fullyDecodeReservedExpansion ? \"fullyDecodeReservedExpansion: boolean expected\" : null;\n    }, g.fromObject = function(e) {\n        if (e instanceof p.google.api.Http) return e;\n        var t = new p.google.api.Http;\n        if (e.rules) {\n            if (!Array.isArray(e.rules)) throw TypeError(\".google.api.Http.rules: array expected\");\n            t.rules = [];\n            for(var n = 0; n < e.rules.length; ++n){\n                if (\"object\" != typeof e.rules[n]) throw TypeError(\".google.api.Http.rules: object expected\");\n                t.rules[n] = p.google.api.HttpRule.fromObject(e.rules[n]);\n            }\n        }\n        return null != e.fullyDecodeReservedExpansion && (t.fullyDecodeReservedExpansion = Boolean(e.fullyDecodeReservedExpansion)), t;\n    }, g.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.rules = []), t.defaults && (n.fullyDecodeReservedExpansion = !1), e.rules && e.rules.length) {\n            n.rules = [];\n            for(var o = 0; o < e.rules.length; ++o)n.rules[o] = p.google.api.HttpRule.toObject(e.rules[o], t);\n        }\n        return null != e.fullyDecodeReservedExpansion && e.hasOwnProperty(\"fullyDecodeReservedExpansion\") && (n.fullyDecodeReservedExpansion = e.fullyDecodeReservedExpansion), n;\n    }, g.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, g), n.HttpRule = (f.prototype.selector = \"\", f.prototype.get = \"\", f.prototype.put = \"\", f.prototype.post = \"\", f.prototype.delete = \"\", f.prototype.patch = \"\", f.prototype.custom = null, f.prototype.body = \"\", f.prototype.responseBody = \"\", f.prototype.additionalBindings = i.emptyArray, Object.defineProperty(f.prototype, \"pattern\", {\n        get: i.oneOfGetter(t = [\n            \"get\",\n            \"put\",\n            \"post\",\n            \"delete\",\n            \"patch\",\n            \"custom\"\n        ]),\n        set: i.oneOfSetter(t)\n    }), f.create = function(e) {\n        return new f(e);\n    }, f.encode = function(e, t) {\n        if (t = t || r.create(), null != e.selector && Object.hasOwnProperty.call(e, \"selector\") && t.uint32(10).string(e.selector), null != e.get && Object.hasOwnProperty.call(e, \"get\") && t.uint32(18).string(e.get), null != e.put && Object.hasOwnProperty.call(e, \"put\") && t.uint32(26).string(e.put), null != e.post && Object.hasOwnProperty.call(e, \"post\") && t.uint32(34).string(e.post), null != e.delete && Object.hasOwnProperty.call(e, \"delete\") && t.uint32(42).string(e.delete), null != e.patch && Object.hasOwnProperty.call(e, \"patch\") && t.uint32(50).string(e.patch), null != e.body && Object.hasOwnProperty.call(e, \"body\") && t.uint32(58).string(e.body), null != e.custom && Object.hasOwnProperty.call(e, \"custom\") && p.google.api.CustomHttpPattern.encode(e.custom, t.uint32(66).fork()).ldelim(), null != e.additionalBindings && e.additionalBindings.length) for(var n = 0; n < e.additionalBindings.length; ++n)p.google.api.HttpRule.encode(e.additionalBindings[n], t.uint32(90).fork()).ldelim();\n        return null != e.responseBody && Object.hasOwnProperty.call(e, \"responseBody\") && t.uint32(98).string(e.responseBody), t;\n    }, f.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, f.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.api.HttpRule; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.selector = e.string();\n                    break;\n                case 2:\n                    o.get = e.string();\n                    break;\n                case 3:\n                    o.put = e.string();\n                    break;\n                case 4:\n                    o.post = e.string();\n                    break;\n                case 5:\n                    o.delete = e.string();\n                    break;\n                case 6:\n                    o.patch = e.string();\n                    break;\n                case 8:\n                    o.custom = p.google.api.CustomHttpPattern.decode(e, e.uint32());\n                    break;\n                case 7:\n                    o.body = e.string();\n                    break;\n                case 12:\n                    o.responseBody = e.string();\n                    break;\n                case 11:\n                    o.additionalBindings && o.additionalBindings.length || (o.additionalBindings = []), o.additionalBindings.push(p.google.api.HttpRule.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, f.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, f.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        var t = {};\n        if (null != e.selector && e.hasOwnProperty(\"selector\") && !i.isString(e.selector)) return \"selector: string expected\";\n        if (null != e.get && e.hasOwnProperty(\"get\") && (t.pattern = 1, !i.isString(e.get))) return \"get: string expected\";\n        if (null != e.put && e.hasOwnProperty(\"put\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !i.isString(e.put)) return \"put: string expected\";\n        }\n        if (null != e.post && e.hasOwnProperty(\"post\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !i.isString(e.post)) return \"post: string expected\";\n        }\n        if (null != e.delete && e.hasOwnProperty(\"delete\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !i.isString(e.delete)) return \"delete: string expected\";\n        }\n        if (null != e.patch && e.hasOwnProperty(\"patch\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, !i.isString(e.patch)) return \"patch: string expected\";\n        }\n        if (null != e.custom && e.hasOwnProperty(\"custom\")) {\n            if (1 === t.pattern) return \"pattern: multiple values\";\n            if (t.pattern = 1, n = p.google.api.CustomHttpPattern.verify(e.custom)) return \"custom.\" + n;\n        }\n        if (null != e.body && e.hasOwnProperty(\"body\") && !i.isString(e.body)) return \"body: string expected\";\n        if (null != e.responseBody && e.hasOwnProperty(\"responseBody\") && !i.isString(e.responseBody)) return \"responseBody: string expected\";\n        if (null != e.additionalBindings && e.hasOwnProperty(\"additionalBindings\")) {\n            if (!Array.isArray(e.additionalBindings)) return \"additionalBindings: array expected\";\n            for(var n, o = 0; o < e.additionalBindings.length; ++o)if (n = p.google.api.HttpRule.verify(e.additionalBindings[o])) return \"additionalBindings.\" + n;\n        }\n        return null;\n    }, f.fromObject = function(e) {\n        if (e instanceof p.google.api.HttpRule) return e;\n        var t = new p.google.api.HttpRule;\n        if (null != e.selector && (t.selector = String(e.selector)), null != e.get && (t.get = String(e.get)), null != e.put && (t.put = String(e.put)), null != e.post && (t.post = String(e.post)), null != e.delete && (t.delete = String(e.delete)), null != e.patch && (t.patch = String(e.patch)), null != e.custom) {\n            if (\"object\" != typeof e.custom) throw TypeError(\".google.api.HttpRule.custom: object expected\");\n            t.custom = p.google.api.CustomHttpPattern.fromObject(e.custom);\n        }\n        if (null != e.body && (t.body = String(e.body)), null != e.responseBody && (t.responseBody = String(e.responseBody)), e.additionalBindings) {\n            if (!Array.isArray(e.additionalBindings)) throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");\n            t.additionalBindings = [];\n            for(var n = 0; n < e.additionalBindings.length; ++n){\n                if (\"object\" != typeof e.additionalBindings[n]) throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");\n                t.additionalBindings[n] = p.google.api.HttpRule.fromObject(e.additionalBindings[n]);\n            }\n        }\n        return t;\n    }, f.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.additionalBindings = []), t.defaults && (n.selector = \"\", n.body = \"\", n.responseBody = \"\"), null != e.selector && e.hasOwnProperty(\"selector\") && (n.selector = e.selector), null != e.get && e.hasOwnProperty(\"get\") && (n.get = e.get, t.oneofs) && (n.pattern = \"get\"), null != e.put && e.hasOwnProperty(\"put\") && (n.put = e.put, t.oneofs) && (n.pattern = \"put\"), null != e.post && e.hasOwnProperty(\"post\") && (n.post = e.post, t.oneofs) && (n.pattern = \"post\"), null != e.delete && e.hasOwnProperty(\"delete\") && (n.delete = e.delete, t.oneofs) && (n.pattern = \"delete\"), null != e.patch && e.hasOwnProperty(\"patch\") && (n.patch = e.patch, t.oneofs) && (n.pattern = \"patch\"), null != e.body && e.hasOwnProperty(\"body\") && (n.body = e.body), null != e.custom && e.hasOwnProperty(\"custom\") && (n.custom = p.google.api.CustomHttpPattern.toObject(e.custom, t), t.oneofs) && (n.pattern = \"custom\"), e.additionalBindings && e.additionalBindings.length) {\n            n.additionalBindings = [];\n            for(var o = 0; o < e.additionalBindings.length; ++o)n.additionalBindings[o] = p.google.api.HttpRule.toObject(e.additionalBindings[o], t);\n        }\n        return null != e.responseBody && e.hasOwnProperty(\"responseBody\") && (n.responseBody = e.responseBody), n;\n    }, f.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, f), n.CustomHttpPattern = (y.prototype.kind = \"\", y.prototype.path = \"\", y.create = function(e) {\n        return new y(e);\n    }, y.encode = function(e, t) {\n        return t = t || r.create(), null != e.kind && Object.hasOwnProperty.call(e, \"kind\") && t.uint32(10).string(e.kind), null != e.path && Object.hasOwnProperty.call(e, \"path\") && t.uint32(18).string(e.path), t;\n    }, y.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, y.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.api.CustomHttpPattern; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.kind = e.string();\n                    break;\n                case 2:\n                    o.path = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, y.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, y.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.kind && e.hasOwnProperty(\"kind\") && !i.isString(e.kind) ? \"kind: string expected\" : null != e.path && e.hasOwnProperty(\"path\") && !i.isString(e.path) ? \"path: string expected\" : null;\n    }, y.fromObject = function(e) {\n        var t;\n        return e instanceof p.google.api.CustomHttpPattern ? e : (t = new p.google.api.CustomHttpPattern, null != e.kind && (t.kind = String(e.kind)), null != e.path && (t.path = String(e.path)), t);\n    }, y.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.kind = \"\", n.path = \"\"), null != e.kind && e.hasOwnProperty(\"kind\") && (n.kind = e.kind), null != e.path && e.hasOwnProperty(\"path\") && (n.path = e.path), n;\n    }, y.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, y), n), F.protobuf = ((t = {}).FileDescriptorSet = (J.prototype.file = i.emptyArray, J.create = function(e) {\n        return new J(e);\n    }, J.encode = function(e, t) {\n        if (t = t || r.create(), null != e.file && e.file.length) for(var n = 0; n < e.file.length; ++n)p.google.protobuf.FileDescriptorProto.encode(e.file[n], t.uint32(10).fork()).ldelim();\n        return t;\n    }, J.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, J.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.FileDescriptorSet; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? (o.file && o.file.length || (o.file = []), o.file.push(p.google.protobuf.FileDescriptorProto.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, J.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, J.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.file && e.hasOwnProperty(\"file\")) {\n            if (!Array.isArray(e.file)) return \"file: array expected\";\n            for(var t = 0; t < e.file.length; ++t){\n                var n = p.google.protobuf.FileDescriptorProto.verify(e.file[t]);\n                if (n) return \"file.\" + n;\n            }\n        }\n        return null;\n    }, J.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.FileDescriptorSet) return e;\n        var t = new p.google.protobuf.FileDescriptorSet;\n        if (e.file) {\n            if (!Array.isArray(e.file)) throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");\n            t.file = [];\n            for(var n = 0; n < e.file.length; ++n){\n                if (\"object\" != typeof e.file[n]) throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");\n                t.file[n] = p.google.protobuf.FileDescriptorProto.fromObject(e.file[n]);\n            }\n        }\n        return t;\n    }, J.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.file = []), e.file && e.file.length) {\n            n.file = [];\n            for(var o = 0; o < e.file.length; ++o)n.file[o] = p.google.protobuf.FileDescriptorProto.toObject(e.file[o], t);\n        }\n        return n;\n    }, J.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, J), t.FileDescriptorProto = (h.prototype.name = \"\", h.prototype.package = \"\", h.prototype.dependency = i.emptyArray, h.prototype.publicDependency = i.emptyArray, h.prototype.weakDependency = i.emptyArray, h.prototype.messageType = i.emptyArray, h.prototype.enumType = i.emptyArray, h.prototype.service = i.emptyArray, h.prototype.extension = i.emptyArray, h.prototype.options = null, h.prototype.sourceCodeInfo = null, h.prototype.syntax = \"\", h.create = function(e) {\n        return new h(e);\n    }, h.encode = function(e, t) {\n        if (t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.package && Object.hasOwnProperty.call(e, \"package\") && t.uint32(18).string(e.package), null != e.dependency && e.dependency.length) for(var n = 0; n < e.dependency.length; ++n)t.uint32(26).string(e.dependency[n]);\n        if (null != e.messageType && e.messageType.length) for(n = 0; n < e.messageType.length; ++n)p.google.protobuf.DescriptorProto.encode(e.messageType[n], t.uint32(34).fork()).ldelim();\n        if (null != e.enumType && e.enumType.length) for(n = 0; n < e.enumType.length; ++n)p.google.protobuf.EnumDescriptorProto.encode(e.enumType[n], t.uint32(42).fork()).ldelim();\n        if (null != e.service && e.service.length) for(n = 0; n < e.service.length; ++n)p.google.protobuf.ServiceDescriptorProto.encode(e.service[n], t.uint32(50).fork()).ldelim();\n        if (null != e.extension && e.extension.length) for(n = 0; n < e.extension.length; ++n)p.google.protobuf.FieldDescriptorProto.encode(e.extension[n], t.uint32(58).fork()).ldelim();\n        if (null != e.options && Object.hasOwnProperty.call(e, \"options\") && p.google.protobuf.FileOptions.encode(e.options, t.uint32(66).fork()).ldelim(), null != e.sourceCodeInfo && Object.hasOwnProperty.call(e, \"sourceCodeInfo\") && p.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo, t.uint32(74).fork()).ldelim(), null != e.publicDependency && e.publicDependency.length) for(n = 0; n < e.publicDependency.length; ++n)t.uint32(80).int32(e.publicDependency[n]);\n        if (null != e.weakDependency && e.weakDependency.length) for(n = 0; n < e.weakDependency.length; ++n)t.uint32(88).int32(e.weakDependency[n]);\n        return null != e.syntax && Object.hasOwnProperty.call(e, \"syntax\") && t.uint32(98).string(e.syntax), t;\n    }, h.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, h.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.FileDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.package = e.string();\n                    break;\n                case 3:\n                    o.dependency && o.dependency.length || (o.dependency = []), o.dependency.push(e.string());\n                    break;\n                case 10:\n                    if (o.publicDependency && o.publicDependency.length || (o.publicDependency = []), 2 == (7 & r)) for(var i = e.uint32() + e.pos; e.pos < i;)o.publicDependency.push(e.int32());\n                    else o.publicDependency.push(e.int32());\n                    break;\n                case 11:\n                    if (o.weakDependency && o.weakDependency.length || (o.weakDependency = []), 2 == (7 & r)) for(i = e.uint32() + e.pos; e.pos < i;)o.weakDependency.push(e.int32());\n                    else o.weakDependency.push(e.int32());\n                    break;\n                case 4:\n                    o.messageType && o.messageType.length || (o.messageType = []), o.messageType.push(p.google.protobuf.DescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 5:\n                    o.enumType && o.enumType.length || (o.enumType = []), o.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 6:\n                    o.service && o.service.length || (o.service = []), o.service.push(p.google.protobuf.ServiceDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 7:\n                    o.extension && o.extension.length || (o.extension = []), o.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 8:\n                    o.options = p.google.protobuf.FileOptions.decode(e, e.uint32());\n                    break;\n                case 9:\n                    o.sourceCodeInfo = p.google.protobuf.SourceCodeInfo.decode(e, e.uint32());\n                    break;\n                case 12:\n                    o.syntax = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, h.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, h.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name)) return \"name: string expected\";\n        if (null != e.package && e.hasOwnProperty(\"package\") && !i.isString(e.package)) return \"package: string expected\";\n        if (null != e.dependency && e.hasOwnProperty(\"dependency\")) {\n            if (!Array.isArray(e.dependency)) return \"dependency: array expected\";\n            for(var t = 0; t < e.dependency.length; ++t)if (!i.isString(e.dependency[t])) return \"dependency: string[] expected\";\n        }\n        if (null != e.publicDependency && e.hasOwnProperty(\"publicDependency\")) {\n            if (!Array.isArray(e.publicDependency)) return \"publicDependency: array expected\";\n            for(t = 0; t < e.publicDependency.length; ++t)if (!i.isInteger(e.publicDependency[t])) return \"publicDependency: integer[] expected\";\n        }\n        if (null != e.weakDependency && e.hasOwnProperty(\"weakDependency\")) {\n            if (!Array.isArray(e.weakDependency)) return \"weakDependency: array expected\";\n            for(t = 0; t < e.weakDependency.length; ++t)if (!i.isInteger(e.weakDependency[t])) return \"weakDependency: integer[] expected\";\n        }\n        if (null != e.messageType && e.hasOwnProperty(\"messageType\")) {\n            if (!Array.isArray(e.messageType)) return \"messageType: array expected\";\n            for(t = 0; t < e.messageType.length; ++t)if (n = p.google.protobuf.DescriptorProto.verify(e.messageType[t])) return \"messageType.\" + n;\n        }\n        if (null != e.enumType && e.hasOwnProperty(\"enumType\")) {\n            if (!Array.isArray(e.enumType)) return \"enumType: array expected\";\n            for(t = 0; t < e.enumType.length; ++t)if (n = p.google.protobuf.EnumDescriptorProto.verify(e.enumType[t])) return \"enumType.\" + n;\n        }\n        if (null != e.service && e.hasOwnProperty(\"service\")) {\n            if (!Array.isArray(e.service)) return \"service: array expected\";\n            for(t = 0; t < e.service.length; ++t)if (n = p.google.protobuf.ServiceDescriptorProto.verify(e.service[t])) return \"service.\" + n;\n        }\n        if (null != e.extension && e.hasOwnProperty(\"extension\")) {\n            if (!Array.isArray(e.extension)) return \"extension: array expected\";\n            for(t = 0; t < e.extension.length; ++t)if (n = p.google.protobuf.FieldDescriptorProto.verify(e.extension[t])) return \"extension.\" + n;\n        }\n        var n;\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = p.google.protobuf.FileOptions.verify(e.options))) return \"options.\" + n;\n        if (null != e.sourceCodeInfo && e.hasOwnProperty(\"sourceCodeInfo\") && (n = p.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo))) return \"sourceCodeInfo.\" + n;\n        return null != e.syntax && e.hasOwnProperty(\"syntax\") && !i.isString(e.syntax) ? \"syntax: string expected\" : null;\n    }, h.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.FileDescriptorProto) return e;\n        var t = new p.google.protobuf.FileDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.package && (t.package = String(e.package)), e.dependency) {\n            if (!Array.isArray(e.dependency)) throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");\n            t.dependency = [];\n            for(var n = 0; n < e.dependency.length; ++n)t.dependency[n] = String(e.dependency[n]);\n        }\n        if (e.publicDependency) {\n            if (!Array.isArray(e.publicDependency)) throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");\n            t.publicDependency = [];\n            for(n = 0; n < e.publicDependency.length; ++n)t.publicDependency[n] = 0 | e.publicDependency[n];\n        }\n        if (e.weakDependency) {\n            if (!Array.isArray(e.weakDependency)) throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");\n            t.weakDependency = [];\n            for(n = 0; n < e.weakDependency.length; ++n)t.weakDependency[n] = 0 | e.weakDependency[n];\n        }\n        if (e.messageType) {\n            if (!Array.isArray(e.messageType)) throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");\n            t.messageType = [];\n            for(n = 0; n < e.messageType.length; ++n){\n                if (\"object\" != typeof e.messageType[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");\n                t.messageType[n] = p.google.protobuf.DescriptorProto.fromObject(e.messageType[n]);\n            }\n        }\n        if (e.enumType) {\n            if (!Array.isArray(e.enumType)) throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");\n            t.enumType = [];\n            for(n = 0; n < e.enumType.length; ++n){\n                if (\"object\" != typeof e.enumType[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");\n                t.enumType[n] = p.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n]);\n            }\n        }\n        if (e.service) {\n            if (!Array.isArray(e.service)) throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");\n            t.service = [];\n            for(n = 0; n < e.service.length; ++n){\n                if (\"object\" != typeof e.service[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");\n                t.service[n] = p.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n]);\n            }\n        }\n        if (e.extension) {\n            if (!Array.isArray(e.extension)) throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");\n            t.extension = [];\n            for(n = 0; n < e.extension.length; ++n){\n                if (\"object\" != typeof e.extension[n]) throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");\n                t.extension[n] = p.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");\n            t.options = p.google.protobuf.FileOptions.fromObject(e.options);\n        }\n        if (null != e.sourceCodeInfo) {\n            if (\"object\" != typeof e.sourceCodeInfo) throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");\n            t.sourceCodeInfo = p.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo);\n        }\n        return null != e.syntax && (t.syntax = String(e.syntax)), t;\n    }, h.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.dependency = [], n.messageType = [], n.enumType = [], n.service = [], n.extension = [], n.publicDependency = [], n.weakDependency = []), t.defaults && (n.name = \"\", n.package = \"\", n.options = null, n.sourceCodeInfo = null, n.syntax = \"\"), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.package && e.hasOwnProperty(\"package\") && (n.package = e.package), e.dependency && e.dependency.length) {\n            n.dependency = [];\n            for(var o = 0; o < e.dependency.length; ++o)n.dependency[o] = e.dependency[o];\n        }\n        if (e.messageType && e.messageType.length) {\n            n.messageType = [];\n            for(o = 0; o < e.messageType.length; ++o)n.messageType[o] = p.google.protobuf.DescriptorProto.toObject(e.messageType[o], t);\n        }\n        if (e.enumType && e.enumType.length) {\n            n.enumType = [];\n            for(o = 0; o < e.enumType.length; ++o)n.enumType[o] = p.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o], t);\n        }\n        if (e.service && e.service.length) {\n            n.service = [];\n            for(o = 0; o < e.service.length; ++o)n.service[o] = p.google.protobuf.ServiceDescriptorProto.toObject(e.service[o], t);\n        }\n        if (e.extension && e.extension.length) {\n            n.extension = [];\n            for(o = 0; o < e.extension.length; ++o)n.extension[o] = p.google.protobuf.FieldDescriptorProto.toObject(e.extension[o], t);\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n.options = p.google.protobuf.FileOptions.toObject(e.options, t)), null != e.sourceCodeInfo && e.hasOwnProperty(\"sourceCodeInfo\") && (n.sourceCodeInfo = p.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo, t)), e.publicDependency && e.publicDependency.length) {\n            n.publicDependency = [];\n            for(o = 0; o < e.publicDependency.length; ++o)n.publicDependency[o] = e.publicDependency[o];\n        }\n        if (e.weakDependency && e.weakDependency.length) {\n            n.weakDependency = [];\n            for(o = 0; o < e.weakDependency.length; ++o)n.weakDependency[o] = e.weakDependency[o];\n        }\n        return null != e.syntax && e.hasOwnProperty(\"syntax\") && (n.syntax = e.syntax), n;\n    }, h.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, h), t.DescriptorProto = (O.prototype.name = \"\", O.prototype.field = i.emptyArray, O.prototype.extension = i.emptyArray, O.prototype.nestedType = i.emptyArray, O.prototype.enumType = i.emptyArray, O.prototype.extensionRange = i.emptyArray, O.prototype.oneofDecl = i.emptyArray, O.prototype.options = null, O.prototype.reservedRange = i.emptyArray, O.prototype.reservedName = i.emptyArray, O.create = function(e) {\n        return new O(e);\n    }, O.encode = function(e, t) {\n        if (t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.field && e.field.length) for(var n = 0; n < e.field.length; ++n)p.google.protobuf.FieldDescriptorProto.encode(e.field[n], t.uint32(18).fork()).ldelim();\n        if (null != e.nestedType && e.nestedType.length) for(n = 0; n < e.nestedType.length; ++n)p.google.protobuf.DescriptorProto.encode(e.nestedType[n], t.uint32(26).fork()).ldelim();\n        if (null != e.enumType && e.enumType.length) for(n = 0; n < e.enumType.length; ++n)p.google.protobuf.EnumDescriptorProto.encode(e.enumType[n], t.uint32(34).fork()).ldelim();\n        if (null != e.extensionRange && e.extensionRange.length) for(n = 0; n < e.extensionRange.length; ++n)p.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n], t.uint32(42).fork()).ldelim();\n        if (null != e.extension && e.extension.length) for(n = 0; n < e.extension.length; ++n)p.google.protobuf.FieldDescriptorProto.encode(e.extension[n], t.uint32(50).fork()).ldelim();\n        if (null != e.options && Object.hasOwnProperty.call(e, \"options\") && p.google.protobuf.MessageOptions.encode(e.options, t.uint32(58).fork()).ldelim(), null != e.oneofDecl && e.oneofDecl.length) for(n = 0; n < e.oneofDecl.length; ++n)p.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n], t.uint32(66).fork()).ldelim();\n        if (null != e.reservedRange && e.reservedRange.length) for(n = 0; n < e.reservedRange.length; ++n)p.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n], t.uint32(74).fork()).ldelim();\n        if (null != e.reservedName && e.reservedName.length) for(n = 0; n < e.reservedName.length; ++n)t.uint32(82).string(e.reservedName[n]);\n        return t;\n    }, O.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, O.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.DescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.field && o.field.length || (o.field = []), o.field.push(p.google.protobuf.FieldDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 6:\n                    o.extension && o.extension.length || (o.extension = []), o.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.nestedType && o.nestedType.length || (o.nestedType = []), o.nestedType.push(p.google.protobuf.DescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 4:\n                    o.enumType && o.enumType.length || (o.enumType = []), o.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 5:\n                    o.extensionRange && o.extensionRange.length || (o.extensionRange = []), o.extensionRange.push(p.google.protobuf.DescriptorProto.ExtensionRange.decode(e, e.uint32()));\n                    break;\n                case 8:\n                    o.oneofDecl && o.oneofDecl.length || (o.oneofDecl = []), o.oneofDecl.push(p.google.protobuf.OneofDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 7:\n                    o.options = p.google.protobuf.MessageOptions.decode(e, e.uint32());\n                    break;\n                case 9:\n                    o.reservedRange && o.reservedRange.length || (o.reservedRange = []), o.reservedRange.push(p.google.protobuf.DescriptorProto.ReservedRange.decode(e, e.uint32()));\n                    break;\n                case 10:\n                    o.reservedName && o.reservedName.length || (o.reservedName = []), o.reservedName.push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, O.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, O.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name)) return \"name: string expected\";\n        if (null != e.field && e.hasOwnProperty(\"field\")) {\n            if (!Array.isArray(e.field)) return \"field: array expected\";\n            for(var t = 0; t < e.field.length; ++t)if (n = p.google.protobuf.FieldDescriptorProto.verify(e.field[t])) return \"field.\" + n;\n        }\n        if (null != e.extension && e.hasOwnProperty(\"extension\")) {\n            if (!Array.isArray(e.extension)) return \"extension: array expected\";\n            for(t = 0; t < e.extension.length; ++t)if (n = p.google.protobuf.FieldDescriptorProto.verify(e.extension[t])) return \"extension.\" + n;\n        }\n        if (null != e.nestedType && e.hasOwnProperty(\"nestedType\")) {\n            if (!Array.isArray(e.nestedType)) return \"nestedType: array expected\";\n            for(t = 0; t < e.nestedType.length; ++t)if (n = p.google.protobuf.DescriptorProto.verify(e.nestedType[t])) return \"nestedType.\" + n;\n        }\n        if (null != e.enumType && e.hasOwnProperty(\"enumType\")) {\n            if (!Array.isArray(e.enumType)) return \"enumType: array expected\";\n            for(t = 0; t < e.enumType.length; ++t)if (n = p.google.protobuf.EnumDescriptorProto.verify(e.enumType[t])) return \"enumType.\" + n;\n        }\n        if (null != e.extensionRange && e.hasOwnProperty(\"extensionRange\")) {\n            if (!Array.isArray(e.extensionRange)) return \"extensionRange: array expected\";\n            for(t = 0; t < e.extensionRange.length; ++t)if (n = p.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t])) return \"extensionRange.\" + n;\n        }\n        if (null != e.oneofDecl && e.hasOwnProperty(\"oneofDecl\")) {\n            if (!Array.isArray(e.oneofDecl)) return \"oneofDecl: array expected\";\n            for(t = 0; t < e.oneofDecl.length; ++t)if (n = p.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t])) return \"oneofDecl.\" + n;\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = p.google.protobuf.MessageOptions.verify(e.options))) return \"options.\" + n;\n        if (null != e.reservedRange && e.hasOwnProperty(\"reservedRange\")) {\n            if (!Array.isArray(e.reservedRange)) return \"reservedRange: array expected\";\n            for(var n, t = 0; t < e.reservedRange.length; ++t)if (n = p.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t])) return \"reservedRange.\" + n;\n        }\n        if (null != e.reservedName && e.hasOwnProperty(\"reservedName\")) {\n            if (!Array.isArray(e.reservedName)) return \"reservedName: array expected\";\n            for(t = 0; t < e.reservedName.length; ++t)if (!i.isString(e.reservedName[t])) return \"reservedName: string[] expected\";\n        }\n        return null;\n    }, O.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.DescriptorProto) return e;\n        var t = new p.google.protobuf.DescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), e.field) {\n            if (!Array.isArray(e.field)) throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");\n            t.field = [];\n            for(var n = 0; n < e.field.length; ++n){\n                if (\"object\" != typeof e.field[n]) throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");\n                t.field[n] = p.google.protobuf.FieldDescriptorProto.fromObject(e.field[n]);\n            }\n        }\n        if (e.extension) {\n            if (!Array.isArray(e.extension)) throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");\n            t.extension = [];\n            for(n = 0; n < e.extension.length; ++n){\n                if (\"object\" != typeof e.extension[n]) throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");\n                t.extension[n] = p.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n]);\n            }\n        }\n        if (e.nestedType) {\n            if (!Array.isArray(e.nestedType)) throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");\n            t.nestedType = [];\n            for(n = 0; n < e.nestedType.length; ++n){\n                if (\"object\" != typeof e.nestedType[n]) throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");\n                t.nestedType[n] = p.google.protobuf.DescriptorProto.fromObject(e.nestedType[n]);\n            }\n        }\n        if (e.enumType) {\n            if (!Array.isArray(e.enumType)) throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");\n            t.enumType = [];\n            for(n = 0; n < e.enumType.length; ++n){\n                if (\"object\" != typeof e.enumType[n]) throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");\n                t.enumType[n] = p.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n]);\n            }\n        }\n        if (e.extensionRange) {\n            if (!Array.isArray(e.extensionRange)) throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");\n            t.extensionRange = [];\n            for(n = 0; n < e.extensionRange.length; ++n){\n                if (\"object\" != typeof e.extensionRange[n]) throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");\n                t.extensionRange[n] = p.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n]);\n            }\n        }\n        if (e.oneofDecl) {\n            if (!Array.isArray(e.oneofDecl)) throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");\n            t.oneofDecl = [];\n            for(n = 0; n < e.oneofDecl.length; ++n){\n                if (\"object\" != typeof e.oneofDecl[n]) throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");\n                t.oneofDecl[n] = p.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");\n            t.options = p.google.protobuf.MessageOptions.fromObject(e.options);\n        }\n        if (e.reservedRange) {\n            if (!Array.isArray(e.reservedRange)) throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");\n            t.reservedRange = [];\n            for(n = 0; n < e.reservedRange.length; ++n){\n                if (\"object\" != typeof e.reservedRange[n]) throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");\n                t.reservedRange[n] = p.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n]);\n            }\n        }\n        if (e.reservedName) {\n            if (!Array.isArray(e.reservedName)) throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");\n            t.reservedName = [];\n            for(n = 0; n < e.reservedName.length; ++n)t.reservedName[n] = String(e.reservedName[n]);\n        }\n        return t;\n    }, O.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.field = [], n.nestedType = [], n.enumType = [], n.extensionRange = [], n.extension = [], n.oneofDecl = [], n.reservedRange = [], n.reservedName = []), t.defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), e.field && e.field.length) {\n            n.field = [];\n            for(var o = 0; o < e.field.length; ++o)n.field[o] = p.google.protobuf.FieldDescriptorProto.toObject(e.field[o], t);\n        }\n        if (e.nestedType && e.nestedType.length) {\n            n.nestedType = [];\n            for(o = 0; o < e.nestedType.length; ++o)n.nestedType[o] = p.google.protobuf.DescriptorProto.toObject(e.nestedType[o], t);\n        }\n        if (e.enumType && e.enumType.length) {\n            n.enumType = [];\n            for(o = 0; o < e.enumType.length; ++o)n.enumType[o] = p.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o], t);\n        }\n        if (e.extensionRange && e.extensionRange.length) {\n            n.extensionRange = [];\n            for(o = 0; o < e.extensionRange.length; ++o)n.extensionRange[o] = p.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o], t);\n        }\n        if (e.extension && e.extension.length) {\n            n.extension = [];\n            for(o = 0; o < e.extension.length; ++o)n.extension[o] = p.google.protobuf.FieldDescriptorProto.toObject(e.extension[o], t);\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n.options = p.google.protobuf.MessageOptions.toObject(e.options, t)), e.oneofDecl && e.oneofDecl.length) {\n            n.oneofDecl = [];\n            for(o = 0; o < e.oneofDecl.length; ++o)n.oneofDecl[o] = p.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o], t);\n        }\n        if (e.reservedRange && e.reservedRange.length) {\n            n.reservedRange = [];\n            for(o = 0; o < e.reservedRange.length; ++o)n.reservedRange[o] = p.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o], t);\n        }\n        if (e.reservedName && e.reservedName.length) {\n            n.reservedName = [];\n            for(o = 0; o < e.reservedName.length; ++o)n.reservedName[o] = e.reservedName[o];\n        }\n        return n;\n    }, O.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, O.ExtensionRange = (b.prototype.start = 0, b.prototype.end = 0, b.prototype.options = null, b.create = function(e) {\n        return new b(e);\n    }, b.encode = function(e, t) {\n        return t = t || r.create(), null != e.start && Object.hasOwnProperty.call(e, \"start\") && t.uint32(8).int32(e.start), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(16).int32(e.end), null != e.options && Object.hasOwnProperty.call(e, \"options\") && p.google.protobuf.ExtensionRangeOptions.encode(e.options, t.uint32(26).fork()).ldelim(), t;\n    }, b.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, b.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.DescriptorProto.ExtensionRange; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.start = e.int32();\n                    break;\n                case 2:\n                    o.end = e.int32();\n                    break;\n                case 3:\n                    o.options = p.google.protobuf.ExtensionRangeOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, b.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, b.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.start && e.hasOwnProperty(\"start\") && !i.isInteger(e.start)) return \"start: integer expected\";\n        if (null != e.end && e.hasOwnProperty(\"end\") && !i.isInteger(e.end)) return \"end: integer expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            e = p.google.protobuf.ExtensionRangeOptions.verify(e.options);\n            if (e) return \"options.\" + e;\n        }\n        return null;\n    }, b.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.DescriptorProto.ExtensionRange) return e;\n        var t = new p.google.protobuf.DescriptorProto.ExtensionRange;\n        if (null != e.start && (t.start = 0 | e.start), null != e.end && (t.end = 0 | e.end), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");\n            t.options = p.google.protobuf.ExtensionRangeOptions.fromObject(e.options);\n        }\n        return t;\n    }, b.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.start = 0, n.end = 0, n.options = null), null != e.start && e.hasOwnProperty(\"start\") && (n.start = e.start), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), null != e.options && e.hasOwnProperty(\"options\") && (n.options = p.google.protobuf.ExtensionRangeOptions.toObject(e.options, t)), n;\n    }, b.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, b), O.ReservedRange = (m.prototype.start = 0, m.prototype.end = 0, m.create = function(e) {\n        return new m(e);\n    }, m.encode = function(e, t) {\n        return t = t || r.create(), null != e.start && Object.hasOwnProperty.call(e, \"start\") && t.uint32(8).int32(e.start), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(16).int32(e.end), t;\n    }, m.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, m.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.DescriptorProto.ReservedRange; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.start = e.int32();\n                    break;\n                case 2:\n                    o.end = e.int32();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, m.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, m.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.start && e.hasOwnProperty(\"start\") && !i.isInteger(e.start) ? \"start: integer expected\" : null != e.end && e.hasOwnProperty(\"end\") && !i.isInteger(e.end) ? \"end: integer expected\" : null;\n    }, m.fromObject = function(e) {\n        var t;\n        return e instanceof p.google.protobuf.DescriptorProto.ReservedRange ? e : (t = new p.google.protobuf.DescriptorProto.ReservedRange, null != e.start && (t.start = 0 | e.start), null != e.end && (t.end = 0 | e.end), t);\n    }, m.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.start = 0, n.end = 0), null != e.start && e.hasOwnProperty(\"start\") && (n.start = e.start), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), n;\n    }, m.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, m), O), t.ExtensionRangeOptions = (M.prototype.uninterpretedOption = i.emptyArray, M.create = function(e) {\n        return new M(e);\n    }, M.encode = function(e, t) {\n        if (t = t || r.create(), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, M.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, M.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.ExtensionRangeOptions; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 999 ? (o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, M.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, M.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, M.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.ExtensionRangeOptions) return e;\n        var t = new p.google.protobuf.ExtensionRangeOptions;\n        if (e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, M.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, M.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, M), t.FieldDescriptorProto = (v.prototype.name = \"\", v.prototype.number = 0, v.prototype.label = 1, v.prototype.type = 1, v.prototype.typeName = \"\", v.prototype.extendee = \"\", v.prototype.defaultValue = \"\", v.prototype.oneofIndex = 0, v.prototype.jsonName = \"\", v.prototype.options = null, v.prototype.proto3Optional = !1, v.create = function(e) {\n        return new v(e);\n    }, v.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.extendee && Object.hasOwnProperty.call(e, \"extendee\") && t.uint32(18).string(e.extendee), null != e.number && Object.hasOwnProperty.call(e, \"number\") && t.uint32(24).int32(e.number), null != e.label && Object.hasOwnProperty.call(e, \"label\") && t.uint32(32).int32(e.label), null != e.type && Object.hasOwnProperty.call(e, \"type\") && t.uint32(40).int32(e.type), null != e.typeName && Object.hasOwnProperty.call(e, \"typeName\") && t.uint32(50).string(e.typeName), null != e.defaultValue && Object.hasOwnProperty.call(e, \"defaultValue\") && t.uint32(58).string(e.defaultValue), null != e.options && Object.hasOwnProperty.call(e, \"options\") && p.google.protobuf.FieldOptions.encode(e.options, t.uint32(66).fork()).ldelim(), null != e.oneofIndex && Object.hasOwnProperty.call(e, \"oneofIndex\") && t.uint32(72).int32(e.oneofIndex), null != e.jsonName && Object.hasOwnProperty.call(e, \"jsonName\") && t.uint32(82).string(e.jsonName), null != e.proto3Optional && Object.hasOwnProperty.call(e, \"proto3Optional\") && t.uint32(136).bool(e.proto3Optional), t;\n    }, v.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, v.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.FieldDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 3:\n                    o.number = e.int32();\n                    break;\n                case 4:\n                    o.label = e.int32();\n                    break;\n                case 5:\n                    o.type = e.int32();\n                    break;\n                case 6:\n                    o.typeName = e.string();\n                    break;\n                case 2:\n                    o.extendee = e.string();\n                    break;\n                case 7:\n                    o.defaultValue = e.string();\n                    break;\n                case 9:\n                    o.oneofIndex = e.int32();\n                    break;\n                case 10:\n                    o.jsonName = e.string();\n                    break;\n                case 8:\n                    o.options = p.google.protobuf.FieldOptions.decode(e, e.uint32());\n                    break;\n                case 17:\n                    o.proto3Optional = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, v.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, v.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name)) return \"name: string expected\";\n        if (null != e.number && e.hasOwnProperty(\"number\") && !i.isInteger(e.number)) return \"number: integer expected\";\n        if (null != e.label && e.hasOwnProperty(\"label\")) switch(e.label){\n            default:\n                return \"label: enum value expected\";\n            case 1:\n            case 2:\n            case 3:\n        }\n        if (null != e.type && e.hasOwnProperty(\"type\")) switch(e.type){\n            default:\n                return \"type: enum value expected\";\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n            case 16:\n            case 17:\n            case 18:\n        }\n        if (null != e.typeName && e.hasOwnProperty(\"typeName\") && !i.isString(e.typeName)) return \"typeName: string expected\";\n        if (null != e.extendee && e.hasOwnProperty(\"extendee\") && !i.isString(e.extendee)) return \"extendee: string expected\";\n        if (null != e.defaultValue && e.hasOwnProperty(\"defaultValue\") && !i.isString(e.defaultValue)) return \"defaultValue: string expected\";\n        if (null != e.oneofIndex && e.hasOwnProperty(\"oneofIndex\") && !i.isInteger(e.oneofIndex)) return \"oneofIndex: integer expected\";\n        if (null != e.jsonName && e.hasOwnProperty(\"jsonName\") && !i.isString(e.jsonName)) return \"jsonName: string expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            var t = p.google.protobuf.FieldOptions.verify(e.options);\n            if (t) return \"options.\" + t;\n        }\n        return null != e.proto3Optional && e.hasOwnProperty(\"proto3Optional\") && \"boolean\" != typeof e.proto3Optional ? \"proto3Optional: boolean expected\" : null;\n    }, v.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.FieldDescriptorProto) return e;\n        var t = new p.google.protobuf.FieldDescriptorProto;\n        switch(null != e.name && (t.name = String(e.name)), null != e.number && (t.number = 0 | e.number), e.label){\n            case \"LABEL_OPTIONAL\":\n            case 1:\n                t.label = 1;\n                break;\n            case \"LABEL_REQUIRED\":\n            case 2:\n                t.label = 2;\n                break;\n            case \"LABEL_REPEATED\":\n            case 3:\n                t.label = 3;\n        }\n        switch(e.type){\n            case \"TYPE_DOUBLE\":\n            case 1:\n                t.type = 1;\n                break;\n            case \"TYPE_FLOAT\":\n            case 2:\n                t.type = 2;\n                break;\n            case \"TYPE_INT64\":\n            case 3:\n                t.type = 3;\n                break;\n            case \"TYPE_UINT64\":\n            case 4:\n                t.type = 4;\n                break;\n            case \"TYPE_INT32\":\n            case 5:\n                t.type = 5;\n                break;\n            case \"TYPE_FIXED64\":\n            case 6:\n                t.type = 6;\n                break;\n            case \"TYPE_FIXED32\":\n            case 7:\n                t.type = 7;\n                break;\n            case \"TYPE_BOOL\":\n            case 8:\n                t.type = 8;\n                break;\n            case \"TYPE_STRING\":\n            case 9:\n                t.type = 9;\n                break;\n            case \"TYPE_GROUP\":\n            case 10:\n                t.type = 10;\n                break;\n            case \"TYPE_MESSAGE\":\n            case 11:\n                t.type = 11;\n                break;\n            case \"TYPE_BYTES\":\n            case 12:\n                t.type = 12;\n                break;\n            case \"TYPE_UINT32\":\n            case 13:\n                t.type = 13;\n                break;\n            case \"TYPE_ENUM\":\n            case 14:\n                t.type = 14;\n                break;\n            case \"TYPE_SFIXED32\":\n            case 15:\n                t.type = 15;\n                break;\n            case \"TYPE_SFIXED64\":\n            case 16:\n                t.type = 16;\n                break;\n            case \"TYPE_SINT32\":\n            case 17:\n                t.type = 17;\n                break;\n            case \"TYPE_SINT64\":\n            case 18:\n                t.type = 18;\n        }\n        if (null != e.typeName && (t.typeName = String(e.typeName)), null != e.extendee && (t.extendee = String(e.extendee)), null != e.defaultValue && (t.defaultValue = String(e.defaultValue)), null != e.oneofIndex && (t.oneofIndex = 0 | e.oneofIndex), null != e.jsonName && (t.jsonName = String(e.jsonName)), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");\n            t.options = p.google.protobuf.FieldOptions.fromObject(e.options);\n        }\n        return null != e.proto3Optional && (t.proto3Optional = Boolean(e.proto3Optional)), t;\n    }, v.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.extendee = \"\", n.number = 0, n.label = t.enums === String ? \"LABEL_OPTIONAL\" : 1, n.type = t.enums === String ? \"TYPE_DOUBLE\" : 1, n.typeName = \"\", n.defaultValue = \"\", n.options = null, n.oneofIndex = 0, n.jsonName = \"\", n.proto3Optional = !1), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.extendee && e.hasOwnProperty(\"extendee\") && (n.extendee = e.extendee), null != e.number && e.hasOwnProperty(\"number\") && (n.number = e.number), null != e.label && e.hasOwnProperty(\"label\") && (n.label = t.enums === String ? p.google.protobuf.FieldDescriptorProto.Label[e.label] : e.label), null != e.type && e.hasOwnProperty(\"type\") && (n.type = t.enums === String ? p.google.protobuf.FieldDescriptorProto.Type[e.type] : e.type), null != e.typeName && e.hasOwnProperty(\"typeName\") && (n.typeName = e.typeName), null != e.defaultValue && e.hasOwnProperty(\"defaultValue\") && (n.defaultValue = e.defaultValue), null != e.options && e.hasOwnProperty(\"options\") && (n.options = p.google.protobuf.FieldOptions.toObject(e.options, t)), null != e.oneofIndex && e.hasOwnProperty(\"oneofIndex\") && (n.oneofIndex = e.oneofIndex), null != e.jsonName && e.hasOwnProperty(\"jsonName\") && (n.jsonName = e.jsonName), null != e.proto3Optional && e.hasOwnProperty(\"proto3Optional\") && (n.proto3Optional = e.proto3Optional), n;\n    }, v.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, v.Type = (n = {}, (e = Object.create(n))[n[1] = \"TYPE_DOUBLE\"] = 1, e[n[2] = \"TYPE_FLOAT\"] = 2, e[n[3] = \"TYPE_INT64\"] = 3, e[n[4] = \"TYPE_UINT64\"] = 4, e[n[5] = \"TYPE_INT32\"] = 5, e[n[6] = \"TYPE_FIXED64\"] = 6, e[n[7] = \"TYPE_FIXED32\"] = 7, e[n[8] = \"TYPE_BOOL\"] = 8, e[n[9] = \"TYPE_STRING\"] = 9, e[n[10] = \"TYPE_GROUP\"] = 10, e[n[11] = \"TYPE_MESSAGE\"] = 11, e[n[12] = \"TYPE_BYTES\"] = 12, e[n[13] = \"TYPE_UINT32\"] = 13, e[n[14] = \"TYPE_ENUM\"] = 14, e[n[15] = \"TYPE_SFIXED32\"] = 15, e[n[16] = \"TYPE_SFIXED64\"] = 16, e[n[17] = \"TYPE_SINT32\"] = 17, e[n[18] = \"TYPE_SINT64\"] = 18, e), v.Label = (n = {}, (e = Object.create(n))[n[1] = \"LABEL_OPTIONAL\"] = 1, e[n[2] = \"LABEL_REQUIRED\"] = 2, e[n[3] = \"LABEL_REPEATED\"] = 3, e), v), t.OneofDescriptorProto = (w.prototype.name = \"\", w.prototype.options = null, w.create = function(e) {\n        return new w(e);\n    }, w.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.options && Object.hasOwnProperty.call(e, \"options\") && p.google.protobuf.OneofOptions.encode(e.options, t.uint32(18).fork()).ldelim(), t;\n    }, w.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, w.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.OneofDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.options = p.google.protobuf.OneofOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, w.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, w.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name)) return \"name: string expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            e = p.google.protobuf.OneofOptions.verify(e.options);\n            if (e) return \"options.\" + e;\n        }\n        return null;\n    }, w.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.OneofDescriptorProto) return e;\n        var t = new p.google.protobuf.OneofDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");\n            t.options = p.google.protobuf.OneofOptions.fromObject(e.options);\n        }\n        return t;\n    }, w.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.options && e.hasOwnProperty(\"options\") && (n.options = p.google.protobuf.OneofOptions.toObject(e.options, t)), n;\n    }, w.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, w), t.EnumDescriptorProto = (P.prototype.name = \"\", P.prototype.value = i.emptyArray, P.prototype.options = null, P.prototype.reservedRange = i.emptyArray, P.prototype.reservedName = i.emptyArray, P.create = function(e) {\n        return new P(e);\n    }, P.encode = function(e, t) {\n        if (t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.value && e.value.length) for(var n = 0; n < e.value.length; ++n)p.google.protobuf.EnumValueDescriptorProto.encode(e.value[n], t.uint32(18).fork()).ldelim();\n        if (null != e.options && Object.hasOwnProperty.call(e, \"options\") && p.google.protobuf.EnumOptions.encode(e.options, t.uint32(26).fork()).ldelim(), null != e.reservedRange && e.reservedRange.length) for(n = 0; n < e.reservedRange.length; ++n)p.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n], t.uint32(34).fork()).ldelim();\n        if (null != e.reservedName && e.reservedName.length) for(n = 0; n < e.reservedName.length; ++n)t.uint32(42).string(e.reservedName[n]);\n        return t;\n    }, P.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, P.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.EnumDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.value && o.value.length || (o.value = []), o.value.push(p.google.protobuf.EnumValueDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.options = p.google.protobuf.EnumOptions.decode(e, e.uint32());\n                    break;\n                case 4:\n                    o.reservedRange && o.reservedRange.length || (o.reservedRange = []), o.reservedRange.push(p.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e, e.uint32()));\n                    break;\n                case 5:\n                    o.reservedName && o.reservedName.length || (o.reservedName = []), o.reservedName.push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, P.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, P.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name)) return \"name: string expected\";\n        if (null != e.value && e.hasOwnProperty(\"value\")) {\n            if (!Array.isArray(e.value)) return \"value: array expected\";\n            for(var t = 0; t < e.value.length; ++t)if (n = p.google.protobuf.EnumValueDescriptorProto.verify(e.value[t])) return \"value.\" + n;\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = p.google.protobuf.EnumOptions.verify(e.options))) return \"options.\" + n;\n        if (null != e.reservedRange && e.hasOwnProperty(\"reservedRange\")) {\n            if (!Array.isArray(e.reservedRange)) return \"reservedRange: array expected\";\n            for(var n, t = 0; t < e.reservedRange.length; ++t)if (n = p.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t])) return \"reservedRange.\" + n;\n        }\n        if (null != e.reservedName && e.hasOwnProperty(\"reservedName\")) {\n            if (!Array.isArray(e.reservedName)) return \"reservedName: array expected\";\n            for(t = 0; t < e.reservedName.length; ++t)if (!i.isString(e.reservedName[t])) return \"reservedName: string[] expected\";\n        }\n        return null;\n    }, P.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.EnumDescriptorProto) return e;\n        var t = new p.google.protobuf.EnumDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), e.value) {\n            if (!Array.isArray(e.value)) throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");\n            t.value = [];\n            for(var n = 0; n < e.value.length; ++n){\n                if (\"object\" != typeof e.value[n]) throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");\n                t.value[n] = p.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");\n            t.options = p.google.protobuf.EnumOptions.fromObject(e.options);\n        }\n        if (e.reservedRange) {\n            if (!Array.isArray(e.reservedRange)) throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");\n            t.reservedRange = [];\n            for(n = 0; n < e.reservedRange.length; ++n){\n                if (\"object\" != typeof e.reservedRange[n]) throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");\n                t.reservedRange[n] = p.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n]);\n            }\n        }\n        if (e.reservedName) {\n            if (!Array.isArray(e.reservedName)) throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");\n            t.reservedName = [];\n            for(n = 0; n < e.reservedName.length; ++n)t.reservedName[n] = String(e.reservedName[n]);\n        }\n        return t;\n    }, P.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.value = [], n.reservedRange = [], n.reservedName = []), t.defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), e.value && e.value.length) {\n            n.value = [];\n            for(var o = 0; o < e.value.length; ++o)n.value[o] = p.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o], t);\n        }\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n.options = p.google.protobuf.EnumOptions.toObject(e.options, t)), e.reservedRange && e.reservedRange.length) {\n            n.reservedRange = [];\n            for(o = 0; o < e.reservedRange.length; ++o)n.reservedRange[o] = p.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o], t);\n        }\n        if (e.reservedName && e.reservedName.length) {\n            n.reservedName = [];\n            for(o = 0; o < e.reservedName.length; ++o)n.reservedName[o] = e.reservedName[o];\n        }\n        return n;\n    }, P.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, P.EnumReservedRange = (_.prototype.start = 0, _.prototype.end = 0, _.create = function(e) {\n        return new _(e);\n    }, _.encode = function(e, t) {\n        return t = t || r.create(), null != e.start && Object.hasOwnProperty.call(e, \"start\") && t.uint32(8).int32(e.start), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(16).int32(e.end), t;\n    }, _.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, _.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.EnumDescriptorProto.EnumReservedRange; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.start = e.int32();\n                    break;\n                case 2:\n                    o.end = e.int32();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, _.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, _.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.start && e.hasOwnProperty(\"start\") && !i.isInteger(e.start) ? \"start: integer expected\" : null != e.end && e.hasOwnProperty(\"end\") && !i.isInteger(e.end) ? \"end: integer expected\" : null;\n    }, _.fromObject = function(e) {\n        var t;\n        return e instanceof p.google.protobuf.EnumDescriptorProto.EnumReservedRange ? e : (t = new p.google.protobuf.EnumDescriptorProto.EnumReservedRange, null != e.start && (t.start = 0 | e.start), null != e.end && (t.end = 0 | e.end), t);\n    }, _.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.start = 0, n.end = 0), null != e.start && e.hasOwnProperty(\"start\") && (n.start = e.start), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), n;\n    }, _.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, _), P), t.EnumValueDescriptorProto = (j.prototype.name = \"\", j.prototype.number = 0, j.prototype.options = null, j.create = function(e) {\n        return new j(e);\n    }, j.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.number && Object.hasOwnProperty.call(e, \"number\") && t.uint32(16).int32(e.number), null != e.options && Object.hasOwnProperty.call(e, \"options\") && p.google.protobuf.EnumValueOptions.encode(e.options, t.uint32(26).fork()).ldelim(), t;\n    }, j.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, j.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.EnumValueDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.number = e.int32();\n                    break;\n                case 3:\n                    o.options = p.google.protobuf.EnumValueOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, j.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, j.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name)) return \"name: string expected\";\n        if (null != e.number && e.hasOwnProperty(\"number\") && !i.isInteger(e.number)) return \"number: integer expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            e = p.google.protobuf.EnumValueOptions.verify(e.options);\n            if (e) return \"options.\" + e;\n        }\n        return null;\n    }, j.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.EnumValueDescriptorProto) return e;\n        var t = new p.google.protobuf.EnumValueDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.number && (t.number = 0 | e.number), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");\n            t.options = p.google.protobuf.EnumValueOptions.fromObject(e.options);\n        }\n        return t;\n    }, j.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.number = 0, n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.number && e.hasOwnProperty(\"number\") && (n.number = e.number), null != e.options && e.hasOwnProperty(\"options\") && (n.options = p.google.protobuf.EnumValueOptions.toObject(e.options, t)), n;\n    }, j.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, j), t.ServiceDescriptorProto = (S.prototype.name = \"\", S.prototype.method = i.emptyArray, S.prototype.options = null, S.create = function(e) {\n        return new S(e);\n    }, S.encode = function(e, t) {\n        if (t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.method && e.method.length) for(var n = 0; n < e.method.length; ++n)p.google.protobuf.MethodDescriptorProto.encode(e.method[n], t.uint32(18).fork()).ldelim();\n        return null != e.options && Object.hasOwnProperty.call(e, \"options\") && p.google.protobuf.ServiceOptions.encode(e.options, t.uint32(26).fork()).ldelim(), t;\n    }, S.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, S.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.ServiceDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.method && o.method.length || (o.method = []), o.method.push(p.google.protobuf.MethodDescriptorProto.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.options = p.google.protobuf.ServiceOptions.decode(e, e.uint32());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, S.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, S.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name)) return \"name: string expected\";\n        if (null != e.method && e.hasOwnProperty(\"method\")) {\n            if (!Array.isArray(e.method)) return \"method: array expected\";\n            for(var t = 0; t < e.method.length; ++t)if (n = p.google.protobuf.MethodDescriptorProto.verify(e.method[t])) return \"method.\" + n;\n        }\n        var n;\n        if (null != e.options && e.hasOwnProperty(\"options\") && (n = p.google.protobuf.ServiceOptions.verify(e.options))) return \"options.\" + n;\n        return null;\n    }, S.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.ServiceDescriptorProto) return e;\n        var t = new p.google.protobuf.ServiceDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), e.method) {\n            if (!Array.isArray(e.method)) throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");\n            t.method = [];\n            for(var n = 0; n < e.method.length; ++n){\n                if (\"object\" != typeof e.method[n]) throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");\n                t.method[n] = p.google.protobuf.MethodDescriptorProto.fromObject(e.method[n]);\n            }\n        }\n        if (null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");\n            t.options = p.google.protobuf.ServiceOptions.fromObject(e.options);\n        }\n        return t;\n    }, S.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.method = []), t.defaults && (n.name = \"\", n.options = null), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), e.method && e.method.length) {\n            n.method = [];\n            for(var o = 0; o < e.method.length; ++o)n.method[o] = p.google.protobuf.MethodDescriptorProto.toObject(e.method[o], t);\n        }\n        return null != e.options && e.hasOwnProperty(\"options\") && (n.options = p.google.protobuf.ServiceOptions.toObject(e.options, t)), n;\n    }, S.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, S), t.MethodDescriptorProto = (x.prototype.name = \"\", x.prototype.inputType = \"\", x.prototype.outputType = \"\", x.prototype.options = null, x.prototype.clientStreaming = !1, x.prototype.serverStreaming = !1, x.create = function(e) {\n        return new x(e);\n    }, x.encode = function(e, t) {\n        return t = t || r.create(), null != e.name && Object.hasOwnProperty.call(e, \"name\") && t.uint32(10).string(e.name), null != e.inputType && Object.hasOwnProperty.call(e, \"inputType\") && t.uint32(18).string(e.inputType), null != e.outputType && Object.hasOwnProperty.call(e, \"outputType\") && t.uint32(26).string(e.outputType), null != e.options && Object.hasOwnProperty.call(e, \"options\") && p.google.protobuf.MethodOptions.encode(e.options, t.uint32(34).fork()).ldelim(), null != e.clientStreaming && Object.hasOwnProperty.call(e, \"clientStreaming\") && t.uint32(40).bool(e.clientStreaming), null != e.serverStreaming && Object.hasOwnProperty.call(e, \"serverStreaming\") && t.uint32(48).bool(e.serverStreaming), t;\n    }, x.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, x.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.MethodDescriptorProto; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.name = e.string();\n                    break;\n                case 2:\n                    o.inputType = e.string();\n                    break;\n                case 3:\n                    o.outputType = e.string();\n                    break;\n                case 4:\n                    o.options = p.google.protobuf.MethodOptions.decode(e, e.uint32());\n                    break;\n                case 5:\n                    o.clientStreaming = e.bool();\n                    break;\n                case 6:\n                    o.serverStreaming = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, x.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, x.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\") && !i.isString(e.name)) return \"name: string expected\";\n        if (null != e.inputType && e.hasOwnProperty(\"inputType\") && !i.isString(e.inputType)) return \"inputType: string expected\";\n        if (null != e.outputType && e.hasOwnProperty(\"outputType\") && !i.isString(e.outputType)) return \"outputType: string expected\";\n        if (null != e.options && e.hasOwnProperty(\"options\")) {\n            var t = p.google.protobuf.MethodOptions.verify(e.options);\n            if (t) return \"options.\" + t;\n        }\n        return null != e.clientStreaming && e.hasOwnProperty(\"clientStreaming\") && \"boolean\" != typeof e.clientStreaming ? \"clientStreaming: boolean expected\" : null != e.serverStreaming && e.hasOwnProperty(\"serverStreaming\") && \"boolean\" != typeof e.serverStreaming ? \"serverStreaming: boolean expected\" : null;\n    }, x.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.MethodDescriptorProto) return e;\n        var t = new p.google.protobuf.MethodDescriptorProto;\n        if (null != e.name && (t.name = String(e.name)), null != e.inputType && (t.inputType = String(e.inputType)), null != e.outputType && (t.outputType = String(e.outputType)), null != e.options) {\n            if (\"object\" != typeof e.options) throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");\n            t.options = p.google.protobuf.MethodOptions.fromObject(e.options);\n        }\n        return null != e.clientStreaming && (t.clientStreaming = Boolean(e.clientStreaming)), null != e.serverStreaming && (t.serverStreaming = Boolean(e.serverStreaming)), t;\n    }, x.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.name = \"\", n.inputType = \"\", n.outputType = \"\", n.options = null, n.clientStreaming = !1, n.serverStreaming = !1), null != e.name && e.hasOwnProperty(\"name\") && (n.name = e.name), null != e.inputType && e.hasOwnProperty(\"inputType\") && (n.inputType = e.inputType), null != e.outputType && e.hasOwnProperty(\"outputType\") && (n.outputType = e.outputType), null != e.options && e.hasOwnProperty(\"options\") && (n.options = p.google.protobuf.MethodOptions.toObject(e.options, t)), null != e.clientStreaming && e.hasOwnProperty(\"clientStreaming\") && (n.clientStreaming = e.clientStreaming), null != e.serverStreaming && e.hasOwnProperty(\"serverStreaming\") && (n.serverStreaming = e.serverStreaming), n;\n    }, x.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, x), t.FileOptions = (k.prototype.javaPackage = \"\", k.prototype.javaOuterClassname = \"\", k.prototype.javaMultipleFiles = !1, k.prototype.javaGenerateEqualsAndHash = !1, k.prototype.javaStringCheckUtf8 = !1, k.prototype.optimizeFor = 1, k.prototype.goPackage = \"\", k.prototype.ccGenericServices = !1, k.prototype.javaGenericServices = !1, k.prototype.pyGenericServices = !1, k.prototype.phpGenericServices = !1, k.prototype.deprecated = !1, k.prototype.ccEnableArenas = !0, k.prototype.objcClassPrefix = \"\", k.prototype.csharpNamespace = \"\", k.prototype.swiftPrefix = \"\", k.prototype.phpClassPrefix = \"\", k.prototype.phpNamespace = \"\", k.prototype.phpMetadataNamespace = \"\", k.prototype.rubyPackage = \"\", k.prototype.uninterpretedOption = i.emptyArray, k.create = function(e) {\n        return new k(e);\n    }, k.encode = function(e, t) {\n        if (t = t || r.create(), null != e.javaPackage && Object.hasOwnProperty.call(e, \"javaPackage\") && t.uint32(10).string(e.javaPackage), null != e.javaOuterClassname && Object.hasOwnProperty.call(e, \"javaOuterClassname\") && t.uint32(66).string(e.javaOuterClassname), null != e.optimizeFor && Object.hasOwnProperty.call(e, \"optimizeFor\") && t.uint32(72).int32(e.optimizeFor), null != e.javaMultipleFiles && Object.hasOwnProperty.call(e, \"javaMultipleFiles\") && t.uint32(80).bool(e.javaMultipleFiles), null != e.goPackage && Object.hasOwnProperty.call(e, \"goPackage\") && t.uint32(90).string(e.goPackage), null != e.ccGenericServices && Object.hasOwnProperty.call(e, \"ccGenericServices\") && t.uint32(128).bool(e.ccGenericServices), null != e.javaGenericServices && Object.hasOwnProperty.call(e, \"javaGenericServices\") && t.uint32(136).bool(e.javaGenericServices), null != e.pyGenericServices && Object.hasOwnProperty.call(e, \"pyGenericServices\") && t.uint32(144).bool(e.pyGenericServices), null != e.javaGenerateEqualsAndHash && Object.hasOwnProperty.call(e, \"javaGenerateEqualsAndHash\") && t.uint32(160).bool(e.javaGenerateEqualsAndHash), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(184).bool(e.deprecated), null != e.javaStringCheckUtf8 && Object.hasOwnProperty.call(e, \"javaStringCheckUtf8\") && t.uint32(216).bool(e.javaStringCheckUtf8), null != e.ccEnableArenas && Object.hasOwnProperty.call(e, \"ccEnableArenas\") && t.uint32(248).bool(e.ccEnableArenas), null != e.objcClassPrefix && Object.hasOwnProperty.call(e, \"objcClassPrefix\") && t.uint32(290).string(e.objcClassPrefix), null != e.csharpNamespace && Object.hasOwnProperty.call(e, \"csharpNamespace\") && t.uint32(298).string(e.csharpNamespace), null != e.swiftPrefix && Object.hasOwnProperty.call(e, \"swiftPrefix\") && t.uint32(314).string(e.swiftPrefix), null != e.phpClassPrefix && Object.hasOwnProperty.call(e, \"phpClassPrefix\") && t.uint32(322).string(e.phpClassPrefix), null != e.phpNamespace && Object.hasOwnProperty.call(e, \"phpNamespace\") && t.uint32(330).string(e.phpNamespace), null != e.phpGenericServices && Object.hasOwnProperty.call(e, \"phpGenericServices\") && t.uint32(336).bool(e.phpGenericServices), null != e.phpMetadataNamespace && Object.hasOwnProperty.call(e, \"phpMetadataNamespace\") && t.uint32(354).string(e.phpMetadataNamespace), null != e.rubyPackage && Object.hasOwnProperty.call(e, \"rubyPackage\") && t.uint32(362).string(e.rubyPackage), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, k.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, k.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.FileOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.javaPackage = e.string();\n                    break;\n                case 8:\n                    o.javaOuterClassname = e.string();\n                    break;\n                case 10:\n                    o.javaMultipleFiles = e.bool();\n                    break;\n                case 20:\n                    o.javaGenerateEqualsAndHash = e.bool();\n                    break;\n                case 27:\n                    o.javaStringCheckUtf8 = e.bool();\n                    break;\n                case 9:\n                    o.optimizeFor = e.int32();\n                    break;\n                case 11:\n                    o.goPackage = e.string();\n                    break;\n                case 16:\n                    o.ccGenericServices = e.bool();\n                    break;\n                case 17:\n                    o.javaGenericServices = e.bool();\n                    break;\n                case 18:\n                    o.pyGenericServices = e.bool();\n                    break;\n                case 42:\n                    o.phpGenericServices = e.bool();\n                    break;\n                case 23:\n                    o.deprecated = e.bool();\n                    break;\n                case 31:\n                    o.ccEnableArenas = e.bool();\n                    break;\n                case 36:\n                    o.objcClassPrefix = e.string();\n                    break;\n                case 37:\n                    o.csharpNamespace = e.string();\n                    break;\n                case 39:\n                    o.swiftPrefix = e.string();\n                    break;\n                case 40:\n                    o.phpClassPrefix = e.string();\n                    break;\n                case 41:\n                    o.phpNamespace = e.string();\n                    break;\n                case 44:\n                    o.phpMetadataNamespace = e.string();\n                    break;\n                case 45:\n                    o.rubyPackage = e.string();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, k.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, k.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.javaPackage && e.hasOwnProperty(\"javaPackage\") && !i.isString(e.javaPackage)) return \"javaPackage: string expected\";\n        if (null != e.javaOuterClassname && e.hasOwnProperty(\"javaOuterClassname\") && !i.isString(e.javaOuterClassname)) return \"javaOuterClassname: string expected\";\n        if (null != e.javaMultipleFiles && e.hasOwnProperty(\"javaMultipleFiles\") && \"boolean\" != typeof e.javaMultipleFiles) return \"javaMultipleFiles: boolean expected\";\n        if (null != e.javaGenerateEqualsAndHash && e.hasOwnProperty(\"javaGenerateEqualsAndHash\") && \"boolean\" != typeof e.javaGenerateEqualsAndHash) return \"javaGenerateEqualsAndHash: boolean expected\";\n        if (null != e.javaStringCheckUtf8 && e.hasOwnProperty(\"javaStringCheckUtf8\") && \"boolean\" != typeof e.javaStringCheckUtf8) return \"javaStringCheckUtf8: boolean expected\";\n        if (null != e.optimizeFor && e.hasOwnProperty(\"optimizeFor\")) switch(e.optimizeFor){\n            default:\n                return \"optimizeFor: enum value expected\";\n            case 1:\n            case 2:\n            case 3:\n        }\n        if (null != e.goPackage && e.hasOwnProperty(\"goPackage\") && !i.isString(e.goPackage)) return \"goPackage: string expected\";\n        if (null != e.ccGenericServices && e.hasOwnProperty(\"ccGenericServices\") && \"boolean\" != typeof e.ccGenericServices) return \"ccGenericServices: boolean expected\";\n        if (null != e.javaGenericServices && e.hasOwnProperty(\"javaGenericServices\") && \"boolean\" != typeof e.javaGenericServices) return \"javaGenericServices: boolean expected\";\n        if (null != e.pyGenericServices && e.hasOwnProperty(\"pyGenericServices\") && \"boolean\" != typeof e.pyGenericServices) return \"pyGenericServices: boolean expected\";\n        if (null != e.phpGenericServices && e.hasOwnProperty(\"phpGenericServices\") && \"boolean\" != typeof e.phpGenericServices) return \"phpGenericServices: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.ccEnableArenas && e.hasOwnProperty(\"ccEnableArenas\") && \"boolean\" != typeof e.ccEnableArenas) return \"ccEnableArenas: boolean expected\";\n        if (null != e.objcClassPrefix && e.hasOwnProperty(\"objcClassPrefix\") && !i.isString(e.objcClassPrefix)) return \"objcClassPrefix: string expected\";\n        if (null != e.csharpNamespace && e.hasOwnProperty(\"csharpNamespace\") && !i.isString(e.csharpNamespace)) return \"csharpNamespace: string expected\";\n        if (null != e.swiftPrefix && e.hasOwnProperty(\"swiftPrefix\") && !i.isString(e.swiftPrefix)) return \"swiftPrefix: string expected\";\n        if (null != e.phpClassPrefix && e.hasOwnProperty(\"phpClassPrefix\") && !i.isString(e.phpClassPrefix)) return \"phpClassPrefix: string expected\";\n        if (null != e.phpNamespace && e.hasOwnProperty(\"phpNamespace\") && !i.isString(e.phpNamespace)) return \"phpNamespace: string expected\";\n        if (null != e.phpMetadataNamespace && e.hasOwnProperty(\"phpMetadataNamespace\") && !i.isString(e.phpMetadataNamespace)) return \"phpMetadataNamespace: string expected\";\n        if (null != e.rubyPackage && e.hasOwnProperty(\"rubyPackage\") && !i.isString(e.rubyPackage)) return \"rubyPackage: string expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, k.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.FileOptions) return e;\n        var t = new p.google.protobuf.FileOptions;\n        switch(null != e.javaPackage && (t.javaPackage = String(e.javaPackage)), null != e.javaOuterClassname && (t.javaOuterClassname = String(e.javaOuterClassname)), null != e.javaMultipleFiles && (t.javaMultipleFiles = Boolean(e.javaMultipleFiles)), null != e.javaGenerateEqualsAndHash && (t.javaGenerateEqualsAndHash = Boolean(e.javaGenerateEqualsAndHash)), null != e.javaStringCheckUtf8 && (t.javaStringCheckUtf8 = Boolean(e.javaStringCheckUtf8)), e.optimizeFor){\n            case \"SPEED\":\n            case 1:\n                t.optimizeFor = 1;\n                break;\n            case \"CODE_SIZE\":\n            case 2:\n                t.optimizeFor = 2;\n                break;\n            case \"LITE_RUNTIME\":\n            case 3:\n                t.optimizeFor = 3;\n        }\n        if (null != e.goPackage && (t.goPackage = String(e.goPackage)), null != e.ccGenericServices && (t.ccGenericServices = Boolean(e.ccGenericServices)), null != e.javaGenericServices && (t.javaGenericServices = Boolean(e.javaGenericServices)), null != e.pyGenericServices && (t.pyGenericServices = Boolean(e.pyGenericServices)), null != e.phpGenericServices && (t.phpGenericServices = Boolean(e.phpGenericServices)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), null != e.ccEnableArenas && (t.ccEnableArenas = Boolean(e.ccEnableArenas)), null != e.objcClassPrefix && (t.objcClassPrefix = String(e.objcClassPrefix)), null != e.csharpNamespace && (t.csharpNamespace = String(e.csharpNamespace)), null != e.swiftPrefix && (t.swiftPrefix = String(e.swiftPrefix)), null != e.phpClassPrefix && (t.phpClassPrefix = String(e.phpClassPrefix)), null != e.phpNamespace && (t.phpNamespace = String(e.phpNamespace)), null != e.phpMetadataNamespace && (t.phpMetadataNamespace = String(e.phpMetadataNamespace)), null != e.rubyPackage && (t.rubyPackage = String(e.rubyPackage)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, k.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.javaPackage = \"\", n.javaOuterClassname = \"\", n.optimizeFor = t.enums === String ? \"SPEED\" : 1, n.javaMultipleFiles = !1, n.goPackage = \"\", n.ccGenericServices = !1, n.javaGenericServices = !1, n.pyGenericServices = !1, n.javaGenerateEqualsAndHash = !1, n.deprecated = !1, n.javaStringCheckUtf8 = !1, n.ccEnableArenas = !0, n.objcClassPrefix = \"\", n.csharpNamespace = \"\", n.swiftPrefix = \"\", n.phpClassPrefix = \"\", n.phpNamespace = \"\", n.phpGenericServices = !1, n.phpMetadataNamespace = \"\", n.rubyPackage = \"\"), null != e.javaPackage && e.hasOwnProperty(\"javaPackage\") && (n.javaPackage = e.javaPackage), null != e.javaOuterClassname && e.hasOwnProperty(\"javaOuterClassname\") && (n.javaOuterClassname = e.javaOuterClassname), null != e.optimizeFor && e.hasOwnProperty(\"optimizeFor\") && (n.optimizeFor = t.enums === String ? p.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor] : e.optimizeFor), null != e.javaMultipleFiles && e.hasOwnProperty(\"javaMultipleFiles\") && (n.javaMultipleFiles = e.javaMultipleFiles), null != e.goPackage && e.hasOwnProperty(\"goPackage\") && (n.goPackage = e.goPackage), null != e.ccGenericServices && e.hasOwnProperty(\"ccGenericServices\") && (n.ccGenericServices = e.ccGenericServices), null != e.javaGenericServices && e.hasOwnProperty(\"javaGenericServices\") && (n.javaGenericServices = e.javaGenericServices), null != e.pyGenericServices && e.hasOwnProperty(\"pyGenericServices\") && (n.pyGenericServices = e.pyGenericServices), null != e.javaGenerateEqualsAndHash && e.hasOwnProperty(\"javaGenerateEqualsAndHash\") && (n.javaGenerateEqualsAndHash = e.javaGenerateEqualsAndHash), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.javaStringCheckUtf8 && e.hasOwnProperty(\"javaStringCheckUtf8\") && (n.javaStringCheckUtf8 = e.javaStringCheckUtf8), null != e.ccEnableArenas && e.hasOwnProperty(\"ccEnableArenas\") && (n.ccEnableArenas = e.ccEnableArenas), null != e.objcClassPrefix && e.hasOwnProperty(\"objcClassPrefix\") && (n.objcClassPrefix = e.objcClassPrefix), null != e.csharpNamespace && e.hasOwnProperty(\"csharpNamespace\") && (n.csharpNamespace = e.csharpNamespace), null != e.swiftPrefix && e.hasOwnProperty(\"swiftPrefix\") && (n.swiftPrefix = e.swiftPrefix), null != e.phpClassPrefix && e.hasOwnProperty(\"phpClassPrefix\") && (n.phpClassPrefix = e.phpClassPrefix), null != e.phpNamespace && e.hasOwnProperty(\"phpNamespace\") && (n.phpNamespace = e.phpNamespace), null != e.phpGenericServices && e.hasOwnProperty(\"phpGenericServices\") && (n.phpGenericServices = e.phpGenericServices), null != e.phpMetadataNamespace && e.hasOwnProperty(\"phpMetadataNamespace\") && (n.phpMetadataNamespace = e.phpMetadataNamespace), null != e.rubyPackage && e.hasOwnProperty(\"rubyPackage\") && (n.rubyPackage = e.rubyPackage), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, k.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, k.OptimizeMode = (n = {}, (e = Object.create(n))[n[1] = \"SPEED\"] = 1, e[n[2] = \"CODE_SIZE\"] = 2, e[n[3] = \"LITE_RUNTIME\"] = 3, e), k), t.MessageOptions = (D.prototype.messageSetWireFormat = !1, D.prototype.noStandardDescriptorAccessor = !1, D.prototype.deprecated = !1, D.prototype.mapEntry = !1, D.prototype.uninterpretedOption = i.emptyArray, D.create = function(e) {\n        return new D(e);\n    }, D.encode = function(e, t) {\n        if (t = t || r.create(), null != e.messageSetWireFormat && Object.hasOwnProperty.call(e, \"messageSetWireFormat\") && t.uint32(8).bool(e.messageSetWireFormat), null != e.noStandardDescriptorAccessor && Object.hasOwnProperty.call(e, \"noStandardDescriptorAccessor\") && t.uint32(16).bool(e.noStandardDescriptorAccessor), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(24).bool(e.deprecated), null != e.mapEntry && Object.hasOwnProperty.call(e, \"mapEntry\") && t.uint32(56).bool(e.mapEntry), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, D.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, D.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.MessageOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.messageSetWireFormat = e.bool();\n                    break;\n                case 2:\n                    o.noStandardDescriptorAccessor = e.bool();\n                    break;\n                case 3:\n                    o.deprecated = e.bool();\n                    break;\n                case 7:\n                    o.mapEntry = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, D.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, D.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.messageSetWireFormat && e.hasOwnProperty(\"messageSetWireFormat\") && \"boolean\" != typeof e.messageSetWireFormat) return \"messageSetWireFormat: boolean expected\";\n        if (null != e.noStandardDescriptorAccessor && e.hasOwnProperty(\"noStandardDescriptorAccessor\") && \"boolean\" != typeof e.noStandardDescriptorAccessor) return \"noStandardDescriptorAccessor: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.mapEntry && e.hasOwnProperty(\"mapEntry\") && \"boolean\" != typeof e.mapEntry) return \"mapEntry: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, D.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.MessageOptions) return e;\n        var t = new p.google.protobuf.MessageOptions;\n        if (null != e.messageSetWireFormat && (t.messageSetWireFormat = Boolean(e.messageSetWireFormat)), null != e.noStandardDescriptorAccessor && (t.noStandardDescriptorAccessor = Boolean(e.noStandardDescriptorAccessor)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), null != e.mapEntry && (t.mapEntry = Boolean(e.mapEntry)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, D.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.messageSetWireFormat = !1, n.noStandardDescriptorAccessor = !1, n.deprecated = !1, n.mapEntry = !1), null != e.messageSetWireFormat && e.hasOwnProperty(\"messageSetWireFormat\") && (n.messageSetWireFormat = e.messageSetWireFormat), null != e.noStandardDescriptorAccessor && e.hasOwnProperty(\"noStandardDescriptorAccessor\") && (n.noStandardDescriptorAccessor = e.noStandardDescriptorAccessor), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.mapEntry && e.hasOwnProperty(\"mapEntry\") && (n.mapEntry = e.mapEntry), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, D.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, D), t.FieldOptions = (T.prototype.ctype = 0, T.prototype.packed = !1, T.prototype.jstype = 0, T.prototype.lazy = !1, T.prototype.deprecated = !1, T.prototype.weak = !1, T.prototype.uninterpretedOption = i.emptyArray, T.create = function(e) {\n        return new T(e);\n    }, T.encode = function(e, t) {\n        if (t = t || r.create(), null != e.ctype && Object.hasOwnProperty.call(e, \"ctype\") && t.uint32(8).int32(e.ctype), null != e.packed && Object.hasOwnProperty.call(e, \"packed\") && t.uint32(16).bool(e.packed), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(24).bool(e.deprecated), null != e.lazy && Object.hasOwnProperty.call(e, \"lazy\") && t.uint32(40).bool(e.lazy), null != e.jstype && Object.hasOwnProperty.call(e, \"jstype\") && t.uint32(48).int32(e.jstype), null != e.weak && Object.hasOwnProperty.call(e, \"weak\") && t.uint32(80).bool(e.weak), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, T.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, T.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.FieldOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.ctype = e.int32();\n                    break;\n                case 2:\n                    o.packed = e.bool();\n                    break;\n                case 6:\n                    o.jstype = e.int32();\n                    break;\n                case 5:\n                    o.lazy = e.bool();\n                    break;\n                case 3:\n                    o.deprecated = e.bool();\n                    break;\n                case 10:\n                    o.weak = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, T.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, T.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.ctype && e.hasOwnProperty(\"ctype\")) switch(e.ctype){\n            default:\n                return \"ctype: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        if (null != e.packed && e.hasOwnProperty(\"packed\") && \"boolean\" != typeof e.packed) return \"packed: boolean expected\";\n        if (null != e.jstype && e.hasOwnProperty(\"jstype\")) switch(e.jstype){\n            default:\n                return \"jstype: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        if (null != e.lazy && e.hasOwnProperty(\"lazy\") && \"boolean\" != typeof e.lazy) return \"lazy: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.weak && e.hasOwnProperty(\"weak\") && \"boolean\" != typeof e.weak) return \"weak: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, T.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.FieldOptions) return e;\n        var t = new p.google.protobuf.FieldOptions;\n        switch(e.ctype){\n            case \"STRING\":\n            case 0:\n                t.ctype = 0;\n                break;\n            case \"CORD\":\n            case 1:\n                t.ctype = 1;\n                break;\n            case \"STRING_PIECE\":\n            case 2:\n                t.ctype = 2;\n        }\n        switch(null != e.packed && (t.packed = Boolean(e.packed)), e.jstype){\n            case \"JS_NORMAL\":\n            case 0:\n                t.jstype = 0;\n                break;\n            case \"JS_STRING\":\n            case 1:\n                t.jstype = 1;\n                break;\n            case \"JS_NUMBER\":\n            case 2:\n                t.jstype = 2;\n        }\n        if (null != e.lazy && (t.lazy = Boolean(e.lazy)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), null != e.weak && (t.weak = Boolean(e.weak)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, T.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.ctype = t.enums === String ? \"STRING\" : 0, n.packed = !1, n.deprecated = !1, n.lazy = !1, n.jstype = t.enums === String ? \"JS_NORMAL\" : 0, n.weak = !1), null != e.ctype && e.hasOwnProperty(\"ctype\") && (n.ctype = t.enums === String ? p.google.protobuf.FieldOptions.CType[e.ctype] : e.ctype), null != e.packed && e.hasOwnProperty(\"packed\") && (n.packed = e.packed), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.lazy && e.hasOwnProperty(\"lazy\") && (n.lazy = e.lazy), null != e.jstype && e.hasOwnProperty(\"jstype\") && (n.jstype = t.enums === String ? p.google.protobuf.FieldOptions.JSType[e.jstype] : e.jstype), null != e.weak && e.hasOwnProperty(\"weak\") && (n.weak = e.weak), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, T.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, T.CType = (n = {}, (e = Object.create(n))[n[0] = \"STRING\"] = 0, e[n[1] = \"CORD\"] = 1, e[n[2] = \"STRING_PIECE\"] = 2, e), T.JSType = (n = {}, (e = Object.create(n))[n[0] = \"JS_NORMAL\"] = 0, e[n[1] = \"JS_STRING\"] = 1, e[n[2] = \"JS_NUMBER\"] = 2, e), T), t.OneofOptions = (H.prototype.uninterpretedOption = i.emptyArray, H.create = function(e) {\n        return new H(e);\n    }, H.encode = function(e, t) {\n        if (t = t || r.create(), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, H.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, H.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.OneofOptions; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 999 ? (o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, H.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, H.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, H.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.OneofOptions) return e;\n        var t = new p.google.protobuf.OneofOptions;\n        if (e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, H.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, H.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, H), t.EnumOptions = (E.prototype.allowAlias = !1, E.prototype.deprecated = !1, E.prototype.uninterpretedOption = i.emptyArray, E.create = function(e) {\n        return new E(e);\n    }, E.encode = function(e, t) {\n        if (t = t || r.create(), null != e.allowAlias && Object.hasOwnProperty.call(e, \"allowAlias\") && t.uint32(16).bool(e.allowAlias), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(24).bool(e.deprecated), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, E.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, E.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.EnumOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 2:\n                    o.allowAlias = e.bool();\n                    break;\n                case 3:\n                    o.deprecated = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, E.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, E.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.allowAlias && e.hasOwnProperty(\"allowAlias\") && \"boolean\" != typeof e.allowAlias) return \"allowAlias: boolean expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, E.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.EnumOptions) return e;\n        var t = new p.google.protobuf.EnumOptions;\n        if (null != e.allowAlias && (t.allowAlias = Boolean(e.allowAlias)), null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, E.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.allowAlias = !1, n.deprecated = !1), null != e.allowAlias && e.hasOwnProperty(\"allowAlias\") && (n.allowAlias = e.allowAlias), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, E.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, E), t.EnumValueOptions = (z.prototype.deprecated = !1, z.prototype.uninterpretedOption = i.emptyArray, z.create = function(e) {\n        return new z(e);\n    }, z.encode = function(e, t) {\n        if (t = t || r.create(), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(8).bool(e.deprecated), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return t;\n    }, z.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, z.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.EnumValueOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.deprecated = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, z.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, z.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null;\n    }, z.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.EnumValueOptions) return e;\n        var t = new p.google.protobuf.EnumValueOptions;\n        if (null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return t;\n    }, z.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.deprecated = !1), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return n;\n    }, z.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, z), t.ServiceOptions = (A.prototype.deprecated = !1, A.prototype.uninterpretedOption = i.emptyArray, A.prototype[\".google.api.defaultHost\"] = \"\", A.prototype[\".google.api.oauthScopes\"] = \"\", A.create = function(e) {\n        return new A(e);\n    }, A.encode = function(e, t) {\n        if (t = t || r.create(), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(264).bool(e.deprecated), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        return null != e[\".google.api.defaultHost\"] && Object.hasOwnProperty.call(e, \".google.api.defaultHost\") && t.uint32(8394).string(e[\".google.api.defaultHost\"]), null != e[\".google.api.oauthScopes\"] && Object.hasOwnProperty.call(e, \".google.api.oauthScopes\") && t.uint32(8402).string(e[\".google.api.oauthScopes\"]), t;\n    }, A.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, A.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.ServiceOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 33:\n                    o.deprecated = e.bool();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                case 1049:\n                    o[\".google.api.defaultHost\"] = e.string();\n                    break;\n                case 1050:\n                    o[\".google.api.oauthScopes\"] = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, A.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, A.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t){\n                var n = p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);\n                if (n) return \"uninterpretedOption.\" + n;\n            }\n        }\n        return null != e[\".google.api.defaultHost\"] && e.hasOwnProperty(\".google.api.defaultHost\") && !i.isString(e[\".google.api.defaultHost\"]) ? \".google.api.defaultHost: string expected\" : null != e[\".google.api.oauthScopes\"] && e.hasOwnProperty(\".google.api.oauthScopes\") && !i.isString(e[\".google.api.oauthScopes\"]) ? \".google.api.oauthScopes: string expected\" : null;\n    }, A.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.ServiceOptions) return e;\n        var t = new p.google.protobuf.ServiceOptions;\n        if (null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        return null != e[\".google.api.defaultHost\"] && (t[\".google.api.defaultHost\"] = String(e[\".google.api.defaultHost\"])), null != e[\".google.api.oauthScopes\"] && (t[\".google.api.oauthScopes\"] = String(e[\".google.api.oauthScopes\"])), t;\n    }, A.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = []), t.defaults && (n.deprecated = !1, n[\".google.api.defaultHost\"] = \"\", n[\".google.api.oauthScopes\"] = \"\"), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        return null != e[\".google.api.defaultHost\"] && e.hasOwnProperty(\".google.api.defaultHost\") && (n[\".google.api.defaultHost\"] = e[\".google.api.defaultHost\"]), null != e[\".google.api.oauthScopes\"] && e.hasOwnProperty(\".google.api.oauthScopes\") && (n[\".google.api.oauthScopes\"] = e[\".google.api.oauthScopes\"]), n;\n    }, A.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, A), t.MethodOptions = (N.prototype.deprecated = !1, N.prototype.idempotencyLevel = 0, N.prototype.uninterpretedOption = i.emptyArray, N.prototype[\".google.longrunning.operationInfo\"] = null, N.prototype[\".google.api.http\"] = null, N.prototype[\".google.api.methodSignature\"] = i.emptyArray, N.create = function(e) {\n        return new N(e);\n    }, N.encode = function(e, t) {\n        if (t = t || r.create(), null != e.deprecated && Object.hasOwnProperty.call(e, \"deprecated\") && t.uint32(264).bool(e.deprecated), null != e.idempotencyLevel && Object.hasOwnProperty.call(e, \"idempotencyLevel\") && t.uint32(272).int32(e.idempotencyLevel), null != e.uninterpretedOption && e.uninterpretedOption.length) for(var n = 0; n < e.uninterpretedOption.length; ++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n], t.uint32(7994).fork()).ldelim();\n        if (null != e[\".google.longrunning.operationInfo\"] && Object.hasOwnProperty.call(e, \".google.longrunning.operationInfo\") && p.google.longrunning.OperationInfo.encode(e[\".google.longrunning.operationInfo\"], t.uint32(8394).fork()).ldelim(), null != e[\".google.api.methodSignature\"] && e[\".google.api.methodSignature\"].length) for(n = 0; n < e[\".google.api.methodSignature\"].length; ++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);\n        return null != e[\".google.api.http\"] && Object.hasOwnProperty.call(e, \".google.api.http\") && p.google.api.HttpRule.encode(e[\".google.api.http\"], t.uint32(578365826).fork()).ldelim(), t;\n    }, N.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, N.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.MethodOptions; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 33:\n                    o.deprecated = e.bool();\n                    break;\n                case 34:\n                    o.idempotencyLevel = e.int32();\n                    break;\n                case 999:\n                    o.uninterpretedOption && o.uninterpretedOption.length || (o.uninterpretedOption = []), o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e, e.uint32()));\n                    break;\n                case 1049:\n                    o[\".google.longrunning.operationInfo\"] = p.google.longrunning.OperationInfo.decode(e, e.uint32());\n                    break;\n                case 72295728:\n                    o[\".google.api.http\"] = p.google.api.HttpRule.decode(e, e.uint32());\n                    break;\n                case 1051:\n                    o[\".google.api.methodSignature\"] && o[\".google.api.methodSignature\"].length || (o[\".google.api.methodSignature\"] = []), o[\".google.api.methodSignature\"].push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, N.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, N.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.deprecated && e.hasOwnProperty(\"deprecated\") && \"boolean\" != typeof e.deprecated) return \"deprecated: boolean expected\";\n        if (null != e.idempotencyLevel && e.hasOwnProperty(\"idempotencyLevel\")) switch(e.idempotencyLevel){\n            default:\n                return \"idempotencyLevel: enum value expected\";\n            case 0:\n            case 1:\n            case 2:\n        }\n        if (null != e.uninterpretedOption && e.hasOwnProperty(\"uninterpretedOption\")) {\n            if (!Array.isArray(e.uninterpretedOption)) return \"uninterpretedOption: array expected\";\n            for(var t = 0; t < e.uninterpretedOption.length; ++t)if (n = p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t])) return \"uninterpretedOption.\" + n;\n        }\n        var n;\n        if (null != e[\".google.longrunning.operationInfo\"] && e.hasOwnProperty(\".google.longrunning.operationInfo\") && (n = p.google.longrunning.OperationInfo.verify(e[\".google.longrunning.operationInfo\"]))) return \".google.longrunning.operationInfo.\" + n;\n        if (null != e[\".google.api.http\"] && e.hasOwnProperty(\".google.api.http\") && (n = p.google.api.HttpRule.verify(e[\".google.api.http\"]))) return \".google.api.http.\" + n;\n        if (null != e[\".google.api.methodSignature\"] && e.hasOwnProperty(\".google.api.methodSignature\")) {\n            if (!Array.isArray(e[\".google.api.methodSignature\"])) return \".google.api.methodSignature: array expected\";\n            for(t = 0; t < e[\".google.api.methodSignature\"].length; ++t)if (!i.isString(e[\".google.api.methodSignature\"][t])) return \".google.api.methodSignature: string[] expected\";\n        }\n        return null;\n    }, N.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.MethodOptions) return e;\n        var t = new p.google.protobuf.MethodOptions;\n        switch(null != e.deprecated && (t.deprecated = Boolean(e.deprecated)), e.idempotencyLevel){\n            case \"IDEMPOTENCY_UNKNOWN\":\n            case 0:\n                t.idempotencyLevel = 0;\n                break;\n            case \"NO_SIDE_EFFECTS\":\n            case 1:\n                t.idempotencyLevel = 1;\n                break;\n            case \"IDEMPOTENT\":\n            case 2:\n                t.idempotencyLevel = 2;\n        }\n        if (e.uninterpretedOption) {\n            if (!Array.isArray(e.uninterpretedOption)) throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");\n            t.uninterpretedOption = [];\n            for(var n = 0; n < e.uninterpretedOption.length; ++n){\n                if (\"object\" != typeof e.uninterpretedOption[n]) throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");\n                t.uninterpretedOption[n] = p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n]);\n            }\n        }\n        if (null != e[\".google.longrunning.operationInfo\"]) {\n            if (\"object\" != typeof e[\".google.longrunning.operationInfo\"]) throw TypeError(\".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected\");\n            t[\".google.longrunning.operationInfo\"] = p.google.longrunning.OperationInfo.fromObject(e[\".google.longrunning.operationInfo\"]);\n        }\n        if (null != e[\".google.api.http\"]) {\n            if (\"object\" != typeof e[\".google.api.http\"]) throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");\n            t[\".google.api.http\"] = p.google.api.HttpRule.fromObject(e[\".google.api.http\"]);\n        }\n        if (e[\".google.api.methodSignature\"]) {\n            if (!Array.isArray(e[\".google.api.methodSignature\"])) throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");\n            t[\".google.api.methodSignature\"] = [];\n            for(n = 0; n < e[\".google.api.methodSignature\"].length; ++n)t[\".google.api.methodSignature\"][n] = String(e[\".google.api.methodSignature\"][n]);\n        }\n        return t;\n    }, N.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.uninterpretedOption = [], n[\".google.api.methodSignature\"] = []), t.defaults && (n.deprecated = !1, n.idempotencyLevel = t.enums === String ? \"IDEMPOTENCY_UNKNOWN\" : 0, n[\".google.longrunning.operationInfo\"] = null, n[\".google.api.http\"] = null), null != e.deprecated && e.hasOwnProperty(\"deprecated\") && (n.deprecated = e.deprecated), null != e.idempotencyLevel && e.hasOwnProperty(\"idempotencyLevel\") && (n.idempotencyLevel = t.enums === String ? p.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel] : e.idempotencyLevel), e.uninterpretedOption && e.uninterpretedOption.length) {\n            n.uninterpretedOption = [];\n            for(var o = 0; o < e.uninterpretedOption.length; ++o)n.uninterpretedOption[o] = p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o], t);\n        }\n        if (null != e[\".google.longrunning.operationInfo\"] && e.hasOwnProperty(\".google.longrunning.operationInfo\") && (n[\".google.longrunning.operationInfo\"] = p.google.longrunning.OperationInfo.toObject(e[\".google.longrunning.operationInfo\"], t)), e[\".google.api.methodSignature\"] && e[\".google.api.methodSignature\"].length) {\n            n[\".google.api.methodSignature\"] = [];\n            for(o = 0; o < e[\".google.api.methodSignature\"].length; ++o)n[\".google.api.methodSignature\"][o] = e[\".google.api.methodSignature\"][o];\n        }\n        return null != e[\".google.api.http\"] && e.hasOwnProperty(\".google.api.http\") && (n[\".google.api.http\"] = p.google.api.HttpRule.toObject(e[\".google.api.http\"], t)), n;\n    }, N.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, N.IdempotencyLevel = (n = {}, (e = Object.create(n))[n[0] = \"IDEMPOTENCY_UNKNOWN\"] = 0, e[n[1] = \"NO_SIDE_EFFECTS\"] = 1, e[n[2] = \"IDEMPOTENT\"] = 2, e), N), t.UninterpretedOption = (I.prototype.name = i.emptyArray, I.prototype.identifierValue = \"\", I.prototype.positiveIntValue = i.Long ? i.Long.fromBits(0, 0, !0) : 0, I.prototype.negativeIntValue = i.Long ? i.Long.fromBits(0, 0, !1) : 0, I.prototype.doubleValue = 0, I.prototype.stringValue = i.newBuffer([]), I.prototype.aggregateValue = \"\", I.create = function(e) {\n        return new I(e);\n    }, I.encode = function(e, t) {\n        if (t = t || r.create(), null != e.name && e.name.length) for(var n = 0; n < e.name.length; ++n)p.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n], t.uint32(18).fork()).ldelim();\n        return null != e.identifierValue && Object.hasOwnProperty.call(e, \"identifierValue\") && t.uint32(26).string(e.identifierValue), null != e.positiveIntValue && Object.hasOwnProperty.call(e, \"positiveIntValue\") && t.uint32(32).uint64(e.positiveIntValue), null != e.negativeIntValue && Object.hasOwnProperty.call(e, \"negativeIntValue\") && t.uint32(40).int64(e.negativeIntValue), null != e.doubleValue && Object.hasOwnProperty.call(e, \"doubleValue\") && t.uint32(49).double(e.doubleValue), null != e.stringValue && Object.hasOwnProperty.call(e, \"stringValue\") && t.uint32(58).bytes(e.stringValue), null != e.aggregateValue && Object.hasOwnProperty.call(e, \"aggregateValue\") && t.uint32(66).string(e.aggregateValue), t;\n    }, I.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, I.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.UninterpretedOption; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 2:\n                    o.name && o.name.length || (o.name = []), o.name.push(p.google.protobuf.UninterpretedOption.NamePart.decode(e, e.uint32()));\n                    break;\n                case 3:\n                    o.identifierValue = e.string();\n                    break;\n                case 4:\n                    o.positiveIntValue = e.uint64();\n                    break;\n                case 5:\n                    o.negativeIntValue = e.int64();\n                    break;\n                case 6:\n                    o.doubleValue = e.double();\n                    break;\n                case 7:\n                    o.stringValue = e.bytes();\n                    break;\n                case 8:\n                    o.aggregateValue = e.string();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, I.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, I.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.name && e.hasOwnProperty(\"name\")) {\n            if (!Array.isArray(e.name)) return \"name: array expected\";\n            for(var t = 0; t < e.name.length; ++t){\n                var n = p.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);\n                if (n) return \"name.\" + n;\n            }\n        }\n        return null != e.identifierValue && e.hasOwnProperty(\"identifierValue\") && !i.isString(e.identifierValue) ? \"identifierValue: string expected\" : null != e.positiveIntValue && e.hasOwnProperty(\"positiveIntValue\") && !(i.isInteger(e.positiveIntValue) || e.positiveIntValue && i.isInteger(e.positiveIntValue.low) && i.isInteger(e.positiveIntValue.high)) ? \"positiveIntValue: integer|Long expected\" : null != e.negativeIntValue && e.hasOwnProperty(\"negativeIntValue\") && !(i.isInteger(e.negativeIntValue) || e.negativeIntValue && i.isInteger(e.negativeIntValue.low) && i.isInteger(e.negativeIntValue.high)) ? \"negativeIntValue: integer|Long expected\" : null != e.doubleValue && e.hasOwnProperty(\"doubleValue\") && \"number\" != typeof e.doubleValue ? \"doubleValue: number expected\" : null != e.stringValue && e.hasOwnProperty(\"stringValue\") && !(e.stringValue && \"number\" == typeof e.stringValue.length || i.isString(e.stringValue)) ? \"stringValue: buffer expected\" : null != e.aggregateValue && e.hasOwnProperty(\"aggregateValue\") && !i.isString(e.aggregateValue) ? \"aggregateValue: string expected\" : null;\n    }, I.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.UninterpretedOption) return e;\n        var t = new p.google.protobuf.UninterpretedOption;\n        if (e.name) {\n            if (!Array.isArray(e.name)) throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");\n            t.name = [];\n            for(var n = 0; n < e.name.length; ++n){\n                if (\"object\" != typeof e.name[n]) throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");\n                t.name[n] = p.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n]);\n            }\n        }\n        return null != e.identifierValue && (t.identifierValue = String(e.identifierValue)), null != e.positiveIntValue && (i.Long ? (t.positiveIntValue = i.Long.fromValue(e.positiveIntValue)).unsigned = !0 : \"string\" == typeof e.positiveIntValue ? t.positiveIntValue = parseInt(e.positiveIntValue, 10) : \"number\" == typeof e.positiveIntValue ? t.positiveIntValue = e.positiveIntValue : \"object\" == typeof e.positiveIntValue && (t.positiveIntValue = new i.LongBits(e.positiveIntValue.low >>> 0, e.positiveIntValue.high >>> 0).toNumber(!0))), null != e.negativeIntValue && (i.Long ? (t.negativeIntValue = i.Long.fromValue(e.negativeIntValue)).unsigned = !1 : \"string\" == typeof e.negativeIntValue ? t.negativeIntValue = parseInt(e.negativeIntValue, 10) : \"number\" == typeof e.negativeIntValue ? t.negativeIntValue = e.negativeIntValue : \"object\" == typeof e.negativeIntValue && (t.negativeIntValue = new i.LongBits(e.negativeIntValue.low >>> 0, e.negativeIntValue.high >>> 0).toNumber())), null != e.doubleValue && (t.doubleValue = Number(e.doubleValue)), null != e.stringValue && (\"string\" == typeof e.stringValue ? i.base64.decode(e.stringValue, t.stringValue = i.newBuffer(i.base64.length(e.stringValue)), 0) : e.stringValue.length && (t.stringValue = e.stringValue)), null != e.aggregateValue && (t.aggregateValue = String(e.aggregateValue)), t;\n    }, I.toObject = function(e, t) {\n        var n, o = {};\n        if (((t = t || {}).arrays || t.defaults) && (o.name = []), t.defaults && (o.identifierValue = \"\", i.Long ? (n = new i.Long(0, 0, !0), o.positiveIntValue = t.longs === String ? n.toString() : t.longs === Number ? n.toNumber() : n) : o.positiveIntValue = t.longs === String ? \"0\" : 0, i.Long ? (n = new i.Long(0, 0, !1), o.negativeIntValue = t.longs === String ? n.toString() : t.longs === Number ? n.toNumber() : n) : o.negativeIntValue = t.longs === String ? \"0\" : 0, o.doubleValue = 0, t.bytes === String ? o.stringValue = \"\" : (o.stringValue = [], t.bytes !== Array && (o.stringValue = i.newBuffer(o.stringValue))), o.aggregateValue = \"\"), e.name && e.name.length) {\n            o.name = [];\n            for(var r = 0; r < e.name.length; ++r)o.name[r] = p.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r], t);\n        }\n        return null != e.identifierValue && e.hasOwnProperty(\"identifierValue\") && (o.identifierValue = e.identifierValue), null != e.positiveIntValue && e.hasOwnProperty(\"positiveIntValue\") && (\"number\" == typeof e.positiveIntValue ? o.positiveIntValue = t.longs === String ? String(e.positiveIntValue) : e.positiveIntValue : o.positiveIntValue = t.longs === String ? i.Long.prototype.toString.call(e.positiveIntValue) : t.longs === Number ? new i.LongBits(e.positiveIntValue.low >>> 0, e.positiveIntValue.high >>> 0).toNumber(!0) : e.positiveIntValue), null != e.negativeIntValue && e.hasOwnProperty(\"negativeIntValue\") && (\"number\" == typeof e.negativeIntValue ? o.negativeIntValue = t.longs === String ? String(e.negativeIntValue) : e.negativeIntValue : o.negativeIntValue = t.longs === String ? i.Long.prototype.toString.call(e.negativeIntValue) : t.longs === Number ? new i.LongBits(e.negativeIntValue.low >>> 0, e.negativeIntValue.high >>> 0).toNumber() : e.negativeIntValue), null != e.doubleValue && e.hasOwnProperty(\"doubleValue\") && (o.doubleValue = t.json && !isFinite(e.doubleValue) ? String(e.doubleValue) : e.doubleValue), null != e.stringValue && e.hasOwnProperty(\"stringValue\") && (o.stringValue = t.bytes === String ? i.base64.encode(e.stringValue, 0, e.stringValue.length) : t.bytes === Array ? Array.prototype.slice.call(e.stringValue) : e.stringValue), null != e.aggregateValue && e.hasOwnProperty(\"aggregateValue\") && (o.aggregateValue = e.aggregateValue), o;\n    }, I.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, I.NamePart = (q.prototype.namePart = \"\", q.prototype.isExtension = !1, q.create = function(e) {\n        return new q(e);\n    }, q.encode = function(e, t) {\n        return (t = t || r.create()).uint32(10).string(e.namePart), t.uint32(16).bool(e.isExtension), t;\n    }, q.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, q.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.UninterpretedOption.NamePart; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.namePart = e.string();\n                    break;\n                case 2:\n                    o.isExtension = e.bool();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        if (!o.hasOwnProperty(\"namePart\")) throw i.ProtocolError(\"missing required 'namePart'\", {\n            instance: o\n        });\n        if (o.hasOwnProperty(\"isExtension\")) return o;\n        throw i.ProtocolError(\"missing required 'isExtension'\", {\n            instance: o\n        });\n    }, q.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, q.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : i.isString(e.namePart) ? \"boolean\" != typeof e.isExtension ? \"isExtension: boolean expected\" : null : \"namePart: string expected\";\n    }, q.fromObject = function(e) {\n        var t;\n        return e instanceof p.google.protobuf.UninterpretedOption.NamePart ? e : (t = new p.google.protobuf.UninterpretedOption.NamePart, null != e.namePart && (t.namePart = String(e.namePart)), null != e.isExtension && (t.isExtension = Boolean(e.isExtension)), t);\n    }, q.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.namePart = \"\", n.isExtension = !1), null != e.namePart && e.hasOwnProperty(\"namePart\") && (n.namePart = e.namePart), null != e.isExtension && e.hasOwnProperty(\"isExtension\") && (n.isExtension = e.isExtension), n;\n    }, q.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, q), I), t.SourceCodeInfo = (Y.prototype.location = i.emptyArray, Y.create = function(e) {\n        return new Y(e);\n    }, Y.encode = function(e, t) {\n        if (t = t || r.create(), null != e.location && e.location.length) for(var n = 0; n < e.location.length; ++n)p.google.protobuf.SourceCodeInfo.Location.encode(e.location[n], t.uint32(10).fork()).ldelim();\n        return t;\n    }, Y.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, Y.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.SourceCodeInfo; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? (o.location && o.location.length || (o.location = []), o.location.push(p.google.protobuf.SourceCodeInfo.Location.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, Y.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, Y.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.location && e.hasOwnProperty(\"location\")) {\n            if (!Array.isArray(e.location)) return \"location: array expected\";\n            for(var t = 0; t < e.location.length; ++t){\n                var n = p.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);\n                if (n) return \"location.\" + n;\n            }\n        }\n        return null;\n    }, Y.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.SourceCodeInfo) return e;\n        var t = new p.google.protobuf.SourceCodeInfo;\n        if (e.location) {\n            if (!Array.isArray(e.location)) throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");\n            t.location = [];\n            for(var n = 0; n < e.location.length; ++n){\n                if (\"object\" != typeof e.location[n]) throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");\n                t.location[n] = p.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n]);\n            }\n        }\n        return t;\n    }, Y.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.location = []), e.location && e.location.length) {\n            n.location = [];\n            for(var o = 0; o < e.location.length; ++o)n.location[o] = p.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o], t);\n        }\n        return n;\n    }, Y.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, Y.Location = (R.prototype.path = i.emptyArray, R.prototype.span = i.emptyArray, R.prototype.leadingComments = \"\", R.prototype.trailingComments = \"\", R.prototype.leadingDetachedComments = i.emptyArray, R.create = function(e) {\n        return new R(e);\n    }, R.encode = function(e, t) {\n        if (t = t || r.create(), null != e.path && e.path.length) {\n            t.uint32(10).fork();\n            for(var n = 0; n < e.path.length; ++n)t.int32(e.path[n]);\n            t.ldelim();\n        }\n        if (null != e.span && e.span.length) {\n            t.uint32(18).fork();\n            for(n = 0; n < e.span.length; ++n)t.int32(e.span[n]);\n            t.ldelim();\n        }\n        if (null != e.leadingComments && Object.hasOwnProperty.call(e, \"leadingComments\") && t.uint32(26).string(e.leadingComments), null != e.trailingComments && Object.hasOwnProperty.call(e, \"trailingComments\") && t.uint32(34).string(e.trailingComments), null != e.leadingDetachedComments && e.leadingDetachedComments.length) for(n = 0; n < e.leadingDetachedComments.length; ++n)t.uint32(50).string(e.leadingDetachedComments[n]);\n        return t;\n    }, R.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, R.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.SourceCodeInfo.Location; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    if (o.path && o.path.length || (o.path = []), 2 == (7 & r)) for(var i = e.uint32() + e.pos; e.pos < i;)o.path.push(e.int32());\n                    else o.path.push(e.int32());\n                    break;\n                case 2:\n                    if (o.span && o.span.length || (o.span = []), 2 == (7 & r)) for(i = e.uint32() + e.pos; e.pos < i;)o.span.push(e.int32());\n                    else o.span.push(e.int32());\n                    break;\n                case 3:\n                    o.leadingComments = e.string();\n                    break;\n                case 4:\n                    o.trailingComments = e.string();\n                    break;\n                case 6:\n                    o.leadingDetachedComments && o.leadingDetachedComments.length || (o.leadingDetachedComments = []), o.leadingDetachedComments.push(e.string());\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, R.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, R.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.path && e.hasOwnProperty(\"path\")) {\n            if (!Array.isArray(e.path)) return \"path: array expected\";\n            for(var t = 0; t < e.path.length; ++t)if (!i.isInteger(e.path[t])) return \"path: integer[] expected\";\n        }\n        if (null != e.span && e.hasOwnProperty(\"span\")) {\n            if (!Array.isArray(e.span)) return \"span: array expected\";\n            for(t = 0; t < e.span.length; ++t)if (!i.isInteger(e.span[t])) return \"span: integer[] expected\";\n        }\n        if (null != e.leadingComments && e.hasOwnProperty(\"leadingComments\") && !i.isString(e.leadingComments)) return \"leadingComments: string expected\";\n        if (null != e.trailingComments && e.hasOwnProperty(\"trailingComments\") && !i.isString(e.trailingComments)) return \"trailingComments: string expected\";\n        if (null != e.leadingDetachedComments && e.hasOwnProperty(\"leadingDetachedComments\")) {\n            if (!Array.isArray(e.leadingDetachedComments)) return \"leadingDetachedComments: array expected\";\n            for(t = 0; t < e.leadingDetachedComments.length; ++t)if (!i.isString(e.leadingDetachedComments[t])) return \"leadingDetachedComments: string[] expected\";\n        }\n        return null;\n    }, R.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.SourceCodeInfo.Location) return e;\n        var t = new p.google.protobuf.SourceCodeInfo.Location;\n        if (e.path) {\n            if (!Array.isArray(e.path)) throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");\n            t.path = [];\n            for(var n = 0; n < e.path.length; ++n)t.path[n] = 0 | e.path[n];\n        }\n        if (e.span) {\n            if (!Array.isArray(e.span)) throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");\n            t.span = [];\n            for(n = 0; n < e.span.length; ++n)t.span[n] = 0 | e.span[n];\n        }\n        if (null != e.leadingComments && (t.leadingComments = String(e.leadingComments)), null != e.trailingComments && (t.trailingComments = String(e.trailingComments)), e.leadingDetachedComments) {\n            if (!Array.isArray(e.leadingDetachedComments)) throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");\n            t.leadingDetachedComments = [];\n            for(n = 0; n < e.leadingDetachedComments.length; ++n)t.leadingDetachedComments[n] = String(e.leadingDetachedComments[n]);\n        }\n        return t;\n    }, R.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.path = [], n.span = [], n.leadingDetachedComments = []), t.defaults && (n.leadingComments = \"\", n.trailingComments = \"\"), e.path && e.path.length) {\n            n.path = [];\n            for(var o = 0; o < e.path.length; ++o)n.path[o] = e.path[o];\n        }\n        if (e.span && e.span.length) {\n            n.span = [];\n            for(o = 0; o < e.span.length; ++o)n.span[o] = e.span[o];\n        }\n        if (null != e.leadingComments && e.hasOwnProperty(\"leadingComments\") && (n.leadingComments = e.leadingComments), null != e.trailingComments && e.hasOwnProperty(\"trailingComments\") && (n.trailingComments = e.trailingComments), e.leadingDetachedComments && e.leadingDetachedComments.length) {\n            n.leadingDetachedComments = [];\n            for(o = 0; o < e.leadingDetachedComments.length; ++o)n.leadingDetachedComments[o] = e.leadingDetachedComments[o];\n        }\n        return n;\n    }, R.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, R), Y), t.GeneratedCodeInfo = (W.prototype.annotation = i.emptyArray, W.create = function(e) {\n        return new W(e);\n    }, W.encode = function(e, t) {\n        if (t = t || r.create(), null != e.annotation && e.annotation.length) for(var n = 0; n < e.annotation.length; ++n)p.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n], t.uint32(10).fork()).ldelim();\n        return t;\n    }, W.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, W.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.GeneratedCodeInfo; e.pos < n;){\n            var r = e.uint32();\n            r >>> 3 == 1 ? (o.annotation && o.annotation.length || (o.annotation = []), o.annotation.push(p.google.protobuf.GeneratedCodeInfo.Annotation.decode(e, e.uint32()))) : e.skipType(7 & r);\n        }\n        return o;\n    }, W.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, W.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.annotation && e.hasOwnProperty(\"annotation\")) {\n            if (!Array.isArray(e.annotation)) return \"annotation: array expected\";\n            for(var t = 0; t < e.annotation.length; ++t){\n                var n = p.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);\n                if (n) return \"annotation.\" + n;\n            }\n        }\n        return null;\n    }, W.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.GeneratedCodeInfo) return e;\n        var t = new p.google.protobuf.GeneratedCodeInfo;\n        if (e.annotation) {\n            if (!Array.isArray(e.annotation)) throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");\n            t.annotation = [];\n            for(var n = 0; n < e.annotation.length; ++n){\n                if (\"object\" != typeof e.annotation[n]) throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");\n                t.annotation[n] = p.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n]);\n            }\n        }\n        return t;\n    }, W.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.annotation = []), e.annotation && e.annotation.length) {\n            n.annotation = [];\n            for(var o = 0; o < e.annotation.length; ++o)n.annotation[o] = p.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o], t);\n        }\n        return n;\n    }, W.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, W.Annotation = (C.prototype.path = i.emptyArray, C.prototype.sourceFile = \"\", C.prototype.begin = 0, C.prototype.end = 0, C.create = function(e) {\n        return new C(e);\n    }, C.encode = function(e, t) {\n        if (t = t || r.create(), null != e.path && e.path.length) {\n            t.uint32(10).fork();\n            for(var n = 0; n < e.path.length; ++n)t.int32(e.path[n]);\n            t.ldelim();\n        }\n        return null != e.sourceFile && Object.hasOwnProperty.call(e, \"sourceFile\") && t.uint32(18).string(e.sourceFile), null != e.begin && Object.hasOwnProperty.call(e, \"begin\") && t.uint32(24).int32(e.begin), null != e.end && Object.hasOwnProperty.call(e, \"end\") && t.uint32(32).int32(e.end), t;\n    }, C.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, C.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.GeneratedCodeInfo.Annotation; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    if (o.path && o.path.length || (o.path = []), 2 == (7 & r)) for(var i = e.uint32() + e.pos; e.pos < i;)o.path.push(e.int32());\n                    else o.path.push(e.int32());\n                    break;\n                case 2:\n                    o.sourceFile = e.string();\n                    break;\n                case 3:\n                    o.begin = e.int32();\n                    break;\n                case 4:\n                    o.end = e.int32();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, C.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, C.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.path && e.hasOwnProperty(\"path\")) {\n            if (!Array.isArray(e.path)) return \"path: array expected\";\n            for(var t = 0; t < e.path.length; ++t)if (!i.isInteger(e.path[t])) return \"path: integer[] expected\";\n        }\n        return null != e.sourceFile && e.hasOwnProperty(\"sourceFile\") && !i.isString(e.sourceFile) ? \"sourceFile: string expected\" : null != e.begin && e.hasOwnProperty(\"begin\") && !i.isInteger(e.begin) ? \"begin: integer expected\" : null != e.end && e.hasOwnProperty(\"end\") && !i.isInteger(e.end) ? \"end: integer expected\" : null;\n    }, C.fromObject = function(e) {\n        if (e instanceof p.google.protobuf.GeneratedCodeInfo.Annotation) return e;\n        var t = new p.google.protobuf.GeneratedCodeInfo.Annotation;\n        if (e.path) {\n            if (!Array.isArray(e.path)) throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");\n            t.path = [];\n            for(var n = 0; n < e.path.length; ++n)t.path[n] = 0 | e.path[n];\n        }\n        return null != e.sourceFile && (t.sourceFile = String(e.sourceFile)), null != e.begin && (t.begin = 0 | e.begin), null != e.end && (t.end = 0 | e.end), t;\n    }, C.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.path = []), t.defaults && (n.sourceFile = \"\", n.begin = 0, n.end = 0), e.path && e.path.length) {\n            n.path = [];\n            for(var o = 0; o < e.path.length; ++o)n.path[o] = e.path[o];\n        }\n        return null != e.sourceFile && e.hasOwnProperty(\"sourceFile\") && (n.sourceFile = e.sourceFile), null != e.begin && e.hasOwnProperty(\"begin\") && (n.begin = e.begin), null != e.end && e.hasOwnProperty(\"end\") && (n.end = e.end), n;\n    }, C.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, C), W), t.Any = (X.prototype.type_url = \"\", X.prototype.value = i.newBuffer([]), X.create = function(e) {\n        return new X(e);\n    }, X.encode = function(e, t) {\n        return t = t || r.create(), null != e.type_url && Object.hasOwnProperty.call(e, \"type_url\") && t.uint32(10).string(e.type_url), null != e.value && Object.hasOwnProperty.call(e, \"value\") && t.uint32(18).bytes(e.value), t;\n    }, X.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, X.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.Any; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.type_url = e.string();\n                    break;\n                case 2:\n                    o.value = e.bytes();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, X.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, X.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.type_url && e.hasOwnProperty(\"type_url\") && !i.isString(e.type_url) ? \"type_url: string expected\" : null != e.value && e.hasOwnProperty(\"value\") && !(e.value && \"number\" == typeof e.value.length || i.isString(e.value)) ? \"value: buffer expected\" : null;\n    }, X.fromObject = function(e) {\n        var t;\n        return e instanceof p.google.protobuf.Any ? e : (t = new p.google.protobuf.Any, null != e.type_url && (t.type_url = String(e.type_url)), null != e.value && (\"string\" == typeof e.value ? i.base64.decode(e.value, t.value = i.newBuffer(i.base64.length(e.value)), 0) : e.value.length && (t.value = e.value)), t);\n    }, X.toObject = function(e, t) {\n        var n = {};\n        return (t = t || {}).defaults && (n.type_url = \"\", t.bytes === String ? n.value = \"\" : (n.value = [], t.bytes !== Array && (n.value = i.newBuffer(n.value)))), null != e.type_url && e.hasOwnProperty(\"type_url\") && (n.type_url = e.type_url), null != e.value && e.hasOwnProperty(\"value\") && (n.value = t.bytes === String ? i.base64.encode(e.value, 0, e.value.length) : t.bytes === Array ? Array.prototype.slice.call(e.value) : e.value), n;\n    }, X.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, X), t.Duration = (K.prototype.seconds = i.Long ? i.Long.fromBits(0, 0, !1) : 0, K.prototype.nanos = 0, K.create = function(e) {\n        return new K(e);\n    }, K.encode = function(e, t) {\n        return t = t || r.create(), null != e.seconds && Object.hasOwnProperty.call(e, \"seconds\") && t.uint32(8).int64(e.seconds), null != e.nanos && Object.hasOwnProperty.call(e, \"nanos\") && t.uint32(16).int32(e.nanos), t;\n    }, K.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, K.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.protobuf.Duration; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.seconds = e.int64();\n                    break;\n                case 2:\n                    o.nanos = e.int32();\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, K.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, K.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null != e.seconds && e.hasOwnProperty(\"seconds\") && !(i.isInteger(e.seconds) || e.seconds && i.isInteger(e.seconds.low) && i.isInteger(e.seconds.high)) ? \"seconds: integer|Long expected\" : null != e.nanos && e.hasOwnProperty(\"nanos\") && !i.isInteger(e.nanos) ? \"nanos: integer expected\" : null;\n    }, K.fromObject = function(e) {\n        var t;\n        return e instanceof p.google.protobuf.Duration ? e : (t = new p.google.protobuf.Duration, null != e.seconds && (i.Long ? (t.seconds = i.Long.fromValue(e.seconds)).unsigned = !1 : \"string\" == typeof e.seconds ? t.seconds = parseInt(e.seconds, 10) : \"number\" == typeof e.seconds ? t.seconds = e.seconds : \"object\" == typeof e.seconds && (t.seconds = new i.LongBits(e.seconds.low >>> 0, e.seconds.high >>> 0).toNumber())), null != e.nanos && (t.nanos = 0 | e.nanos), t);\n    }, K.toObject = function(e, t) {\n        var n, o = {};\n        return (t = t || {}).defaults && (i.Long ? (n = new i.Long(0, 0, !1), o.seconds = t.longs === String ? n.toString() : t.longs === Number ? n.toNumber() : n) : o.seconds = t.longs === String ? \"0\" : 0, o.nanos = 0), null != e.seconds && e.hasOwnProperty(\"seconds\") && (\"number\" == typeof e.seconds ? o.seconds = t.longs === String ? String(e.seconds) : e.seconds : o.seconds = t.longs === String ? i.Long.prototype.toString.call(e.seconds) : t.longs === Number ? new i.LongBits(e.seconds.low >>> 0, e.seconds.high >>> 0).toNumber() : e.seconds), null != e.nanos && e.hasOwnProperty(\"nanos\") && (o.nanos = e.nanos), o;\n    }, K.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, K), t.Empty = (Q.create = function(e) {\n        return new Q(e);\n    }, Q.encode = function(e, t) {\n        return t = t || r.create();\n    }, Q.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, Q.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, t = new p.google.protobuf.Empty; e.pos < n;){\n            var o = e.uint32();\n            e.skipType(7 & o);\n        }\n        return t;\n    }, Q.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, Q.verify = function(e) {\n        return \"object\" != typeof e || null === e ? \"object expected\" : null;\n    }, Q.fromObject = function(e) {\n        return e instanceof p.google.protobuf.Empty ? e : new p.google.protobuf.Empty;\n    }, Q.toObject = function() {\n        return {};\n    }, Q.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, Q), t), F.rpc = ((n = {}).Status = (V.prototype.code = 0, V.prototype.message = \"\", V.prototype.details = i.emptyArray, V.create = function(e) {\n        return new V(e);\n    }, V.encode = function(e, t) {\n        if (t = t || r.create(), null != e.code && Object.hasOwnProperty.call(e, \"code\") && t.uint32(8).int32(e.code), null != e.message && Object.hasOwnProperty.call(e, \"message\") && t.uint32(18).string(e.message), null != e.details && e.details.length) for(var n = 0; n < e.details.length; ++n)p.google.protobuf.Any.encode(e.details[n], t.uint32(26).fork()).ldelim();\n        return t;\n    }, V.encodeDelimited = function(e, t) {\n        return this.encode(e, t).ldelim();\n    }, V.decode = function(e, t) {\n        e instanceof a || (e = a.create(e));\n        for(var n = void 0 === t ? e.len : e.pos + t, o = new p.google.rpc.Status; e.pos < n;){\n            var r = e.uint32();\n            switch(r >>> 3){\n                case 1:\n                    o.code = e.int32();\n                    break;\n                case 2:\n                    o.message = e.string();\n                    break;\n                case 3:\n                    o.details && o.details.length || (o.details = []), o.details.push(p.google.protobuf.Any.decode(e, e.uint32()));\n                    break;\n                default:\n                    e.skipType(7 & r);\n            }\n        }\n        return o;\n    }, V.decodeDelimited = function(e) {\n        return e instanceof a || (e = new a(e)), this.decode(e, e.uint32());\n    }, V.verify = function(e) {\n        if (\"object\" != typeof e || null === e) return \"object expected\";\n        if (null != e.code && e.hasOwnProperty(\"code\") && !i.isInteger(e.code)) return \"code: integer expected\";\n        if (null != e.message && e.hasOwnProperty(\"message\") && !i.isString(e.message)) return \"message: string expected\";\n        if (null != e.details && e.hasOwnProperty(\"details\")) {\n            if (!Array.isArray(e.details)) return \"details: array expected\";\n            for(var t = 0; t < e.details.length; ++t){\n                var n = p.google.protobuf.Any.verify(e.details[t]);\n                if (n) return \"details.\" + n;\n            }\n        }\n        return null;\n    }, V.fromObject = function(e) {\n        if (e instanceof p.google.rpc.Status) return e;\n        var t = new p.google.rpc.Status;\n        if (null != e.code && (t.code = 0 | e.code), null != e.message && (t.message = String(e.message)), e.details) {\n            if (!Array.isArray(e.details)) throw TypeError(\".google.rpc.Status.details: array expected\");\n            t.details = [];\n            for(var n = 0; n < e.details.length; ++n){\n                if (\"object\" != typeof e.details[n]) throw TypeError(\".google.rpc.Status.details: object expected\");\n                t.details[n] = p.google.protobuf.Any.fromObject(e.details[n]);\n            }\n        }\n        return t;\n    }, V.toObject = function(e, t) {\n        var n = {};\n        if (((t = t || {}).arrays || t.defaults) && (n.details = []), t.defaults && (n.code = 0, n.message = \"\"), null != e.code && e.hasOwnProperty(\"code\") && (n.code = e.code), null != e.message && e.hasOwnProperty(\"message\") && (n.message = e.message), e.details && e.details.length) {\n            n.details = [];\n            for(var o = 0; o < e.details.length; ++o)n.details[o] = p.google.protobuf.Any.toObject(e.details[o], t);\n        }\n        return n;\n    }, V.prototype.toJSON = function() {\n        return this.constructor.toObject(this, o.util.toJSONOptions);\n    }, V), n), F), p;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/operations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/apiCaller.js":
/*!********************************************************!*\
  !*** ./node_modules/google-gax/build/src/apiCaller.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createAPICaller = createAPICaller;\nconst normalApiCaller_1 = __webpack_require__(/*! ./normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\nfunction createAPICaller(settings, descriptor) {\n    if (!descriptor) {\n        return new normalApiCaller_1.NormalApiCaller();\n    }\n    return descriptor.getApiCaller(settings);\n} //# sourceMappingURL=apiCaller.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHRTtBQUMxQixNQUFNQyxvQkFBb0JDLG1CQUFPQSxDQUFDLCtHQUErQjtBQUNqRSxTQUFTRixnQkFBZ0JHLFFBQVEsRUFBRUMsVUFBVTtJQUN6QyxJQUFJLENBQUNBLFlBQVk7UUFDYixPQUFPLElBQUlILGtCQUFrQkksZUFBZTtJQUNoRDtJQUNBLE9BQU9ELFdBQVdFLFlBQVksQ0FBQ0g7QUFDbkMsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYXBpQ2FsbGVyLmpzP2EwYjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUFQSUNhbGxlciA9IGNyZWF0ZUFQSUNhbGxlcjtcbmNvbnN0IG5vcm1hbEFwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vbm9ybWFsQ2FsbHMvbm9ybWFsQXBpQ2FsbGVyXCIpO1xuZnVuY3Rpb24gY3JlYXRlQVBJQ2FsbGVyKHNldHRpbmdzLCBkZXNjcmlwdG9yKSB7XG4gICAgaWYgKCFkZXNjcmlwdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgbm9ybWFsQXBpQ2FsbGVyXzEuTm9ybWFsQXBpQ2FsbGVyKCk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9yLmdldEFwaUNhbGxlcihzZXR0aW5ncyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGlDYWxsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3JlYXRlQVBJQ2FsbGVyIiwibm9ybWFsQXBpQ2FsbGVyXzEiLCJyZXF1aXJlIiwic2V0dGluZ3MiLCJkZXNjcmlwdG9yIiwiTm9ybWFsQXBpQ2FsbGVyIiwiZ2V0QXBpQ2FsbGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/apiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js":
/*!****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BundleApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\n/**\n * An implementation of APICaller for bundled calls.\n * Uses BundleExecutor to do bundling.\n */ class BundleApiCaller {\n    constructor(bundler){\n        this.bundler = bundler;\n    }\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, status) {\n        if (!settings.isBundling) {\n            throw new googleError_1.GoogleError(\"Bundling enabled with no isBundling!\");\n        }\n        status.call((argument, callback)=>{\n            this.bundler.schedule(apiCall, argument, callback);\n            return status;\n        }, argument);\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.BundleApiCaller = BundleApiCaller; //# sourceMappingURL=bundleApiCaller.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGVBcGlDYWxsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUcsS0FBSztBQUMvQixNQUFNRyxTQUFTQyxtQkFBT0EsQ0FBQyxrRUFBUztBQUNoQyxNQUFNQyxnQkFBZ0JELG1CQUFPQSxDQUFDLGdGQUFnQjtBQUM5Qzs7O0NBR0MsR0FDRCxNQUFNRjtJQUNGSSxZQUFZQyxPQUFPLENBQUU7UUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBO0lBQ25CO0lBQ0FDLEtBQUtDLFFBQVEsRUFBRTtRQUNYLElBQUlBLFVBQVU7WUFDVixPQUFPLElBQUlOLE9BQU9PLFdBQVcsQ0FBQ0Q7UUFDbEM7UUFDQSxPQUFPLElBQUlOLE9BQU9RLGtCQUFrQjtJQUN4QztJQUNBQyxLQUFLQyxJQUFJLEVBQUU7UUFDUCxPQUFPQTtJQUNYO0lBQ0FDLEtBQUtDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRTtRQUN0QyxJQUFJLENBQUNELFNBQVNFLFVBQVUsRUFBRTtZQUN0QixNQUFNLElBQUlkLGNBQWNlLFdBQVcsQ0FBQztRQUN4QztRQUNBRixPQUFPSixJQUFJLENBQUMsQ0FBQ0UsVUFBVVA7WUFDbkIsSUFBSSxDQUFDRixPQUFPLENBQUNjLFFBQVEsQ0FBQ04sU0FBU0MsVUFBVVA7WUFDekMsT0FBT1M7UUFDWCxHQUFHRjtJQUNQO0lBQ0FNLEtBQUtDLFNBQVMsRUFBRUMsR0FBRyxFQUFFO1FBQ2pCRCxVQUFVZCxRQUFRLENBQUNlO0lBQ3ZCO0lBQ0FDLE9BQU9GLFNBQVMsRUFBRTtRQUNkLE9BQU9BLFVBQVVHLE9BQU87SUFDNUI7QUFDSjtBQUNBMUIsdUJBQXVCLEdBQUdFLGlCQUMxQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGVBcGlDYWxsZXIuanM/MzBhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVuZGxlQXBpQ2FsbGVyID0gdm9pZCAwO1xuY29uc3QgY2FsbF8xID0gcmVxdWlyZShcIi4uL2NhbGxcIik7XG5jb25zdCBnb29nbGVFcnJvcl8xID0gcmVxdWlyZShcIi4uL2dvb2dsZUVycm9yXCIpO1xuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBBUElDYWxsZXIgZm9yIGJ1bmRsZWQgY2FsbHMuXG4gKiBVc2VzIEJ1bmRsZUV4ZWN1dG9yIHRvIGRvIGJ1bmRsaW5nLlxuICovXG5jbGFzcyBCdW5kbGVBcGlDYWxsZXIge1xuICAgIGNvbnN0cnVjdG9yKGJ1bmRsZXIpIHtcbiAgICAgICAgdGhpcy5idW5kbGVyID0gYnVuZGxlcjtcbiAgICB9XG4gICAgaW5pdChjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FsbF8xLk9uZ29pbmdDYWxsKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGNhbGxfMS5PbmdvaW5nQ2FsbFByb21pc2UoKTtcbiAgICB9XG4gICAgd3JhcChmdW5jKSB7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgIH1cbiAgICBjYWxsKGFwaUNhbGwsIGFyZ3VtZW50LCBzZXR0aW5ncywgc3RhdHVzKSB7XG4gICAgICAgIGlmICghc2V0dGluZ3MuaXNCdW5kbGluZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGdvb2dsZUVycm9yXzEuR29vZ2xlRXJyb3IoJ0J1bmRsaW5nIGVuYWJsZWQgd2l0aCBubyBpc0J1bmRsaW5nIScpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXR1cy5jYWxsKChhcmd1bWVudCwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMuYnVuZGxlci5zY2hlZHVsZShhcGlDYWxsLCBhcmd1bWVudCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICAgICAgfSwgYXJndW1lbnQpO1xuICAgIH1cbiAgICBmYWlsKGNhbmNlbGxlciwgZXJyKSB7XG4gICAgICAgIGNhbmNlbGxlci5jYWxsYmFjayhlcnIpO1xuICAgIH1cbiAgICByZXN1bHQoY2FuY2VsbGVyKSB7XG4gICAgICAgIHJldHVybiBjYW5jZWxsZXIucHJvbWlzZTtcbiAgICB9XG59XG5leHBvcnRzLkJ1bmRsZUFwaUNhbGxlciA9IEJ1bmRsZUFwaUNhbGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1bmRsZUFwaUNhbGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJCdW5kbGVBcGlDYWxsZXIiLCJjYWxsXzEiLCJyZXF1aXJlIiwiZ29vZ2xlRXJyb3JfMSIsImNvbnN0cnVjdG9yIiwiYnVuZGxlciIsImluaXQiLCJjYWxsYmFjayIsIk9uZ29pbmdDYWxsIiwiT25nb2luZ0NhbGxQcm9taXNlIiwid3JhcCIsImZ1bmMiLCJjYWxsIiwiYXBpQ2FsbCIsImFyZ3VtZW50Iiwic2V0dGluZ3MiLCJzdGF0dXMiLCJpc0J1bmRsaW5nIiwiR29vZ2xlRXJyb3IiLCJzY2hlZHVsZSIsImZhaWwiLCJjYW5jZWxsZXIiLCJlcnIiLCJyZXN1bHQiLCJwcm9taXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BundleDescriptor = void 0;\nconst normalApiCaller_1 = __webpack_require__(/*! ../normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\nconst bundleApiCaller_1 = __webpack_require__(/*! ./bundleApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js\");\nconst bundleExecutor_1 = __webpack_require__(/*! ./bundleExecutor */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\n/**\n * A descriptor for calls that can be bundled into one call.\n */ class BundleDescriptor {\n    /**\n     * Describes the structure of bundled call.\n     *\n     * requestDiscriminatorFields may include '.' as a separator, which is used to\n     * indicate object traversal. This allows fields in nested objects to be used\n     * to determine what request to bundle.\n     *\n     * @property {String} bundledField\n     * @property {String} requestDiscriminatorFields\n     * @property {String} subresponseField\n     * @property {Function} byteLengthFunction\n     *\n     * @param {String} bundledField - the repeated field in the request message\n     *   that will have its elements aggregated by bundling.\n     * @param {String} requestDiscriminatorFields - a list of fields in the\n     *   target request message class that are used to detemrine which request\n     *   messages should be bundled together.\n     * @param {String} subresponseField - an optional field, when present it\n     *   indicates the field in the response message that should be used to\n     *   demultiplex the response into multiple response messages.\n     * @param {Function} byteLengthFunction - a function to obtain the byte\n     *   length to be consumed for the bundled field messages. Because Node.JS\n     *   protobuf.js/gRPC uses builtin Objects for the user-visible data and\n     *   internally they are encoded/decoded in protobuf manner, this function\n     *   is actually necessary to calculate the byte length.\n     * @constructor\n     */ constructor(bundledField, requestDiscriminatorFields, subresponseField, byteLengthFunction){\n        if (!byteLengthFunction && typeof subresponseField === \"function\") {\n            byteLengthFunction = subresponseField;\n            subresponseField = null;\n        }\n        this.bundledField = bundledField;\n        this.requestDiscriminatorFields = requestDiscriminatorFields.map(util_1.toCamelCase);\n        this.subresponseField = subresponseField;\n        this.byteLengthFunction = byteLengthFunction;\n    }\n    getApiCaller(settings) {\n        if (settings.isBundling === false) {\n            return new normalApiCaller_1.NormalApiCaller();\n        }\n        return new bundleApiCaller_1.BundleApiCaller(new bundleExecutor_1.BundleExecutor(settings.bundleOptions, this));\n    }\n}\nexports.BundleDescriptor = BundleDescriptor; //# sourceMappingURL=bundleDescriptor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGVEZXNjcmlwdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHdCQUF3QixHQUFHLEtBQUs7QUFDaEMsTUFBTUcsb0JBQW9CQyxtQkFBT0EsQ0FBQyxnSEFBZ0M7QUFDbEUsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQyxxR0FBbUI7QUFDckQsTUFBTUUsbUJBQW1CRixtQkFBT0EsQ0FBQyxtR0FBa0I7QUFDbkQsTUFBTUcsU0FBU0gsbUJBQU9BLENBQUMsa0VBQVM7QUFDaEM7O0NBRUMsR0FDRCxNQUFNRjtJQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQTBCQyxHQUNETSxZQUFZQyxZQUFZLEVBQUVDLDBCQUEwQixFQUFFQyxnQkFBZ0IsRUFBRUMsa0JBQWtCLENBQUU7UUFDeEYsSUFBSSxDQUFDQSxzQkFBc0IsT0FBT0QscUJBQXFCLFlBQVk7WUFDL0RDLHFCQUFxQkQ7WUFDckJBLG1CQUFtQjtRQUN2QjtRQUNBLElBQUksQ0FBQ0YsWUFBWSxHQUFHQTtRQUNwQixJQUFJLENBQUNDLDBCQUEwQixHQUMzQkEsMkJBQTJCRyxHQUFHLENBQUNOLE9BQU9PLFdBQVc7UUFDckQsSUFBSSxDQUFDSCxnQkFBZ0IsR0FBR0E7UUFDeEIsSUFBSSxDQUFDQyxrQkFBa0IsR0FBR0E7SUFDOUI7SUFDQUcsYUFBYUMsUUFBUSxFQUFFO1FBQ25CLElBQUlBLFNBQVNDLFVBQVUsS0FBSyxPQUFPO1lBQy9CLE9BQU8sSUFBSWQsa0JBQWtCZSxlQUFlO1FBQ2hEO1FBQ0EsT0FBTyxJQUFJYixrQkFBa0JjLGVBQWUsQ0FBQyxJQUFJYixpQkFBaUJjLGNBQWMsQ0FBQ0osU0FBU0ssYUFBYSxFQUFFLElBQUk7SUFDakg7QUFDSjtBQUNBckIsd0JBQXdCLEdBQUdFLGtCQUMzQiw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGVEZXNjcmlwdG9yLmpzPzM4OWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ1bmRsZURlc2NyaXB0b3IgPSB2b2lkIDA7XG5jb25zdCBub3JtYWxBcGlDYWxsZXJfMSA9IHJlcXVpcmUoXCIuLi9ub3JtYWxDYWxscy9ub3JtYWxBcGlDYWxsZXJcIik7XG5jb25zdCBidW5kbGVBcGlDYWxsZXJfMSA9IHJlcXVpcmUoXCIuL2J1bmRsZUFwaUNhbGxlclwiKTtcbmNvbnN0IGJ1bmRsZUV4ZWN1dG9yXzEgPSByZXF1aXJlKFwiLi9idW5kbGVFeGVjdXRvclwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuLyoqXG4gKiBBIGRlc2NyaXB0b3IgZm9yIGNhbGxzIHRoYXQgY2FuIGJlIGJ1bmRsZWQgaW50byBvbmUgY2FsbC5cbiAqL1xuY2xhc3MgQnVuZGxlRGVzY3JpcHRvciB7XG4gICAgLyoqXG4gICAgICogRGVzY3JpYmVzIHRoZSBzdHJ1Y3R1cmUgb2YgYnVuZGxlZCBjYWxsLlxuICAgICAqXG4gICAgICogcmVxdWVzdERpc2NyaW1pbmF0b3JGaWVsZHMgbWF5IGluY2x1ZGUgJy4nIGFzIGEgc2VwYXJhdG9yLCB3aGljaCBpcyB1c2VkIHRvXG4gICAgICogaW5kaWNhdGUgb2JqZWN0IHRyYXZlcnNhbC4gVGhpcyBhbGxvd3MgZmllbGRzIGluIG5lc3RlZCBvYmplY3RzIHRvIGJlIHVzZWRcbiAgICAgKiB0byBkZXRlcm1pbmUgd2hhdCByZXF1ZXN0IHRvIGJ1bmRsZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBidW5kbGVkRmllbGRcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gcmVxdWVzdERpc2NyaW1pbmF0b3JGaWVsZHNcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gc3VicmVzcG9uc2VGaWVsZFxuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGJ5dGVMZW5ndGhGdW5jdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGJ1bmRsZWRGaWVsZCAtIHRoZSByZXBlYXRlZCBmaWVsZCBpbiB0aGUgcmVxdWVzdCBtZXNzYWdlXG4gICAgICogICB0aGF0IHdpbGwgaGF2ZSBpdHMgZWxlbWVudHMgYWdncmVnYXRlZCBieSBidW5kbGluZy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdERpc2NyaW1pbmF0b3JGaWVsZHMgLSBhIGxpc3Qgb2YgZmllbGRzIGluIHRoZVxuICAgICAqICAgdGFyZ2V0IHJlcXVlc3QgbWVzc2FnZSBjbGFzcyB0aGF0IGFyZSB1c2VkIHRvIGRldGVtcmluZSB3aGljaCByZXF1ZXN0XG4gICAgICogICBtZXNzYWdlcyBzaG91bGQgYmUgYnVuZGxlZCB0b2dldGhlci5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3VicmVzcG9uc2VGaWVsZCAtIGFuIG9wdGlvbmFsIGZpZWxkLCB3aGVuIHByZXNlbnQgaXRcbiAgICAgKiAgIGluZGljYXRlcyB0aGUgZmllbGQgaW4gdGhlIHJlc3BvbnNlIG1lc3NhZ2UgdGhhdCBzaG91bGQgYmUgdXNlZCB0b1xuICAgICAqICAgZGVtdWx0aXBsZXggdGhlIHJlc3BvbnNlIGludG8gbXVsdGlwbGUgcmVzcG9uc2UgbWVzc2FnZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYnl0ZUxlbmd0aEZ1bmN0aW9uIC0gYSBmdW5jdGlvbiB0byBvYnRhaW4gdGhlIGJ5dGVcbiAgICAgKiAgIGxlbmd0aCB0byBiZSBjb25zdW1lZCBmb3IgdGhlIGJ1bmRsZWQgZmllbGQgbWVzc2FnZXMuIEJlY2F1c2UgTm9kZS5KU1xuICAgICAqICAgcHJvdG9idWYuanMvZ1JQQyB1c2VzIGJ1aWx0aW4gT2JqZWN0cyBmb3IgdGhlIHVzZXItdmlzaWJsZSBkYXRhIGFuZFxuICAgICAqICAgaW50ZXJuYWxseSB0aGV5IGFyZSBlbmNvZGVkL2RlY29kZWQgaW4gcHJvdG9idWYgbWFubmVyLCB0aGlzIGZ1bmN0aW9uXG4gICAgICogICBpcyBhY3R1YWxseSBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIHRoZSBieXRlIGxlbmd0aC5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihidW5kbGVkRmllbGQsIHJlcXVlc3REaXNjcmltaW5hdG9yRmllbGRzLCBzdWJyZXNwb25zZUZpZWxkLCBieXRlTGVuZ3RoRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKCFieXRlTGVuZ3RoRnVuY3Rpb24gJiYgdHlwZW9mIHN1YnJlc3BvbnNlRmllbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGhGdW5jdGlvbiA9IHN1YnJlc3BvbnNlRmllbGQ7XG4gICAgICAgICAgICBzdWJyZXNwb25zZUZpZWxkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1bmRsZWRGaWVsZCA9IGJ1bmRsZWRGaWVsZDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0RGlzY3JpbWluYXRvckZpZWxkcyA9XG4gICAgICAgICAgICByZXF1ZXN0RGlzY3JpbWluYXRvckZpZWxkcy5tYXAodXRpbF8xLnRvQ2FtZWxDYXNlKTtcbiAgICAgICAgdGhpcy5zdWJyZXNwb25zZUZpZWxkID0gc3VicmVzcG9uc2VGaWVsZDtcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoRnVuY3Rpb24gPSBieXRlTGVuZ3RoRnVuY3Rpb247XG4gICAgfVxuICAgIGdldEFwaUNhbGxlcihzZXR0aW5ncykge1xuICAgICAgICBpZiAoc2V0dGluZ3MuaXNCdW5kbGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgbm9ybWFsQXBpQ2FsbGVyXzEuTm9ybWFsQXBpQ2FsbGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBidW5kbGVBcGlDYWxsZXJfMS5CdW5kbGVBcGlDYWxsZXIobmV3IGJ1bmRsZUV4ZWN1dG9yXzEuQnVuZGxlRXhlY3V0b3Ioc2V0dGluZ3MuYnVuZGxlT3B0aW9ucywgdGhpcykpO1xuICAgIH1cbn1cbmV4cG9ydHMuQnVuZGxlRGVzY3JpcHRvciA9IEJ1bmRsZURlc2NyaXB0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idW5kbGVEZXNjcmlwdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJ1bmRsZURlc2NyaXB0b3IiLCJub3JtYWxBcGlDYWxsZXJfMSIsInJlcXVpcmUiLCJidW5kbGVBcGlDYWxsZXJfMSIsImJ1bmRsZUV4ZWN1dG9yXzEiLCJ1dGlsXzEiLCJjb25zdHJ1Y3RvciIsImJ1bmRsZWRGaWVsZCIsInJlcXVlc3REaXNjcmltaW5hdG9yRmllbGRzIiwic3VicmVzcG9uc2VGaWVsZCIsImJ5dGVMZW5ndGhGdW5jdGlvbiIsIm1hcCIsInRvQ2FtZWxDYXNlIiwiZ2V0QXBpQ2FsbGVyIiwic2V0dGluZ3MiLCJpc0J1bmRsaW5nIiwiTm9ybWFsQXBpQ2FsbGVyIiwiQnVuZGxlQXBpQ2FsbGVyIiwiQnVuZGxlRXhlY3V0b3IiLCJidW5kbGVPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BundleExecutor = void 0;\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst warnings_1 = __webpack_require__(/*! ../warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst bundlingUtils_1 = __webpack_require__(/*! ./bundlingUtils */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js\");\nconst task_1 = __webpack_require__(/*! ./task */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js\");\nfunction noop() {}\n/**\n * BundleExecutor stores several timers for each bundle (calls are bundled based\n * on the options passed, each bundle has unique ID that is calculated based on\n * field values). Each timer fires and sends a call after certain amount of\n * time, and if a new request comes to the same bundle, the timer can be\n * restarted.\n */ class BundleExecutor {\n    /**\n     * Organizes requests for an api service that requires to bundle them.\n     *\n     * @param {BundleOptions} bundleOptions - configures strategy this instance\n     *   uses when executing bundled functions.\n     * @param {BundleDescriptor} bundleDescriptor - the description of the bundling.\n     * @constructor\n     */ constructor(bundleOptions, bundleDescriptor){\n        this._options = bundleOptions;\n        this._descriptor = bundleDescriptor;\n        this._tasks = {};\n        this._timers = {};\n        this._invocations = {};\n        this._invocationId = 0;\n    }\n    /**\n     * Schedule a method call.\n     *\n     * @param {function} apiCall - the function for an API call.\n     * @param {Object} request - the request object to be bundled with others.\n     * @param {APICallback} callback - the callback to be called when the method finished.\n     * @return {function()} - the function to cancel the scheduled invocation.\n     */ schedule(apiCall, request, callback) {\n        const bundleId = (0, bundlingUtils_1.computeBundleId)(request, this._descriptor.requestDiscriminatorFields);\n        callback = callback || noop;\n        if (bundleId === undefined) {\n            (0, warnings_1.warn)(\"bundling_schedule_bundleid_undefined\", \"The request does not have enough information for request bundling. \" + `Invoking immediately. Request: ${JSON.stringify(request)} ` + `discriminator fields: ${this._descriptor.requestDiscriminatorFields}`);\n            return apiCall(request, callback);\n        }\n        if (request[this._descriptor.bundledField] === undefined) {\n            (0, warnings_1.warn)(\"bundling_no_bundled_field\", `Request does not contain field ${this._descriptor.bundledField} that must present for bundling. ` + `Invoking immediately. Request: ${JSON.stringify(request)}`);\n            return apiCall(request, callback);\n        }\n        if (!(bundleId in this._tasks)) {\n            this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);\n        }\n        let task = this._tasks[bundleId];\n        callback.id = String(this._invocationId++);\n        this._invocations[callback.id] = bundleId;\n        const bundledField = request[this._descriptor.bundledField];\n        const elementCount = bundledField.length;\n        let requestBytes = 0;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        bundledField.forEach((obj)=>{\n            requestBytes += this._descriptor.byteLengthFunction(obj);\n        });\n        const countLimit = this._options.elementCountLimit || 0;\n        const byteLimit = this._options.requestByteLimit || 0;\n        if (countLimit > 0 && elementCount > countLimit || byteLimit > 0 && requestBytes >= byteLimit) {\n            let message;\n            if (countLimit > 0 && elementCount > countLimit) {\n                message = \"The number of elements \" + elementCount + \" exceeds the limit \" + this._options.elementCountLimit;\n            } else {\n                message = \"The required bytes \" + requestBytes + \" exceeds the limit \" + this._options.requestByteLimit;\n            }\n            const error = new googleError_1.GoogleError(message);\n            error.code = status_1.Status.INVALID_ARGUMENT;\n            callback(error);\n            return {\n                cancel: noop\n            };\n        }\n        const existingCount = task.getElementCount();\n        const existingBytes = task.getRequestByteSize();\n        if (countLimit > 0 && elementCount + existingCount >= countLimit || byteLimit > 0 && requestBytes + existingBytes >= byteLimit) {\n            this._runNow(bundleId);\n            this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);\n            task = this._tasks[bundleId];\n        }\n        task.extend(bundledField, requestBytes, callback);\n        const ret = {\n            cancel () {\n                self._cancel(callback.id);\n            }\n        };\n        const countThreshold = this._options.elementCountThreshold || 0;\n        const sizeThreshold = this._options.requestByteThreshold || 0;\n        if (countThreshold > 0 && task.getElementCount() >= countThreshold || sizeThreshold > 0 && task.getRequestByteSize() >= sizeThreshold) {\n            this._runNow(bundleId);\n            return ret;\n        }\n        if (!(bundleId in this._timers) && this._options.delayThreshold > 0) {\n            this._timers[bundleId] = setTimeout(()=>{\n                delete this._timers[bundleId];\n                this._runNow(bundleId);\n            }, this._options.delayThreshold);\n        }\n        return ret;\n    }\n    /**\n     * Clears scheduled timeout if it exists.\n     *\n     * @param {String} bundleId - the id for the task whose timeout needs to be\n     *   cleared.\n     * @private\n     */ _maybeClearTimeout(bundleId) {\n        if (bundleId in this._timers) {\n            const timerId = this._timers[bundleId];\n            delete this._timers[bundleId];\n            clearTimeout(timerId);\n        }\n    }\n    /**\n     * Cancels an event.\n     *\n     * @param {String} id - The id for the event in the task.\n     * @private\n     */ _cancel(id) {\n        if (!(id in this._invocations)) {\n            return;\n        }\n        const bundleId = this._invocations[id];\n        if (!(bundleId in this._tasks)) {\n            return;\n        }\n        const task = this._tasks[bundleId];\n        delete this._invocations[id];\n        if (task.cancel(id)) {\n            this._maybeClearTimeout(bundleId);\n            delete this._tasks[bundleId];\n        }\n    }\n    /**\n     * Invokes a task.\n     *\n     * @param {String} bundleId - The id for the task.\n     * @private\n     */ _runNow(bundleId) {\n        if (!(bundleId in this._tasks)) {\n            (0, warnings_1.warn)(\"bundle_runnow_bundleid_unknown\", `No such bundleid: ${bundleId}`);\n            return;\n        }\n        this._maybeClearTimeout(bundleId);\n        const task = this._tasks[bundleId];\n        delete this._tasks[bundleId];\n        task.run().forEach((id)=>{\n            delete this._invocations[id];\n        });\n    }\n}\nexports.BundleExecutor = BundleExecutor; //# sourceMappingURL=bundleExecutor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.computeBundleId = computeBundleId;\n/**\n * Compute the identifier of the `obj`. The objects of the same ID\n * will be bundled together.\n *\n * @param {RequestType} obj - The request object.\n * @param {String[]} discriminatorFields - The array of field names.\n *   A field name may include '.' as a separator, which is used to\n *   indicate object traversal.\n * @return {String|undefined} - the identifier string, or undefined if any\n *   discriminator fields do not exist.\n */ function computeBundleId(obj, discriminatorFields) {\n    const ids = [];\n    let hasIds = false;\n    for (const field of discriminatorFields){\n        const id = at(obj, field);\n        if (id === undefined) {\n            ids.push(null);\n        } else {\n            hasIds = true;\n            ids.push(id);\n        }\n    }\n    if (!hasIds) {\n        return undefined;\n    }\n    return JSON.stringify(ids);\n}\n/**\n * Given an object field path that may contain dots, dig into the obj and find\n * the value at the given path.\n * @example\n * const obj = {\n *   a: {\n *     b: 5\n *   }\n * }\n * const id = at(obj, 'a.b');\n * // id = 5\n * @param field Path to the property with `.` notation\n * @param obj The object to traverse\n * @returns the value at the given path\n */ function at(obj, field) {\n    const pathParts = field.split(\".\");\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let currentObj = obj;\n    for (const pathPart of pathParts){\n        currentObj = currentObj === null || currentObj === void 0 ? void 0 : currentObj[pathPart];\n    }\n    return currentObj;\n} //# sourceMappingURL=bundlingUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGluZ1V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHRTtBQUMxQjs7Ozs7Ozs7OztDQVVDLEdBQ0QsU0FBU0EsZ0JBQWdCQyxHQUFHLEVBQUVDLG1CQUFtQjtJQUM3QyxNQUFNQyxNQUFNLEVBQUU7SUFDZCxJQUFJQyxTQUFTO0lBQ2IsS0FBSyxNQUFNQyxTQUFTSCxvQkFBcUI7UUFDckMsTUFBTUksS0FBS0MsR0FBR04sS0FBS0k7UUFDbkIsSUFBSUMsT0FBT0UsV0FBVztZQUNsQkwsSUFBSU0sSUFBSSxDQUFDO1FBQ2IsT0FDSztZQUNETCxTQUFTO1lBQ1RELElBQUlNLElBQUksQ0FBQ0g7UUFDYjtJQUNKO0lBQ0EsSUFBSSxDQUFDRixRQUFRO1FBQ1QsT0FBT0k7SUFDWDtJQUNBLE9BQU9FLEtBQUtDLFNBQVMsQ0FBQ1I7QUFDMUI7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNELFNBQVNJLEdBQUdOLEdBQUcsRUFBRUksS0FBSztJQUNsQixNQUFNTyxZQUFZUCxNQUFNUSxLQUFLLENBQUM7SUFDOUIsOERBQThEO0lBQzlELElBQUlDLGFBQWFiO0lBQ2pCLEtBQUssTUFBTWMsWUFBWUgsVUFBVztRQUM5QkUsYUFBYUEsZUFBZSxRQUFRQSxlQUFlLEtBQUssSUFBSSxLQUFLLElBQUlBLFVBQVUsQ0FBQ0MsU0FBUztJQUM3RjtJQUNBLE9BQU9EO0FBQ1gsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGluZ1V0aWxzLmpzP2EzNWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbXB1dGVCdW5kbGVJZCA9IGNvbXB1dGVCdW5kbGVJZDtcbi8qKlxuICogQ29tcHV0ZSB0aGUgaWRlbnRpZmllciBvZiB0aGUgYG9iamAuIFRoZSBvYmplY3RzIG9mIHRoZSBzYW1lIElEXG4gKiB3aWxsIGJlIGJ1bmRsZWQgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtSZXF1ZXN0VHlwZX0gb2JqIC0gVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmdbXX0gZGlzY3JpbWluYXRvckZpZWxkcyAtIFRoZSBhcnJheSBvZiBmaWVsZCBuYW1lcy5cbiAqICAgQSBmaWVsZCBuYW1lIG1heSBpbmNsdWRlICcuJyBhcyBhIHNlcGFyYXRvciwgd2hpY2ggaXMgdXNlZCB0b1xuICogICBpbmRpY2F0ZSBvYmplY3QgdHJhdmVyc2FsLlxuICogQHJldHVybiB7U3RyaW5nfHVuZGVmaW5lZH0gLSB0aGUgaWRlbnRpZmllciBzdHJpbmcsIG9yIHVuZGVmaW5lZCBpZiBhbnlcbiAqICAgZGlzY3JpbWluYXRvciBmaWVsZHMgZG8gbm90IGV4aXN0LlxuICovXG5mdW5jdGlvbiBjb21wdXRlQnVuZGxlSWQob2JqLCBkaXNjcmltaW5hdG9yRmllbGRzKSB7XG4gICAgY29uc3QgaWRzID0gW107XG4gICAgbGV0IGhhc0lkcyA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgZmllbGQgb2YgZGlzY3JpbWluYXRvckZpZWxkcykge1xuICAgICAgICBjb25zdCBpZCA9IGF0KG9iaiwgZmllbGQpO1xuICAgICAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWRzLnB1c2gobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoYXNJZHMgPSB0cnVlO1xuICAgICAgICAgICAgaWRzLnB1c2goaWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaGFzSWRzKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShpZHMpO1xufVxuLyoqXG4gKiBHaXZlbiBhbiBvYmplY3QgZmllbGQgcGF0aCB0aGF0IG1heSBjb250YWluIGRvdHMsIGRpZyBpbnRvIHRoZSBvYmogYW5kIGZpbmRcbiAqIHRoZSB2YWx1ZSBhdCB0aGUgZ2l2ZW4gcGF0aC5cbiAqIEBleGFtcGxlXG4gKiBjb25zdCBvYmogPSB7XG4gKiAgIGE6IHtcbiAqICAgICBiOiA1XG4gKiAgIH1cbiAqIH1cbiAqIGNvbnN0IGlkID0gYXQob2JqLCAnYS5iJyk7XG4gKiAvLyBpZCA9IDVcbiAqIEBwYXJhbSBmaWVsZCBQYXRoIHRvIHRoZSBwcm9wZXJ0eSB3aXRoIGAuYCBub3RhdGlvblxuICogQHBhcmFtIG9iaiBUaGUgb2JqZWN0IHRvIHRyYXZlcnNlXG4gKiBAcmV0dXJucyB0aGUgdmFsdWUgYXQgdGhlIGdpdmVuIHBhdGhcbiAqL1xuZnVuY3Rpb24gYXQob2JqLCBmaWVsZCkge1xuICAgIGNvbnN0IHBhdGhQYXJ0cyA9IGZpZWxkLnNwbGl0KCcuJyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBsZXQgY3VycmVudE9iaiA9IG9iajtcbiAgICBmb3IgKGNvbnN0IHBhdGhQYXJ0IG9mIHBhdGhQYXJ0cykge1xuICAgICAgICBjdXJyZW50T2JqID0gY3VycmVudE9iaiA9PT0gbnVsbCB8fCBjdXJyZW50T2JqID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXJyZW50T2JqW3BhdGhQYXJ0XTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRPYmo7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idW5kbGluZ1V0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbXB1dGVCdW5kbGVJZCIsIm9iaiIsImRpc2NyaW1pbmF0b3JGaWVsZHMiLCJpZHMiLCJoYXNJZHMiLCJmaWVsZCIsImlkIiwiYXQiLCJ1bmRlZmluZWQiLCJwdXNoIiwiSlNPTiIsInN0cmluZ2lmeSIsInBhdGhQYXJ0cyIsInNwbGl0IiwiY3VycmVudE9iaiIsInBhdGhQYXJ0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js":
/*!*****************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/task.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Task = void 0;\nexports.deepCopyForResponse = deepCopyForResponse;\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */ function deepCopyForResponse(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj, subresponseInfo) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let result;\n    if (obj === null) {\n        return null;\n    }\n    if (obj === undefined) {\n        return undefined;\n    }\n    if (Array.isArray(obj)) {\n        result = [];\n        obj.forEach((element)=>{\n            result.push(deepCopyForResponse(element, null));\n        });\n        return result;\n    }\n    // Some objects (such as ByteBuffer) have copy method.\n    if (obj.copy !== undefined) {\n        return obj.copy();\n    }\n    // ArrayBuffer should be copied through slice().\n    if (obj instanceof ArrayBuffer) {\n        return obj.slice(0);\n    }\n    if (typeof obj === \"object\") {\n        result = {};\n        Object.keys(obj).forEach((key)=>{\n            if (subresponseInfo && key === subresponseInfo.field && Array.isArray(obj[key])) {\n                // Note that subresponses are not deep-copied. This is safe because\n                // those subresponses are not shared among callbacks.\n                result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);\n            } else {\n                result[key] = deepCopyForResponse(obj[key], null);\n            }\n        });\n        return result;\n    }\n    return obj;\n}\nclass Task {\n    /**\n     * A task coordinates the execution of a single bundle.\n     *\n     * @param {function} apiCall - The function to conduct calling API.\n     * @param {Object} bundlingRequest - The base request object to be used\n     *   for the actual API call.\n     * @param {string} bundledField - The name of the field in bundlingRequest\n     *   to be bundled.\n     * @param {string=} subresponseField - The name of the field in the response\n     *   to be passed to the callback.\n     * @constructor\n     * @private\n     */ constructor(apiCall, bundlingRequest, bundledField, subresponseField){\n        this._apiCall = apiCall;\n        this._request = bundlingRequest;\n        this._bundledField = bundledField;\n        this._subresponseField = subresponseField;\n        this._data = [];\n    }\n    /**\n     * Returns the number of elements in a task.\n     * @return {number} The number of elements.\n     */ getElementCount() {\n        let count = 0;\n        for(let i = 0; i < this._data.length; ++i){\n            count += this._data[i].elements.length;\n        }\n        return count;\n    }\n    /**\n     * Returns the total byte size of the elements in a task.\n     * @return {number} The byte size.\n     */ getRequestByteSize() {\n        let size = 0;\n        for(let i = 0; i < this._data.length; ++i){\n            size += this._data[i].bytes;\n        }\n        return size;\n    }\n    /**\n     * Invokes the actual API call with current elements.\n     * @return {string[]} - the list of ids for invocations to be run.\n     */ run() {\n        if (this._data.length === 0) {\n            return [];\n        }\n        const request = this._request;\n        const elements = [];\n        const ids = [];\n        for(let i = 0; i < this._data.length; ++i){\n            elements.push(...this._data[i].elements);\n            ids.push(this._data[i].callback.id);\n        }\n        request[this._bundledField] = elements;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        this.callCanceller = this._apiCall(request, (err, response)=>{\n            const responses = [];\n            if (err) {\n                self._data.forEach(()=>{\n                    responses.push(undefined);\n                });\n            } else {\n                let subresponseInfo = null;\n                if (self._subresponseField) {\n                    subresponseInfo = {\n                        field: self._subresponseField,\n                        start: 0\n                    };\n                }\n                self._data.forEach((data)=>{\n                    if (subresponseInfo) {\n                        subresponseInfo.end = subresponseInfo.start + data.elements.length;\n                    }\n                    responses.push(deepCopyForResponse(response, subresponseInfo));\n                    if (subresponseInfo) {\n                        subresponseInfo.start = subresponseInfo.end;\n                    }\n                });\n            }\n            for(let i = 0; i < self._data.length; ++i){\n                if (self._data[i].cancelled) {\n                    const error = new googleError_1.GoogleError(\"cancelled\");\n                    error.code = status_1.Status.CANCELLED;\n                    self._data[i].callback(error);\n                } else {\n                    self._data[i].callback(err, responses[i]);\n                }\n            }\n        });\n        return ids;\n    }\n    /**\n     * Appends the list of elements into the task.\n     * @param {Object[]} elements - the new list of elements.\n     * @param {number} bytes - the byte size required to encode elements in the API.\n     * @param {APICallback} callback - the callback of the method call.\n     */ extend(elements, bytes, callback) {\n        this._data.push({\n            elements,\n            bytes,\n            callback\n        });\n    }\n    /**\n     * Cancels a part of elements.\n     * @param {string} id - The identifier of the part of elements.\n     * @return {boolean} Whether the entire task will be canceled or not.\n     */ cancel(id) {\n        if (this.callCanceller) {\n            let allCancelled = true;\n            this._data.forEach((d)=>{\n                if (d.callback.id === id) {\n                    d.cancelled = true;\n                }\n                if (!d.cancelled) {\n                    allCancelled = false;\n                }\n            });\n            if (allCancelled) {\n                this.callCanceller.cancel();\n            }\n            return allCancelled;\n        }\n        for(let i = 0; i < this._data.length; ++i){\n            if (this._data[i].callback.id === id) {\n                const error = new googleError_1.GoogleError(\"cancelled\");\n                error.code = status_1.Status.CANCELLED;\n                this._data[i].callback(error);\n                this._data.splice(i, 1);\n                break;\n            }\n        }\n        return this._data.length === 0;\n    }\n}\nexports.Task = Task; //# sourceMappingURL=task.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/call.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/call.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OngoingCallPromise = exports.OngoingCall = void 0;\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nclass OngoingCall {\n    /**\n     * OngoingCall manages callback, API calls, and cancellation\n     * of the API calls.\n     * @param {APICallback=} callback\n     *   The callback to be called asynchronously when the API call\n     *   finishes.\n     * @constructor\n     * @property {APICallback} callback\n     *   The callback function to be called.\n     * @private\n     */ constructor(callback){\n        this.callback = callback;\n        this.completed = false;\n    }\n    /**\n     * Cancels the ongoing promise.\n     */ cancel() {\n        if (this.completed) {\n            return;\n        }\n        this.completed = true;\n        if (this.cancelFunc) {\n            this.cancelFunc();\n        } else {\n            const error = new googleError_1.GoogleError(\"cancelled\");\n            error.code = status_1.Status.CANCELLED;\n            this.callback(error);\n        }\n    }\n    /**\n     * Call calls the specified function. Result will be used to fulfill\n     * the promise.\n     *\n     * @param {SimpleCallbackFunction} func\n     *   A function for an API call.\n     * @param {Object} argument\n     *   A request object.\n     */ call(func, argument) {\n        if (this.completed) {\n            return;\n        }\n        const canceller = func(argument, (err, response, next, rawResponse)=>{\n            this.completed = true;\n            setImmediate(this.callback, err, response, next, rawResponse);\n        });\n        if (canceller instanceof Promise) {\n            canceller.catch((err)=>{\n                setImmediate(this.callback, new googleError_1.GoogleError(err), null, null, null);\n            });\n        }\n        this.cancelFunc = ()=>canceller.cancel();\n    }\n}\nexports.OngoingCall = OngoingCall;\nclass OngoingCallPromise extends OngoingCall {\n    /**\n     * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\n     * the API call finishes.\n     * @constructor\n     * @private\n     */ constructor(){\n        let resolveCallback;\n        let rejectCallback;\n        const callback = (err, response, next, rawResponse)=>{\n            if (err) {\n                // If gRPC metadata exist, parsed google.rpc.status details.\n                if (err.metadata) {\n                    rejectCallback(googleError_1.GoogleError.parseGRPCStatusDetails(err));\n                } else {\n                    rejectCallback(err);\n                }\n            } else if (response !== undefined) {\n                resolveCallback([\n                    response,\n                    next || null,\n                    rawResponse || null\n                ]);\n            } else {\n                throw new googleError_1.GoogleError(\"Neither error nor response are defined\");\n            }\n        };\n        const promise = new Promise((resolve, reject)=>{\n            resolveCallback = resolve;\n            rejectCallback = reject;\n        });\n        super(callback);\n        this.promise = promise;\n        this.promise.cancel = ()=>{\n            this.cancel();\n        };\n    }\n}\nexports.OngoingCallPromise = OngoingCallPromise; //# sourceMappingURL=call.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/createApiCall.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/src/createApiCall.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createApiCall = createApiCall;\n/**\n * Provides function wrappers that implement page streaming and retrying.\n */ const apiCaller_1 = __webpack_require__(/*! ./apiCaller */ \"(rsc)/./node_modules/google-gax/build/src/apiCaller.js\");\nconst gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst retries_1 = __webpack_require__(/*! ./normalCalls/retries */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js\");\nconst timeout_1 = __webpack_require__(/*! ./normalCalls/timeout */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\");\nconst streamingApiCaller_1 = __webpack_require__(/*! ./streamingCalls/streamingApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\");\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\n/**\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */ function createApiCall(func, settings, descriptor, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n_fallback // unused here, used in fallback.ts implementation\n) {\n    // we want to be able to accept both promise resolving to a function and a\n    // function. Currently client librares are only calling this method with a\n    // promise, but it will change.\n    const funcPromise = typeof func === \"function\" ? Promise.resolve(func) : func;\n    // the following apiCaller will be used for all calls of this function...\n    const apiCaller = (0, apiCaller_1.createAPICaller)(settings, descriptor);\n    return (request, callOptions, callback)=>{\n        var _a, _b;\n        let currentApiCaller = apiCaller;\n        let thisSettings;\n        if (currentApiCaller instanceof streamingApiCaller_1.StreamingApiCaller) {\n            const gaxStreamingRetries = (_b = (_a = currentApiCaller.descriptor) === null || _a === void 0 ? void 0 : _a.gaxStreamingRetries) !== null && _b !== void 0 ? _b : false;\n            // If Gax streaming retries are enabled, check settings passed at call time and convert parameters if needed\n            const convertedRetryOptions = (0, gax_1.convertRetryOptions)(callOptions, gaxStreamingRetries);\n            thisSettings = settings.merge(convertedRetryOptions);\n        } else {\n            thisSettings = settings.merge(callOptions);\n        }\n        // special case: if bundling is disabled for this one call,\n        // use default API caller instead\n        if (settings.isBundling && !thisSettings.isBundling) {\n            currentApiCaller = (0, apiCaller_1.createAPICaller)(settings, undefined);\n        }\n        const ongoingCall = currentApiCaller.init(callback);\n        funcPromise.then((func)=>{\n            var _a, _b;\n            var _c;\n            // Initially, the function is just what gRPC server stub contains.\n            func = currentApiCaller.wrap(func);\n            const streaming = (_a = currentApiCaller.descriptor) === null || _a === void 0 ? void 0 : _a.streaming;\n            const retry = thisSettings.retry;\n            if (streaming && retry) {\n                if (retry.retryCodes.length > 0 && retry.shouldRetryFn) {\n                    (0, warnings_1.warn)(\"either_retrycodes_or_shouldretryfn\", \"Only one of retryCodes or shouldRetryFn may be defined. Ignoring retryCodes.\");\n                    retry.retryCodes = [];\n                }\n                if (!currentApiCaller.descriptor.gaxStreamingRetries && retry.getResumptionRequestFn) {\n                    throw new Error(\"getResumptionRequestFn can only be used when gaxStreamingRetries is set to true.\");\n                }\n            }\n            if (!streaming && retry) {\n                if (retry.shouldRetryFn) {\n                    throw new Error(\"Using a function to determine retry eligibility is only supported with server streaming calls\");\n                }\n                if (retry.getResumptionRequestFn) {\n                    throw new Error(\"Resumption strategy can only be used with server streaming retries\");\n                }\n                if (retry.retryCodes && retry.retryCodes.length > 0) {\n                    (_b = (_c = retry.backoffSettings).initialRpcTimeoutMillis) !== null && _b !== void 0 ? _b : _c.initialRpcTimeoutMillis = thisSettings.timeout;\n                    return (0, retries_1.retryable)(func, thisSettings.retry, thisSettings.otherArgs, thisSettings.apiName);\n                }\n            }\n            return (0, timeout_1.addTimeoutArg)(func, thisSettings.timeout, thisSettings.otherArgs);\n        }).then((apiCall)=>{\n            // After adding retries / timeouts, the call function becomes simpler:\n            // it only accepts request and callback.\n            currentApiCaller.call(apiCall, request, thisSettings, ongoingCall);\n        }).catch((err)=>{\n            currentApiCaller.fail(ongoingCall, err);\n        });\n        // Calls normally return a \"cancellable promise\" that can be used to `await` for the actual result,\n        // or to cancel the ongoing call.\n        return currentApiCaller.result(ongoingCall);\n    };\n} //# sourceMappingURL=createApiCall.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/createApiCall.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/descriptor.js":
/*!*********************************************************!*\
  !*** ./node_modules/google-gax/build/src/descriptor.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BundleDescriptor = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = void 0;\nvar longRunningDescriptor_1 = __webpack_require__(/*! ./longRunningCalls/longRunningDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js\");\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return longRunningDescriptor_1.LongRunningDescriptor;\n    }\n}));\nvar pageDescriptor_1 = __webpack_require__(/*! ./paginationCalls/pageDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\");\nObject.defineProperty(exports, \"PageDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return pageDescriptor_1.PageDescriptor;\n    }\n}));\nvar streamDescriptor_1 = __webpack_require__(/*! ./streamingCalls/streamDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js\");\nObject.defineProperty(exports, \"StreamDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return streamDescriptor_1.StreamDescriptor;\n    }\n}));\nvar bundleDescriptor_1 = __webpack_require__(/*! ./bundlingCalls/bundleDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js\");\nObject.defineProperty(exports, \"BundleDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return bundleDescriptor_1.BundleDescriptor;\n    }\n})); //# sourceMappingURL=descriptor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZGVzY3JpcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3QkFBd0IsR0FBR0Esd0JBQXdCLEdBQUdBLHNCQUFzQixHQUFHQSw2QkFBNkIsR0FBRyxLQUFLO0FBQ3BILElBQUlNLDBCQUEwQkMsbUJBQU9BLENBQUMscUlBQTBDO0FBQ2hGVCx5REFBd0Q7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsd0JBQXdCSSxxQkFBcUI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN6SixJQUFJQyxtQkFBbUJKLG1CQUFPQSxDQUFDLHFIQUFrQztBQUNqRVQsa0RBQWlEO0lBQUVVLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGlCQUFpQlAsY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BJLElBQUlRLHFCQUFxQkwsbUJBQU9BLENBQUMsdUhBQW1DO0FBQ3BFVCxvREFBbUQ7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csbUJBQW1CVCxnQkFBZ0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUMxSSxJQUFJVSxxQkFBcUJOLG1CQUFPQSxDQUFDLHFIQUFrQztBQUNuRVQsb0RBQW1EO0lBQUVVLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9JLG1CQUFtQlgsZ0JBQWdCO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDMUksc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2Rlc2NyaXB0b3IuanM/MjExZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnVuZGxlRGVzY3JpcHRvciA9IGV4cG9ydHMuU3RyZWFtRGVzY3JpcHRvciA9IGV4cG9ydHMuUGFnZURlc2NyaXB0b3IgPSBleHBvcnRzLkxvbmdydW5uaW5nRGVzY3JpcHRvciA9IHZvaWQgMDtcbnZhciBsb25nUnVubmluZ0Rlc2NyaXB0b3JfMSA9IHJlcXVpcmUoXCIuL2xvbmdSdW5uaW5nQ2FsbHMvbG9uZ1J1bm5pbmdEZXNjcmlwdG9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTG9uZ3J1bm5pbmdEZXNjcmlwdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsb25nUnVubmluZ0Rlc2NyaXB0b3JfMS5Mb25nUnVubmluZ0Rlc2NyaXB0b3I7IH0gfSk7XG52YXIgcGFnZURlc2NyaXB0b3JfMSA9IHJlcXVpcmUoXCIuL3BhZ2luYXRpb25DYWxscy9wYWdlRGVzY3JpcHRvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBhZ2VEZXNjcmlwdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYWdlRGVzY3JpcHRvcl8xLlBhZ2VEZXNjcmlwdG9yOyB9IH0pO1xudmFyIHN0cmVhbURlc2NyaXB0b3JfMSA9IHJlcXVpcmUoXCIuL3N0cmVhbWluZ0NhbGxzL3N0cmVhbURlc2NyaXB0b3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdHJlYW1EZXNjcmlwdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdHJlYW1EZXNjcmlwdG9yXzEuU3RyZWFtRGVzY3JpcHRvcjsgfSB9KTtcbnZhciBidW5kbGVEZXNjcmlwdG9yXzEgPSByZXF1aXJlKFwiLi9idW5kbGluZ0NhbGxzL2J1bmRsZURlc2NyaXB0b3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCdW5kbGVEZXNjcmlwdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidW5kbGVEZXNjcmlwdG9yXzEuQnVuZGxlRGVzY3JpcHRvcjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlc2NyaXB0b3IuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQnVuZGxlRGVzY3JpcHRvciIsIlN0cmVhbURlc2NyaXB0b3IiLCJQYWdlRGVzY3JpcHRvciIsIkxvbmdydW5uaW5nRGVzY3JpcHRvciIsImxvbmdSdW5uaW5nRGVzY3JpcHRvcl8xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJMb25nUnVubmluZ0Rlc2NyaXB0b3IiLCJwYWdlRGVzY3JpcHRvcl8xIiwic3RyZWFtRGVzY3JpcHRvcl8xIiwiYnVuZGxlRGVzY3JpcHRvcl8xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/descriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallback.js":
/*!*******************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallback.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fallback = exports.GoogleError = exports.operation = exports.Operation = exports.warn = exports.protobufMinimal = exports.protobuf = exports.LocationProtos = exports.IamProtos = exports.operationsProtos = exports.GrpcClient = exports.defaultToObjectOptions = exports.makeUUID = exports.LocationsClient = exports.IamClient = exports.OperationsClient = exports.StreamType = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = exports.BundleDescriptor = exports.version = exports.createDefaultBackoffSettings = exports.RetryOptions = exports.constructSettings = exports.CallSettings = exports.routingHeader = exports.PathTemplate = void 0;\nexports.lro = lro;\nexports.createApiCall = createApiCall;\nconst objectHash = __webpack_require__(/*! object-hash */ \"(rsc)/./node_modules/object-hash/index.js\");\nconst protobuf = __webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\");\nexports.protobuf = protobuf;\nconst gax = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst routingHeader = __webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\");\nexports.routingHeader = routingHeader;\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nconst operationsClient_1 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst fallbackRest = __webpack_require__(/*! ./fallbackRest */ \"(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\");\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nconst fallbackServiceStub_1 = __webpack_require__(/*! ./fallbackServiceStub */ \"(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js\");\nconst streaming_1 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nconst IamProtos = __webpack_require__(/*! ../protos/iam_service */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.js\");\nexports.IamProtos = IamProtos;\nconst LocationProtos = __webpack_require__(/*! ../protos/locations */ \"(rsc)/./node_modules/google-gax/build/protos/locations.js\");\nexports.LocationProtos = LocationProtos;\nconst operationsProtos = __webpack_require__(/*! ../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\");\nexports.operationsProtos = operationsProtos;\nvar pathTemplate_1 = __webpack_require__(/*! ./pathTemplate */ \"(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\");\nObject.defineProperty(exports, \"PathTemplate\", ({\n    enumerable: true,\n    get: function() {\n        return pathTemplate_1.PathTemplate;\n    }\n}));\nvar gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nObject.defineProperty(exports, \"CallSettings\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.CallSettings;\n    }\n}));\nObject.defineProperty(exports, \"constructSettings\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.constructSettings;\n    }\n}));\nObject.defineProperty(exports, \"RetryOptions\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.RetryOptions;\n    }\n}));\nObject.defineProperty(exports, \"createDefaultBackoffSettings\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.createDefaultBackoffSettings;\n    }\n}));\nexports.version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version) + \"-fallback\";\nvar descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\nObject.defineProperty(exports, \"BundleDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return descriptor_1.BundleDescriptor;\n    }\n}));\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return descriptor_1.LongrunningDescriptor;\n    }\n}));\nObject.defineProperty(exports, \"PageDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return descriptor_1.PageDescriptor;\n    }\n}));\nObject.defineProperty(exports, \"StreamDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return descriptor_1.StreamDescriptor;\n    }\n}));\nvar streaming_2 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nObject.defineProperty(exports, \"StreamType\", ({\n    enumerable: true,\n    get: function() {\n        return streaming_2.StreamType;\n    }\n}));\nvar operationsClient_2 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\nObject.defineProperty(exports, \"OperationsClient\", ({\n    enumerable: true,\n    get: function() {\n        return operationsClient_2.OperationsClient;\n    }\n}));\nvar iamService_1 = __webpack_require__(/*! ./iamService */ \"(rsc)/./node_modules/google-gax/build/src/iamService.js\");\nObject.defineProperty(exports, \"IamClient\", ({\n    enumerable: true,\n    get: function() {\n        return iamService_1.IamClient;\n    }\n}));\nvar locationService_1 = __webpack_require__(/*! ./locationService */ \"(rsc)/./node_modules/google-gax/build/src/locationService.js\");\nObject.defineProperty(exports, \"LocationsClient\", ({\n    enumerable: true,\n    get: function() {\n        return locationService_1.LocationsClient;\n    }\n}));\nvar util_2 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nObject.defineProperty(exports, \"makeUUID\", ({\n    enumerable: true,\n    get: function() {\n        return util_2.makeUUID;\n    }\n}));\nexports.defaultToObjectOptions = {\n    keepCase: false,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true\n};\nconst CLIENT_VERSION_HEADER = \"x-goog-api-client\";\nclass GrpcClient {\n    /**\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\n     * This method will delete the proto cache content.\n     */ static clearProtoCache() {\n        GrpcClient.protoCache.clear();\n    }\n    /**\n     * gRPC-fallback version of GrpcClient\n     * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n     *\n     * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\n     *  to use in Node.js. Required for browser, optional for Node.js.\n     * @constructor\n     */ constructor(options = {}){\n        var _a;\n        if (!(0, featureDetection_1.isNodeJS)()) {\n            if (!options.auth) {\n                throw new Error(JSON.stringify(options) + \"You need to pass auth instance to use gRPC-fallback client in browser or other non-Node.js environments. Use OAuth2Client from google-auth-library.\");\n            }\n            this.auth = options.auth;\n        } else {\n            this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n        }\n        this.fallback = options.fallback ? true : false;\n        this.grpcVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\n        this.httpRules = options.httpRules;\n        this.numericEnums = (_a = options.numericEnums) !== null && _a !== void 0 ? _a : false;\n    }\n    /**\n     * gRPC-fallback version of loadProto\n     * Loads the protobuf root object from a JSON object created from a proto file\n     * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n     * @returns {Object} Root namespace of proto JSON\n     */ loadProto(jsonObject) {\n        const rootObject = protobuf.Root.fromJSON(jsonObject);\n        return rootObject;\n    }\n    loadProtoJSON(json, ignoreCache = false) {\n        const hash = objectHash(JSON.stringify(json)).toString();\n        const cached = GrpcClient.protoCache.get(hash);\n        if (cached && !ignoreCache) {\n            return cached;\n        }\n        const root = protobuf.Root.fromJSON(json);\n        GrpcClient.protoCache.set(hash, root);\n        return root;\n    }\n    static getServiceMethods(service) {\n        const methods = {};\n        for (const [methodName, methodObject] of Object.entries(service.methods)){\n            const methodNameLowerCamelCase = (0, util_1.toLowerCamelCase)(methodName);\n            methods[methodNameLowerCamelCase] = methodObject;\n        }\n        return methods;\n    }\n    /**\n     * gRPC-fallback version of constructSettings\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */ constructSettings(serviceName, clientConfig, configOverrides, headers) {\n        function buildMetadata(abTests, moreHeaders) {\n            const metadata = {};\n            if (!headers) {\n                headers = {};\n            }\n            // Since gRPC expects each header to be an array,\n            // we are doing the same for fallback here.\n            for(const key in headers){\n                metadata[key] = Array.isArray(headers[key]) ? headers[key] : [\n                    headers[key]\n                ];\n            }\n            // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n            const clientVersions = [];\n            if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {\n                clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(\" \"));\n            }\n            clientVersions.push(`grpc-web/${exports.version}`);\n            metadata[CLIENT_VERSION_HEADER] = [\n                clientVersions.join(\" \")\n            ];\n            if (!moreHeaders) {\n                return metadata;\n            }\n            for(const key in moreHeaders){\n                if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n                    const value = moreHeaders[key];\n                    if (Array.isArray(value)) {\n                        if (metadata[key] === undefined) {\n                            metadata[key] = value;\n                        } else {\n                            if (Array.isArray(metadata[key])) {\n                                metadata[key].push(...value);\n                            } else {\n                                throw new Error(`Can not add value ${value} to the call metadata.`);\n                            }\n                        }\n                    } else {\n                        metadata[key] = [\n                            value\n                        ];\n                    }\n                }\n            }\n            return metadata;\n        }\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, {\n            metadataBuilder: buildMetadata\n        });\n    }\n    /**\n     * gRPC-fallback version of createStub\n     * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\n     *\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n     * @param {Object} opts - Connection options, as described below.\n     * @param {string} opts.servicePath - The hostname of the API endpoint service.\n     * @param {number} opts.port - The port of the service.\n     * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n     */ async createStub(service, opts, // For consistency with createStub in grpc.ts, customServicePath is defined:\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    customServicePath) {\n        if (!this.authClient) {\n            if (this.auth && \"getClient\" in this.auth) {\n                this.authClient = await this.auth.getClient();\n            } else if (this.auth && \"getRequestHeaders\" in this.auth) {\n                this.authClient = this.auth;\n            }\n        }\n        if (!this.authClient) {\n            throw new Error(\"No authentication was provided\");\n        }\n        if (!opts.universeDomain) {\n            opts.universeDomain = \"googleapis.com\";\n        }\n        if (opts.universeDomain) {\n            const universeFromAuth = this.authClient.universeDomain;\n            if (universeFromAuth && opts.universeDomain !== universeFromAuth) {\n                throw new Error(`The configured universe domain (${opts.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` + \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n            }\n        }\n        service.resolveAll();\n        const methods = GrpcClient.getServiceMethods(service);\n        const protocol = opts.protocol || \"https\";\n        let servicePath = opts.servicePath;\n        if (!servicePath && service.options && service.options[\"(google.api.default_host)\"]) {\n            servicePath = service.options[\"(google.api.default_host)\"];\n        }\n        if (!servicePath) {\n            throw new Error(`Cannot determine service API path for service ${service.name}.`);\n        }\n        let servicePort;\n        const match = servicePath.match(/^(.*):(\\d+)$/);\n        if (match) {\n            servicePath = match[1];\n            servicePort = parseInt(match[2]);\n        }\n        if (opts.port) {\n            servicePort = opts.port;\n        } else if (!servicePort) {\n            servicePort = 443;\n        }\n        const encoder = fallbackRest.encodeRequest;\n        const decoder = fallbackRest.decodeResponse;\n        const serviceStub = (0, fallbackServiceStub_1.generateServiceStub)(methods, protocol, servicePath, servicePort, this.authClient, encoder, decoder, this.numericEnums);\n        return serviceStub;\n    }\n    /**\n     * Creates a 'bytelength' function for a given proto message class.\n     *\n     * See {@link BundleDescriptor} about the meaning of the return value.\n     *\n     * @param {function} message - a constructor function that is generated by\n     *   protobuf.js. Assumes 'encoder' field in the message.\n     * @return {function(Object):number} - a function to compute the byte length\n     *   for an object.\n     */ static createByteLengthFunction(message) {\n        return gax.createByteLengthFunction(message);\n    }\n}\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */ function lro(options) {\n    options = Object.assign({\n        scopes: []\n    }, options);\n    if (options.protoJson) {\n        options = Object.assign(options, {\n            fallback: true\n        });\n    }\n    const gaxGrpc = new GrpcClient(options);\n    return new operationsClient_1.OperationsClientBuilder(gaxGrpc, options.protoJson);\n}\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */ function createApiCall(func, settings, descriptor, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n_fallback // unused; for compatibility only\n) {\n    if (descriptor && \"streaming\" in descriptor && descriptor.type !== streaming_1.StreamType.SERVER_STREAMING) {\n        return ()=>{\n            throw new Error(\"The REST transport currently does not support client-streaming or bidi-stream calls.\");\n        };\n    }\n    if (descriptor && \"streaming\" in descriptor && !(0, featureDetection_1.isNodeJS)()) {\n        return ()=>{\n            throw new Error(\"Server streaming over the REST transport is only supported in Node.js.\");\n        };\n    }\n    return (0, createApiCall_1.createApiCall)(func, settings, descriptor);\n}\nexports.protobufMinimal = __webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\");\nvar warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nObject.defineProperty(exports, \"warn\", ({\n    enumerable: true,\n    get: function() {\n        return warnings_1.warn;\n    }\n}));\nvar longrunning_1 = __webpack_require__(/*! ./longRunningCalls/longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\nObject.defineProperty(exports, \"Operation\", ({\n    enumerable: true,\n    get: function() {\n        return longrunning_1.Operation;\n    }\n}));\nObject.defineProperty(exports, \"operation\", ({\n    enumerable: true,\n    get: function() {\n        return longrunning_1.operation;\n    }\n}));\nvar googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nObject.defineProperty(exports, \"GoogleError\", ({\n    enumerable: true,\n    get: function() {\n        return googleError_1.GoogleError;\n    }\n}));\n// Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\nconst fallback = module.exports;\nexports.fallback = fallback; //# sourceMappingURL=fallback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZmFsbGJhY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUdBLG1CQUFtQixHQUFHQSxpQkFBaUIsR0FBR0EsaUJBQWlCLEdBQUdBLFlBQVksR0FBR0EsdUJBQXVCLEdBQUdBLGdCQUFnQixHQUFHQSxzQkFBc0IsR0FBR0EsaUJBQWlCLEdBQUdBLHdCQUF3QixHQUFHQSxrQkFBa0IsR0FBR0EsOEJBQThCLEdBQUdBLGdCQUFnQixHQUFHQSx1QkFBdUIsR0FBR0EsaUJBQWlCLEdBQUdBLHdCQUF3QixHQUFHQSxrQkFBa0IsR0FBR0Esd0JBQXdCLEdBQUdBLHNCQUFzQixHQUFHQSw2QkFBNkIsR0FBR0Esd0JBQXdCLEdBQUdBLGVBQWUsR0FBR0Esb0NBQW9DLEdBQUdBLG9CQUFvQixHQUFHQSx5QkFBeUIsR0FBR0Esb0JBQW9CLEdBQUdBLHFCQUFxQixHQUFHQSxvQkFBb0IsR0FBRyxLQUFLO0FBQ2xxQkEsV0FBVyxHQUFHOEI7QUFDZDlCLHFCQUFxQixHQUFHK0I7QUFDeEIsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsOERBQWE7QUFDeEMsTUFBTXpCLFdBQVd5QixtQkFBT0EsQ0FBQyw0REFBWTtBQUNyQ2pDLGdCQUFnQixHQUFHUTtBQUNuQixNQUFNMEIsTUFBTUQsbUJBQU9BLENBQUMsK0RBQU87QUFDM0IsTUFBTUwsZ0JBQWdCSyxtQkFBT0EsQ0FBQyxtRkFBaUI7QUFDL0NqQyxxQkFBcUIsR0FBRzRCO0FBQ3hCLE1BQU1PLFdBQVdGLG1CQUFPQSxDQUFDLHFFQUFVO0FBQ25DLE1BQU1HLHdCQUF3QkgsbUJBQU9BLENBQUMsd0ZBQXFCO0FBQzNELE1BQU1JLHFCQUFxQkosbUJBQU9BLENBQUMseUZBQW9CO0FBQ3ZELE1BQU1LLGtCQUFrQkwsbUJBQU9BLENBQUMsbUZBQWlCO0FBQ2pELE1BQU1NLGVBQWVOLG1CQUFPQSxDQUFDLGlGQUFnQjtBQUM3QyxNQUFNTyxxQkFBcUJQLG1CQUFPQSxDQUFDLHlGQUFvQjtBQUN2RCxNQUFNUSx3QkFBd0JSLG1CQUFPQSxDQUFDLCtGQUF1QjtBQUM3RCxNQUFNUyxjQUFjVCxtQkFBT0EsQ0FBQyx5R0FBNEI7QUFDeEQsTUFBTVUsU0FBU1YsbUJBQU9BLENBQUMsaUVBQVE7QUFDL0IsTUFBTXZCLFlBQVl1QixtQkFBT0EsQ0FBQywwRkFBdUI7QUFDakRqQyxpQkFBaUIsR0FBR1U7QUFDcEIsTUFBTUQsaUJBQWlCd0IsbUJBQU9BLENBQUMsc0ZBQXFCO0FBQ3BEakMsc0JBQXNCLEdBQUdTO0FBQ3pCLE1BQU1FLG1CQUFtQnNCLG1CQUFPQSxDQUFDLHdGQUFzQjtBQUN2RGpDLHdCQUF3QixHQUFHVztBQUMzQixJQUFJaUMsaUJBQWlCWCxtQkFBT0EsQ0FBQyxpRkFBZ0I7QUFDN0NuQyxnREFBK0M7SUFBRStDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9GLGVBQWVmLFlBQVk7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM5SCxJQUFJa0IsUUFBUWQsbUJBQU9BLENBQUMsK0RBQU87QUFDM0JuQyxnREFBK0M7SUFBRStDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLE1BQU1wQixZQUFZO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDckg3QixxREFBb0Q7SUFBRStDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLE1BQU1yQixpQkFBaUI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUMvSDVCLGdEQUErQztJQUFFK0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsTUFBTXRCLFlBQVk7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNySDNCLGdFQUErRDtJQUFFK0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsTUFBTXZCLDRCQUE0QjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3JKeEIsZUFBZSxHQUFHaUMsdUdBQXFDLEdBQUc7QUFDMUQsSUFBSWUsZUFBZWYsbUJBQU9BLENBQUMsNkVBQWM7QUFDekNuQyxvREFBbUQ7SUFBRStDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGFBQWExQixnQkFBZ0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNwSXhCLHlEQUF3RDtJQUFFK0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYTNCLHFCQUFxQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzlJdkIsa0RBQWlEO0lBQUUrQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxhQUFhNUIsY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hJdEIsb0RBQW1EO0lBQUUrQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxhQUFhN0IsZ0JBQWdCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEksSUFBSThCLGNBQWNoQixtQkFBT0EsQ0FBQyx5R0FBNEI7QUFDdERuQyw4Q0FBNkM7SUFBRStDLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLFlBQVkvQixVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkgsSUFBSWdDLHFCQUFxQmpCLG1CQUFPQSxDQUFDLHlGQUFvQjtBQUNyRG5DLG9EQUFtRDtJQUFFK0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0ksbUJBQW1CakMsZ0JBQWdCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDMUksSUFBSWtDLGVBQWVsQixtQkFBT0EsQ0FBQyw2RUFBYztBQUN6Q25DLDZDQUE0QztJQUFFK0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0ssYUFBYW5DLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN0SCxJQUFJb0Msb0JBQW9CbkIsbUJBQU9BLENBQUMsdUZBQW1CO0FBQ25EbkMsbURBQWtEO0lBQUUrQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPTSxrQkFBa0JyQyxlQUFlO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkksSUFBSXNDLFNBQVNwQixtQkFBT0EsQ0FBQyxpRUFBUTtBQUM3Qm5DLDRDQUEyQztJQUFFK0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT08sT0FBT3ZDLFFBQVE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM5R2QsOEJBQThCLEdBQUc7SUFDN0JzRCxVQUFVO0lBQ1ZDLE9BQU9DO0lBQ1BDLE9BQU9EO0lBQ1BFLFVBQVU7SUFDVkMsUUFBUTtBQUNaO0FBQ0EsTUFBTUMsd0JBQXdCO0FBQzlCLE1BQU1oRDtJQUNGOzs7S0FHQyxHQUNELE9BQU9pRCxrQkFBa0I7UUFDckJqRCxXQUFXa0QsVUFBVSxDQUFDQyxLQUFLO0lBQy9CO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNEQyxZQUFZQyxVQUFVLENBQUMsQ0FBQyxDQUFFO1FBQ3RCLElBQUlDO1FBQ0osSUFBSSxDQUFDLENBQUMsR0FBRzFCLG1CQUFtQjJCLFFBQVEsS0FBSztZQUNyQyxJQUFJLENBQUNGLFFBQVFHLElBQUksRUFBRTtnQkFDZixNQUFNLElBQUlDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ04sV0FDM0I7WUFDUjtZQUNBLElBQUksQ0FBQ0csSUFBSSxHQUFHSCxRQUFRRyxJQUFJO1FBQzVCLE9BQ0s7WUFDRCxJQUFJLENBQUNBLElBQUksR0FDTEgsUUFBUUcsSUFBSSxJQUNSLElBQUloQyxzQkFBc0JvQyxVQUFVLENBQUNQO1FBQ2pEO1FBQ0EsSUFBSSxDQUFDL0QsUUFBUSxHQUFHK0QsUUFBUS9ELFFBQVEsR0FBRyxPQUFPO1FBQzFDLElBQUksQ0FBQ3VFLFdBQVcsR0FBR3hDLHVHQUFxQztRQUN4RCxJQUFJLENBQUN5QyxTQUFTLEdBQUdULFFBQVFTLFNBQVM7UUFDbEMsSUFBSSxDQUFDQyxZQUFZLEdBQUcsQ0FBQ1QsS0FBS0QsUUFBUVUsWUFBWSxNQUFNLFFBQVFULE9BQU8sS0FBSyxJQUFJQSxLQUFLO0lBQ3JGO0lBQ0E7Ozs7O0tBS0MsR0FDRFUsVUFBVUMsVUFBVSxFQUFFO1FBQ2xCLE1BQU1DLGFBQWF0RSxTQUFTdUUsSUFBSSxDQUFDQyxRQUFRLENBQUNIO1FBQzFDLE9BQU9DO0lBQ1g7SUFDQUcsY0FBY0MsSUFBSSxFQUFFQyxjQUFjLEtBQUssRUFBRTtRQUNyQyxNQUFNQyxPQUFPcEQsV0FBV3NDLEtBQUtDLFNBQVMsQ0FBQ1csT0FBT0csUUFBUTtRQUN0RCxNQUFNQyxTQUFTMUUsV0FBV2tELFVBQVUsQ0FBQ2hCLEdBQUcsQ0FBQ3NDO1FBQ3pDLElBQUlFLFVBQVUsQ0FBQ0gsYUFBYTtZQUN4QixPQUFPRztRQUNYO1FBQ0EsTUFBTUMsT0FBTy9FLFNBQVN1RSxJQUFJLENBQUNDLFFBQVEsQ0FBQ0U7UUFDcEN0RSxXQUFXa0QsVUFBVSxDQUFDMEIsR0FBRyxDQUFDSixNQUFNRztRQUNoQyxPQUFPQTtJQUNYO0lBQ0EsT0FBT0Usa0JBQWtCQyxPQUFPLEVBQUU7UUFDOUIsTUFBTUMsVUFBVSxDQUFDO1FBQ2pCLEtBQUssTUFBTSxDQUFDQyxZQUFZQyxhQUFhLElBQUkvRixPQUFPZ0csT0FBTyxDQUFDSixRQUFRQyxPQUFPLEVBQUc7WUFDdEUsTUFBTUksMkJBQTJCLENBQUMsR0FBR3BELE9BQU9xRCxnQkFBZ0IsRUFBRUo7WUFDOURELE9BQU8sQ0FBQ0kseUJBQXlCLEdBQUdGO1FBQ3hDO1FBQ0EsT0FBT0Y7SUFDWDtJQUNBOzs7Ozs7Ozs7OztLQVdDLEdBQ0RqRSxrQkFBa0J1RSxXQUFXLEVBQUVDLFlBQVksRUFBRUMsZUFBZSxFQUFFQyxPQUFPLEVBQUU7UUFDbkUsU0FBU0MsY0FBY0MsT0FBTyxFQUFFQyxXQUFXO1lBQ3ZDLE1BQU1DLFdBQVcsQ0FBQztZQUNsQixJQUFJLENBQUNKLFNBQVM7Z0JBQ1ZBLFVBQVUsQ0FBQztZQUNmO1lBQ0EsaURBQWlEO1lBQ2pELDJDQUEyQztZQUMzQyxJQUFLLE1BQU1LLE9BQU9MLFFBQVM7Z0JBQ3ZCSSxRQUFRLENBQUNDLElBQUksR0FBR0MsTUFBTUMsT0FBTyxDQUFDUCxPQUFPLENBQUNLLElBQUksSUFDcENMLE9BQU8sQ0FBQ0ssSUFBSSxHQUNaO29CQUFDTCxPQUFPLENBQUNLLElBQUk7aUJBQUM7WUFDeEI7WUFDQSxxRUFBcUU7WUFDckUsTUFBTUcsaUJBQWlCLEVBQUU7WUFDekIsSUFBSUosUUFBUSxDQUFDNUMsc0JBQXNCLElBQy9CNEMsUUFBUSxDQUFDNUMsc0JBQXNCLENBQUMsRUFBRSxFQUFFO2dCQUNwQ2dELGVBQWVDLElBQUksSUFBSUwsUUFBUSxDQUFDNUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDa0QsS0FBSyxDQUFDO1lBQ3BFO1lBQ0FGLGVBQWVDLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRTdHLFFBQVF1QixPQUFPLENBQUMsQ0FBQztZQUNqRGlGLFFBQVEsQ0FBQzVDLHNCQUFzQixHQUFHO2dCQUFDZ0QsZUFBZUcsSUFBSSxDQUFDO2FBQUs7WUFDNUQsSUFBSSxDQUFDUixhQUFhO2dCQUNkLE9BQU9DO1lBQ1g7WUFDQSxJQUFLLE1BQU1DLE9BQU9GLFlBQWE7Z0JBQzNCLElBQUlFLElBQUlPLFdBQVcsT0FBT3BELHVCQUF1QjtvQkFDN0MsTUFBTTNELFFBQVFzRyxXQUFXLENBQUNFLElBQUk7b0JBQzlCLElBQUlDLE1BQU1DLE9BQU8sQ0FBQzFHLFFBQVE7d0JBQ3RCLElBQUl1RyxRQUFRLENBQUNDLElBQUksS0FBS1EsV0FBVzs0QkFDN0JULFFBQVEsQ0FBQ0MsSUFBSSxHQUFHeEc7d0JBQ3BCLE9BQ0s7NEJBQ0QsSUFBSXlHLE1BQU1DLE9BQU8sQ0FBQ0gsUUFBUSxDQUFDQyxJQUFJLEdBQUc7Z0NBQzlCRCxRQUFRLENBQUNDLElBQUksQ0FBQ0ksSUFBSSxJQUFJNUc7NEJBQzFCLE9BQ0s7Z0NBQ0QsTUFBTSxJQUFJb0UsTUFBTSxDQUFDLGtCQUFrQixFQUFFcEUsTUFBTSxzQkFBc0IsQ0FBQzs0QkFDdEU7d0JBQ0o7b0JBQ0osT0FDSzt3QkFDRHVHLFFBQVEsQ0FBQ0MsSUFBSSxHQUFHOzRCQUFDeEc7eUJBQU07b0JBQzNCO2dCQUNKO1lBQ0o7WUFDQSxPQUFPdUc7UUFDWDtRQUNBLE9BQU90RSxJQUFJUixpQkFBaUIsQ0FBQ3VFLGFBQWFDLGNBQWNDLGlCQUFpQmhFLFNBQVMrRSxNQUFNLEVBQUU7WUFBRUMsaUJBQWlCZDtRQUFjO0lBQy9IO0lBQ0E7Ozs7Ozs7Ozs7S0FVQyxHQUNELE1BQU1lLFdBQVcxQixPQUFPLEVBQUUyQixJQUFJLEVBQzlCLDRFQUE0RTtJQUM1RSw2REFBNkQ7SUFDN0RDLGlCQUFpQixFQUFFO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQ0MsVUFBVSxFQUFFO1lBQ2xCLElBQUksSUFBSSxDQUFDbkQsSUFBSSxJQUFJLGVBQWUsSUFBSSxDQUFDQSxJQUFJLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQ21ELFVBQVUsR0FBSSxNQUFNLElBQUksQ0FBQ25ELElBQUksQ0FBQ29ELFNBQVM7WUFDaEQsT0FDSyxJQUFJLElBQUksQ0FBQ3BELElBQUksSUFBSSx1QkFBdUIsSUFBSSxDQUFDQSxJQUFJLEVBQUU7Z0JBQ3BELElBQUksQ0FBQ21ELFVBQVUsR0FBRyxJQUFJLENBQUNuRCxJQUFJO1lBQy9CO1FBQ0o7UUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDbUQsVUFBVSxFQUFFO1lBQ2xCLE1BQU0sSUFBSWxELE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNnRCxLQUFLSSxjQUFjLEVBQUU7WUFDdEJKLEtBQUtJLGNBQWMsR0FBRztRQUMxQjtRQUNBLElBQUlKLEtBQUtJLGNBQWMsRUFBRTtZQUNyQixNQUFNQyxtQkFBbUIsSUFBSSxDQUFDSCxVQUFVLENBQUNFLGNBQWM7WUFDdkQsSUFBSUMsb0JBQW9CTCxLQUFLSSxjQUFjLEtBQUtDLGtCQUFrQjtnQkFDOUQsTUFBTSxJQUFJckQsTUFBTSxDQUFDLGdDQUFnQyxFQUFFZ0QsS0FBS0ksY0FBYyxDQUFDLCtEQUErRCxFQUFFQyxpQkFBaUIsR0FBRyxDQUFDLEdBQ3pKO1lBQ1I7UUFDSjtRQUNBaEMsUUFBUWlDLFVBQVU7UUFDbEIsTUFBTWhDLFVBQVUvRSxXQUFXNkUsaUJBQWlCLENBQUNDO1FBQzdDLE1BQU1rQyxXQUFXUCxLQUFLTyxRQUFRLElBQUk7UUFDbEMsSUFBSUMsY0FBY1IsS0FBS1EsV0FBVztRQUNsQyxJQUFJLENBQUNBLGVBQ0RuQyxRQUFRekIsT0FBTyxJQUNmeUIsUUFBUXpCLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRTtZQUM5QzRELGNBQWNuQyxRQUFRekIsT0FBTyxDQUFDLDRCQUE0QjtRQUM5RDtRQUNBLElBQUksQ0FBQzRELGFBQWE7WUFDZCxNQUFNLElBQUl4RCxNQUFNLENBQUMsOENBQThDLEVBQUVxQixRQUFRb0MsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNwRjtRQUNBLElBQUlDO1FBQ0osTUFBTUMsUUFBUUgsWUFBWUcsS0FBSyxDQUFDO1FBQ2hDLElBQUlBLE9BQU87WUFDUEgsY0FBY0csS0FBSyxDQUFDLEVBQUU7WUFDdEJELGNBQWNFLFNBQVNELEtBQUssQ0FBQyxFQUFFO1FBQ25DO1FBQ0EsSUFBSVgsS0FBS2EsSUFBSSxFQUFFO1lBQ1hILGNBQWNWLEtBQUthLElBQUk7UUFDM0IsT0FDSyxJQUFJLENBQUNILGFBQWE7WUFDbkJBLGNBQWM7UUFDbEI7UUFDQSxNQUFNSSxVQUFVNUYsYUFBYTZGLGFBQWE7UUFDMUMsTUFBTUMsVUFBVTlGLGFBQWErRixjQUFjO1FBQzNDLE1BQU1DLGNBQWMsQ0FBQyxHQUFHOUYsc0JBQXNCK0YsbUJBQW1CLEVBQUU3QyxTQUFTaUMsVUFBVUMsYUFBYUUsYUFBYSxJQUFJLENBQUNSLFVBQVUsRUFBRVksU0FBU0UsU0FBUyxJQUFJLENBQUMxRCxZQUFZO1FBQ3BLLE9BQU80RDtJQUNYO0lBQ0E7Ozs7Ozs7OztLQVNDLEdBQ0QsT0FBT0UseUJBQXlCQyxPQUFPLEVBQUU7UUFDckMsT0FBT3hHLElBQUl1Ryx3QkFBd0IsQ0FBQ0M7SUFDeEM7QUFDSjtBQUNBMUksa0JBQWtCLEdBQUdZO0FBQ3JCQSxXQUFXa0QsVUFBVSxHQUFHLElBQUk2RTtBQUM1Qjs7Ozs7Q0FLQyxHQUNELFNBQVM3RyxJQUFJbUMsT0FBTztJQUNoQkEsVUFBVW5FLE9BQU84SSxNQUFNLENBQUM7UUFBRUMsUUFBUSxFQUFFO0lBQUMsR0FBRzVFO0lBQ3hDLElBQUlBLFFBQVE2RSxTQUFTLEVBQUU7UUFDbkI3RSxVQUFVbkUsT0FBTzhJLE1BQU0sQ0FBQzNFLFNBQVM7WUFBRS9ELFVBQVU7UUFBSztJQUN0RDtJQUNBLE1BQU02SSxVQUFVLElBQUluSSxXQUFXcUQ7SUFDL0IsT0FBTyxJQUFJNUIsbUJBQW1CMkcsdUJBQXVCLENBQUNELFNBQVM5RSxRQUFRNkUsU0FBUztBQUNwRjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBc0JDLEdBQ0QsU0FBUy9HLGNBQWNrSCxJQUFJLEVBQUVDLFFBQVEsRUFBRUMsVUFBVSxFQUNqRCw2REFBNkQ7QUFDN0RDLFVBQVUsaUNBQWlDO0FBQWxDO0lBRUwsSUFBSUQsY0FDQSxlQUFlQSxjQUNmQSxXQUFXRSxJQUFJLEtBQUszRyxZQUFZeEIsVUFBVSxDQUFDb0ksZ0JBQWdCLEVBQUU7UUFDN0QsT0FBTztZQUNILE1BQU0sSUFBSWpGLE1BQU07UUFDcEI7SUFDSjtJQUNBLElBQUk4RSxjQUFjLGVBQWVBLGNBQWMsQ0FBQyxDQUFDLEdBQUczRyxtQkFBbUIyQixRQUFRLEtBQUs7UUFDaEYsT0FBTztZQUNILE1BQU0sSUFBSUUsTUFBTTtRQUNwQjtJQUNKO0lBQ0EsT0FBTyxDQUFDLEdBQUcvQixnQkFBZ0JQLGFBQWEsRUFBRWtILE1BQU1DLFVBQVVDO0FBQzlEO0FBQ0FuSixxSEFBdUQ7QUFDdkQsSUFBSXVKLGFBQWF0SCxtQkFBT0EsQ0FBQyx5RUFBWTtBQUNyQ25DLHdDQUF1QztJQUFFK0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT3lHLFdBQVdqSixJQUFJO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDMUcsSUFBSWtKLGdCQUFnQnZILG1CQUFPQSxDQUFDLGlIQUFnQztBQUM1RG5DLDZDQUE0QztJQUFFK0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBTzBHLGNBQWNuSixTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkhQLDZDQUE0QztJQUFFK0MsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBTzBHLGNBQWNwSixTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkgsSUFBSXFKLGdCQUFnQnhILG1CQUFPQSxDQUFDLCtFQUFlO0FBQzNDbkMsK0NBQThDO0lBQUUrQyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPMkcsY0FBY3RKLFdBQVc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUMzSCw0RUFBNEU7QUFDNUUsOEVBQThFO0FBQzlFLDhEQUE4RDtBQUM5RCx1RUFBdUU7QUFDdkUscUNBQXFDO0FBQ3JDLDJFQUEyRTtBQUMzRSxxQkFBcUI7QUFDckIsTUFBTUQsV0FBV3dKLE9BQU8xSixPQUFPO0FBQy9CQSxnQkFBZ0IsR0FBR0UsVUFDbkIsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2ZhbGxiYWNrLmpzP2RiYTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZhbGxiYWNrID0gZXhwb3J0cy5Hb29nbGVFcnJvciA9IGV4cG9ydHMub3BlcmF0aW9uID0gZXhwb3J0cy5PcGVyYXRpb24gPSBleHBvcnRzLndhcm4gPSBleHBvcnRzLnByb3RvYnVmTWluaW1hbCA9IGV4cG9ydHMucHJvdG9idWYgPSBleHBvcnRzLkxvY2F0aW9uUHJvdG9zID0gZXhwb3J0cy5JYW1Qcm90b3MgPSBleHBvcnRzLm9wZXJhdGlvbnNQcm90b3MgPSBleHBvcnRzLkdycGNDbGllbnQgPSBleHBvcnRzLmRlZmF1bHRUb09iamVjdE9wdGlvbnMgPSBleHBvcnRzLm1ha2VVVUlEID0gZXhwb3J0cy5Mb2NhdGlvbnNDbGllbnQgPSBleHBvcnRzLklhbUNsaWVudCA9IGV4cG9ydHMuT3BlcmF0aW9uc0NsaWVudCA9IGV4cG9ydHMuU3RyZWFtVHlwZSA9IGV4cG9ydHMuU3RyZWFtRGVzY3JpcHRvciA9IGV4cG9ydHMuUGFnZURlc2NyaXB0b3IgPSBleHBvcnRzLkxvbmdydW5uaW5nRGVzY3JpcHRvciA9IGV4cG9ydHMuQnVuZGxlRGVzY3JpcHRvciA9IGV4cG9ydHMudmVyc2lvbiA9IGV4cG9ydHMuY3JlYXRlRGVmYXVsdEJhY2tvZmZTZXR0aW5ncyA9IGV4cG9ydHMuUmV0cnlPcHRpb25zID0gZXhwb3J0cy5jb25zdHJ1Y3RTZXR0aW5ncyA9IGV4cG9ydHMuQ2FsbFNldHRpbmdzID0gZXhwb3J0cy5yb3V0aW5nSGVhZGVyID0gZXhwb3J0cy5QYXRoVGVtcGxhdGUgPSB2b2lkIDA7XG5leHBvcnRzLmxybyA9IGxybztcbmV4cG9ydHMuY3JlYXRlQXBpQ2FsbCA9IGNyZWF0ZUFwaUNhbGw7XG5jb25zdCBvYmplY3RIYXNoID0gcmVxdWlyZShcIm9iamVjdC1oYXNoXCIpO1xuY29uc3QgcHJvdG9idWYgPSByZXF1aXJlKFwicHJvdG9idWZqc1wiKTtcbmV4cG9ydHMucHJvdG9idWYgPSBwcm90b2J1ZjtcbmNvbnN0IGdheCA9IHJlcXVpcmUoXCIuL2dheFwiKTtcbmNvbnN0IHJvdXRpbmdIZWFkZXIgPSByZXF1aXJlKFwiLi9yb3V0aW5nSGVhZGVyXCIpO1xuZXhwb3J0cy5yb3V0aW5nSGVhZGVyID0gcm91dGluZ0hlYWRlcjtcbmNvbnN0IHN0YXR1c18xID0gcmVxdWlyZShcIi4vc3RhdHVzXCIpO1xuY29uc3QgZ29vZ2xlX2F1dGhfbGlicmFyeV8xID0gcmVxdWlyZShcImdvb2dsZS1hdXRoLWxpYnJhcnlcIik7XG5jb25zdCBvcGVyYXRpb25zQ2xpZW50XzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25zQ2xpZW50XCIpO1xuY29uc3QgY3JlYXRlQXBpQ2FsbF8xID0gcmVxdWlyZShcIi4vY3JlYXRlQXBpQ2FsbFwiKTtcbmNvbnN0IGZhbGxiYWNrUmVzdCA9IHJlcXVpcmUoXCIuL2ZhbGxiYWNrUmVzdFwiKTtcbmNvbnN0IGZlYXR1cmVEZXRlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2ZlYXR1cmVEZXRlY3Rpb25cIik7XG5jb25zdCBmYWxsYmFja1NlcnZpY2VTdHViXzEgPSByZXF1aXJlKFwiLi9mYWxsYmFja1NlcnZpY2VTdHViXCIpO1xuY29uc3Qgc3RyZWFtaW5nXzEgPSByZXF1aXJlKFwiLi9zdHJlYW1pbmdDYWxscy9zdHJlYW1pbmdcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuY29uc3QgSWFtUHJvdG9zID0gcmVxdWlyZShcIi4uL3Byb3Rvcy9pYW1fc2VydmljZVwiKTtcbmV4cG9ydHMuSWFtUHJvdG9zID0gSWFtUHJvdG9zO1xuY29uc3QgTG9jYXRpb25Qcm90b3MgPSByZXF1aXJlKFwiLi4vcHJvdG9zL2xvY2F0aW9uc1wiKTtcbmV4cG9ydHMuTG9jYXRpb25Qcm90b3MgPSBMb2NhdGlvblByb3RvcztcbmNvbnN0IG9wZXJhdGlvbnNQcm90b3MgPSByZXF1aXJlKFwiLi4vcHJvdG9zL29wZXJhdGlvbnNcIik7XG5leHBvcnRzLm9wZXJhdGlvbnNQcm90b3MgPSBvcGVyYXRpb25zUHJvdG9zO1xudmFyIHBhdGhUZW1wbGF0ZV8xID0gcmVxdWlyZShcIi4vcGF0aFRlbXBsYXRlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGF0aFRlbXBsYXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXRoVGVtcGxhdGVfMS5QYXRoVGVtcGxhdGU7IH0gfSk7XG52YXIgZ2F4XzEgPSByZXF1aXJlKFwiLi9nYXhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDYWxsU2V0dGluZ3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdheF8xLkNhbGxTZXR0aW5nczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbnN0cnVjdFNldHRpbmdzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnYXhfMS5jb25zdHJ1Y3RTZXR0aW5nczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJldHJ5T3B0aW9uc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2F4XzEuUmV0cnlPcHRpb25zOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlRGVmYXVsdEJhY2tvZmZTZXR0aW5nc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2F4XzEuY3JlYXRlRGVmYXVsdEJhY2tvZmZTZXR0aW5nczsgfSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb24gKyAnLWZhbGxiYWNrJztcbnZhciBkZXNjcmlwdG9yXzEgPSByZXF1aXJlKFwiLi9kZXNjcmlwdG9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQnVuZGxlRGVzY3JpcHRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVzY3JpcHRvcl8xLkJ1bmRsZURlc2NyaXB0b3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMb25ncnVubmluZ0Rlc2NyaXB0b3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlc2NyaXB0b3JfMS5Mb25ncnVubmluZ0Rlc2NyaXB0b3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYWdlRGVzY3JpcHRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVzY3JpcHRvcl8xLlBhZ2VEZXNjcmlwdG9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU3RyZWFtRGVzY3JpcHRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVzY3JpcHRvcl8xLlN0cmVhbURlc2NyaXB0b3I7IH0gfSk7XG52YXIgc3RyZWFtaW5nXzIgPSByZXF1aXJlKFwiLi9zdHJlYW1pbmdDYWxscy9zdHJlYW1pbmdcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdHJlYW1UeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdHJlYW1pbmdfMi5TdHJlYW1UeXBlOyB9IH0pO1xudmFyIG9wZXJhdGlvbnNDbGllbnRfMiA9IHJlcXVpcmUoXCIuL29wZXJhdGlvbnNDbGllbnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPcGVyYXRpb25zQ2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBvcGVyYXRpb25zQ2xpZW50XzIuT3BlcmF0aW9uc0NsaWVudDsgfSB9KTtcbnZhciBpYW1TZXJ2aWNlXzEgPSByZXF1aXJlKFwiLi9pYW1TZXJ2aWNlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSWFtQ2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpYW1TZXJ2aWNlXzEuSWFtQ2xpZW50OyB9IH0pO1xudmFyIGxvY2F0aW9uU2VydmljZV8xID0gcmVxdWlyZShcIi4vbG9jYXRpb25TZXJ2aWNlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTG9jYXRpb25zQ2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsb2NhdGlvblNlcnZpY2VfMS5Mb2NhdGlvbnNDbGllbnQ7IH0gfSk7XG52YXIgdXRpbF8yID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1ha2VVVUlEXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsXzIubWFrZVVVSUQ7IH0gfSk7XG5leHBvcnRzLmRlZmF1bHRUb09iamVjdE9wdGlvbnMgPSB7XG4gICAga2VlcENhc2U6IGZhbHNlLFxuICAgIGxvbmdzOiBTdHJpbmcsXG4gICAgZW51bXM6IFN0cmluZyxcbiAgICBkZWZhdWx0czogdHJ1ZSxcbiAgICBvbmVvZnM6IHRydWUsXG59O1xuY29uc3QgQ0xJRU5UX1ZFUlNJT05fSEVBREVSID0gJ3gtZ29vZy1hcGktY2xpZW50JztcbmNsYXNzIEdycGNDbGllbnQge1xuICAgIC8qKlxuICAgICAqIEluIHJhcmUgY2FzZXMgdXNlcnMgbWlnaHQgbmVlZCB0byBkZWFsbG9jYXRlIGFsbCBtZW1vcnkgY29uc3VtZWQgYnkgbG9hZGVkIHByb3Rvcy5cbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIGRlbGV0ZSB0aGUgcHJvdG8gY2FjaGUgY29udGVudC5cbiAgICAgKi9cbiAgICBzdGF0aWMgY2xlYXJQcm90b0NhY2hlKCkge1xuICAgICAgICBHcnBjQ2xpZW50LnByb3RvQ2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZ1JQQy1mYWxsYmFjayB2ZXJzaW9uIG9mIEdycGNDbGllbnRcbiAgICAgKiBJbXBsZW1lbnRzIEdycGNDbGllbnQgQVBJIGZvciBhIGJyb3dzZXIgdXNpbmcgZ3JwYy1mYWxsYmFjayBwcm90b2NvbCAoc2VuZHMgc2VyaWFsaXplZCBwcm90b2J1ZiB0byBIVFRQLzEgJHJwYyBlbmRwb2ludCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMuYXV0aCAtIEFuIGluc3RhbmNlIG9mIE9BdXRoMkNsaWVudCB0byB1c2UgaW4gYnJvd3Nlciwgb3IgYW4gaW5zdGFuY2Ugb2YgR29vZ2xlQXV0aCBmcm9tIGdvb2dsZS1hdXRoLWxpYnJhcnlcbiAgICAgKiAgdG8gdXNlIGluIE5vZGUuanMuIFJlcXVpcmVkIGZvciBicm93c2VyLCBvcHRpb25hbCBmb3IgTm9kZS5qcy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoISgwLCBmZWF0dXJlRGV0ZWN0aW9uXzEuaXNOb2RlSlMpKCkpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hdXRoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpICtcbiAgICAgICAgICAgICAgICAgICAgJ1lvdSBuZWVkIHRvIHBhc3MgYXV0aCBpbnN0YW5jZSB0byB1c2UgZ1JQQy1mYWxsYmFjayBjbGllbnQgaW4gYnJvd3NlciBvciBvdGhlciBub24tTm9kZS5qcyBlbnZpcm9ubWVudHMuIFVzZSBPQXV0aDJDbGllbnQgZnJvbSBnb29nbGUtYXV0aC1saWJyYXJ5LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hdXRoID0gb3B0aW9ucy5hdXRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hdXRoID1cbiAgICAgICAgICAgICAgICBvcHRpb25zLmF1dGggfHxcbiAgICAgICAgICAgICAgICAgICAgbmV3IGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5Hb29nbGVBdXRoKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmFsbGJhY2sgPSBvcHRpb25zLmZhbGxiYWNrID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB0aGlzLmdycGNWZXJzaW9uID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbiAgICAgICAgdGhpcy5odHRwUnVsZXMgPSBvcHRpb25zLmh0dHBSdWxlcztcbiAgICAgICAgdGhpcy5udW1lcmljRW51bXMgPSAoX2EgPSBvcHRpb25zLm51bWVyaWNFbnVtcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGdSUEMtZmFsbGJhY2sgdmVyc2lvbiBvZiBsb2FkUHJvdG9cbiAgICAgKiBMb2FkcyB0aGUgcHJvdG9idWYgcm9vdCBvYmplY3QgZnJvbSBhIEpTT04gb2JqZWN0IGNyZWF0ZWQgZnJvbSBhIHByb3RvIGZpbGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0ganNvbk9iamVjdCAtIEEgSlNPTiB2ZXJzaW9uIG9mIGEgcHJvdG9maWxlIGNyZWF0ZWQgdXNpbiBwcm90b2J1Zi5qc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJvb3QgbmFtZXNwYWNlIG9mIHByb3RvIEpTT05cbiAgICAgKi9cbiAgICBsb2FkUHJvdG8oanNvbk9iamVjdCkge1xuICAgICAgICBjb25zdCByb290T2JqZWN0ID0gcHJvdG9idWYuUm9vdC5mcm9tSlNPTihqc29uT2JqZWN0KTtcbiAgICAgICAgcmV0dXJuIHJvb3RPYmplY3Q7XG4gICAgfVxuICAgIGxvYWRQcm90b0pTT04oanNvbiwgaWdub3JlQ2FjaGUgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBoYXNoID0gb2JqZWN0SGFzaChKU09OLnN0cmluZ2lmeShqc29uKSkudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gR3JwY0NsaWVudC5wcm90b0NhY2hlLmdldChoYXNoKTtcbiAgICAgICAgaWYgKGNhY2hlZCAmJiAhaWdub3JlQ2FjaGUpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm9vdCA9IHByb3RvYnVmLlJvb3QuZnJvbUpTT04oanNvbik7XG4gICAgICAgIEdycGNDbGllbnQucHJvdG9DYWNoZS5zZXQoaGFzaCwgcm9vdCk7XG4gICAgICAgIHJldHVybiByb290O1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0U2VydmljZU1ldGhvZHMoc2VydmljZSkge1xuICAgICAgICBjb25zdCBtZXRob2RzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgW21ldGhvZE5hbWUsIG1ldGhvZE9iamVjdF0gb2YgT2JqZWN0LmVudHJpZXMoc2VydmljZS5tZXRob2RzKSkge1xuICAgICAgICAgICAgY29uc3QgbWV0aG9kTmFtZUxvd2VyQ2FtZWxDYXNlID0gKDAsIHV0aWxfMS50b0xvd2VyQ2FtZWxDYXNlKShtZXRob2ROYW1lKTtcbiAgICAgICAgICAgIG1ldGhvZHNbbWV0aG9kTmFtZUxvd2VyQ2FtZWxDYXNlXSA9IG1ldGhvZE9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWV0aG9kcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogZ1JQQy1mYWxsYmFjayB2ZXJzaW9uIG9mIGNvbnN0cnVjdFNldHRpbmdzXG4gICAgICogQSB3cmFwcGVyIG9mIHtAbGluayBjb25zdHJ1Y3RTZXR0aW5nc30gZnVuY3Rpb24gdW5kZXIgdGhlIGdSUEMgY29udGV4dC5cbiAgICAgKlxuICAgICAqIE1vc3Qgb2YgcGFyYW1ldGVycyBhcmUgY29tbW9uIGFtb25nIGNvbnN0cnVjdFNldHRpbmdzLCBwbGVhc2UgdGFrZSBhIGxvb2suXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VOYW1lIC0gVGhlIGZ1bGxseS1xdWFsaWZpZWQgbmFtZSBvZiB0aGUgc2VydmljZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY2xpZW50Q29uZmlnIC0gQSBkaWN0aW9uYXJ5IG9mIHRoZSBjbGllbnQgY29uZmlnLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdPdmVycmlkZXMgLSBBIGRpY3Rpb25hcnkgb2Ygb3ZlcnJpZGluZyBjb25maWdzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzIC0gQSBkaWN0aW9uYXJ5IG9mIGFkZGl0aW9uYWwgSFRUUCBoZWFkZXIgbmFtZSB0b1xuICAgICAqICAgaXRzIHZhbHVlLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gQSBtYXBwaW5nIG9mIG1ldGhvZCBuYW1lcyB0byBDYWxsU2V0dGluZ3MuXG4gICAgICovXG4gICAgY29uc3RydWN0U2V0dGluZ3Moc2VydmljZU5hbWUsIGNsaWVudENvbmZpZywgY29uZmlnT3ZlcnJpZGVzLCBoZWFkZXJzKSB7XG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkTWV0YWRhdGEoYWJUZXN0cywgbW9yZUhlYWRlcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0ge307XG4gICAgICAgICAgICBpZiAoIWhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTaW5jZSBnUlBDIGV4cGVjdHMgZWFjaCBoZWFkZXIgdG8gYmUgYW4gYXJyYXksXG4gICAgICAgICAgICAvLyB3ZSBhcmUgZG9pbmcgdGhlIHNhbWUgZm9yIGZhbGxiYWNrIGhlcmUuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGFba2V5XSA9IEFycmF5LmlzQXJyYXkoaGVhZGVyc1trZXldKVxuICAgICAgICAgICAgICAgICAgICA/IGhlYWRlcnNba2V5XVxuICAgICAgICAgICAgICAgICAgICA6IFtoZWFkZXJzW2tleV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZ1JQQy1mYWxsYmFjayByZXF1ZXN0IG11c3QgaGF2ZSAnZ3JwYy13ZWIvJyBpbiAneC1nb29nLWFwaS1jbGllbnQnXG4gICAgICAgICAgICBjb25zdCBjbGllbnRWZXJzaW9ucyA9IFtdO1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhW0NMSUVOVF9WRVJTSU9OX0hFQURFUl0gJiZcbiAgICAgICAgICAgICAgICBtZXRhZGF0YVtDTElFTlRfVkVSU0lPTl9IRUFERVJdWzBdKSB7XG4gICAgICAgICAgICAgICAgY2xpZW50VmVyc2lvbnMucHVzaCguLi5tZXRhZGF0YVtDTElFTlRfVkVSU0lPTl9IRUFERVJdWzBdLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xpZW50VmVyc2lvbnMucHVzaChgZ3JwYy13ZWIvJHtleHBvcnRzLnZlcnNpb259YCk7XG4gICAgICAgICAgICBtZXRhZGF0YVtDTElFTlRfVkVSU0lPTl9IRUFERVJdID0gW2NsaWVudFZlcnNpb25zLmpvaW4oJyAnKV07XG4gICAgICAgICAgICBpZiAoIW1vcmVIZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbW9yZUhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkgIT09IENMSUVOVF9WRVJTSU9OX0hFQURFUikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG1vcmVIZWFkZXJzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1ldGFkYXRhW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhW2tleV0ucHVzaCguLi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbiBub3QgYWRkIHZhbHVlICR7dmFsdWV9IHRvIHRoZSBjYWxsIG1ldGFkYXRhLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhW2tleV0gPSBbdmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnYXguY29uc3RydWN0U2V0dGluZ3Moc2VydmljZU5hbWUsIGNsaWVudENvbmZpZywgY29uZmlnT3ZlcnJpZGVzLCBzdGF0dXNfMS5TdGF0dXMsIHsgbWV0YWRhdGFCdWlsZGVyOiBidWlsZE1ldGFkYXRhIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBnUlBDLWZhbGxiYWNrIHZlcnNpb24gb2YgY3JlYXRlU3R1YlxuICAgICAqIENyZWF0ZXMgYSBnUlBDLWZhbGxiYWNrIHN0dWIgd2l0aCBhdXRoZW50aWNhdGlvbiBoZWFkZXJzIGJ1aWx0IGZyb20gc3VwcGxpZWQgT0F1dGgyQ2xpZW50IGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBDcmVhdGVTdHViIC0gVGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIG9mIHRoZSBzdHViLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZXJ2aWNlIC0gQSBwcm90b2J1ZmpzIFNlcnZpY2Ugb2JqZWN0IChhcyByZXR1cm5lZCBieSBsb29rdXBTZXJ2aWNlKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gQ29ubmVjdGlvbiBvcHRpb25zLCBhcyBkZXNjcmliZWQgYmVsb3cuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuc2VydmljZVBhdGggLSBUaGUgaG9zdG5hbWUgb2YgdGhlIEFQSSBlbmRwb2ludCBzZXJ2aWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLnBvcnQgLSBUaGUgcG9ydCBvZiB0aGUgc2VydmljZS5cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBBIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgdG8gYSBnUlBDLWZhbGxiYWNrIHNlcnZpY2Ugc3R1Yiwgd2hpY2ggaXMgYSBwcm90b2J1Zi5qcyBzZXJ2aWNlIHN0dWIgaW5zdGFuY2UgbW9kaWZpZWQgdG8gbWF0Y2ggdGhlIGdSUEMgc3R1YiBBUElcbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVTdHViKHNlcnZpY2UsIG9wdHMsIFxuICAgIC8vIEZvciBjb25zaXN0ZW5jeSB3aXRoIGNyZWF0ZVN0dWIgaW4gZ3JwYy50cywgY3VzdG9tU2VydmljZVBhdGggaXMgZGVmaW5lZDpcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgY3VzdG9tU2VydmljZVBhdGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmF1dGhDbGllbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF1dGggJiYgJ2dldENsaWVudCcgaW4gdGhpcy5hdXRoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoQ2xpZW50ID0gKGF3YWl0IHRoaXMuYXV0aC5nZXRDbGllbnQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmF1dGggJiYgJ2dldFJlcXVlc3RIZWFkZXJzJyBpbiB0aGlzLmF1dGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF1dGhDbGllbnQgPSB0aGlzLmF1dGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmF1dGhDbGllbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gYXV0aGVudGljYXRpb24gd2FzIHByb3ZpZGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRzLnVuaXZlcnNlRG9tYWluKSB7XG4gICAgICAgICAgICBvcHRzLnVuaXZlcnNlRG9tYWluID0gJ2dvb2dsZWFwaXMuY29tJztcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy51bml2ZXJzZURvbWFpbikge1xuICAgICAgICAgICAgY29uc3QgdW5pdmVyc2VGcm9tQXV0aCA9IHRoaXMuYXV0aENsaWVudC51bml2ZXJzZURvbWFpbjtcbiAgICAgICAgICAgIGlmICh1bml2ZXJzZUZyb21BdXRoICYmIG9wdHMudW5pdmVyc2VEb21haW4gIT09IHVuaXZlcnNlRnJvbUF1dGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBjb25maWd1cmVkIHVuaXZlcnNlIGRvbWFpbiAoJHtvcHRzLnVuaXZlcnNlRG9tYWlufSkgZG9lcyBub3QgbWF0Y2ggdGhlIHVuaXZlcnNlIGRvbWFpbiBmb3VuZCBpbiB0aGUgY3JlZGVudGlhbHMgKCR7dW5pdmVyc2VGcm9tQXV0aH0pLiBgICtcbiAgICAgICAgICAgICAgICAgICAgXCJJZiB5b3UgaGF2ZW4ndCBjb25maWd1cmVkIHRoZSB1bml2ZXJzZSBkb21haW4gZXhwbGljaXRseSwgZ29vZ2xlYXBpcy5jb20gaXMgdGhlIGRlZmF1bHQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNlcnZpY2UucmVzb2x2ZUFsbCgpO1xuICAgICAgICBjb25zdCBtZXRob2RzID0gR3JwY0NsaWVudC5nZXRTZXJ2aWNlTWV0aG9kcyhzZXJ2aWNlKTtcbiAgICAgICAgY29uc3QgcHJvdG9jb2wgPSBvcHRzLnByb3RvY29sIHx8ICdodHRwcyc7XG4gICAgICAgIGxldCBzZXJ2aWNlUGF0aCA9IG9wdHMuc2VydmljZVBhdGg7XG4gICAgICAgIGlmICghc2VydmljZVBhdGggJiZcbiAgICAgICAgICAgIHNlcnZpY2Uub3B0aW9ucyAmJlxuICAgICAgICAgICAgc2VydmljZS5vcHRpb25zWycoZ29vZ2xlLmFwaS5kZWZhdWx0X2hvc3QpJ10pIHtcbiAgICAgICAgICAgIHNlcnZpY2VQYXRoID0gc2VydmljZS5vcHRpb25zWycoZ29vZ2xlLmFwaS5kZWZhdWx0X2hvc3QpJ107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzZXJ2aWNlUGF0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZGV0ZXJtaW5lIHNlcnZpY2UgQVBJIHBhdGggZm9yIHNlcnZpY2UgJHtzZXJ2aWNlLm5hbWV9LmApO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzZXJ2aWNlUG9ydDtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBzZXJ2aWNlUGF0aC5tYXRjaCgvXiguKik6KFxcZCspJC8pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHNlcnZpY2VQYXRoID0gbWF0Y2hbMV07XG4gICAgICAgICAgICBzZXJ2aWNlUG9ydCA9IHBhcnNlSW50KG1hdGNoWzJdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy5wb3J0KSB7XG4gICAgICAgICAgICBzZXJ2aWNlUG9ydCA9IG9wdHMucG9ydDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghc2VydmljZVBvcnQpIHtcbiAgICAgICAgICAgIHNlcnZpY2VQb3J0ID0gNDQzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSBmYWxsYmFja1Jlc3QuZW5jb2RlUmVxdWVzdDtcbiAgICAgICAgY29uc3QgZGVjb2RlciA9IGZhbGxiYWNrUmVzdC5kZWNvZGVSZXNwb25zZTtcbiAgICAgICAgY29uc3Qgc2VydmljZVN0dWIgPSAoMCwgZmFsbGJhY2tTZXJ2aWNlU3R1Yl8xLmdlbmVyYXRlU2VydmljZVN0dWIpKG1ldGhvZHMsIHByb3RvY29sLCBzZXJ2aWNlUGF0aCwgc2VydmljZVBvcnQsIHRoaXMuYXV0aENsaWVudCwgZW5jb2RlciwgZGVjb2RlciwgdGhpcy5udW1lcmljRW51bXMpO1xuICAgICAgICByZXR1cm4gc2VydmljZVN0dWI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSAnYnl0ZWxlbmd0aCcgZnVuY3Rpb24gZm9yIGEgZ2l2ZW4gcHJvdG8gbWVzc2FnZSBjbGFzcy5cbiAgICAgKlxuICAgICAqIFNlZSB7QGxpbmsgQnVuZGxlRGVzY3JpcHRvcn0gYWJvdXQgdGhlIG1lYW5pbmcgb2YgdGhlIHJldHVybiB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1lc3NhZ2UgLSBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgaXMgZ2VuZXJhdGVkIGJ5XG4gICAgICogICBwcm90b2J1Zi5qcy4gQXNzdW1lcyAnZW5jb2RlcicgZmllbGQgaW4gdGhlIG1lc3NhZ2UuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oT2JqZWN0KTpudW1iZXJ9IC0gYSBmdW5jdGlvbiB0byBjb21wdXRlIHRoZSBieXRlIGxlbmd0aFxuICAgICAqICAgZm9yIGFuIG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlQnl0ZUxlbmd0aEZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGdheC5jcmVhdGVCeXRlTGVuZ3RoRnVuY3Rpb24obWVzc2FnZSk7XG4gICAgfVxufVxuZXhwb3J0cy5HcnBjQ2xpZW50ID0gR3JwY0NsaWVudDtcbkdycGNDbGllbnQucHJvdG9DYWNoZSA9IG5ldyBNYXAoKTtcbi8qKlxuICogZ1JQQy1mYWxsYmFjayB2ZXJzaW9uIG9mIGxyb1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9ucy5hdXRoIC0gQW4gaW5zdGFuY2Ugb2YgZ29vZ2xlLWF1dGgtbGlicmFyeS5cbiAqIEByZXR1cm4ge09iamVjdH0gQSBPcGVyYXRpb25zQ2xpZW50QnVpbGRlciB0aGF0IHdpbGwgcmV0dXJuIGEgT3BlcmF0aW9uc0NsaWVudFxuICovXG5mdW5jdGlvbiBscm8ob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgc2NvcGVzOiBbXSB9LCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5wcm90b0pzb24pIHtcbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24ob3B0aW9ucywgeyBmYWxsYmFjazogdHJ1ZSB9KTtcbiAgICB9XG4gICAgY29uc3QgZ2F4R3JwYyA9IG5ldyBHcnBjQ2xpZW50KG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgb3BlcmF0aW9uc0NsaWVudF8xLk9wZXJhdGlvbnNDbGllbnRCdWlsZGVyKGdheEdycGMsIG9wdGlvbnMucHJvdG9Kc29uKTtcbn1cbi8qKlxuICogZ1JQQy1mYWxsYmFjayB2ZXJzaW9uIG9mIGNyZWF0ZUFwaUNhbGxcbiAqXG4gKiBDb252ZXJ0cyBhbiBycGMgY2FsbCBpbnRvIGFuIEFQSSBjYWxsIGdvdmVybmVkIGJ5IHRoZSBzZXR0aW5ncy5cbiAqXG4gKiBJbiB0eXBpY2FsIHVzYWdlLCBgZnVuY2Agd2lsbCBiZSBhIHByb21pc2UgdG8gYSBjYWxsYWJsZSB1c2VkIHRvIG1ha2UgYW4gcnBjXG4gKiByZXF1ZXN0LiBUaGlzIHdpbGwgbW9zdGx5IGxpa2VseSBiZSBhIGJvdW5kIG1ldGhvZCBmcm9tIGEgcmVxdWVzdCBzdHViIHVzZWRcbiAqIHRvIG1ha2UgYW4gcnBjIGNhbGwuIEl0IGlzIG5vdCBhIGRpcmVjdCBmdW5jdGlvbiBidXQgYSBQcm9taXNlIGluc3RhbmNlLFxuICogYmVjYXVzZSBvZiBpdHMgYXN5bmNocm9uaXNtICh0eXBpY2FsbHksIG9idGFpbmluZyB0aGUgYXV0aCBpbmZvcm1hdGlvbikuXG4gKlxuICogVGhlIHJlc3VsdCBpcyBhIGZ1bmN0aW9uIHdoaWNoIG1hbmFnZXMgdGhlIEFQSSBjYWxsIHdpdGggdGhlIGdpdmVuIHNldHRpbmdzXG4gKiBhbmQgdGhlIG9wdGlvbnMgb24gdGhlIGludm9jYXRpb24uXG4gKlxuICogVGhyb3dzIGV4Y2VwdGlvbiBvbiB1bnN1cHBvcnRlZCBzdHJlYW1pbmcgY2FsbHNcbiAqXG4gKiBAcGFyYW0ge1Byb21pc2U8R1JQQ0NhbGw+fEdSUENDYWxsfSBmdW5jIC0gaXMgZWl0aGVyIGEgcHJvbWlzZSB0byBiZSB1c2VkIHRvIG1ha2VcbiAqICAgYSBiYXJlIFJQQyBjYWxsLCBvciBqdXN0IGEgYmFyZSBSUEMgY2FsbC5cbiAqIEBwYXJhbSB7Q2FsbFNldHRpbmdzfSBzZXR0aW5ncyAtIHByb3ZpZGVzIHRoZSBzZXR0aW5ncyBmb3IgdGhpcyBjYWxsXG4gKiBAcGFyYW0ge0Rlc2NyaXB0b3J9IGRlc2NyaXB0b3IgLSBvcHRpb25hbGx5IHNwZWNpZnkgdGhlIGRlc2NyaXB0b3IgZm9yXG4gKiAgIHRoZSBtZXRob2QgY2FsbC5cbiAqIEByZXR1cm4ge0dheENhbGx9IGZ1bmMgLSBhIGJvdW5kIG1ldGhvZCBvbiBhIHJlcXVlc3Qgc3R1YiB1c2VkXG4gKiAgIHRvIG1ha2UgYW4gcnBjIGNhbGwuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFwaUNhbGwoZnVuYywgc2V0dGluZ3MsIGRlc2NyaXB0b3IsIFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuX2ZhbGxiYWNrIC8vIHVudXNlZDsgZm9yIGNvbXBhdGliaWxpdHkgb25seVxuKSB7XG4gICAgaWYgKGRlc2NyaXB0b3IgJiZcbiAgICAgICAgJ3N0cmVhbWluZycgaW4gZGVzY3JpcHRvciAmJlxuICAgICAgICBkZXNjcmlwdG9yLnR5cGUgIT09IHN0cmVhbWluZ18xLlN0cmVhbVR5cGUuU0VSVkVSX1NUUkVBTUlORykge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgUkVTVCB0cmFuc3BvcnQgY3VycmVudGx5IGRvZXMgbm90IHN1cHBvcnQgY2xpZW50LXN0cmVhbWluZyBvciBiaWRpLXN0cmVhbSBjYWxscy4nKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGRlc2NyaXB0b3IgJiYgJ3N0cmVhbWluZycgaW4gZGVzY3JpcHRvciAmJiAhKDAsIGZlYXR1cmVEZXRlY3Rpb25fMS5pc05vZGVKUykoKSkge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2ZXIgc3RyZWFtaW5nIG92ZXIgdGhlIFJFU1QgdHJhbnNwb3J0IGlzIG9ubHkgc3VwcG9ydGVkIGluIE5vZGUuanMuJyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiAoMCwgY3JlYXRlQXBpQ2FsbF8xLmNyZWF0ZUFwaUNhbGwpKGZ1bmMsIHNldHRpbmdzLCBkZXNjcmlwdG9yKTtcbn1cbmV4cG9ydHMucHJvdG9idWZNaW5pbWFsID0gcmVxdWlyZShcInByb3RvYnVmanMvbWluaW1hbFwiKTtcbnZhciB3YXJuaW5nc18xID0gcmVxdWlyZShcIi4vd2FybmluZ3NcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3YXJuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3YXJuaW5nc18xLndhcm47IH0gfSk7XG52YXIgbG9uZ3J1bm5pbmdfMSA9IHJlcXVpcmUoXCIuL2xvbmdSdW5uaW5nQ2FsbHMvbG9uZ3J1bm5pbmdcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJPcGVyYXRpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxvbmdydW5uaW5nXzEuT3BlcmF0aW9uOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib3BlcmF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsb25ncnVubmluZ18xLm9wZXJhdGlvbjsgfSB9KTtcbnZhciBnb29nbGVFcnJvcl8xID0gcmVxdWlyZShcIi4vZ29vZ2xlRXJyb3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHb29nbGVFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvcjsgfSB9KTtcbi8vIERpZmZlcmVudCBlbnZpcm9ubWVudHMgb3IgYnVuZGxlcnMgbWF5IG9yIG1heSBub3QgcmVzcGVjdCBcImJyb3dzZXJcIiBmaWVsZFxuLy8gaW4gcGFja2FnZS5qc29uIChlLmcuIEVsZWN0cm9uIGRvZXMgbm90IHJlc3BlY3QgaXQsIGJ1dCBpZiB5b3UgcnVuIHRoZSBjb2RlXG4vLyB0aHJvdWdoIHdlYnBhY2sgZmlyc3QsIGl0IHdpbGwgZm9sbG93IHRoZSBcImJyb3dzZXJcIiBmaWVsZCkuXG4vLyBUbyBtYWtlIGl0IHNhZmVyIGFuZCBtb3JlIGNvbXBhdGlibGUsIGxldCdzIG1ha2Ugc3VyZSB0aGF0IGlmIHlvdSBkb1xuLy8gY29uc3QgZ2F4ID0gcmVxdWlyZShcImdvb2dsZS1nYXhcIik7XG4vLyB5b3UgY2FuIGFsd2F5cyBhc2sgZm9yIGdheC5mYWxsYmFjaywgcmVnYXJkbGVzcyBvZiBcImJyb3dzZXJcIiBmaWVsZCBiZWluZ1xuLy8gdW5kZXJzdG9vZCBvciBub3QuXG5jb25zdCBmYWxsYmFjayA9IG1vZHVsZS5leHBvcnRzO1xuZXhwb3J0cy5mYWxsYmFjayA9IGZhbGxiYWNrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmFsbGJhY2suanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZmFsbGJhY2siLCJHb29nbGVFcnJvciIsIm9wZXJhdGlvbiIsIk9wZXJhdGlvbiIsIndhcm4iLCJwcm90b2J1Zk1pbmltYWwiLCJwcm90b2J1ZiIsIkxvY2F0aW9uUHJvdG9zIiwiSWFtUHJvdG9zIiwib3BlcmF0aW9uc1Byb3RvcyIsIkdycGNDbGllbnQiLCJkZWZhdWx0VG9PYmplY3RPcHRpb25zIiwibWFrZVVVSUQiLCJMb2NhdGlvbnNDbGllbnQiLCJJYW1DbGllbnQiLCJPcGVyYXRpb25zQ2xpZW50IiwiU3RyZWFtVHlwZSIsIlN0cmVhbURlc2NyaXB0b3IiLCJQYWdlRGVzY3JpcHRvciIsIkxvbmdydW5uaW5nRGVzY3JpcHRvciIsIkJ1bmRsZURlc2NyaXB0b3IiLCJ2ZXJzaW9uIiwiY3JlYXRlRGVmYXVsdEJhY2tvZmZTZXR0aW5ncyIsIlJldHJ5T3B0aW9ucyIsImNvbnN0cnVjdFNldHRpbmdzIiwiQ2FsbFNldHRpbmdzIiwicm91dGluZ0hlYWRlciIsIlBhdGhUZW1wbGF0ZSIsImxybyIsImNyZWF0ZUFwaUNhbGwiLCJvYmplY3RIYXNoIiwicmVxdWlyZSIsImdheCIsInN0YXR1c18xIiwiZ29vZ2xlX2F1dGhfbGlicmFyeV8xIiwib3BlcmF0aW9uc0NsaWVudF8xIiwiY3JlYXRlQXBpQ2FsbF8xIiwiZmFsbGJhY2tSZXN0IiwiZmVhdHVyZURldGVjdGlvbl8xIiwiZmFsbGJhY2tTZXJ2aWNlU3R1Yl8xIiwic3RyZWFtaW5nXzEiLCJ1dGlsXzEiLCJwYXRoVGVtcGxhdGVfMSIsImVudW1lcmFibGUiLCJnZXQiLCJnYXhfMSIsImRlc2NyaXB0b3JfMSIsInN0cmVhbWluZ18yIiwib3BlcmF0aW9uc0NsaWVudF8yIiwiaWFtU2VydmljZV8xIiwibG9jYXRpb25TZXJ2aWNlXzEiLCJ1dGlsXzIiLCJrZWVwQ2FzZSIsImxvbmdzIiwiU3RyaW5nIiwiZW51bXMiLCJkZWZhdWx0cyIsIm9uZW9mcyIsIkNMSUVOVF9WRVJTSU9OX0hFQURFUiIsImNsZWFyUHJvdG9DYWNoZSIsInByb3RvQ2FjaGUiLCJjbGVhciIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIl9hIiwiaXNOb2RlSlMiLCJhdXRoIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiR29vZ2xlQXV0aCIsImdycGNWZXJzaW9uIiwiaHR0cFJ1bGVzIiwibnVtZXJpY0VudW1zIiwibG9hZFByb3RvIiwianNvbk9iamVjdCIsInJvb3RPYmplY3QiLCJSb290IiwiZnJvbUpTT04iLCJsb2FkUHJvdG9KU09OIiwianNvbiIsImlnbm9yZUNhY2hlIiwiaGFzaCIsInRvU3RyaW5nIiwiY2FjaGVkIiwicm9vdCIsInNldCIsImdldFNlcnZpY2VNZXRob2RzIiwic2VydmljZSIsIm1ldGhvZHMiLCJtZXRob2ROYW1lIiwibWV0aG9kT2JqZWN0IiwiZW50cmllcyIsIm1ldGhvZE5hbWVMb3dlckNhbWVsQ2FzZSIsInRvTG93ZXJDYW1lbENhc2UiLCJzZXJ2aWNlTmFtZSIsImNsaWVudENvbmZpZyIsImNvbmZpZ092ZXJyaWRlcyIsImhlYWRlcnMiLCJidWlsZE1ldGFkYXRhIiwiYWJUZXN0cyIsIm1vcmVIZWFkZXJzIiwibWV0YWRhdGEiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJjbGllbnRWZXJzaW9ucyIsInB1c2giLCJzcGxpdCIsImpvaW4iLCJ0b0xvd2VyQ2FzZSIsInVuZGVmaW5lZCIsIlN0YXR1cyIsIm1ldGFkYXRhQnVpbGRlciIsImNyZWF0ZVN0dWIiLCJvcHRzIiwiY3VzdG9tU2VydmljZVBhdGgiLCJhdXRoQ2xpZW50IiwiZ2V0Q2xpZW50IiwidW5pdmVyc2VEb21haW4iLCJ1bml2ZXJzZUZyb21BdXRoIiwicmVzb2x2ZUFsbCIsInByb3RvY29sIiwic2VydmljZVBhdGgiLCJuYW1lIiwic2VydmljZVBvcnQiLCJtYXRjaCIsInBhcnNlSW50IiwicG9ydCIsImVuY29kZXIiLCJlbmNvZGVSZXF1ZXN0IiwiZGVjb2RlciIsImRlY29kZVJlc3BvbnNlIiwic2VydmljZVN0dWIiLCJnZW5lcmF0ZVNlcnZpY2VTdHViIiwiY3JlYXRlQnl0ZUxlbmd0aEZ1bmN0aW9uIiwibWVzc2FnZSIsIk1hcCIsImFzc2lnbiIsInNjb3BlcyIsInByb3RvSnNvbiIsImdheEdycGMiLCJPcGVyYXRpb25zQ2xpZW50QnVpbGRlciIsImZ1bmMiLCJzZXR0aW5ncyIsImRlc2NyaXB0b3IiLCJfZmFsbGJhY2siLCJ0eXBlIiwiU0VSVkVSX1NUUkVBTUlORyIsIndhcm5pbmdzXzEiLCJsb25ncnVubmluZ18xIiwiZ29vZ2xlRXJyb3JfMSIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallback.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallbackRest.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallbackRest.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.encodeRequest = encodeRequest;\nexports.decodeResponse = decodeResponse;\n// proto-over-HTTP request encoding and decoding\nconst serializer = __webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\");\nconst fallback_1 = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\nconst googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst transcoding_1 = __webpack_require__(/*! ./transcoding */ \"(rsc)/./node_modules/google-gax/build/src/transcoding.js\");\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums) {\n    const headers = {\n        \"Content-Type\": \"application/json\"\n    };\n    const message = rpc.resolvedRequestType.fromObject(request);\n    const json = serializer.toProto3JSON(message, {\n        numericEnums\n    });\n    if (!json) {\n        throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\n    }\n    if (typeof json !== \"object\" || Array.isArray(json)) {\n        throw new Error(`Request to RPC ${rpc.name} must be an object.`);\n    }\n    const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);\n    if (!transcoded) {\n        throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\n    }\n    // If numeric enums feature is requested, add extra parameter to the query string\n    if (numericEnums) {\n        transcoded.queryString = (transcoded.queryString ? `${transcoded.queryString}&` : \"\") + \"$alt=json%3Benum-encoding=int\";\n    }\n    // Converts httpMethod to method that permitted in standard Fetch API spec\n    // https://fetch.spec.whatwg.org/#methods\n    const method = transcoded.httpMethod.toUpperCase();\n    const body = JSON.stringify(transcoded.data);\n    const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, \"\")}?${transcoded.queryString}`;\n    return {\n        method,\n        url,\n        headers,\n        body\n    };\n}\nfunction decodeResponse(rpc, ok, response) {\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    const decodedString = new TextDecoder().decode(response);\n    const json = JSON.parse(decodedString);\n    if (!ok) {\n        const error = googleError_1.GoogleError.parseHttpError(json);\n        throw error;\n    }\n    const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n    if (!message) {\n        throw new Error(`Received null response from RPC ${rpc.name}`);\n    }\n    return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n} //# sourceMappingURL=fallbackRest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZmFsbGJhY2tSZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHRTtBQUN4QkYsc0JBQXNCLEdBQUdHO0FBQ3pCLGdEQUFnRDtBQUNoRCxNQUFNQyxhQUFhQyxtQkFBT0EsQ0FBQyw4RkFBd0I7QUFDbkQsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMseUVBQVk7QUFDdkMsTUFBTUUsZ0JBQWdCRixtQkFBT0EsQ0FBQywrRUFBZTtBQUM3QyxNQUFNRyxnQkFBZ0JILG1CQUFPQSxDQUFDLCtFQUFlO0FBQzdDLFNBQVNILGNBQWNPLEdBQUcsRUFBRUMsUUFBUSxFQUFFQyxXQUFXLEVBQUVDLFdBQVcsRUFBRUMsT0FBTyxFQUFFQyxZQUFZO0lBQ2pGLE1BQU1DLFVBQVU7UUFDWixnQkFBZ0I7SUFDcEI7SUFDQSxNQUFNQyxVQUFVUCxJQUFJUSxtQkFBbUIsQ0FBQ0MsVUFBVSxDQUFDTDtJQUNuRCxNQUFNTSxPQUFPZixXQUFXZ0IsWUFBWSxDQUFDSixTQUFTO1FBQzFDRjtJQUNKO0lBQ0EsSUFBSSxDQUFDSyxNQUFNO1FBQ1AsTUFBTSxJQUFJRSxNQUFNLENBQUMsZ0NBQWdDLEVBQUVaLElBQUlhLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEU7SUFDQSxJQUFJLE9BQU9ILFNBQVMsWUFBWUksTUFBTUMsT0FBTyxDQUFDTCxPQUFPO1FBQ2pELE1BQU0sSUFBSUUsTUFBTSxDQUFDLGVBQWUsRUFBRVosSUFBSWEsSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQ25FO0lBQ0EsTUFBTUcsYUFBYSxDQUFDLEdBQUdqQixjQUFja0IsU0FBUyxFQUFFUCxNQUFNVixJQUFJa0IsYUFBYTtJQUN2RSxJQUFJLENBQUNGLFlBQVk7UUFDYixNQUFNLElBQUlKLE1BQU0sQ0FBQyw4QkFBOEIsRUFBRU8sS0FBS0MsU0FBUyxDQUFDVixNQUFNLFVBQVUsRUFBRVYsSUFBSWEsSUFBSSxDQUFDLENBQUM7SUFDaEc7SUFDQSxpRkFBaUY7SUFDakYsSUFBSVIsY0FBYztRQUNkVyxXQUFXSyxXQUFXLEdBQ2xCLENBQUNMLFdBQVdLLFdBQVcsR0FBRyxDQUFDLEVBQUVMLFdBQVdLLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFDLElBQ3REO0lBQ1o7SUFDQSwwRUFBMEU7SUFDMUUseUNBQXlDO0lBQ3pDLE1BQU1DLFNBQVNOLFdBQVdPLFVBQVUsQ0FBQ0MsV0FBVztJQUNoRCxNQUFNQyxPQUFPTixLQUFLQyxTQUFTLENBQUNKLFdBQVdVLElBQUk7SUFDM0MsTUFBTUMsTUFBTSxDQUFDLEVBQUUxQixTQUFTLEdBQUcsRUFBRUMsWUFBWSxDQUFDLEVBQUVDLFlBQVksQ0FBQyxFQUFFYSxXQUFXVyxHQUFHLENBQUNDLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxFQUFFWixXQUFXSyxXQUFXLENBQUMsQ0FBQztJQUN4SCxPQUFPO1FBQ0hDO1FBQ0FLO1FBQ0FyQjtRQUNBbUI7SUFDSjtBQUNKO0FBQ0EsU0FBUy9CLGVBQWVNLEdBQUcsRUFBRTZCLEVBQUUsRUFBRUMsUUFBUTtJQUNyQyxtRUFBbUU7SUFDbkUsTUFBTUMsZ0JBQWdCLElBQUlDLGNBQWNDLE1BQU0sQ0FBQ0g7SUFDL0MsTUFBTXBCLE9BQU9TLEtBQUtlLEtBQUssQ0FBQ0g7SUFDeEIsSUFBSSxDQUFDRixJQUFJO1FBQ0wsTUFBTU0sUUFBUXJDLGNBQWNzQyxXQUFXLENBQUNDLGNBQWMsQ0FBQzNCO1FBQ3ZELE1BQU15QjtJQUNWO0lBQ0EsTUFBTTVCLFVBQVVaLFdBQVcyQyxjQUFjLENBQUN0QyxJQUFJdUMsb0JBQW9CLEVBQUU3QjtJQUNwRSxJQUFJLENBQUNILFNBQVM7UUFDVixNQUFNLElBQUlLLE1BQU0sQ0FBQyxnQ0FBZ0MsRUFBRVosSUFBSWEsSUFBSSxDQUFDLENBQUM7SUFDakU7SUFDQSxPQUFPYixJQUFJdUMsb0JBQW9CLENBQUNDLFFBQVEsQ0FBQ2pDLFNBQVNWLFdBQVc0QyxzQkFBc0I7QUFDdkYsRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZmFsbGJhY2tSZXN0LmpzPzY0ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVuY29kZVJlcXVlc3QgPSBlbmNvZGVSZXF1ZXN0O1xuZXhwb3J0cy5kZWNvZGVSZXNwb25zZSA9IGRlY29kZVJlc3BvbnNlO1xuLy8gcHJvdG8tb3Zlci1IVFRQIHJlcXVlc3QgZW5jb2RpbmcgYW5kIGRlY29kaW5nXG5jb25zdCBzZXJpYWxpemVyID0gcmVxdWlyZShcInByb3RvMy1qc29uLXNlcmlhbGl6ZXJcIik7XG5jb25zdCBmYWxsYmFja18xID0gcmVxdWlyZShcIi4vZmFsbGJhY2tcIik7XG5jb25zdCBnb29nbGVFcnJvcl8xID0gcmVxdWlyZShcIi4vZ29vZ2xlRXJyb3JcIik7XG5jb25zdCB0cmFuc2NvZGluZ18xID0gcmVxdWlyZShcIi4vdHJhbnNjb2RpbmdcIik7XG5mdW5jdGlvbiBlbmNvZGVSZXF1ZXN0KHJwYywgcHJvdG9jb2wsIHNlcnZpY2VQYXRoLCBzZXJ2aWNlUG9ydCwgcmVxdWVzdCwgbnVtZXJpY0VudW1zKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICB9O1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBycGMucmVzb2x2ZWRSZXF1ZXN0VHlwZS5mcm9tT2JqZWN0KHJlcXVlc3QpO1xuICAgIGNvbnN0IGpzb24gPSBzZXJpYWxpemVyLnRvUHJvdG8zSlNPTihtZXNzYWdlLCB7XG4gICAgICAgIG51bWVyaWNFbnVtcyxcbiAgICB9KTtcbiAgICBpZiAoIWpzb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3Qgc2VuZCBudWxsIHJlcXVlc3QgdG8gUlBDICR7cnBjLm5hbWV9LmApO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGpzb24gIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoanNvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZXF1ZXN0IHRvIFJQQyAke3JwYy5uYW1lfSBtdXN0IGJlIGFuIG9iamVjdC5gKTtcbiAgICB9XG4gICAgY29uc3QgdHJhbnNjb2RlZCA9ICgwLCB0cmFuc2NvZGluZ18xLnRyYW5zY29kZSkoanNvbiwgcnBjLnBhcnNlZE9wdGlvbnMpO1xuICAgIGlmICghdHJhbnNjb2RlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBidWlsZCBIVFRQIHJlcXVlc3QgZm9yICR7SlNPTi5zdHJpbmdpZnkoanNvbil9LCBtZXRob2Q6ICR7cnBjLm5hbWV9YCk7XG4gICAgfVxuICAgIC8vIElmIG51bWVyaWMgZW51bXMgZmVhdHVyZSBpcyByZXF1ZXN0ZWQsIGFkZCBleHRyYSBwYXJhbWV0ZXIgdG8gdGhlIHF1ZXJ5IHN0cmluZ1xuICAgIGlmIChudW1lcmljRW51bXMpIHtcbiAgICAgICAgdHJhbnNjb2RlZC5xdWVyeVN0cmluZyA9XG4gICAgICAgICAgICAodHJhbnNjb2RlZC5xdWVyeVN0cmluZyA/IGAke3RyYW5zY29kZWQucXVlcnlTdHJpbmd9JmAgOiAnJykgK1xuICAgICAgICAgICAgICAgICckYWx0PWpzb24lM0JlbnVtLWVuY29kaW5nPWludCc7XG4gICAgfVxuICAgIC8vIENvbnZlcnRzIGh0dHBNZXRob2QgdG8gbWV0aG9kIHRoYXQgcGVybWl0dGVkIGluIHN0YW5kYXJkIEZldGNoIEFQSSBzcGVjXG4gICAgLy8gaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI21ldGhvZHNcbiAgICBjb25zdCBtZXRob2QgPSB0cmFuc2NvZGVkLmh0dHBNZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkodHJhbnNjb2RlZC5kYXRhKTtcbiAgICBjb25zdCB1cmwgPSBgJHtwcm90b2NvbH06Ly8ke3NlcnZpY2VQYXRofToke3NlcnZpY2VQb3J0fS8ke3RyYW5zY29kZWQudXJsLnJlcGxhY2UoL15cXC8vLCAnJyl9PyR7dHJhbnNjb2RlZC5xdWVyeVN0cmluZ31gO1xuICAgIHJldHVybiB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgdXJsLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgICBib2R5LFxuICAgIH07XG59XG5mdW5jdGlvbiBkZWNvZGVSZXNwb25zZShycGMsIG9rLCByZXNwb25zZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnNcbiAgICBjb25zdCBkZWNvZGVkU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHJlc3BvbnNlKTtcbiAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZShkZWNvZGVkU3RyaW5nKTtcbiAgICBpZiAoIW9rKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvci5wYXJzZUh0dHBFcnJvcihqc29uKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBzZXJpYWxpemVyLmZyb21Qcm90bzNKU09OKHJwYy5yZXNvbHZlZFJlc3BvbnNlVHlwZSwganNvbik7XG4gICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVjZWl2ZWQgbnVsbCByZXNwb25zZSBmcm9tIFJQQyAke3JwYy5uYW1lfWApO1xuICAgIH1cbiAgICByZXR1cm4gcnBjLnJlc29sdmVkUmVzcG9uc2VUeXBlLnRvT2JqZWN0KG1lc3NhZ2UsIGZhbGxiYWNrXzEuZGVmYXVsdFRvT2JqZWN0T3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWxsYmFja1Jlc3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW5jb2RlUmVxdWVzdCIsImRlY29kZVJlc3BvbnNlIiwic2VyaWFsaXplciIsInJlcXVpcmUiLCJmYWxsYmFja18xIiwiZ29vZ2xlRXJyb3JfMSIsInRyYW5zY29kaW5nXzEiLCJycGMiLCJwcm90b2NvbCIsInNlcnZpY2VQYXRoIiwic2VydmljZVBvcnQiLCJyZXF1ZXN0IiwibnVtZXJpY0VudW1zIiwiaGVhZGVycyIsIm1lc3NhZ2UiLCJyZXNvbHZlZFJlcXVlc3RUeXBlIiwiZnJvbU9iamVjdCIsImpzb24iLCJ0b1Byb3RvM0pTT04iLCJFcnJvciIsIm5hbWUiLCJBcnJheSIsImlzQXJyYXkiLCJ0cmFuc2NvZGVkIiwidHJhbnNjb2RlIiwicGFyc2VkT3B0aW9ucyIsIkpTT04iLCJzdHJpbmdpZnkiLCJxdWVyeVN0cmluZyIsIm1ldGhvZCIsImh0dHBNZXRob2QiLCJ0b1VwcGVyQ2FzZSIsImJvZHkiLCJkYXRhIiwidXJsIiwicmVwbGFjZSIsIm9rIiwicmVzcG9uc2UiLCJkZWNvZGVkU3RyaW5nIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJwYXJzZSIsImVycm9yIiwiR29vZ2xlRXJyb3IiLCJwYXJzZUh0dHBFcnJvciIsImZyb21Qcm90bzNKU09OIiwicmVzb2x2ZWRSZXNwb25zZVR5cGUiLCJ0b09iamVjdCIsImRlZmF1bHRUb09iamVjdE9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallbackServiceStub.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.generateServiceStub = generateServiceStub;\n/* global window */ /* global AbortController */ const node_fetch_1 = __webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\");\nconst abort_controller_1 = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nconst streamArrayParser_1 = __webpack_require__(/*! ./streamArrayParser */ \"(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nfunction generateServiceStub(rpcs, protocol, servicePath, servicePort, authClient, requestEncoder, responseDecoder, numericEnums) {\n    const fetch = (0, featureDetection_1.hasWindowFetch)() ? window.fetch : node_fetch_1.default;\n    const serviceStub = {\n        // close method should close all cancel controllers. If this feature request in the future, we can have a cancelControllerFactory that tracks created cancel controllers, and abort them all in close method.\n        close: ()=>{\n            return {\n                cancel: ()=>{}\n            };\n        }\n    };\n    for (const [rpcName, rpc] of Object.entries(rpcs)){\n        serviceStub[rpcName] = (request, options, _metadata, callback)=>{\n            options !== null && options !== void 0 ? options : options = {};\n            // We cannot use async-await in this function because we need to return the canceller object as soon as possible.\n            // Using plain old promises instead.\n            let fetchParameters;\n            try {\n                fetchParameters = requestEncoder(rpc, protocol, servicePath, servicePort, request, numericEnums);\n            } catch (err) {\n                // we could not encode parameters; pass error to the callback\n                // and return a no-op canceler object.\n                if (callback) {\n                    callback(err);\n                }\n                return {\n                    cancel () {}\n                };\n            }\n            const cancelController = (0, featureDetection_1.hasAbortController)() ? new AbortController() : new abort_controller_1.AbortController();\n            const cancelSignal = cancelController.signal;\n            let cancelRequested = false;\n            const url = fetchParameters.url;\n            const headers = fetchParameters.headers;\n            for (const key of Object.keys(options)){\n                headers[key] = options[key][0];\n            }\n            const streamArrayParser = new streamArrayParser_1.StreamArrayParser(rpc);\n            authClient.getRequestHeaders().then((authHeader)=>{\n                const fetchRequest = {\n                    headers: {\n                        ...authHeader,\n                        ...headers\n                    },\n                    body: fetchParameters.body,\n                    method: fetchParameters.method,\n                    signal: cancelSignal\n                };\n                if (fetchParameters.method === \"GET\" || fetchParameters.method === \"DELETE\") {\n                    delete fetchRequest[\"body\"];\n                }\n                return fetch(url, fetchRequest);\n            }).then((response)=>{\n                if (response.ok && rpc.responseStream) {\n                    (0, stream_1.pipeline)(response.body, streamArrayParser, (err)=>{\n                        if (err && (!cancelRequested || err instanceof Error && err.name !== \"AbortError\")) {\n                            if (callback) {\n                                callback(err);\n                            }\n                            streamArrayParser.emit(\"error\", err);\n                        }\n                    });\n                    return;\n                } else {\n                    return Promise.all([\n                        Promise.resolve(response.ok),\n                        response.arrayBuffer()\n                    ]).then(([ok, buffer])=>{\n                        const response = responseDecoder(rpc, ok, buffer);\n                        callback(null, response);\n                    }).catch((err)=>{\n                        if (!cancelRequested || err.name !== \"AbortError\") {\n                            if (rpc.responseStream) {\n                                if (callback) {\n                                    callback(err);\n                                }\n                                streamArrayParser.emit(\"error\", err);\n                            } else if (callback) {\n                                callback(err);\n                            } else {\n                                throw err;\n                            }\n                        }\n                    });\n                }\n            }).catch((err)=>{\n                if (rpc.responseStream) {\n                    if (callback) {\n                        callback(err);\n                    }\n                    streamArrayParser.emit(\"error\", err);\n                } else if (callback) {\n                    callback(err);\n                } else {\n                    throw err;\n                }\n            });\n            if (rpc.responseStream) {\n                return streamArrayParser;\n            }\n            return {\n                cancel: ()=>{\n                    cancelRequested = true;\n                    cancelController.abort();\n                }\n            };\n        };\n    }\n    return serviceStub;\n} //# sourceMappingURL=fallbackServiceStub.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/featureDetection.js":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/src/featureDetection.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ var _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hasWindowFetch = hasWindowFetch;\nexports.isNodeJS = isNodeJS;\nexports.hasAbortController = hasAbortController;\n/* global window */ const features = {\n    windowFetch:  false && 0,\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    textEncoder: typeof TextEncoder !== \"undefined\",\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    textDecoder: typeof TextDecoder !== \"undefined\",\n    nodeJS: typeof process !== \"undefined\" && ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node),\n    abortController: typeof AbortController !== \"undefined\"\n};\nfunction hasWindowFetch() {\n    return features.windowFetch;\n}\nfunction isNodeJS() {\n    return features.nodeJS;\n}\nfunction hasAbortController() {\n    return features.abortController;\n} //# sourceMappingURL=featureDetection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZmVhdHVyZURldGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ0QsSUFBSUE7QUFDSkMsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHRTtBQUN6QkYsZ0JBQWdCLEdBQUdHO0FBQ25CSCwwQkFBMEIsR0FBR0k7QUFDN0IsaUJBQWlCLEdBQ2pCLE1BQU1DLFdBQVc7SUFDYkMsYUFBYSxNQUNxRCxJQUM5RCxDQUEwRTtJQUM5RSxtRUFBbUU7SUFDbkVHLGFBQWEsT0FBT0MsZ0JBQWdCO0lBQ3BDLG1FQUFtRTtJQUNuRUMsYUFBYSxPQUFPQyxnQkFBZ0I7SUFDcENDLFFBQVEsT0FBT0MsWUFBWSxlQUFnQixFQUFDakIsS0FBS2lCLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRQyxRQUFRLE1BQU0sUUFBUWxCLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR21CLElBQUk7SUFDaktDLGlCQUFpQixPQUFPQyxvQkFBb0I7QUFDaEQ7QUFDQSxTQUFTaEI7SUFDTCxPQUFPRyxTQUFTQyxXQUFXO0FBQy9CO0FBQ0EsU0FBU0g7SUFDTCxPQUFPRSxTQUFTUSxNQUFNO0FBQzFCO0FBQ0EsU0FBU1Q7SUFDTCxPQUFPQyxTQUFTWSxlQUFlO0FBQ25DLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2ZlYXR1cmVEZXRlY3Rpb24uanM/ZjBjYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfYTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzV2luZG93RmV0Y2ggPSBoYXNXaW5kb3dGZXRjaDtcbmV4cG9ydHMuaXNOb2RlSlMgPSBpc05vZGVKUztcbmV4cG9ydHMuaGFzQWJvcnRDb250cm9sbGVyID0gaGFzQWJvcnRDb250cm9sbGVyO1xuLyogZ2xvYmFsIHdpbmRvdyAqL1xuY29uc3QgZmVhdHVyZXMgPSB7XG4gICAgd2luZG93RmV0Y2g6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICh3aW5kb3cgPT09IG51bGwgfHwgd2luZG93ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW5kb3cuZmV0Y2gpICYmXG4gICAgICAgIHR5cGVvZiAod2luZG93ID09PSBudWxsIHx8IHdpbmRvdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2luZG93LmZldGNoKSA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbi9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXG4gICAgdGV4dEVuY29kZXI6IHR5cGVvZiBUZXh0RW5jb2RlciAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG4vbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xuICAgIHRleHREZWNvZGVyOiB0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnLFxuICAgIG5vZGVKUzogdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICgoX2EgPSBwcm9jZXNzID09PSBudWxsIHx8IHByb2Nlc3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb2Nlc3MudmVyc2lvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub2RlKSxcbiAgICBhYm9ydENvbnRyb2xsZXI6IHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgIT09ICd1bmRlZmluZWQnLFxufTtcbmZ1bmN0aW9uIGhhc1dpbmRvd0ZldGNoKCkge1xuICAgIHJldHVybiBmZWF0dXJlcy53aW5kb3dGZXRjaDtcbn1cbmZ1bmN0aW9uIGlzTm9kZUpTKCkge1xuICAgIHJldHVybiBmZWF0dXJlcy5ub2RlSlM7XG59XG5mdW5jdGlvbiBoYXNBYm9ydENvbnRyb2xsZXIoKSB7XG4gICAgcmV0dXJuIGZlYXR1cmVzLmFib3J0Q29udHJvbGxlcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZlYXR1cmVEZXRlY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbIl9hIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJoYXNXaW5kb3dGZXRjaCIsImlzTm9kZUpTIiwiaGFzQWJvcnRDb250cm9sbGVyIiwiZmVhdHVyZXMiLCJ3aW5kb3dGZXRjaCIsIndpbmRvdyIsImZldGNoIiwidGV4dEVuY29kZXIiLCJUZXh0RW5jb2RlciIsInRleHREZWNvZGVyIiwiVGV4dERlY29kZXIiLCJub2RlSlMiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJub2RlIiwiYWJvcnRDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/featureDetection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/gax.js":
/*!**************************************************!*\
  !*** ./node_modules/google-gax/build/src/gax.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CallSettings = exports.RetryOptions = void 0;\nexports.convertRetryOptions = convertRetryOptions;\nexports.createRetryOptions = createRetryOptions;\nexports.createBackoffSettings = createBackoffSettings;\nexports.createDefaultBackoffSettings = createDefaultBackoffSettings;\nexports.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;\nexports.createBundleOptions = createBundleOptions;\nexports.constructSettings = constructSettings;\nexports.createByteLengthFunction = createByteLengthFunction;\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\n/**\n * Encapsulates the overridable settings for a particular API call.\n *\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\n * configure the settings of a specific API call.\n *\n * When provided, its values override the GAX service defaults for that\n * particular call.\n *\n * Typically the API clients will accept this as the second to the last\n * argument. See the examples below.\n * @typedef {Object} CallOptions\n * @property {number=} timeout - The client-side timeout for API calls.\n * @property {RetryOptions=} retry - determines whether and how to retry\n *   on transient errors. When set to null, the call will not retry.\n * @property {boolean=} autoPaginate - If set to false and the call is\n *   configured for paged iteration, page unrolling is not performed, instead\n *   the callback will be called with the response object.\n * @property {Object=} pageToken - If set and the call is configured for\n *   paged iteration, paged iteration is not performed and requested with this\n *   pageToken.\n * @property {number} maxResults - If set and the call is configured for\n *   paged iteration, the call will stop when the number of response elements\n *   reaches to the specified size. By default, it will unroll the page to\n *   the end of the list.\n * @property {boolean=} isBundling - If set to false and the call is configured\n *   for bundling, bundling is not performed.\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\n * @example\n * // suppress bundling for bundled method.\n * api.bundlingMethod(\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\n *   // handle response.\n * });\n * @example\n * // suppress streaming for page-streaming method.\n * api.pageStreamingMethod(\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\n *   // not returning a stream, but callback is called with the paged response.\n * });\n */ /**\n * Per-call configurable settings for retrying upon transient failure.\n * @implements {RetryOptionsType}\n * @typedef {Object} RetryOptions\n * @property {number[]} retryCodes\n * @property {BackoffSettings} backoffSettings\n * @property {(function)} shouldRetryFn\n * @property {(function)} getResumptionRequestFn\n */ class RetryOptions {\n    constructor(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn){\n        this.retryCodes = retryCodes;\n        this.backoffSettings = backoffSettings;\n        this.shouldRetryFn = shouldRetryFn;\n        this.getResumptionRequestFn = getResumptionRequestFn;\n    }\n}\nexports.RetryOptions = RetryOptions;\nclass CallSettings {\n    /**\n     * @param {Object} settings - An object containing parameters of this settings.\n     * @param {number} settings.timeout - The client-side timeout for API calls.\n     *   This parameter is ignored for retrying calls.\n     * @param {RetryOptions} settings.retry - The configuration for retrying upon\n     *   transient error. If set to null, this call will not retry.\n     * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\n     *   this attrbute has no meaning. Otherwise, determines whether a page\n     * streamed response should make the page structure transparent to the user by\n     *   flattening the repeated field in the returned generator.\n     * @param {number} settings.pageToken - If there is no `pageDescriptor`,\n     *   this attribute has no meaning. Otherwise, determines the page token used\n     * in the page streaming request.\n     * @param {Object} settings.otherArgs - Additional arguments to be passed to\n     *   the API calls.\n     *\n     * @constructor\n     */ constructor(settings){\n        var _a;\n        settings = settings || {};\n        this.timeout = settings.timeout || 30 * 1000;\n        this.retry = settings.retry;\n        this.autoPaginate = \"autoPaginate\" in settings ? settings.autoPaginate : true;\n        this.maxResults = settings.maxResults;\n        this.otherArgs = settings.otherArgs || {};\n        this.bundleOptions = settings.bundleOptions;\n        this.isBundling = \"isBundling\" in settings ? settings.isBundling : true;\n        this.longrunning = \"longrunning\" in settings ? settings.longrunning : undefined;\n        this.apiName = (_a = settings.apiName) !== null && _a !== void 0 ? _a : undefined;\n        this.retryRequestOptions = settings.retryRequestOptions;\n    }\n    /**\n     * Returns a new CallSettings merged from this and a CallOptions object.\n     *\n     * @param {CallOptions} options - an instance whose values override\n     *   those in this object. If null, ``merge`` returns a copy of this\n     *   object\n     * @return {CallSettings} The merged CallSettings instance.\n     */ merge(options) {\n        if (!options) {\n            return new CallSettings(this);\n        }\n        let timeout = this.timeout;\n        let retry = this.retry;\n        let autoPaginate = this.autoPaginate;\n        let maxResults = this.maxResults;\n        let otherArgs = this.otherArgs;\n        let isBundling = this.isBundling;\n        let longrunning = this.longrunning;\n        let apiName = this.apiName;\n        let retryRequestOptions = this.retryRequestOptions;\n        // If the user provides a timeout to the method, that timeout value will be used\n        // to override the backoff settings.\n        if (\"timeout\" in options) {\n            timeout = options.timeout;\n        }\n        // If a method-specific timeout is set in the service config, and the retry codes for that\n        // method are non-null, then that timeout value will be used to\n        // override backoff settings.\n        if (retry === null || retry === void 0 ? void 0 : retry.retryCodes) {\n            retry.backoffSettings.initialRpcTimeoutMillis = timeout;\n            retry.backoffSettings.maxRpcTimeoutMillis = timeout;\n            retry.backoffSettings.totalTimeoutMillis = timeout;\n        }\n        if (\"retry\" in options) {\n            retry = mergeRetryOptions(retry || {}, options.retry);\n        }\n        if (\"autoPaginate\" in options && !options.autoPaginate) {\n            autoPaginate = false;\n        }\n        if (\"maxResults\" in options) {\n            maxResults = options.maxResults;\n        }\n        if (\"otherArgs\" in options) {\n            otherArgs = {};\n            for(const key in this.otherArgs){\n                otherArgs[key] = this.otherArgs[key];\n            }\n            for(const optionsKey in options.otherArgs){\n                otherArgs[optionsKey] = options.otherArgs[optionsKey];\n            }\n        }\n        if (\"isBundling\" in options) {\n            isBundling = options.isBundling;\n        }\n        if (\"maxRetries\" in options && options.maxRetries !== undefined) {\n            retry.backoffSettings.maxRetries = options.maxRetries;\n            delete retry.backoffSettings.totalTimeoutMillis;\n        }\n        if (\"longrunning\" in options) {\n            longrunning = options.longrunning;\n        }\n        if (\"apiName\" in options) {\n            apiName = options.apiName;\n        }\n        if (\"retryRequestOptions\" in options) {\n            retryRequestOptions = options.retryRequestOptions;\n        }\n        return new CallSettings({\n            timeout,\n            retry,\n            bundleOptions: this.bundleOptions,\n            longrunning,\n            autoPaginate,\n            maxResults,\n            otherArgs,\n            isBundling,\n            apiName,\n            retryRequestOptions\n        });\n    }\n}\nexports.CallSettings = CallSettings;\n/**\n * Validates passed retry options in preparation for eventual parameter deprecation\n * converts retryRequestOptions to retryOptions\n * then sets retryRequestOptions to null\n *\n * @param {CallOptions} options - a list of passed retry option\n * @return {CallOptions} A new CallOptions object.\n *\n */ function convertRetryOptions(options, gaxStreamingRetries) {\n    var _a, _b, _c, _d;\n    // options will be undefined if no CallOptions object is passed at call time\n    if (!options) {\n        return options;\n    }\n    // if a user provided retry AND retryRequestOptions at call time, throw an error\n    // otherwise, convert supported parameters\n    if (!gaxStreamingRetries) {\n        return options;\n    }\n    if (options.retry && options.retryRequestOptions) {\n        throw new Error(\"Only one of retry or retryRequestOptions may be set\");\n    } // handles parameter conversion from retryRequestOptions to retryOptions\n    if (options.retryRequestOptions) {\n        if (options.retryRequestOptions.objectMode !== undefined) {\n            (0, warnings_1.warn)(\"retry_request_options\", \"objectMode override is not supported. It is set to true internally by default in gax.\", \"UnsupportedParameterWarning\");\n        }\n        if (options.retryRequestOptions.noResponseRetries !== undefined) {\n            (0, warnings_1.warn)(\"retry_request_options\", \"noResponseRetries override is not supported. Please specify retry codes or a function to determine retry eligibility.\", \"UnsupportedParameterWarning\");\n        }\n        if (options.retryRequestOptions.currentRetryAttempt !== undefined) {\n            (0, warnings_1.warn)(\"retry_request_options\", \"currentRetryAttempt override is not supported. Retry attempts are tracked internally.\", \"UnsupportedParameterWarning\");\n        }\n        let retryCodes = [\n            status_1.Status.UNAVAILABLE\n        ];\n        let shouldRetryFn;\n        if (options.retryRequestOptions.shouldRetryFn) {\n            retryCodes = [];\n            shouldRetryFn = options.retryRequestOptions.shouldRetryFn;\n        }\n        //Backoff settings\n        options.maxRetries = (_b = (_a = options === null || options === void 0 ? void 0 : options.retryRequestOptions) === null || _a === void 0 ? void 0 : _a.retries) !== null && _b !== void 0 ? _b : options.maxRetries;\n        // create a default backoff settings object in case the user didn't provide overrides for everything\n        const backoffSettings = createDefaultBackoffSettings();\n        let maxRetryDelayMillis;\n        let totalTimeoutMillis;\n        // maxRetryDelay - this is in seconds, need to convert to milliseconds\n        if (options.retryRequestOptions.maxRetryDelay !== undefined) {\n            maxRetryDelayMillis = options.retryRequestOptions.maxRetryDelay * 1000;\n        }\n        // retryDelayMultiplier - should be a one to one mapping to retryDelayMultiplier\n        const retryDelayMultiplier = (_d = (_c = options === null || options === void 0 ? void 0 : options.retryRequestOptions) === null || _c === void 0 ? void 0 : _c.retryDelayMultiplier) !== null && _d !== void 0 ? _d : backoffSettings.retryDelayMultiplier;\n        // this is in seconds and needs to be converted to milliseconds and the totalTimeoutMillis parameter\n        if (options.retryRequestOptions.totalTimeout !== undefined) {\n            totalTimeoutMillis = options.retryRequestOptions.totalTimeout * 1000;\n        }\n        // for the variables the user wants to override, override in the backoff settings object we made\n        backoffSettings.maxRetryDelayMillis = maxRetryDelayMillis !== null && maxRetryDelayMillis !== void 0 ? maxRetryDelayMillis : backoffSettings.maxRetryDelayMillis;\n        backoffSettings.retryDelayMultiplier = retryDelayMultiplier !== null && retryDelayMultiplier !== void 0 ? retryDelayMultiplier : backoffSettings.retryDelayMultiplier;\n        backoffSettings.totalTimeoutMillis = totalTimeoutMillis !== null && totalTimeoutMillis !== void 0 ? totalTimeoutMillis : backoffSettings.totalTimeoutMillis;\n        const convertedRetryOptions = createRetryOptions(retryCodes, backoffSettings, shouldRetryFn);\n        options.retry = convertedRetryOptions;\n        delete options.retryRequestOptions; // completely remove them to avoid any further confusion\n        (0, warnings_1.warn)(\"retry_request_options\", \"retryRequestOptions will be deprecated in a future release. Please use retryOptions to pass retry options at call time\", \"DeprecationWarning\");\n    }\n    return options;\n}\n/**\n * Per-call configurable settings for retrying upon transient failure.\n * @param {number[]} retryCodes - a list of Google API canonical error codes OR a function that returns a boolean to determine retry behavior\n *   upon which a retry should be attempted.\n * @param {BackoffSettings} backoffSettings - configures the retry\n *   exponential backoff algorithm.\n * @param {function} shouldRetryFn - a function that determines whether a call should retry. If this is defined retryCodes must be empty\n * @param {function} getResumptionRequestFn - a function with a resumption strategy - only used with server streaming retries\n * @return {RetryOptions} A new RetryOptions object.\n *\n */ function createRetryOptions(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn) {\n    return {\n        retryCodes,\n        backoffSettings,\n        shouldRetryFn,\n        getResumptionRequestFn\n    };\n}\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\n *   starting from when the initial request is sent, after which an error will\n *   be returned, regardless of the retrying attempts made meanwhile.\n * @return {BackoffSettings} a new settings.\n *\n */ function createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {\n    return {\n        initialRetryDelayMillis,\n        retryDelayMultiplier,\n        maxRetryDelayMillis,\n        initialRpcTimeoutMillis,\n        rpcTimeoutMultiplier,\n        maxRpcTimeoutMillis,\n        totalTimeoutMillis\n    };\n}\nfunction createDefaultBackoffSettings() {\n    return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n}\n/**\n * Parameters to the exponential backoff algorithm for retrying.\n * This function is unsupported, and intended for internal use only.\n *\n * @param {number} initialRetryDelayMillis - the initial delay time,\n *   in milliseconds, between the completion of the first failed request and the\n *   initiation of the first retrying request.\n * @param {number} retryDelayMultiplier - the multiplier by which to\n *   increase the delay time between the completion of failed requests, and the\n *   initiation of the subsequent retrying request.\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\n *   milliseconds, between requests. When this value is reached,\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\n *   to the request.\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\n *   increase the timeout parameter between failed requests.\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\n *   milliseconds, for a request. When this value is reached,\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\n * @param {number} maxRetries - the maximum number of retrying attempts that\n *   will be made. If reached, an error will be returned.\n * @return {BackoffSettings} a new settings.\n *\n */ function createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {\n    return {\n        initialRetryDelayMillis,\n        retryDelayMultiplier,\n        maxRetryDelayMillis,\n        initialRpcTimeoutMillis,\n        rpcTimeoutMultiplier,\n        maxRpcTimeoutMillis,\n        maxRetries\n    };\n}\n/**\n * Creates a new {@link BundleOptions}.\n *\n * @private\n * @param {Object} options - An object to hold optional parameters. See\n *   properties for the content of options.\n * @return {BundleOptions} - A new options.\n */ function createBundleOptions(options) {\n    const params = [\n        \"element_count_threshold\",\n        \"element_count_limit\",\n        \"request_byte_threshold\",\n        \"request_byte_limit\",\n        \"delay_threshold_millis\"\n    ];\n    params.forEach((param)=>{\n        if (param in options && typeof options[param] !== \"number\") {\n            throw new Error(`${param} should be a number`);\n        }\n    });\n    const elementCountThreshold = options.element_count_threshold || 0;\n    const elementCountLimit = options.element_count_limit || 0;\n    const requestByteThreshold = options.request_byte_threshold || 0;\n    const requestByteLimit = options.request_byte_limit || 0;\n    const delayThreshold = options.delay_threshold_millis || 0;\n    if (elementCountThreshold === 0 && requestByteThreshold === 0 && delayThreshold === 0) {\n        throw new Error(\"one threshold should be > 0\");\n    }\n    return {\n        elementCountThreshold,\n        elementCountLimit,\n        requestByteThreshold,\n        requestByteLimit,\n        delayThreshold\n    };\n}\n/**\n * Helper for {@link constructSettings}\n *\n * @private\n *\n * @param {Object} methodConfig - A dictionary representing a single\n *   `methods` entry of the standard API client config file. (See\n *   {@link constructSettings} for information on this yaml.)\n * @param {?Object} retryCodes - A dictionary parsed from the\n *   `retry_codes_def` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryParams - A dictionary parsed from the\n *   `retry_params` entry of the standard API client config\n *   file. (See {@link constructSettings} for information on this yaml.)\n * @param {Object} retryNames - A dictionary mapping the string names\n *   used in the standard API client config file to API response\n *   status codes.\n * @return {?RetryOptions} The new retry options.\n */ function constructRetry(methodConfig, retryCodes, retryParams, retryNames) {\n    if (!methodConfig) {\n        return null;\n    }\n    let codes = null; // this is one instance where it will NOT be an array OR a function because we do not allow shouldRetryFn in the client\n    if (retryCodes && \"retry_codes_name\" in methodConfig) {\n        const retryCodesName = methodConfig[\"retry_codes_name\"];\n        codes = (retryCodes[retryCodesName] || []).map((name)=>{\n            return Number(retryNames[name]);\n        });\n    }\n    let backoffSettings = null;\n    if (retryParams && \"retry_params_name\" in methodConfig) {\n        const params = retryParams[methodConfig.retry_params_name];\n        backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);\n    }\n    return createRetryOptions(codes, backoffSettings);\n}\n/**\n * Helper for {@link constructSettings}\n *\n * Takes two retry options, and merges them into a single RetryOption instance.\n *\n * @private\n *\n * @param {RetryOptions} retry - The base RetryOptions.\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\n *   ignore the base retry and return null.\n * @return {?RetryOptions} The merged RetryOptions.\n */ function mergeRetryOptions(retry, overrides) {\n    if (!overrides) {\n        return null;\n    }\n    if (!overrides.retryCodes && !overrides.backoffSettings && !overrides.shouldRetryFn && !overrides.getResumptionRequestFn) {\n        return retry;\n    }\n    const retryCodes = overrides.retryCodes ? overrides.retryCodes : retry.retryCodes;\n    const backoffSettings = overrides.backoffSettings ? overrides.backoffSettings : retry.backoffSettings;\n    const shouldRetryFn = overrides.shouldRetryFn ? overrides.shouldRetryFn : retry.shouldRetryFn;\n    const getResumptionRequestFn = overrides.getResumptionRequestFn ? overrides.getResumptionRequestFn : retry.getResumptionRequestFn;\n    return createRetryOptions(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn);\n}\n/**\n * Constructs a dictionary mapping method names to {@link CallSettings}.\n *\n * The `clientConfig` parameter is parsed from a client configuration JSON\n * file of the form:\n *\n *     {\n *       \"interfaces\": {\n *         \"google.fake.v1.ServiceName\": {\n *           \"retry_codes\": {\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\n *             \"non_idempotent\": []\n *           },\n *           \"retry_params\": {\n *             \"default\": {\n *               \"initial_retry_delay_millis\": 100,\n *               \"retry_delay_multiplier\": 1.2,\n *               \"max_retry_delay_millis\": 1000,\n *               \"initial_rpc_timeout_millis\": 2000,\n *               \"rpc_timeout_multiplier\": 1.5,\n *               \"max_rpc_timeout_millis\": 30000,\n *               \"total_timeout_millis\": 45000\n *             }\n *           },\n *           \"methods\": {\n *             \"CreateFoo\": {\n *               \"retry_codes_name\": \"idempotent\",\n *               \"retry_params_name\": \"default\"\n *             },\n *             \"Publish\": {\n *               \"retry_codes_name\": \"non_idempotent\",\n *               \"retry_params_name\": \"default\",\n *               \"bundling\": {\n *                 \"element_count_threshold\": 40,\n *                 \"element_count_limit\": 200,\n *                 \"request_byte_threshold\": 90000,\n *                 \"request_byte_limit\": 100000,\n *                 \"delay_threshold_millis\": 100\n *               }\n *             }\n *           }\n *         }\n *       }\n *     }\n *\n * @param {String} serviceName - The fully-qualified name of this\n *   service, used as a key into the client config file (in the\n *   example above, this value should be 'google.fake.v1.ServiceName').\n * @param {Object} clientConfig - A dictionary parsed from the\n *   standard API client config file.\n * @param {Object} configOverrides - A dictionary in the same structure of\n *   client_config to override the settings.\n * @param {Object.<string, string[]>} retryNames - A dictionary mapping the strings\n *   referring to response status codes to objects representing\n *   those codes.\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\n *   calls.\n * @return {Object} A mapping from method name to CallSettings, or null if the\n *   service is not found in the config.\n */ function constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs) {\n    otherArgs = otherArgs || {};\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const defaults = {};\n    const serviceConfig = (clientConfig.interfaces || {})[serviceName];\n    if (!serviceConfig) {\n        return null;\n    }\n    // users can override the config from client side, like bundling options.\n    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/main/src/gax.ts#L546\n    // The way to override bundling options:\n    //\n    // const customConfig = {\"interfaces\": {\"service\": {\"methods\": {\"methodName\": {\"bundling\": {..}}}}}}\n    // const client = new Client({ projectId, customConfig });\n    const overrides = (configOverrides.interfaces || {})[serviceName] || {};\n    const methods = serviceConfig.methods;\n    const overridingMethods = overrides.methods || {};\n    for(const methodName in methods){\n        const methodConfig = methods[methodName];\n        const jsName = (0, util_1.toLowerCamelCase)(methodName);\n        let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);\n        let bundlingConfig = methodConfig.bundling;\n        let timeout = methodConfig.timeout_millis;\n        if (methodName in overridingMethods) {\n            const overridingMethod = overridingMethods[methodName];\n            if (overridingMethod) {\n                if (\"bundling\" in overridingMethod) {\n                    bundlingConfig = overridingMethod.bundling;\n                }\n                if (\"timeout_millis\" in overridingMethod) {\n                    timeout = overridingMethod.timeout_millis;\n                }\n            }\n            retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));\n        }\n        const apiName = serviceName;\n        defaults[jsName] = new CallSettings({\n            timeout,\n            retry,\n            bundleOptions: bundlingConfig ? createBundleOptions(bundlingConfig) : null,\n            otherArgs,\n            apiName\n        });\n    }\n    return defaults;\n}\nfunction createByteLengthFunction(message) {\n    return function getByteLength(obj) {\n        try {\n            return message.encode(obj).finish().length;\n        } catch (err) {\n            const stringified = JSON.stringify(obj);\n            (0, warnings_1.warn)(\"error_encoding_protobufjs_object\", `Cannot encode protobuf.js object: ${stringified}: ${err}`);\n            // We failed to encode the object properly, let's just return an upper boundary of its length.\n            // It's only needed for calculating the size of the batch, so it's safe if it's bigger than needed.\n            return stringified.length;\n        }\n    };\n} //# sourceMappingURL=gax.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/gax.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/googleError.js":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/src/googleError.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst protobuf = __webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\");\nconst serializer = __webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\");\nconst fallback_1 = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\nclass GoogleError extends Error {\n    // Parse details field in google.rpc.status wire over gRPC medatadata.\n    // Promote google.rpc.ErrorInfo if exist.\n    static parseGRPCStatusDetails(err) {\n        const decoder = new GoogleErrorDecoder();\n        try {\n            if (err.metadata && err.metadata.get(\"grpc-status-details-bin\")) {\n                const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get(\"grpc-status-details-bin\"));\n                if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {\n                    err.statusDetails = statusDetailsObj.details;\n                }\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\n                    err.reason = statusDetailsObj.errorInfo.reason;\n                    err.domain = statusDetailsObj.errorInfo.domain;\n                    err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n                }\n            }\n        } catch (decodeErr) {\n        // ignoring the error\n        }\n        return err;\n    }\n    // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static parseHttpError(json) {\n        if (Array.isArray(json)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            json = json.find((obj)=>{\n                return \"error\" in obj;\n            });\n        }\n        // fallback logic.\n        // related issue: https://github.com/googleapis/gax-nodejs/issues/1303\n        // google error mapping: https://cloud.google.com/apis/design/errors\n        // if input json doesn't have 'error' fields, wrap the whole object with 'error' field\n        if (!json[\"error\"]) {\n            json[\"error\"] = {};\n            Object.keys(json).filter((key)=>key !== \"error\").forEach((key)=>{\n                json[\"error\"][key] = json[key];\n                delete json[key];\n            });\n        }\n        const decoder = new GoogleErrorDecoder();\n        const proto3Error = decoder.decodeHTTPError(json[\"error\"]);\n        const error = Object.assign(new GoogleError(json[\"error\"][\"message\"]), proto3Error);\n        // Map Http Status Code to gRPC Status Code\n        if (json[\"error\"][\"code\"]) {\n            error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json[\"error\"][\"code\"]);\n        } else {\n            // If error code is absent, proto3 message default value is 0. We should\n            // keep error code as undefined.\n            delete error.code;\n        }\n        // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n        // Rename \"details\" to \"statusDetails\".\n        if (error.details) {\n            try {\n                const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);\n                if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {\n                    error.statusDetails = statusDetailsObj.details;\n                }\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\n                    error.reason = statusDetailsObj.errorInfo.reason;\n                    error.domain = statusDetailsObj.errorInfo.domain;\n                    // error.metadata has been occupied for gRPC metadata, so we use\n                    // errorInfoMetadata to represent ErrorInfo' metadata field. Keep\n                    // consistency with gRPC ErrorInfo metadata field name.\n                    error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n                }\n            } catch (decodeErr) {\n            // ignoring the error\n            }\n        }\n        return error;\n    }\n}\nexports.GoogleError = GoogleError;\nclass GoogleErrorDecoder {\n    constructor(){\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const errorProtoJson = __webpack_require__(/*! ../../build/protos/status.json */ \"(rsc)/./node_modules/google-gax/build/protos/status.json\");\n        this.root = protobuf.Root.fromJSON(errorProtoJson);\n        this.anyType = this.root.lookupType(\"google.protobuf.Any\");\n        this.statusType = this.root.lookupType(\"google.rpc.Status\");\n    }\n    decodeProtobufAny(anyValue) {\n        const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n        if (!match) {\n            throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n        }\n        const typeName = match[1];\n        const type = this.root.lookupType(typeName);\n        if (!type) {\n            throw new Error(`Cannot lookup type ${typeName}`);\n        }\n        return type.decode(anyValue.value);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n    decodeRpcStatus(buffer) {\n        const uint8array = new Uint8Array(buffer);\n        const status = this.statusType.decode(uint8array);\n        // google.rpc.Status contains an array of google.protobuf.Any\n        // which need a special treatment\n        const details = [];\n        let errorInfo;\n        for (const detail of status.details){\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n                if (detail.type_url === \"type.googleapis.com/google.rpc.ErrorInfo\") {\n                    errorInfo = decodedDetail;\n                }\n            } catch (err) {\n            // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        const result = {\n            code: status.code,\n            message: status.message,\n            statusDetails: details,\n            reason: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.reason,\n            domain: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.domain,\n            errorInfoMetadata: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.metadata\n        };\n        return result;\n    }\n    // Construct an Error from a StatusObject.\n    // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n    callErrorFromStatus(status) {\n        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n        return Object.assign(new GoogleError(status.message), status);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n    // and puts it into the object similar to gRPC ServiceError object.\n    decodeErrorFromBuffer(buffer) {\n        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n    }\n    // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n    decodeGRPCStatusDetails(bufferArr) {\n        const details = [];\n        let errorInfo;\n        bufferArr.forEach((buffer)=>{\n            const uint8array = new Uint8Array(buffer);\n            const rpcStatus = this.statusType.decode(uint8array);\n            for (const detail of rpcStatus.details){\n                try {\n                    const decodedDetail = this.decodeProtobufAny(detail);\n                    details.push(decodedDetail);\n                    if (detail.type_url === \"type.googleapis.com/google.rpc.ErrorInfo\") {\n                        errorInfo = decodedDetail;\n                    }\n                } catch (err) {\n                // cannot decode detail, likely because of the unknown type - just skip it\n                }\n            }\n        });\n        const result = {\n            details,\n            errorInfo\n        };\n        return result;\n    }\n    // Decodes http error which is an instance of google.rpc.Status.\n    decodeHTTPError(json) {\n        const errorMessage = serializer.fromProto3JSON(this.statusType, json);\n        if (!errorMessage) {\n            throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);\n        }\n        return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);\n    }\n    // Decodes http error details which is an instance of Array<google.protobuf.Any>.\n    decodeHttpStatusDetails(rawDetails) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const details = [];\n        let errorInfo;\n        for (const detail of rawDetails){\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n                if (detail.type_url === \"type.googleapis.com/google.rpc.ErrorInfo\") {\n                    errorInfo = decodedDetail;\n                }\n            } catch (err) {\n            // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        return {\n            details,\n            errorInfo\n        };\n    }\n}\nexports.GoogleErrorDecoder = GoogleErrorDecoder; //# sourceMappingURL=googleError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/googleError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/grpc.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/grpc.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GoogleProtoFilesRoot = exports.GrpcClient = exports.ClientStub = void 0;\nconst grpcProtoLoader = __webpack_require__(/*! @grpc/proto-loader */ \"(rsc)/./node_modules/@grpc/proto-loader/build/src/index.js\");\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nconst grpc = __webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst path_1 = __webpack_require__(/*! path */ \"path\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst protobuf = __webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\");\nconst objectHash = __webpack_require__(/*! object-hash */ \"(rsc)/./node_modules/object-hash/index.js\");\nconst gax = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst googleProtoFilesDir = path.join(__dirname, \"..\", \"..\", \"build\", \"protos\");\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst commonProtoFiles = __webpack_require__(/*! ./protosList.json */ \"(rsc)/./node_modules/google-gax/build/src/protosList.json\");\n// use the correct path separator for the OS we are running on\nconst COMMON_PROTO_FILES = commonProtoFiles.map((file)=>file.replace(/[/\\\\]/g, path.sep));\n/*\n * Async version of readFile.\n *\n * @returns {Promise} Contents of file at path.\n */ async function readFileAsync(path) {\n    return new Promise((resolve, reject)=>{\n        fs.readFile(path, \"utf8\", (err, content)=>{\n            if (err) return reject(err);\n            else resolve(content);\n        });\n    });\n}\n/*\n * Async version of execFile.\n *\n * @returns {Promise} stdout from command execution.\n */ async function execFileAsync(command, args) {\n    return new Promise((resolve, reject)=>{\n        (0, child_process_1.execFile)(command, args, (err, stdout)=>{\n            if (err) return reject(err);\n            else resolve(stdout);\n        });\n    });\n}\nclass ClientStub extends grpc.Client {\n}\nexports.ClientStub = ClientStub;\nclass GrpcClient {\n    /**\n     * Key for proto cache map. We are doing our best to make sure we respect\n     * the options, so if the same proto file is loaded with different set of\n     * options, the cache won't be used.  Since some of the options are\n     * Functions (e.g. `enums: String` - see below in `loadProto()`),\n     * they will be omitted from the cache key.  If the cache breaks anything\n     * for you, use the `ignoreCache` parameter of `loadProto()` to disable it.\n     */ static protoCacheKey(filename, options) {\n        if (!filename || Array.isArray(filename) && (filename.length === 0 || !filename[0])) {\n            return undefined;\n        }\n        return JSON.stringify(filename) + \" \" + JSON.stringify(options);\n    }\n    /**\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\n     * This method will delete the proto cache content.\n     */ static clearProtoCache() {\n        GrpcClient.protoCache.clear();\n    }\n    /**\n     * A class which keeps the context of gRPC and auth for the gRPC.\n     *\n     * @param {Object=} options - The optional parameters. It will be directly\n     *   passed to google-auth-library library, so parameters like keyFile or\n     *   credentials will be valid.\n     * @param {Object=} options.auth - An instance of google-auth-library.\n     *   When specified, this auth instance will be used instead of creating\n     *   a new one.\n     * @param {Object=} options.grpc - When specified, this will be used\n     *   for the 'grpc' module in this context. By default, it will load the grpc\n     *   module in the standard way.\n     * @constructor\n     */ constructor(options = {}){\n        var _a;\n        this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n        this.fallback = false;\n        const minimumVersion = 10;\n        const major = Number((_a = process.version.match(/^v(\\d+)/)) === null || _a === void 0 ? void 0 : _a[1]);\n        if (Number.isNaN(major) || major < minimumVersion) {\n            const errorMessage = `Node.js v${minimumVersion}.0.0 is a minimum requirement. To learn about legacy version support visit: ` + \"https://github.com/googleapis/google-cloud-node#supported-nodejs-versions\";\n            throw new Error(errorMessage);\n        }\n        if (\"grpc\" in options) {\n            this.grpc = options.grpc;\n            this.grpcVersion = \"\";\n        } else {\n            this.grpc = grpc;\n            this.grpcVersion = (__webpack_require__(/*! @grpc/grpc-js/package.json */ \"(rsc)/./node_modules/@grpc/grpc-js/package.json\").version);\n        }\n    }\n    /**\n     * Creates a gRPC credentials. It asks the auth data if necessary.\n     * @private\n     * @param {Object} opts - options values for configuring credentials.\n     * @param {Object=} opts.sslCreds - when specified, this is used instead\n     *   of default channel credentials.\n     * @return {Promise} The promise which will be resolved to the gRPC credential.\n     */ async _getCredentials(opts) {\n        if (opts.sslCreds) {\n            return opts.sslCreds;\n        }\n        const grpc = this.grpc;\n        const sslCreds = opts.cert && opts.key ? grpc.credentials.createSsl(null, Buffer.from(opts.key), Buffer.from(opts.cert)) : grpc.credentials.createSsl();\n        const client = await this.auth.getClient();\n        const credentials = grpc.credentials.combineChannelCredentials(sslCreds, grpc.credentials.createFromGoogleCredential(client));\n        return credentials;\n    }\n    static defaultOptions() {\n        // This set of @grpc/proto-loader options\n        // 'closely approximates the existing behavior of grpc.load'\n        const includeDirs = INCLUDE_DIRS.slice();\n        const options = {\n            keepCase: false,\n            longs: String,\n            enums: String,\n            defaults: true,\n            oneofs: true,\n            includeDirs\n        };\n        return options;\n    }\n    /**\n     * Loads the gRPC service from the proto file(s) at the given path and with the\n     * given options. Caches the loaded protos so the subsequent loads don't do\n     * any disk reads.\n     * @param filename The path to the proto file(s).\n     * @param options Options for loading the proto file.\n     * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n     *   incorrectly decides that the options object is the same, or if you want to\n     *   re-read the protos from disk for any other reason.\n     */ loadFromProto(filename, options, ignoreCache = false) {\n        const cacheKey = GrpcClient.protoCacheKey(filename, options);\n        let grpcPackage = cacheKey ? GrpcClient.protoCache.get(cacheKey) : undefined;\n        if (ignoreCache || !grpcPackage) {\n            const packageDef = grpcProtoLoader.loadSync(filename, options);\n            grpcPackage = this.grpc.loadPackageDefinition(packageDef);\n            if (cacheKey) {\n                GrpcClient.protoCache.set(cacheKey, grpcPackage);\n            }\n        }\n        return grpcPackage;\n    }\n    /**\n     * Load gRPC proto service from a filename looking in googleapis common protos\n     * when necessary. Caches the loaded protos so the subsequent loads don't do\n     * any disk reads.\n     * @param {String} protoPath - The directory to search for the protofile.\n     * @param {String|String[]} filename - The filename(s) of the proto(s) to be loaded.\n     *   If omitted, protoPath will be treated as a file path to load.\n     * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\n     *   incorrectly decides that the options object is the same, or if you want to\n     *   re-read the protos from disk for any other reason.\n     * @return {Object<string, *>} The gRPC loaded result (the toplevel namespace\n     *   object).\n     */ loadProto(protoPath, filename, ignoreCache = false) {\n        if (!filename) {\n            filename = path.basename(protoPath);\n            protoPath = path.dirname(protoPath);\n        }\n        if (Array.isArray(filename) && filename.length === 0) {\n            return {};\n        }\n        const options = GrpcClient.defaultOptions();\n        options.includeDirs.unshift(protoPath);\n        return this.loadFromProto(filename, options, ignoreCache);\n    }\n    static _resolveFile(protoPath, filename) {\n        if (fs.existsSync(path.join(protoPath, filename))) {\n            return path.join(protoPath, filename);\n        } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n            return path.join(googleProtoFilesDir, filename);\n        }\n        throw new Error(filename + \" could not be found in \" + protoPath);\n    }\n    loadProtoJSON(json, ignoreCache = false) {\n        const hash = objectHash(JSON.stringify(json)).toString();\n        const cached = GrpcClient.protoCache.get(hash);\n        if (cached && !ignoreCache) {\n            return cached;\n        }\n        const options = GrpcClient.defaultOptions();\n        const packageDefinition = grpcProtoLoader.fromJSON(json, options);\n        const grpcPackage = this.grpc.loadPackageDefinition(packageDefinition);\n        GrpcClient.protoCache.set(hash, grpcPackage);\n        return grpcPackage;\n    }\n    metadataBuilder(headers) {\n        const Metadata = this.grpc.Metadata;\n        const baseMetadata = new Metadata();\n        for(const key in headers){\n            const value = headers[key];\n            if (Array.isArray(value)) {\n                value.forEach((v)=>baseMetadata.add(key, v));\n            } else {\n                baseMetadata.set(key, `${value}`);\n            }\n        }\n        return function buildMetadata(abTests, moreHeaders) {\n            // TODO: bring the A/B testing info into the metadata.\n            let copied = false;\n            let metadata = baseMetadata;\n            if (moreHeaders) {\n                for(const key in moreHeaders){\n                    if (key.toLowerCase() !== \"x-goog-api-client\") {\n                        if (!copied) {\n                            copied = true;\n                            metadata = metadata.clone();\n                        }\n                        const value = moreHeaders[key];\n                        if (Array.isArray(value)) {\n                            value.forEach((v)=>metadata.add(key, v));\n                        } else {\n                            metadata.set(key, `${value}`);\n                        }\n                    }\n                }\n            }\n            return metadata;\n        };\n    }\n    /**\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */ constructSettings(serviceName, clientConfig, configOverrides, headers) {\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, this.grpc.status, {\n            metadataBuilder: this.metadataBuilder(headers)\n        });\n    }\n    /**\n     * Creates a gRPC stub with current gRPC and auth.\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} options - The optional arguments to customize\n     *   gRPC connection. This options will be passed to the constructor of\n     *   gRPC client too.\n     * @param {string} options.servicePath - The name of the server of the service.\n     * @param {number} options.port - The port of the service.\n     * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n     *   to set up gRPC connection.\n     * @param {string} defaultServicePath - The default service path.\n     * @return {Promise} A promise which resolves to a gRPC stub instance.\n     */ async createStub(CreateStub, options, customServicePath) {\n        // The following options are understood by grpc-gcp and need a special treatment\n        // (should be passed without a `grpc.` prefix)\n        const grpcGcpOptions = [\n            \"grpc.callInvocationTransformer\",\n            \"grpc.channelFactoryOverride\",\n            \"grpc.gcpApiConfig\"\n        ];\n        const [cert, key] = await this._detectClientCertificate(options, options.universeDomain);\n        const servicePath = this._mtlsServicePath(options.servicePath, customServicePath, cert && key);\n        const opts = Object.assign({}, options, {\n            cert,\n            key,\n            servicePath\n        });\n        const serviceAddress = servicePath + \":\" + opts.port;\n        if (!options.universeDomain) {\n            options.universeDomain = \"googleapis.com\";\n        }\n        if (options.universeDomain) {\n            const universeFromAuth = await this.auth.getUniverseDomain();\n            if (universeFromAuth && options.universeDomain !== universeFromAuth) {\n                throw new Error(`The configured universe domain (${options.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` + \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n            }\n        }\n        const creds = await this._getCredentials(opts);\n        const grpcOptions = {};\n        // @grpc/grpc-js limits max receive/send message length starting from v0.8.0\n        // https://github.com/grpc/grpc-node/releases/tag/%40grpc%2Fgrpc-js%400.8.0\n        // To keep the existing behavior and avoid libraries breakage, we pass -1 there as suggested.\n        grpcOptions[\"grpc.max_receive_message_length\"] = -1;\n        grpcOptions[\"grpc.max_send_message_length\"] = -1;\n        grpcOptions[\"grpc.initial_reconnect_backoff_ms\"] = 1000;\n        Object.keys(opts).forEach((key)=>{\n            const value = options[key];\n            // the older versions had a bug which required users to call an option\n            // grpc.grpc.* to make it actually pass to gRPC as grpc.*, let's handle\n            // this here until the next major release\n            if (key.startsWith(\"grpc.grpc.\")) {\n                key = key.replace(/^grpc\\./, \"\");\n            }\n            if (key.startsWith(\"grpc.\")) {\n                if (grpcGcpOptions.includes(key)) {\n                    key = key.replace(/^grpc\\./, \"\");\n                }\n                grpcOptions[key] = value;\n            }\n            if (key.startsWith(\"grpc-node.\")) {\n                grpcOptions[key] = value;\n            }\n        });\n        const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n        return stub;\n    }\n    /**\n     * Detect mTLS client certificate based on logic described in\n     * https://google.aip.dev/auth/4114.\n     *\n     * @param {object} [options] - The configuration object.\n     * @returns {Promise} Resolves array of strings representing cert and key.\n     */ async _detectClientCertificate(opts, universeDomain) {\n        var _a;\n        const certRegex = /(?<cert>-----BEGIN CERTIFICATE-----.*?-----END CERTIFICATE-----)/s;\n        const keyRegex = /(?<key>-----BEGIN PRIVATE KEY-----.*?-----END PRIVATE KEY-----)/s;\n        // If GOOGLE_API_USE_CLIENT_CERTIFICATE is true...:\n        if (typeof process !== \"undefined\" && ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.GOOGLE_API_USE_CLIENT_CERTIFICATE) === \"true\") {\n            if (universeDomain && universeDomain !== \"googleapis.com\") {\n                throw new Error(\"mTLS is not supported outside of googleapis.com universe domain.\");\n            }\n            if ((opts === null || opts === void 0 ? void 0 : opts.cert) && (opts === null || opts === void 0 ? void 0 : opts.key)) {\n                return [\n                    opts.cert,\n                    opts.key\n                ];\n            }\n            // If context aware metadata exists, run the cert provider command,\n            // parse the output to extract cert and key, and use this cert/key.\n            const metadataPath = (0, path_1.join)(os.homedir(), \".secureConnect\", \"context_aware_metadata.json\");\n            const metadata = JSON.parse(await readFileAsync(metadataPath));\n            if (!metadata.cert_provider_command) {\n                throw Error(\"no cert_provider_command found\");\n            }\n            const stdout = await execFileAsync(metadata.cert_provider_command[0], metadata.cert_provider_command.slice(1));\n            const matchCert = stdout.toString().match(certRegex);\n            const matchKey = stdout.toString().match(keyRegex);\n            if (!((matchCert === null || matchCert === void 0 ? void 0 : matchCert.groups) && (matchKey === null || matchKey === void 0 ? void 0 : matchKey.groups))) {\n                throw Error(\"unable to parse certificate and key\");\n            } else {\n                return [\n                    matchCert.groups.cert,\n                    matchKey.groups.key\n                ];\n            }\n        }\n        // If GOOGLE_API_USE_CLIENT_CERTIFICATE is not set or false,\n        // use no cert or key:\n        return [\n            undefined,\n            undefined\n        ];\n    }\n    /**\n     * Return service path, taking into account mTLS logic.\n     * See: https://google.aip.dev/auth/4114\n     *\n     * @param {string|undefined} servicePath - The path of the service.\n     * @param {string|undefined} customServicePath - Did the user provide a custom service URL.\n     * @param {boolean} hasCertificate - Was a certificate found.\n     * @returns {string} The DNS address for this service.\n     */ _mtlsServicePath(servicePath, customServicePath, hasCertificate) {\n        var _a, _b;\n        // If user provides a custom service path, return the current service\n        // path and do not attempt to add mtls subdomain:\n        if (customServicePath || !servicePath) return servicePath;\n        if (typeof process !== \"undefined\" && ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.GOOGLE_API_USE_MTLS_ENDPOINT) === \"never\") {\n            // It was explicitly asked that mtls endpoint not be used:\n            return servicePath;\n        } else if (typeof process !== \"undefined\" && ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b.GOOGLE_API_USE_MTLS_ENDPOINT) === \"always\" || hasCertificate) {\n            // Either auto-detect or explicit setting of endpoint:\n            return servicePath.replace(\"googleapis.com\", \"mtls.googleapis.com\");\n        }\n        return servicePath;\n    }\n    /**\n     * Creates a 'bytelength' function for a given proto message class.\n     *\n     * See {@link BundleDescriptor} about the meaning of the return value.\n     *\n     * @param {function} message - a constructor function that is generated by\n     *   protobuf.js. Assumes 'encoder' field in the message.\n     * @return {function(Object):number} - a function to compute the byte length\n     *   for an object.\n     */ static createByteLengthFunction(message) {\n        return gax.createByteLengthFunction(message);\n    }\n}\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\nclass GoogleProtoFilesRoot extends protobuf.Root {\n    constructor(...args){\n        super(...args);\n    }\n    // Causes the loading of an included proto to check if it is a common\n    // proto. If it is a common proto, use the bundled proto.\n    resolvePath(originPath, includePath) {\n        originPath = path.normalize(originPath);\n        includePath = path.normalize(includePath);\n        // Fully qualified paths don't need to be resolved.\n        if (path.isAbsolute(includePath)) {\n            if (!fs.existsSync(includePath)) {\n                throw new Error(\"The include `\" + includePath + \"` was not found.\");\n            }\n            return includePath;\n        }\n        if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n            return path.join(googleProtoFilesDir, includePath);\n        }\n        return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n    }\n    static _findIncludePath(originPath, includePath) {\n        originPath = path.normalize(originPath);\n        includePath = path.normalize(includePath);\n        let current = originPath;\n        let found = fs.existsSync(path.join(current, includePath));\n        while(!found && current.length > 0){\n            current = current.substring(0, current.lastIndexOf(path.sep));\n            found = fs.existsSync(path.join(current, includePath));\n        }\n        if (!found) {\n            throw new Error(\"The include `\" + includePath + \"` was not found.\");\n        }\n        return path.join(current, includePath);\n    }\n}\nexports.GoogleProtoFilesRoot = GoogleProtoFilesRoot; //# sourceMappingURL=grpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/grpc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/iamService.js":
/*!*********************************************************!*\
  !*** ./node_modules/google-gax/build/src/iamService.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IamClient = void 0;\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst routingHeader = __webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\");\nconst gapicConfig = __webpack_require__(/*! ./iam_policy_service_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/iam_policy_service_client_config.json\");\nconst fallback = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\nlet version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\nconst jsonProtos = __webpack_require__(/*! ../protos/iam_service.json */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.json\");\n/**\n *  Google Cloud IAM Client.\n *  This is manually written for providing methods [setIamPolicy, getIamPolicy, testIamPerssion] to the generated client.\n */ class IamClient {\n    constructor(gaxGrpc, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options){\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {}\n        };\n        this.innerApiCalls = {};\n        this.gaxGrpc = gaxGrpc;\n        // Ensure that options include the service address and port.\n        const opts = Object.assign({\n            servicePath: options.servicePath,\n            port: options.port,\n            clientConfig: options.clientConfig,\n            apiEndpoint: options.apiEndpoint,\n            fallback: options.fallback\n        }, options);\n        version = opts.fallback ? fallback.version : version;\n        opts.scopes = this.constructor.scopes;\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [\n            `gax/${version}`,\n            `gapic/${version}`\n        ];\n        if (typeof process !== \"undefined\" && \"versions\" in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        } else {\n            clientHeader.push(`gl-web/${version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos);\n        // Put together the default options sent with requests.\n        this._defaults = gaxGrpc.constructSettings(\"google.iam.v1.IAMPolicy\", gapicConfig, opts.clientConfig || {}, {\n            \"x-goog-api-client\": clientHeader.join(\" \")\n        });\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */ initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.iamPolicyStub) {\n            return this.iamPolicyStub;\n        }\n        // Put together the \"service stub\" for\n        // google.iam.v1.IAMPolicy.\n        this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService(\"google.iam.v1.IAMPolicy\") : this._protos.google.iam.v1.IAMPolicy, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const iamPolicyStubMethods = [\n            \"getIamPolicy\",\n            \"setIamPolicy\",\n            \"testIamPermissions\"\n        ];\n        for (const methodName of iamPolicyStubMethods){\n            const innerCallPromise = this.iamPolicyStub.then((stub)=>(...args)=>{\n                    if (this._terminated) {\n                        return Promise.reject(\"The client has already been closed.\");\n                    }\n                    const func = stub[methodName];\n                    return func.apply(stub, args);\n                }, (err)=>()=>{\n                    throw err;\n                });\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);\n        }\n        return this.iamPolicyStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */ static get servicePath() {\n        return \"cloudkms.googleapis.com\";\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */ static get apiEndpoint() {\n        return \"cloudkms.googleapis.com\";\n    }\n    /**\n     * The port for this API service.\n     */ static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */ static get scopes() {\n        return [\n            \"https://www.googleapis.com/auth/cloud-platform\",\n            \"https://www.googleapis.com/auth/cloudkms\"\n        ];\n    }\n    getProjectId(callback) {\n        if (this.auth && \"getProjectId\" in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error(\"Cannot determine project ID.\"));\n        } else {\n            return Promise.reject(\"Cannot determine project ID.\");\n        }\n    }\n    getIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        } else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers[\"x-goog-request-params\"] = routingHeader.fromParams({\n            resource: request.resource\n        });\n        this.initialize();\n        return this.innerApiCalls.getIamPolicy(request, options, callback);\n    }\n    setIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        } else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers[\"x-goog-request-params\"] = routingHeader.fromParams({\n            resource: request.resource\n        });\n        this.initialize();\n        return this.innerApiCalls.setIamPolicy(request, options, callback);\n    }\n    testIamPermissions(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        } else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers[\"x-goog-request-params\"] = routingHeader.fromParams({\n            resource: request.resource\n        });\n        this.initialize();\n        return this.innerApiCalls.testIamPermissions(request, options, callback);\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */ close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.iamPolicyStub.then((stub)=>{\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.IamClient = IamClient; //# sourceMappingURL=iamService.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/iamService.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/google-gax/build/src/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.serializer = exports.warn = exports.ChannelCredentials = exports.makeUUID = exports.fallback = exports.protobufMinimal = exports.protobuf = exports.version = exports.createByteLengthFunction = exports.LocationsClient = exports.IamClient = exports.OperationsClient = exports.LocationProtos = exports.IamProtos = exports.operationsProtos = exports.routingHeader = exports.StreamType = exports.Status = exports.PathTemplate = exports.operation = exports.Operation = exports.GrpcClient = exports.GoogleProtoFilesRoot = exports.ClientStub = exports.GoogleError = exports.createMaxRetriesBackoffSettings = exports.createDefaultBackoffSettings = exports.createBackoffSettings = exports.createBundleOptions = exports.createRetryOptions = exports.RetryOptions = exports.constructSettings = exports.CallSettings = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = exports.BundleDescriptor = exports.createApiCall = exports.OngoingCall = exports.grpc = exports.GoogleAuth = void 0;\nexports.lro = lro;\nconst grpc = __webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js\");\nexports.grpc = grpc;\nconst grpc_1 = __webpack_require__(/*! ./grpc */ \"(rsc)/./node_modules/google-gax/build/src/grpc.js\");\nconst IamProtos = __webpack_require__(/*! ../protos/iam_service */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.js\");\nexports.IamProtos = IamProtos;\nconst LocationProtos = __webpack_require__(/*! ../protos/locations */ \"(rsc)/./node_modules/google-gax/build/protos/locations.js\");\nexports.LocationProtos = LocationProtos;\nconst operationsProtos = __webpack_require__(/*! ../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\");\nexports.operationsProtos = operationsProtos;\nconst operationsClient = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\nconst routingHeader = __webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\");\nexports.routingHeader = routingHeader;\nvar google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nObject.defineProperty(exports, \"GoogleAuth\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.GoogleAuth;\n    }\n}));\nvar call_1 = __webpack_require__(/*! ./call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nObject.defineProperty(exports, \"OngoingCall\", ({\n    enumerable: true,\n    get: function() {\n        return call_1.OngoingCall;\n    }\n}));\nvar createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nObject.defineProperty(exports, \"createApiCall\", ({\n    enumerable: true,\n    get: function() {\n        return createApiCall_1.createApiCall;\n    }\n}));\nvar descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\nObject.defineProperty(exports, \"BundleDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return descriptor_1.BundleDescriptor;\n    }\n}));\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return descriptor_1.LongrunningDescriptor;\n    }\n}));\nObject.defineProperty(exports, \"PageDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return descriptor_1.PageDescriptor;\n    }\n}));\nObject.defineProperty(exports, \"StreamDescriptor\", ({\n    enumerable: true,\n    get: function() {\n        return descriptor_1.StreamDescriptor;\n    }\n}));\nvar gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nObject.defineProperty(exports, \"CallSettings\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.CallSettings;\n    }\n}));\nObject.defineProperty(exports, \"constructSettings\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.constructSettings;\n    }\n}));\nObject.defineProperty(exports, \"RetryOptions\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.RetryOptions;\n    }\n}));\nObject.defineProperty(exports, \"createRetryOptions\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.createRetryOptions;\n    }\n}));\nObject.defineProperty(exports, \"createBundleOptions\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.createBundleOptions;\n    }\n}));\nObject.defineProperty(exports, \"createBackoffSettings\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.createBackoffSettings;\n    }\n}));\nObject.defineProperty(exports, \"createDefaultBackoffSettings\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.createDefaultBackoffSettings;\n    }\n}));\nObject.defineProperty(exports, \"createMaxRetriesBackoffSettings\", ({\n    enumerable: true,\n    get: function() {\n        return gax_1.createMaxRetriesBackoffSettings;\n    }\n}));\nvar googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nObject.defineProperty(exports, \"GoogleError\", ({\n    enumerable: true,\n    get: function() {\n        return googleError_1.GoogleError;\n    }\n}));\nvar grpc_2 = __webpack_require__(/*! ./grpc */ \"(rsc)/./node_modules/google-gax/build/src/grpc.js\");\nObject.defineProperty(exports, \"ClientStub\", ({\n    enumerable: true,\n    get: function() {\n        return grpc_2.ClientStub;\n    }\n}));\nObject.defineProperty(exports, \"GoogleProtoFilesRoot\", ({\n    enumerable: true,\n    get: function() {\n        return grpc_2.GoogleProtoFilesRoot;\n    }\n}));\nObject.defineProperty(exports, \"GrpcClient\", ({\n    enumerable: true,\n    get: function() {\n        return grpc_2.GrpcClient;\n    }\n}));\nvar longrunning_1 = __webpack_require__(/*! ./longRunningCalls/longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\nObject.defineProperty(exports, \"Operation\", ({\n    enumerable: true,\n    get: function() {\n        return longrunning_1.Operation;\n    }\n}));\nObject.defineProperty(exports, \"operation\", ({\n    enumerable: true,\n    get: function() {\n        return longrunning_1.operation;\n    }\n}));\nvar pathTemplate_1 = __webpack_require__(/*! ./pathTemplate */ \"(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\");\nObject.defineProperty(exports, \"PathTemplate\", ({\n    enumerable: true,\n    get: function() {\n        return pathTemplate_1.PathTemplate;\n    }\n}));\nvar status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nObject.defineProperty(exports, \"Status\", ({\n    enumerable: true,\n    get: function() {\n        return status_1.Status;\n    }\n}));\nvar streaming_1 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nObject.defineProperty(exports, \"StreamType\", ({\n    enumerable: true,\n    get: function() {\n        return streaming_1.StreamType;\n    }\n}));\nfunction lro(options) {\n    options = Object.assign({\n        scopes: lro.ALL_SCOPES\n    }, options);\n    const gaxGrpc = new grpc_1.GrpcClient(options);\n    return new operationsClient.OperationsClientBuilder(gaxGrpc);\n}\nlro.SERVICE_ADDRESS = operationsClient.SERVICE_ADDRESS;\nlro.ALL_SCOPES = operationsClient.ALL_SCOPES;\nvar operationsClient_1 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\nObject.defineProperty(exports, \"OperationsClient\", ({\n    enumerable: true,\n    get: function() {\n        return operationsClient_1.OperationsClient;\n    }\n}));\nvar iamService_1 = __webpack_require__(/*! ./iamService */ \"(rsc)/./node_modules/google-gax/build/src/iamService.js\");\nObject.defineProperty(exports, \"IamClient\", ({\n    enumerable: true,\n    get: function() {\n        return iamService_1.IamClient;\n    }\n}));\nvar locationService_1 = __webpack_require__(/*! ./locationService */ \"(rsc)/./node_modules/google-gax/build/src/locationService.js\");\nObject.defineProperty(exports, \"LocationsClient\", ({\n    enumerable: true,\n    get: function() {\n        return locationService_1.LocationsClient;\n    }\n}));\nexports.createByteLengthFunction = grpc_1.GrpcClient.createByteLengthFunction;\nexports.version = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version;\nconst protobuf = __webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\");\nexports.protobuf = protobuf;\nexports.protobufMinimal = __webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\");\nconst fallback = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\nexports.fallback = fallback;\nvar util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nObject.defineProperty(exports, \"makeUUID\", ({\n    enumerable: true,\n    get: function() {\n        return util_1.makeUUID;\n    }\n}));\nvar grpc_js_1 = __webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js\");\nObject.defineProperty(exports, \"ChannelCredentials\", ({\n    enumerable: true,\n    get: function() {\n        return grpc_js_1.ChannelCredentials;\n    }\n}));\nvar warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nObject.defineProperty(exports, \"warn\", ({\n    enumerable: true,\n    get: function() {\n        return warnings_1.warn;\n    }\n}));\nconst serializer = __webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\");\nexports.serializer = serializer; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/locationService.js":
/*!**************************************************************!*\
  !*** ./node_modules/google-gax/build/src/locationService.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LocationsClient = void 0;\n/* global window */ const gax = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst routingHeader = __webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\");\nconst pageDescriptor_1 = __webpack_require__(/*! ./paginationCalls/pageDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\");\nconst jsonProtos = __webpack_require__(/*! ../protos/locations.json */ \"(rsc)/./node_modules/google-gax/build/protos/locations.json\");\n/**\n * This file defines retry strategy and timeouts for all API methods in this library.\n */ const gapicConfig = __webpack_require__(/*! ./locations_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/locations_client_config.json\");\nconst version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\n/**\n *  Google Cloud Locations Client.\n *  This is manually written for providing methods [listLocations, getLocations] to the generated client.\n */ class LocationsClient {\n    /**\n     * Construct an instance of LocationsClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */ constructor(gaxGrpc, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    opts){\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {}\n        };\n        // Ensure that options include all the required fields.\n        this.gaxGrpc = gaxGrpc;\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b :  false && 0;\n        opts = Object.assign({\n            servicePath,\n            port,\n            clientConfig,\n            fallback\n        }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !(\"scopes\" in opts)) {\n            opts[\"scopes\"] = staticMembers.scopes;\n        }\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [\n            `gax/${version}`,\n            `gapic/${version}`\n        ];\n        if (typeof process !== \"undefined\" && \"versions\" in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        } else {\n            clientHeader.push(`gl-web/${version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        } else if (opts.fallback === \"rest\") {\n            clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = gaxGrpc.loadProtoJSON(jsonProtos);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listLocations: new pageDescriptor_1.PageDescriptor(\"pageToken\", \"nextPageToken\", \"locations\")\n        };\n        // Put together the default options sent with requests.\n        this._defaults = gaxGrpc.constructSettings(\"google.cloud.location.Locations\", gapicConfig, opts.clientConfig || {}, {\n            \"x-goog-api-client\": clientHeader.join(\" \")\n        });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = warnings_1.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */ initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.locationsStub) {\n            return this.locationsStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.location.Locations.\n        this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService(\"google.cloud.location.Locations\") : this._protos.google.cloud.location.Locations, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const locationsStubMethods = [\n            \"listLocations\",\n            \"getLocation\"\n        ];\n        for (const methodName of locationsStubMethods){\n            const callPromise = this.locationsStub.then((stub)=>(...args)=>{\n                    if (this._terminated) {\n                        return Promise.reject(\"The client has already been closed.\");\n                    }\n                    const func = stub[methodName];\n                    return func.apply(stub, args);\n                }, (err)=>()=>{\n                    throw err;\n                });\n            const descriptor = this.descriptors.page[methodName] || undefined;\n            const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.locationsStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */ static get servicePath() {\n        return \"cloud.googleapis.com\";\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */ static get apiEndpoint() {\n        return \"cloud.googleapis.com\";\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */ static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */ static get scopes() {\n        return [\n            \"https://www.googleapis.com/auth/cloud-platform\"\n        ];\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Gets information about a location.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Resource name for the location.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getLocation(request);\n     */ getLocation(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === \"function\" && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        } else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers[\"x-goog-request-params\"] = routingHeader.fromParams({\n            name: request.name || \"\"\n        });\n        this.initialize();\n        return this.innerApiCalls.getLocation(request, options, callback);\n    }\n    /**\n     * Lists information about the supported locations for this service.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listLocationsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */ listLocations(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === \"function\" && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        } else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers[\"x-goog-request-params\"] = routingHeader.fromParams({\n            name: request.name || \"\"\n        });\n        this.initialize();\n        return this.innerApiCalls.listLocations(request, options, callback);\n    }\n    /**\n     * Equivalent to `listLocations`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listLocationsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */ listLocationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers[\"x-goog-request-params\"] = routingHeader.fromParams({\n            name: request.name || \"\"\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls[\"listLocations\"], request, callSettings);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */ close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.locationsStub.then((stub)=>{\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.LocationsClient = LocationsClient; //# sourceMappingURL=locationService.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbG9jYXRpb25TZXJ2aWNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUcsS0FBSztBQUMvQixpQkFBaUIsR0FDakIsTUFBTUcsTUFBTUMsbUJBQU9BLENBQUMsK0RBQU87QUFDM0IsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMseUVBQVk7QUFDdkMsTUFBTUUsa0JBQWtCRixtQkFBT0EsQ0FBQyxtRkFBaUI7QUFDakQsTUFBTUcsZ0JBQWdCSCxtQkFBT0EsQ0FBQyxtRkFBaUI7QUFDL0MsTUFBTUksbUJBQW1CSixtQkFBT0EsQ0FBQyxxSEFBa0M7QUFDbkUsTUFBTUssYUFBYUwsbUJBQU9BLENBQUMsNkZBQTBCO0FBQ3JEOztDQUVDLEdBQ0QsTUFBTU0sY0FBY04sbUJBQU9BLENBQUMsOEdBQWdDO0FBQzVELE1BQU1PLFVBQVVQLHVHQUFxQztBQUNyRDs7O0NBR0MsR0FDRCxNQUFNRjtJQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FpQ0MsR0FDRFUsWUFBWUMsT0FBTyxFQUNuQiw4REFBOEQ7SUFDOURDLElBQUksQ0FBRTtRQUNGLElBQUlDLElBQUlDO1FBQ1IsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7WUFDZkMsTUFBTSxDQUFDO1lBQ1BDLFFBQVEsQ0FBQztZQUNUQyxhQUFhLENBQUM7WUFDZEMsVUFBVSxDQUFDO1FBQ2Y7UUFDQSx1REFBdUQ7UUFDdkQsSUFBSSxDQUFDVCxPQUFPLEdBQUdBO1FBQ2YsTUFBTVUsZ0JBQWdCLElBQUksQ0FBQ1gsV0FBVztRQUN0QyxNQUFNWSxjQUFjLENBQUNWLFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJQSxLQUFLVSxXQUFXLEtBQU1WLENBQUFBLFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJQSxLQUFLVyxXQUFXLEtBQUtGLGNBQWNDLFdBQVc7UUFDakwsSUFBSSxDQUFDRSwwQkFBMEIsR0FBRyxDQUFDLENBQUUsRUFBQ1osU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUtVLFdBQVcsS0FBTVYsQ0FBQUEsU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUtXLFdBQVc7UUFDcEssTUFBTUUsT0FBTyxDQUFDYixTQUFTLFFBQVFBLFNBQVMsS0FBSyxJQUFJLEtBQUssSUFBSUEsS0FBS2EsSUFBSSxLQUFLSixjQUFjSSxJQUFJO1FBQzFGLE1BQU1DLGVBQWUsQ0FBQ2IsS0FBS0QsU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUtjLFlBQVksTUFBTSxRQUFRYixPQUFPLEtBQUssSUFBSUEsS0FBSyxDQUFDO1FBQzVILE1BQU1jLFdBQVcsQ0FBQ2IsS0FBS0YsU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUtlLFFBQVEsTUFBTSxRQUFRYixPQUFPLEtBQUssSUFBSUEsS0FBTSxNQUFrQixJQUFlLENBQTBFO1FBQy9ORixPQUFPaEIsT0FBT2tDLE1BQU0sQ0FBQztZQUFFUjtZQUFhRztZQUFNQztZQUFjQztRQUFTLEdBQUdmO1FBQ3BFLDBHQUEwRztRQUMxRyxJQUFJVSxnQkFBZ0JELGNBQWNDLFdBQVcsSUFBSSxDQUFFLGFBQVlWLElBQUcsR0FBSTtZQUNsRUEsSUFBSSxDQUFDLFNBQVMsR0FBR1MsY0FBY1UsTUFBTTtRQUN6QztRQUNBLDhDQUE4QztRQUM5QyxJQUFJLENBQUNDLEtBQUssR0FBR3BCO1FBQ2IsZ0VBQWdFO1FBQ2hFLElBQUksQ0FBQ3FCLElBQUksR0FBR3RCLFFBQVFzQixJQUFJO1FBQ3hCLG1EQUFtRDtRQUNuRCxJQUFJWCxnQkFBZ0JELGNBQWNDLFdBQVcsRUFBRTtZQUMzQyxJQUFJLENBQUNXLElBQUksQ0FBQ0MsYUFBYSxHQUFHYixjQUFjVSxNQUFNO1FBQ2xEO1FBQ0Esc0NBQXNDO1FBQ3RDLE1BQU1JLGVBQWU7WUFBQyxDQUFDLElBQUksRUFBRTFCLFFBQVEsQ0FBQztZQUFFLENBQUMsTUFBTSxFQUFFQSxRQUFRLENBQUM7U0FBQztRQUMzRCxJQUFJLE9BQU8yQixZQUFZLGVBQWUsY0FBY0EsU0FBUztZQUN6REQsYUFBYUUsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFRCxRQUFRRSxRQUFRLENBQUNDLElBQUksQ0FBQyxDQUFDO1FBQ3hELE9BQ0s7WUFDREosYUFBYUUsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFNUIsUUFBUSxDQUFDO1FBQ3pDO1FBQ0EsSUFBSSxDQUFDRyxLQUFLZSxRQUFRLEVBQUU7WUFDaEJRLGFBQWFFLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRTFCLFFBQVE2QixXQUFXLENBQUMsQ0FBQztRQUNuRCxPQUNLLElBQUk1QixLQUFLZSxRQUFRLEtBQUssUUFBUTtZQUMvQlEsYUFBYUUsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFMUIsUUFBUTZCLFdBQVcsQ0FBQyxDQUFDO1FBQ25EO1FBQ0EsSUFBSTVCLEtBQUs2QixPQUFPLElBQUk3QixLQUFLOEIsVUFBVSxFQUFFO1lBQ2pDUCxhQUFhRSxJQUFJLENBQUMsQ0FBQyxFQUFFekIsS0FBSzZCLE9BQU8sQ0FBQyxDQUFDLEVBQUU3QixLQUFLOEIsVUFBVSxDQUFDLENBQUM7UUFDMUQ7UUFDQSw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDQyxPQUFPLEdBQUdoQyxRQUFRaUMsYUFBYSxDQUFDckM7UUFDckMsOERBQThEO1FBQzlELDREQUE0RDtRQUM1RCwyREFBMkQ7UUFDM0QsSUFBSSxDQUFDUyxXQUFXLENBQUNDLElBQUksR0FBRztZQUNwQjRCLGVBQWUsSUFBSXZDLGlCQUFpQndDLGNBQWMsQ0FBQyxhQUFhLGlCQUFpQjtRQUNyRjtRQUNBLHVEQUF1RDtRQUN2RCxJQUFJLENBQUNDLFNBQVMsR0FBR3BDLFFBQVFxQyxpQkFBaUIsQ0FBQyxtQ0FBbUN4QyxhQUFhSSxLQUFLYyxZQUFZLElBQUksQ0FBQyxHQUFHO1lBQUUscUJBQXFCUyxhQUFhYyxJQUFJLENBQUM7UUFBSztRQUNsSyxvRUFBb0U7UUFDcEUsZ0VBQWdFO1FBQ2hFLDREQUE0RDtRQUM1RCxJQUFJLENBQUNDLGFBQWEsR0FBRyxDQUFDO1FBQ3RCLDRFQUE0RTtRQUM1RSxJQUFJLENBQUNDLElBQUksR0FBR2hELFdBQVdnRCxJQUFJO0lBQy9CO0lBQ0E7Ozs7Ozs7Ozs7S0FVQyxHQUNEQyxhQUFhO1FBQ1QseUVBQXlFO1FBQ3pFLElBQUksSUFBSSxDQUFDQyxhQUFhLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUNBLGFBQWE7UUFDN0I7UUFDQSxzQ0FBc0M7UUFDdEMsbUNBQW1DO1FBQ25DLElBQUksQ0FBQ0EsYUFBYSxHQUFHLElBQUksQ0FBQzFDLE9BQU8sQ0FBQzJDLFVBQVUsQ0FBQyxJQUFJLENBQUN0QixLQUFLLENBQUNMLFFBQVEsR0FDMUQsSUFBSSxDQUFDZ0IsT0FBTyxDQUFDWSxhQUFhLENBQUMscUNBRXpCLElBQUksQ0FBQ1osT0FBTyxDQUFDYSxNQUFNLENBQUNDLEtBQUssQ0FBQ0MsUUFBUSxDQUFDQyxTQUFTLEVBQUUsSUFBSSxDQUFDM0IsS0FBSyxFQUFFLElBQUksQ0FBQ1IsMEJBQTBCO1FBQ2pHLDZEQUE2RDtRQUM3RCwwQ0FBMEM7UUFDMUMsTUFBTW9DLHVCQUF1QjtZQUFDO1lBQWlCO1NBQWM7UUFDN0QsS0FBSyxNQUFNQyxjQUFjRCxxQkFBc0I7WUFDM0MsTUFBTUUsY0FBYyxJQUFJLENBQUNULGFBQWEsQ0FBQ1UsSUFBSSxDQUFDQyxDQUFBQSxPQUFRLENBQUMsR0FBR0M7b0JBQ3BELElBQUksSUFBSSxDQUFDbEQsV0FBVyxFQUFFO3dCQUNsQixPQUFPbUQsUUFBUUMsTUFBTSxDQUFDO29CQUMxQjtvQkFDQSxNQUFNQyxPQUFPSixJQUFJLENBQUNILFdBQVc7b0JBQzdCLE9BQU9PLEtBQUtDLEtBQUssQ0FBQ0wsTUFBTUM7Z0JBQzVCLEdBQUcsQ0FBQ0ssTUFBUTtvQkFDUixNQUFNQTtnQkFDVjtZQUNBLE1BQU1DLGFBQWEsSUFBSSxDQUFDdkQsV0FBVyxDQUFDQyxJQUFJLENBQUM0QyxXQUFXLElBQUlXO1lBQ3hELE1BQU1DLFVBQVUsQ0FBQyxHQUFHckUsZ0JBQWdCc0UsYUFBYSxFQUFFWixhQUFhLElBQUksQ0FBQ2YsU0FBUyxDQUFDYyxXQUFXLEVBQUVVO1lBQzVGLElBQUksQ0FBQ3JCLGFBQWEsQ0FBQ1csV0FBVyxHQUFHWTtRQUNyQztRQUNBLE9BQU8sSUFBSSxDQUFDcEIsYUFBYTtJQUM3QjtJQUNBOzs7S0FHQyxHQUNELFdBQVcvQixjQUFjO1FBQ3JCLE9BQU87SUFDWDtJQUNBOzs7O0tBSUMsR0FDRCxXQUFXQyxjQUFjO1FBQ3JCLE9BQU87SUFDWDtJQUNBOzs7S0FHQyxHQUNELFdBQVdFLE9BQU87UUFDZCxPQUFPO0lBQ1g7SUFDQTs7OztLQUlDLEdBQ0QsV0FBV00sU0FBUztRQUNoQixPQUFPO1lBQUM7U0FBaUQ7SUFDN0Q7SUFDQTRDLGFBQWFDLFFBQVEsRUFBRTtRQUNuQixJQUFJQSxVQUFVO1lBQ1YsSUFBSSxDQUFDM0MsSUFBSSxDQUFDMEMsWUFBWSxDQUFDQztZQUN2QjtRQUNKO1FBQ0EsT0FBTyxJQUFJLENBQUMzQyxJQUFJLENBQUMwQyxZQUFZO0lBQ2pDO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7S0FnQkMsR0FDREUsWUFBWUMsT0FBTyxFQUFFQyxpQkFBaUIsRUFBRUgsUUFBUSxFQUFFO1FBQzlDRSxVQUFVQSxXQUFXLENBQUM7UUFDdEIsSUFBSUU7UUFDSixJQUFJLE9BQU9ELHNCQUFzQixjQUFjSCxhQUFhSixXQUFXO1lBQ25FSSxXQUFXRztZQUNYQyxVQUFVLENBQUM7UUFDZixPQUNLO1lBQ0RBLFVBQVVEO1FBQ2Q7UUFDQUMsVUFBVUEsV0FBVyxDQUFDO1FBQ3RCQSxRQUFRQyxTQUFTLEdBQUdELFFBQVFDLFNBQVMsSUFBSSxDQUFDO1FBQzFDRCxRQUFRQyxTQUFTLENBQUNDLE9BQU8sR0FBR0YsUUFBUUMsU0FBUyxDQUFDQyxPQUFPLElBQUksQ0FBQztRQUMxREYsUUFBUUMsU0FBUyxDQUFDQyxPQUFPLENBQUMsd0JBQXdCLEdBQzlDN0UsY0FBYzhFLFVBQVUsQ0FBQztZQUNyQkMsTUFBTU4sUUFBUU0sSUFBSSxJQUFJO1FBQzFCO1FBQ0osSUFBSSxDQUFDaEMsVUFBVTtRQUNmLE9BQU8sSUFBSSxDQUFDRixhQUFhLENBQUMyQixXQUFXLENBQUNDLFNBQVNFLFNBQVNKO0lBQzVEO0lBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0F5QkMsR0FDRC9CLGNBQWNpQyxPQUFPLEVBQUVDLGlCQUFpQixFQUFFSCxRQUFRLEVBQUU7UUFDaERFLFVBQVVBLFdBQVcsQ0FBQztRQUN0QixJQUFJRTtRQUNKLElBQUksT0FBT0Qsc0JBQXNCLGNBQWNILGFBQWFKLFdBQVc7WUFDbkVJLFdBQVdHO1lBQ1hDLFVBQVUsQ0FBQztRQUNmLE9BQ0s7WUFDREEsVUFBVUQ7UUFDZDtRQUNBQyxVQUFVQSxXQUFXLENBQUM7UUFDdEJBLFFBQVFDLFNBQVMsR0FBR0QsUUFBUUMsU0FBUyxJQUFJLENBQUM7UUFDMUNELFFBQVFDLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHRixRQUFRQyxTQUFTLENBQUNDLE9BQU8sSUFBSSxDQUFDO1FBQzFERixRQUFRQyxTQUFTLENBQUNDLE9BQU8sQ0FBQyx3QkFBd0IsR0FDOUM3RSxjQUFjOEUsVUFBVSxDQUFDO1lBQ3JCQyxNQUFNTixRQUFRTSxJQUFJLElBQUk7UUFDMUI7UUFDSixJQUFJLENBQUNoQyxVQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUNGLGFBQWEsQ0FBQ0wsYUFBYSxDQUFDaUMsU0FBU0UsU0FBU0o7SUFDOUQ7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0E2QkMsR0FDRFMsbUJBQW1CUCxPQUFPLEVBQUVFLE9BQU8sRUFBRTtRQUNqQ0YsVUFBVUEsV0FBVyxDQUFDO1FBQ3RCRSxVQUFVQSxXQUFXLENBQUM7UUFDdEJBLFFBQVFDLFNBQVMsR0FBR0QsUUFBUUMsU0FBUyxJQUFJLENBQUM7UUFDMUNELFFBQVFDLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHRixRQUFRQyxTQUFTLENBQUNDLE9BQU8sSUFBSSxDQUFDO1FBQzFERixRQUFRQyxTQUFTLENBQUNDLE9BQU8sQ0FBQyx3QkFBd0IsR0FDOUM3RSxjQUFjOEUsVUFBVSxDQUFDO1lBQ3JCQyxNQUFNTixRQUFRTSxJQUFJLElBQUk7UUFDMUI7UUFDSkosVUFBVUEsV0FBVyxDQUFDO1FBQ3RCLE1BQU1NLGVBQWUsSUFBSXJGLElBQUlzRixZQUFZLENBQUNQO1FBQzFDLElBQUksQ0FBQzVCLFVBQVU7UUFDZixPQUFPLElBQUksQ0FBQ3BDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDNEIsYUFBYSxDQUFDMkMsWUFBWSxDQUFDLElBQUksQ0FBQ3RDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRTRCLFNBQVNRO0lBQzFHO0lBQ0E7Ozs7O0tBS0MsR0FDREcsUUFBUTtRQUNKLElBQUksQ0FBQ3JDLFVBQVU7UUFDZixJQUFJLENBQUMsSUFBSSxDQUFDckMsV0FBVyxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDc0MsYUFBYSxDQUFDVSxJQUFJLENBQUNDLENBQUFBO2dCQUMzQixJQUFJLENBQUNqRCxXQUFXLEdBQUc7Z0JBQ25CaUQsS0FBS3lCLEtBQUs7WUFDZDtRQUNKO1FBQ0EsT0FBT3ZCLFFBQVF3QixPQUFPO0lBQzFCO0FBQ0o7QUFDQTVGLHVCQUF1QixHQUFHRSxpQkFDMUIsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2xvY2F0aW9uU2VydmljZS5qcz81NDJmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxvY2F0aW9uc0NsaWVudCA9IHZvaWQgMDtcbi8qIGdsb2JhbCB3aW5kb3cgKi9cbmNvbnN0IGdheCA9IHJlcXVpcmUoXCIuL2dheFwiKTtcbmNvbnN0IHdhcm5pbmdzXzEgPSByZXF1aXJlKFwiLi93YXJuaW5nc1wiKTtcbmNvbnN0IGNyZWF0ZUFwaUNhbGxfMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZUFwaUNhbGxcIik7XG5jb25zdCByb3V0aW5nSGVhZGVyID0gcmVxdWlyZShcIi4vcm91dGluZ0hlYWRlclwiKTtcbmNvbnN0IHBhZ2VEZXNjcmlwdG9yXzEgPSByZXF1aXJlKFwiLi9wYWdpbmF0aW9uQ2FsbHMvcGFnZURlc2NyaXB0b3JcIik7XG5jb25zdCBqc29uUHJvdG9zID0gcmVxdWlyZShcIi4uL3Byb3Rvcy9sb2NhdGlvbnMuanNvblwiKTtcbi8qKlxuICogVGhpcyBmaWxlIGRlZmluZXMgcmV0cnkgc3RyYXRlZ3kgYW5kIHRpbWVvdXRzIGZvciBhbGwgQVBJIG1ldGhvZHMgaW4gdGhpcyBsaWJyYXJ5LlxuICovXG5jb25zdCBnYXBpY0NvbmZpZyA9IHJlcXVpcmUoXCIuL2xvY2F0aW9uc19jbGllbnRfY29uZmlnLmpzb25cIik7XG5jb25zdCB2ZXJzaW9uID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbi8qKlxuICogIEdvb2dsZSBDbG91ZCBMb2NhdGlvbnMgQ2xpZW50LlxuICogIFRoaXMgaXMgbWFudWFsbHkgd3JpdHRlbiBmb3IgcHJvdmlkaW5nIG1ldGhvZHMgW2xpc3RMb2NhdGlvbnMsIGdldExvY2F0aW9uc10gdG8gdGhlIGdlbmVyYXRlZCBjbGllbnQuXG4gKi9cbmNsYXNzIExvY2F0aW9uc0NsaWVudCB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGFuIGluc3RhbmNlIG9mIExvY2F0aW9uc0NsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAgICogVGhlIG9wdGlvbnMgYWNjZXB0ZWQgYnkgdGhlIGNvbnN0cnVjdG9yIGFyZSBkZXNjcmliZWQgaW4gZGV0YWlsXG4gICAgICogaW4gW3RoaXMgZG9jdW1lbnRdKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVhcGlzL2dheC1ub2RlanMvYmxvYi9tYWluL2NsaWVudC1saWJyYXJpZXMubWQjY3JlYXRpbmctdGhlLWNsaWVudC1pbnN0YW5jZSkuXG4gICAgICogVGhlIGNvbW1vbiBvcHRpb25zIGFyZTpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuY3JlZGVudGlhbHNdIC0gQ3JlZGVudGlhbHMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jcmVkZW50aWFscy5jbGllbnRfZW1haWxdXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmNyZWRlbnRpYWxzLnByaXZhdGVfa2V5XVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5lbWFpbF0gLSBBY2NvdW50IGVtYWlsIGFkZHJlc3MuIFJlcXVpcmVkIHdoZW5cbiAgICAgKiAgICAgdXNpbmcgYSAucGVtIG9yIC5wMTIga2V5RmlsZW5hbWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmtleUZpbGVuYW1lXSAtIEZ1bGwgcGF0aCB0byB0aGUgYSAuanNvbiwgLnBlbSwgb3JcbiAgICAgKiAgICAgLnAxMiBrZXkgZG93bmxvYWRlZCBmcm9tIHRoZSBHb29nbGUgRGV2ZWxvcGVycyBDb25zb2xlLiBJZiB5b3UgcHJvdmlkZVxuICAgICAqICAgICBhIHBhdGggdG8gYSBKU09OIGZpbGUsIHRoZSBwcm9qZWN0SWQgb3B0aW9uIGJlbG93IGlzIG5vdCBuZWNlc3NhcnkuXG4gICAgICogICAgIE5PVEU6IC5wZW0gYW5kIC5wMTIgcmVxdWlyZSB5b3UgdG8gc3BlY2lmeSBvcHRpb25zLmVtYWlsIGFzIHdlbGwuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnBvcnRdIC0gVGhlIHBvcnQgb24gd2hpY2ggdG8gY29ubmVjdCB0b1xuICAgICAqICAgICB0aGUgcmVtb3RlIGhvc3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnByb2plY3RJZF0gLSBUaGUgcHJvamVjdCBJRCBmcm9tIHRoZSBHb29nbGVcbiAgICAgKiAgICAgRGV2ZWxvcGVyJ3MgQ29uc29sZSwgZS5nLiAnZ3JhcGUtc3BhY2VzaGlwLTEyMycuIFdlIHdpbGwgYWxzbyBjaGVja1xuICAgICAqICAgICB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgR0NMT1VEX1BST0pFQ1QgZm9yIHlvdXIgcHJvamVjdCBJRC4gSWYgeW91clxuICAgICAqICAgICBhcHAgaXMgcnVubmluZyBpbiBhbiBlbnZpcm9ubWVudCB3aGljaCBzdXBwb3J0c1xuICAgICAqICAgICB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vaWRlbnRpdHkvcHJvdG9jb2xzL2FwcGxpY2F0aW9uLWRlZmF1bHQtY3JlZGVudGlhbHMgQXBwbGljYXRpb24gRGVmYXVsdCBDcmVkZW50aWFsc30sXG4gICAgICogICAgIHlvdXIgcHJvamVjdCBJRCB3aWxsIGJlIGRldGVjdGVkIGF1dG9tYXRpY2FsbHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFwaUVuZHBvaW50XSAtIFRoZSBkb21haW4gbmFtZSBvZiB0aGVcbiAgICAgKiAgICAgQVBJIHJlbW90ZSBob3N0LlxuICAgICAqIEBwYXJhbSB7Z2F4LkNsaWVudENvbmZpZ30gW29wdGlvbnMuY2xpZW50Q29uZmlnXSAtIENsaWVudCBjb25maWd1cmF0aW9uIG92ZXJyaWRlLlxuICAgICAqICAgICBGb2xsb3dzIHRoZSBzdHJ1Y3R1cmUgb2Yge0BsaW5rIGdhcGljQ29uZmlnfS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZhbGxiYWNrXSAtIFVzZSBIVFRQIGZhbGxiYWNrIG1vZGUuXG4gICAgICogICAgIEluIGZhbGxiYWNrIG1vZGUsIGEgc3BlY2lhbCBicm93c2VyLWNvbXBhdGlibGUgdHJhbnNwb3J0IGltcGxlbWVudGF0aW9uIGlzIHVzZWRcbiAgICAgKiAgICAgaW5zdGVhZCBvZiBnUlBDIHRyYW5zcG9ydC4gSW4gYnJvd3NlciBjb250ZXh0IChpZiB0aGUgYHdpbmRvd2Agb2JqZWN0IGlzIGRlZmluZWQpXG4gICAgICogICAgIHRoZSBmYWxsYmFjayBtb2RlIGlzIGVuYWJsZWQgYXV0b21hdGljYWxseTsgc2V0IGBvcHRpb25zLmZhbGxiYWNrYCB0byBgZmFsc2VgXG4gICAgICogICAgIGlmIHlvdSBuZWVkIHRvIG92ZXJyaWRlIHRoaXMgYmVoYXZpb3IuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZ2F4R3JwYywgXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBvcHRzKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgICAgIHBhZ2U6IHt9LFxuICAgICAgICAgICAgc3RyZWFtOiB7fSxcbiAgICAgICAgICAgIGxvbmdydW5uaW5nOiB7fSxcbiAgICAgICAgICAgIGJhdGNoaW5nOiB7fSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgb3B0aW9ucyBpbmNsdWRlIGFsbCB0aGUgcmVxdWlyZWQgZmllbGRzLlxuICAgICAgICB0aGlzLmdheEdycGMgPSBnYXhHcnBjO1xuICAgICAgICBjb25zdCBzdGF0aWNNZW1iZXJzID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgY29uc3Qgc2VydmljZVBhdGggPSAob3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLnNlcnZpY2VQYXRoKSB8fCAob3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLmFwaUVuZHBvaW50KSB8fCBzdGF0aWNNZW1iZXJzLnNlcnZpY2VQYXRoO1xuICAgICAgICB0aGlzLl9wcm92aWRlZEN1c3RvbVNlcnZpY2VQYXRoID0gISEoKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5zZXJ2aWNlUGF0aCkgfHwgKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5hcGlFbmRwb2ludCkpO1xuICAgICAgICBjb25zdCBwb3J0ID0gKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5wb3J0KSB8fCBzdGF0aWNNZW1iZXJzLnBvcnQ7XG4gICAgICAgIGNvbnN0IGNsaWVudENvbmZpZyA9IChfYSA9IG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5jbGllbnRDb25maWcpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9O1xuICAgICAgICBjb25zdCBmYWxsYmFjayA9IChfYiA9IG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5mYWxsYmFjaykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiAod2luZG93ID09PSBudWxsIHx8IHdpbmRvdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2luZG93LmZldGNoKSA9PT0gJ2Z1bmN0aW9uJyk7XG4gICAgICAgIG9wdHMgPSBPYmplY3QuYXNzaWduKHsgc2VydmljZVBhdGgsIHBvcnQsIGNsaWVudENvbmZpZywgZmFsbGJhY2sgfSwgb3B0cyk7XG4gICAgICAgIC8vIElmIHNjb3BlcyBhcmUgdW5zZXQgaW4gb3B0aW9ucyBhbmQgd2UncmUgY29ubmVjdGluZyB0byBhIG5vbi1kZWZhdWx0IGVuZHBvaW50LCBzZXQgc2NvcGVzIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgaWYgKHNlcnZpY2VQYXRoICE9PSBzdGF0aWNNZW1iZXJzLnNlcnZpY2VQYXRoICYmICEoJ3Njb3BlcycgaW4gb3B0cykpIHtcbiAgICAgICAgICAgIG9wdHNbJ3Njb3BlcyddID0gc3RhdGljTWVtYmVycy5zY29wZXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2F2ZSBvcHRpb25zIHRvIHVzZSBpbiBpbml0aWFsaXplKCkgbWV0aG9kLlxuICAgICAgICB0aGlzLl9vcHRzID0gb3B0cztcbiAgICAgICAgLy8gU2F2ZSB0aGUgYXV0aCBvYmplY3QgdG8gdGhlIGNsaWVudCwgZm9yIHVzZSBieSBvdGhlciBtZXRob2RzLlxuICAgICAgICB0aGlzLmF1dGggPSBnYXhHcnBjLmF1dGg7XG4gICAgICAgIC8vIFNldCB0aGUgZGVmYXVsdCBzY29wZXMgaW4gYXV0aCBjbGllbnQgaWYgbmVlZGVkLlxuICAgICAgICBpZiAoc2VydmljZVBhdGggPT09IHN0YXRpY01lbWJlcnMuc2VydmljZVBhdGgpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0aC5kZWZhdWx0U2NvcGVzID0gc3RhdGljTWVtYmVycy5zY29wZXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBjbGllbnQgaGVhZGVyIHN0cmluZy5cbiAgICAgICAgY29uc3QgY2xpZW50SGVhZGVyID0gW2BnYXgvJHt2ZXJzaW9ufWAsIGBnYXBpYy8ke3ZlcnNpb259YF07XG4gICAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ3ZlcnNpb25zJyBpbiBwcm9jZXNzKSB7XG4gICAgICAgICAgICBjbGllbnRIZWFkZXIucHVzaChgZ2wtbm9kZS8ke3Byb2Nlc3MudmVyc2lvbnMubm9kZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsaWVudEhlYWRlci5wdXNoKGBnbC13ZWIvJHt2ZXJzaW9ufWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0cy5mYWxsYmFjaykge1xuICAgICAgICAgICAgY2xpZW50SGVhZGVyLnB1c2goYGdycGMvJHtnYXhHcnBjLmdycGNWZXJzaW9ufWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdHMuZmFsbGJhY2sgPT09ICdyZXN0Jykge1xuICAgICAgICAgICAgY2xpZW50SGVhZGVyLnB1c2goYHJlc3QvJHtnYXhHcnBjLmdycGNWZXJzaW9ufWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLmxpYk5hbWUgJiYgb3B0cy5saWJWZXJzaW9uKSB7XG4gICAgICAgICAgICBjbGllbnRIZWFkZXIucHVzaChgJHtvcHRzLmxpYk5hbWV9LyR7b3B0cy5saWJWZXJzaW9ufWApO1xuICAgICAgICB9XG4gICAgICAgIC8vIExvYWQgdGhlIGFwcGxpY2FibGUgcHJvdG9zLlxuICAgICAgICB0aGlzLl9wcm90b3MgPSBnYXhHcnBjLmxvYWRQcm90b0pTT04oanNvblByb3Rvcyk7XG4gICAgICAgIC8vIFNvbWUgb2YgdGhlIG1ldGhvZHMgb24gdGhpcyBzZXJ2aWNlIHJldHVybiBcInBhZ2VkXCIgcmVzdWx0cyxcbiAgICAgICAgLy8gKGUuZy4gNTAgcmVzdWx0cyBhdCBhIHRpbWUsIHdpdGggdG9rZW5zIHRvIGdldCBzdWJzZXF1ZW50XG4gICAgICAgIC8vIHBhZ2VzKS4gRGVub3RlIHRoZSBrZXlzIHVzZWQgZm9yIHBhZ2luYXRpb24gYW5kIHJlc3VsdHMuXG4gICAgICAgIHRoaXMuZGVzY3JpcHRvcnMucGFnZSA9IHtcbiAgICAgICAgICAgIGxpc3RMb2NhdGlvbnM6IG5ldyBwYWdlRGVzY3JpcHRvcl8xLlBhZ2VEZXNjcmlwdG9yKCdwYWdlVG9rZW4nLCAnbmV4dFBhZ2VUb2tlbicsICdsb2NhdGlvbnMnKSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUHV0IHRvZ2V0aGVyIHRoZSBkZWZhdWx0IG9wdGlvbnMgc2VudCB3aXRoIHJlcXVlc3RzLlxuICAgICAgICB0aGlzLl9kZWZhdWx0cyA9IGdheEdycGMuY29uc3RydWN0U2V0dGluZ3MoJ2dvb2dsZS5jbG91ZC5sb2NhdGlvbi5Mb2NhdGlvbnMnLCBnYXBpY0NvbmZpZywgb3B0cy5jbGllbnRDb25maWcgfHwge30sIHsgJ3gtZ29vZy1hcGktY2xpZW50JzogY2xpZW50SGVhZGVyLmpvaW4oJyAnKSB9KTtcbiAgICAgICAgLy8gU2V0IHVwIGEgZGljdGlvbmFyeSBvZiBcImlubmVyIEFQSSBjYWxsc1wiOyB0aGUgY29yZSBpbXBsZW1lbnRhdGlvblxuICAgICAgICAvLyBvZiBjYWxsaW5nIHRoZSBBUEkgaXMgaGFuZGxlZCBpbiBgZ29vZ2xlLWdheGAsIHdpdGggdGhpcyBjb2RlXG4gICAgICAgIC8vIG1lcmVseSBwcm92aWRpbmcgdGhlIGRlc3RpbmF0aW9uIGFuZCByZXF1ZXN0IGluZm9ybWF0aW9uLlxuICAgICAgICB0aGlzLmlubmVyQXBpQ2FsbHMgPSB7fTtcbiAgICAgICAgLy8gQWRkIGEgd2FybiBmdW5jdGlvbiB0byB0aGUgY2xpZW50IGNvbnN0cnVjdG9yIHNvIGl0IGNhbiBiZSBlYXNpbHkgdGVzdGVkLlxuICAgICAgICB0aGlzLndhcm4gPSB3YXJuaW5nc18xLndhcm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIGNsaWVudC5cbiAgICAgKiBQZXJmb3JtcyBhc3luY2hyb25vdXMgb3BlcmF0aW9ucyAoc3VjaCBhcyBhdXRoZW50aWNhdGlvbikgYW5kIHByZXBhcmVzIHRoZSBjbGllbnQuXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhdXRvbWF0aWNhbGx5IHdoZW4gYW55IGNsYXNzIG1ldGhvZCBpcyBjYWxsZWQgZm9yIHRoZVxuICAgICAqIGZpcnN0IHRpbWUsIGJ1dCBpZiB5b3UgbmVlZCB0byBpbml0aWFsaXplIGl0IGJlZm9yZSBjYWxsaW5nIGFuIGFjdHVhbCBtZXRob2QsXG4gICAgICogZmVlbCBmcmVlIHRvIGNhbGwgaW5pdGlhbGl6ZSgpIGRpcmVjdGx5LlxuICAgICAqXG4gICAgICogWW91IGNhbiBhd2FpdCBvbiB0aGlzIG1ldGhvZCBpZiB5b3Ugd2FudCB0byBtYWtlIHN1cmUgdGhlIGNsaWVudCBpcyBpbml0aWFsaXplZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBhdXRoZW50aWNhdGVkIHNlcnZpY2Ugc3R1Yi5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICAvLyBJZiB0aGUgY2xpZW50IHN0dWIgcHJvbWlzZSBpcyBhbHJlYWR5IGluaXRpYWxpemVkLCByZXR1cm4gaW1tZWRpYXRlbHkuXG4gICAgICAgIGlmICh0aGlzLmxvY2F0aW9uc1N0dWIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2F0aW9uc1N0dWI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHV0IHRvZ2V0aGVyIHRoZSBcInNlcnZpY2Ugc3R1YlwiIGZvclxuICAgICAgICAvLyBnb29nbGUuY2xvdWQubG9jYXRpb24uTG9jYXRpb25zLlxuICAgICAgICB0aGlzLmxvY2F0aW9uc1N0dWIgPSB0aGlzLmdheEdycGMuY3JlYXRlU3R1Yih0aGlzLl9vcHRzLmZhbGxiYWNrXG4gICAgICAgICAgICA/IHRoaXMuX3Byb3Rvcy5sb29rdXBTZXJ2aWNlKCdnb29nbGUuY2xvdWQubG9jYXRpb24uTG9jYXRpb25zJylcbiAgICAgICAgICAgIDogLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm90b3MuZ29vZ2xlLmNsb3VkLmxvY2F0aW9uLkxvY2F0aW9ucywgdGhpcy5fb3B0cywgdGhpcy5fcHJvdmlkZWRDdXN0b21TZXJ2aWNlUGF0aCk7XG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBlYWNoIG9mIHRoZSBtZXRob2RzIHRoYXQgdGhlIHNlcnZpY2UgcHJvdmlkZXNcbiAgICAgICAgLy8gYW5kIGNyZWF0ZSBhbiBBUEkgY2FsbCBtZXRob2QgZm9yIGVhY2guXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uc1N0dWJNZXRob2RzID0gWydsaXN0TG9jYXRpb25zJywgJ2dldExvY2F0aW9uJ107XG4gICAgICAgIGZvciAoY29uc3QgbWV0aG9kTmFtZSBvZiBsb2NhdGlvbnNTdHViTWV0aG9kcykge1xuICAgICAgICAgICAgY29uc3QgY2FsbFByb21pc2UgPSB0aGlzLmxvY2F0aW9uc1N0dWIudGhlbihzdHViID0+ICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdUaGUgY2xpZW50IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBmdW5jID0gc3R1YlttZXRob2ROYW1lXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShzdHViLCBhcmdzKTtcbiAgICAgICAgICAgIH0sIChlcnIpID0+ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB0aGlzLmRlc2NyaXB0b3JzLnBhZ2VbbWV0aG9kTmFtZV0gfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgYXBpQ2FsbCA9ICgwLCBjcmVhdGVBcGlDYWxsXzEuY3JlYXRlQXBpQ2FsbCkoY2FsbFByb21pc2UsIHRoaXMuX2RlZmF1bHRzW21ldGhvZE5hbWVdLCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIHRoaXMuaW5uZXJBcGlDYWxsc1ttZXRob2ROYW1lXSA9IGFwaUNhbGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb25zU3R1YjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIEROUyBhZGRyZXNzIGZvciB0aGlzIEFQSSBzZXJ2aWNlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBETlMgYWRkcmVzcyBmb3IgdGhpcyBzZXJ2aWNlLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgc2VydmljZVBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnY2xvdWQuZ29vZ2xlYXBpcy5jb20nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgRE5TIGFkZHJlc3MgZm9yIHRoaXMgQVBJIHNlcnZpY2UgLSBzYW1lIGFzIHNlcnZpY2VQYXRoKCksXG4gICAgICogZXhpc3RzIGZvciBjb21wYXRpYmlsaXR5IHJlYXNvbnMuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIEROUyBhZGRyZXNzIGZvciB0aGlzIHNlcnZpY2UuXG4gICAgICovXG4gICAgc3RhdGljIGdldCBhcGlFbmRwb2ludCgpIHtcbiAgICAgICAgcmV0dXJuICdjbG91ZC5nb29nbGVhcGlzLmNvbSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBwb3J0IGZvciB0aGlzIEFQSSBzZXJ2aWNlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBkZWZhdWx0IHBvcnQgZm9yIHRoaXMgc2VydmljZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IHBvcnQoKSB7XG4gICAgICAgIHJldHVybiA0NDM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBzY29wZXMgbmVlZGVkIHRvIG1ha2UgZ1JQQyBjYWxscyBmb3IgZXZlcnkgbWV0aG9kIGRlZmluZWRcbiAgICAgKiBpbiB0aGlzIHNlcnZpY2UuXG4gICAgICogQHJldHVybnMge3N0cmluZ1tdfSBMaXN0IG9mIGRlZmF1bHQgc2NvcGVzLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgc2NvcGVzKCkge1xuICAgICAgICByZXR1cm4gWydodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtJ107XG4gICAgfVxuICAgIGdldFByb2plY3RJZChjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuYXV0aC5nZXRQcm9qZWN0SWQoY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmF1dGguZ2V0UHJvamVjdElkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgaW5mb3JtYXRpb24gYWJvdXQgYSBsb2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZXF1ZXN0XG4gICAgICogICBUaGUgcmVxdWVzdCBvYmplY3QgdGhhdCB3aWxsIGJlIHNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3QubmFtZVxuICAgICAqICAgUmVzb3VyY2UgbmFtZSBmb3IgdGhlIGxvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiAgIENhbGwgb3B0aW9ucy4gU2VlIHtAbGluayBodHRwczovL2dvb2dsZWFwaXMuZGV2L25vZGVqcy9nb29nbGUtZ2F4L2xhdGVzdC9pbnRlcmZhY2VzL0NhbGxPcHRpb25zLmh0bWx8Q2FsbE9wdGlvbnN9IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge1Byb21pc2V9IC0gVGhlIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgdG8gYW4gYXJyYXkuXG4gICAgICogICBUaGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgYXJyYXkgaXMgYW4gb2JqZWN0IHJlcHJlc2VudGluZyBbTG9jYXRpb25de0BsaW5rIGdvb2dsZS5jbG91ZC5sb2NhdGlvbi5Mb2NhdGlvbn0uXG4gICAgICogICBQbGVhc2Ugc2VlIHRoZVxuICAgICAqICAgW2RvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVhcGlzL2dheC1ub2RlanMvYmxvYi9tYWluL2NsaWVudC1saWJyYXJpZXMubWQjcmVndWxhci1tZXRob2RzKVxuICAgICAqICAgZm9yIG1vcmUgZGV0YWlscyBhbmQgZXhhbXBsZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBjb25zdCBbcmVzcG9uc2VdID0gYXdhaXQgY2xpZW50LmdldExvY2F0aW9uKHJlcXVlc3QpO1xuICAgICAqL1xuICAgIGdldExvY2F0aW9uKHJlcXVlc3QsIG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjaykge1xuICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdCB8fCB7fTtcbiAgICAgICAgbGV0IG9wdGlvbnM7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgJiYgY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zT3JDYWxsYmFjaztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zT3JDYWxsYmFjaztcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5vdGhlckFyZ3MgPSBvcHRpb25zLm90aGVyQXJncyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5vdGhlckFyZ3MuaGVhZGVycyA9IG9wdGlvbnMub3RoZXJBcmdzLmhlYWRlcnMgfHwge307XG4gICAgICAgIG9wdGlvbnMub3RoZXJBcmdzLmhlYWRlcnNbJ3gtZ29vZy1yZXF1ZXN0LXBhcmFtcyddID1cbiAgICAgICAgICAgIHJvdXRpbmdIZWFkZXIuZnJvbVBhcmFtcyh7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdC5uYW1lIHx8ICcnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbm5lckFwaUNhbGxzLmdldExvY2F0aW9uKHJlcXVlc3QsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdHMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN1cHBvcnRlZCBsb2NhdGlvbnMgZm9yIHRoaXMgc2VydmljZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZXF1ZXN0XG4gICAgICogICBUaGUgcmVxdWVzdCBvYmplY3QgdGhhdCB3aWxsIGJlIHNlbnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3QubmFtZVxuICAgICAqICAgVGhlIHJlc291cmNlIHRoYXQgb3ducyB0aGUgbG9jYXRpb25zIGNvbGxlY3Rpb24sIGlmIGFwcGxpY2FibGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3QuZmlsdGVyXG4gICAgICogICBUaGUgc3RhbmRhcmQgbGlzdCBmaWx0ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJlcXVlc3QucGFnZVNpemVcbiAgICAgKiAgIFRoZSBzdGFuZGFyZCBsaXN0IHBhZ2Ugc2l6ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdC5wYWdlVG9rZW5cbiAgICAgKiAgIFRoZSBzdGFuZGFyZCBsaXN0IHBhZ2UgdG9rZW4uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgICAqICAgQ2FsbCBvcHRpb25zLiBTZWUge0BsaW5rIGh0dHBzOi8vZ29vZ2xlYXBpcy5kZXYvbm9kZWpzL2dvb2dsZS1nYXgvbGF0ZXN0L2ludGVyZmFjZXMvQ2FsbE9wdGlvbnMuaHRtbHxDYWxsT3B0aW9uc30gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gLSBUaGUgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byBhbiBhcnJheS5cbiAgICAgKiAgIFRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBhcnJheSBpcyBBcnJheSBvZiBbTG9jYXRpb25de0BsaW5rIGdvb2dsZS5jbG91ZC5sb2NhdGlvbi5Mb2NhdGlvbn0uXG4gICAgICogICBUaGUgY2xpZW50IGxpYnJhcnkgd2lsbCBwZXJmb3JtIGF1dG8tcGFnaW5hdGlvbiBieSBkZWZhdWx0OiBpdCB3aWxsIGNhbGwgdGhlIEFQSSBhcyBtYW55XG4gICAgICogICB0aW1lcyBhcyBuZWVkZWQgYW5kIHdpbGwgbWVyZ2UgcmVzdWx0cyBmcm9tIGFsbCB0aGUgcGFnZXMgaW50byB0aGlzIGFycmF5LlxuICAgICAqICAgTm90ZSB0aGF0IGl0IGNhbiBhZmZlY3QgeW91ciBxdW90YS5cbiAgICAgKiAgIFdlIHJlY29tbWVuZCB1c2luZyBgbGlzdExvY2F0aW9uc0FzeW5jKClgXG4gICAgICogICBtZXRob2QgZGVzY3JpYmVkIGJlbG93IGZvciBhc3luYyBpdGVyYXRpb24gd2hpY2ggeW91IGNhbiBzdG9wIGFzIG5lZWRlZC5cbiAgICAgKiAgIFBsZWFzZSBzZWUgdGhlXG4gICAgICogICBbZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZWFwaXMvZ2F4LW5vZGVqcy9ibG9iL21haW4vY2xpZW50LWxpYnJhcmllcy5tZCNhdXRvLXBhZ2luYXRpb24pXG4gICAgICogICBmb3IgbW9yZSBkZXRhaWxzIGFuZCBleGFtcGxlcy5cbiAgICAgKi9cbiAgICBsaXN0TG9jYXRpb25zKHJlcXVlc3QsIG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjaykge1xuICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdCB8fCB7fTtcbiAgICAgICAgbGV0IG9wdGlvbnM7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgJiYgY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zT3JDYWxsYmFjaztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zT3JDYWxsYmFjaztcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5vdGhlckFyZ3MgPSBvcHRpb25zLm90aGVyQXJncyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5vdGhlckFyZ3MuaGVhZGVycyA9IG9wdGlvbnMub3RoZXJBcmdzLmhlYWRlcnMgfHwge307XG4gICAgICAgIG9wdGlvbnMub3RoZXJBcmdzLmhlYWRlcnNbJ3gtZ29vZy1yZXF1ZXN0LXBhcmFtcyddID1cbiAgICAgICAgICAgIHJvdXRpbmdIZWFkZXIuZnJvbVBhcmFtcyh7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdC5uYW1lIHx8ICcnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbm5lckFwaUNhbGxzLmxpc3RMb2NhdGlvbnMocmVxdWVzdCwgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIGBsaXN0TG9jYXRpb25zYCwgYnV0IHJldHVybnMgYW4gaXRlcmFibGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogYGZvcmAtYGF3YWl0YC1gb2ZgIHN5bnRheCBpcyB1c2VkIHdpdGggdGhlIGl0ZXJhYmxlIHRvIGdldCByZXNwb25zZSBlbGVtZW50cyBvbi1kZW1hbmQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlcXVlc3RcbiAgICAgKiAgIFRoZSByZXF1ZXN0IG9iamVjdCB0aGF0IHdpbGwgYmUgc2VudC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdC5uYW1lXG4gICAgICogICBUaGUgcmVzb3VyY2UgdGhhdCBvd25zIHRoZSBsb2NhdGlvbnMgY29sbGVjdGlvbiwgaWYgYXBwbGljYWJsZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdC5maWx0ZXJcbiAgICAgKiAgIFRoZSBzdGFuZGFyZCBsaXN0IGZpbHRlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmVxdWVzdC5wYWdlU2l6ZVxuICAgICAqICAgVGhlIHN0YW5kYXJkIGxpc3QgcGFnZSBzaXplLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0LnBhZ2VUb2tlblxuICAgICAqICAgVGhlIHN0YW5kYXJkIGxpc3QgcGFnZSB0b2tlbi5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAgICogICBDYWxsIG9wdGlvbnMuIFNlZSB7QGxpbmsgaHR0cHM6Ly9nb29nbGVhcGlzLmRldi9ub2RlanMvZ29vZ2xlLWdheC9sYXRlc3QvaW50ZXJmYWNlcy9DYWxsT3B0aW9ucy5odG1sfENhbGxPcHRpb25zfSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICogICBBbiBpdGVyYWJsZSBPYmplY3QgdGhhdCBhbGxvd3MgW2FzeW5jIGl0ZXJhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvSXRlcmF0aW9uX3Byb3RvY29scykuXG4gICAgICogICBXaGVuIHlvdSBpdGVyYXRlIHRoZSByZXR1cm5lZCBpdGVyYWJsZSwgZWFjaCBlbGVtZW50IHdpbGwgYmUgYW4gb2JqZWN0IHJlcHJlc2VudGluZ1xuICAgICAqICAgW0xvY2F0aW9uXXtAbGluayBnb29nbGUuY2xvdWQubG9jYXRpb24uTG9jYXRpb259LiBUaGUgQVBJIHdpbGwgYmUgY2FsbGVkIHVuZGVyIHRoZSBob29kIGFzIG5lZWRlZCwgb25jZSBwZXIgdGhlIHBhZ2UsXG4gICAgICogICBzbyB5b3UgY2FuIHN0b3AgdGhlIGl0ZXJhdGlvbiB3aGVuIHlvdSBkb24ndCBuZWVkIG1vcmUgcmVzdWx0cy5cbiAgICAgKiAgIFBsZWFzZSBzZWUgdGhlXG4gICAgICogICBbZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZWFwaXMvZ2F4LW5vZGVqcy9ibG9iL21haW4vY2xpZW50LWxpYnJhcmllcy5tZCNhdXRvLXBhZ2luYXRpb24pXG4gICAgICogICBmb3IgbW9yZSBkZXRhaWxzIGFuZCBleGFtcGxlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGNvbnN0IGl0ZXJhYmxlID0gY2xpZW50Lmxpc3RMb2NhdGlvbnNBc3luYyhyZXF1ZXN0KTtcbiAgICAgKiBmb3IgYXdhaXQgKGNvbnN0IHJlc3BvbnNlIG9mIGl0ZXJhYmxlKSB7XG4gICAgICogICAvLyBwcm9jZXNzIHJlc3BvbnNlXG4gICAgICogfVxuICAgICAqL1xuICAgIGxpc3RMb2NhdGlvbnNBc3luYyhyZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIHJlcXVlc3QgPSByZXF1ZXN0IHx8IHt9O1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5vdGhlckFyZ3MgPSBvcHRpb25zLm90aGVyQXJncyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5vdGhlckFyZ3MuaGVhZGVycyA9IG9wdGlvbnMub3RoZXJBcmdzLmhlYWRlcnMgfHwge307XG4gICAgICAgIG9wdGlvbnMub3RoZXJBcmdzLmhlYWRlcnNbJ3gtZ29vZy1yZXF1ZXN0LXBhcmFtcyddID1cbiAgICAgICAgICAgIHJvdXRpbmdIZWFkZXIuZnJvbVBhcmFtcyh7XG4gICAgICAgICAgICAgICAgbmFtZTogcmVxdWVzdC5uYW1lIHx8ICcnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBjb25zdCBjYWxsU2V0dGluZ3MgPSBuZXcgZ2F4LkNhbGxTZXR0aW5ncyhvcHRpb25zKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmRlc2NyaXB0b3JzLnBhZ2UubGlzdExvY2F0aW9ucy5hc3luY0l0ZXJhdGUodGhpcy5pbm5lckFwaUNhbGxzWydsaXN0TG9jYXRpb25zJ10sIHJlcXVlc3QsIGNhbGxTZXR0aW5ncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlcm1pbmF0ZSB0aGUgZ1JQQyBjaGFubmVsIGFuZCBjbG9zZSB0aGUgY2xpZW50LlxuICAgICAqXG4gICAgICogVGhlIGNsaWVudCB3aWxsIG5vIGxvbmdlciBiZSB1c2FibGUgYW5kIGFsbCBmdXR1cmUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBjbGllbnQgaXMgY2xvc2VkLlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICAgICAgaWYgKCF0aGlzLl90ZXJtaW5hdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbnNTdHViLnRoZW4oc3R1YiA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3R1Yi5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbn1cbmV4cG9ydHMuTG9jYXRpb25zQ2xpZW50ID0gTG9jYXRpb25zQ2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYXRpb25TZXJ2aWNlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkxvY2F0aW9uc0NsaWVudCIsImdheCIsInJlcXVpcmUiLCJ3YXJuaW5nc18xIiwiY3JlYXRlQXBpQ2FsbF8xIiwicm91dGluZ0hlYWRlciIsInBhZ2VEZXNjcmlwdG9yXzEiLCJqc29uUHJvdG9zIiwiZ2FwaWNDb25maWciLCJ2ZXJzaW9uIiwiY29uc3RydWN0b3IiLCJnYXhHcnBjIiwib3B0cyIsIl9hIiwiX2IiLCJfdGVybWluYXRlZCIsImRlc2NyaXB0b3JzIiwicGFnZSIsInN0cmVhbSIsImxvbmdydW5uaW5nIiwiYmF0Y2hpbmciLCJzdGF0aWNNZW1iZXJzIiwic2VydmljZVBhdGgiLCJhcGlFbmRwb2ludCIsIl9wcm92aWRlZEN1c3RvbVNlcnZpY2VQYXRoIiwicG9ydCIsImNsaWVudENvbmZpZyIsImZhbGxiYWNrIiwid2luZG93IiwiZmV0Y2giLCJhc3NpZ24iLCJzY29wZXMiLCJfb3B0cyIsImF1dGgiLCJkZWZhdWx0U2NvcGVzIiwiY2xpZW50SGVhZGVyIiwicHJvY2VzcyIsInB1c2giLCJ2ZXJzaW9ucyIsIm5vZGUiLCJncnBjVmVyc2lvbiIsImxpYk5hbWUiLCJsaWJWZXJzaW9uIiwiX3Byb3RvcyIsImxvYWRQcm90b0pTT04iLCJsaXN0TG9jYXRpb25zIiwiUGFnZURlc2NyaXB0b3IiLCJfZGVmYXVsdHMiLCJjb25zdHJ1Y3RTZXR0aW5ncyIsImpvaW4iLCJpbm5lckFwaUNhbGxzIiwid2FybiIsImluaXRpYWxpemUiLCJsb2NhdGlvbnNTdHViIiwiY3JlYXRlU3R1YiIsImxvb2t1cFNlcnZpY2UiLCJnb29nbGUiLCJjbG91ZCIsImxvY2F0aW9uIiwiTG9jYXRpb25zIiwibG9jYXRpb25zU3R1Yk1ldGhvZHMiLCJtZXRob2ROYW1lIiwiY2FsbFByb21pc2UiLCJ0aGVuIiwic3R1YiIsImFyZ3MiLCJQcm9taXNlIiwicmVqZWN0IiwiZnVuYyIsImFwcGx5IiwiZXJyIiwiZGVzY3JpcHRvciIsInVuZGVmaW5lZCIsImFwaUNhbGwiLCJjcmVhdGVBcGlDYWxsIiwiZ2V0UHJvamVjdElkIiwiY2FsbGJhY2siLCJnZXRMb2NhdGlvbiIsInJlcXVlc3QiLCJvcHRpb25zT3JDYWxsYmFjayIsIm9wdGlvbnMiLCJvdGhlckFyZ3MiLCJoZWFkZXJzIiwiZnJvbVBhcmFtcyIsIm5hbWUiLCJsaXN0TG9jYXRpb25zQXN5bmMiLCJjYWxsU2V0dGluZ3MiLCJDYWxsU2V0dGluZ3MiLCJhc3luY0l0ZXJhdGUiLCJjbG9zZSIsInJlc29sdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/locationService.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js":
/*!************************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LongrunningApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nconst gax_1 = __webpack_require__(/*! ../gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst longrunning_1 = __webpack_require__(/*! ./longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\nclass LongrunningApiCaller {\n    /**\n     * Creates an API caller that performs polling on a long running operation.\n     *\n     * @private\n     * @constructor\n     * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n     * decoders used for unpacking responses and the operationsClient\n     * used for polling the operation.\n     */ constructor(longrunningDescriptor){\n        this.longrunningDescriptor = longrunningDescriptor;\n    }\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, canceller) {\n        canceller.call((argument, callback)=>{\n            return this._wrapOperation(apiCall, settings, argument, callback);\n        }, argument);\n    }\n    _wrapOperation(apiCall, settings, argument, callback) {\n        let backoffSettings = settings.longrunning;\n        if (!backoffSettings) {\n            backoffSettings = (0, gax_1.createDefaultBackoffSettings)();\n        }\n        const longrunningDescriptor = this.longrunningDescriptor;\n        return apiCall(argument, (err, rawResponse)=>{\n            if (err) {\n                callback(err, null, null, rawResponse);\n                return;\n            }\n            const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n            callback(null, operation, rawResponse);\n        });\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.LongrunningApiCaller = LongrunningApiCaller; //# sourceMappingURL=longRunningApiCaller.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbG9uZ1J1bm5pbmdDYWxscy9sb25nUnVubmluZ0FwaUNhbGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw0QkFBNEIsR0FBRyxLQUFLO0FBQ3BDLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLGtFQUFTO0FBQ2hDLE1BQU1DLFFBQVFELG1CQUFPQSxDQUFDLGdFQUFRO0FBQzlCLE1BQU1FLGdCQUFnQkYsbUJBQU9BLENBQUMsZ0dBQWU7QUFDN0MsTUFBTUY7SUFDRjs7Ozs7Ozs7S0FRQyxHQUNESyxZQUFZQyxxQkFBcUIsQ0FBRTtRQUMvQixJQUFJLENBQUNBLHFCQUFxQixHQUFHQTtJQUNqQztJQUNBQyxLQUFLQyxRQUFRLEVBQUU7UUFDWCxJQUFJQSxVQUFVO1lBQ1YsT0FBTyxJQUFJUCxPQUFPUSxXQUFXLENBQUNEO1FBQ2xDO1FBQ0EsT0FBTyxJQUFJUCxPQUFPUyxrQkFBa0I7SUFDeEM7SUFDQUMsS0FBS0MsSUFBSSxFQUFFO1FBQ1AsT0FBT0E7SUFDWDtJQUNBQyxLQUFLQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUU7UUFDekNBLFVBQVVKLElBQUksQ0FBQyxDQUFDRSxVQUFVUDtZQUN0QixPQUFPLElBQUksQ0FBQ1UsY0FBYyxDQUFDSixTQUFTRSxVQUFVRCxVQUFVUDtRQUM1RCxHQUFHTztJQUNQO0lBQ0FHLGVBQWVKLE9BQU8sRUFBRUUsUUFBUSxFQUFFRCxRQUFRLEVBQUVQLFFBQVEsRUFBRTtRQUNsRCxJQUFJVyxrQkFBa0JILFNBQVNJLFdBQVc7UUFDMUMsSUFBSSxDQUFDRCxpQkFBaUI7WUFDbEJBLGtCQUFrQixDQUFDLEdBQUdoQixNQUFNa0IsNEJBQTRCO1FBQzVEO1FBQ0EsTUFBTWYsd0JBQXdCLElBQUksQ0FBQ0EscUJBQXFCO1FBQ3hELE9BQU9RLFFBQVFDLFVBQVUsQ0FBQ08sS0FBS0M7WUFDM0IsSUFBSUQsS0FBSztnQkFDTGQsU0FBU2MsS0FBSyxNQUFNLE1BQU1DO2dCQUMxQjtZQUNKO1lBQ0EsTUFBTUMsWUFBWSxJQUFJcEIsY0FBY3FCLFNBQVMsQ0FBQ0YsYUFBYWpCLHVCQUF1QmEsaUJBQWlCSDtZQUNuR1IsU0FBUyxNQUFNZ0IsV0FBV0Q7UUFDOUI7SUFDSjtJQUNBRyxLQUFLVCxTQUFTLEVBQUVLLEdBQUcsRUFBRTtRQUNqQkwsVUFBVVQsUUFBUSxDQUFDYztJQUN2QjtJQUNBSyxPQUFPVixTQUFTLEVBQUU7UUFDZCxPQUFPQSxVQUFVVyxPQUFPO0lBQzVCO0FBQ0o7QUFDQTlCLDRCQUE0QixHQUFHRSxzQkFDL0IsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2xvbmdSdW5uaW5nQ2FsbHMvbG9uZ1J1bm5pbmdBcGlDYWxsZXIuanM/NzNmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTG9uZ3J1bm5pbmdBcGlDYWxsZXIgPSB2b2lkIDA7XG5jb25zdCBjYWxsXzEgPSByZXF1aXJlKFwiLi4vY2FsbFwiKTtcbmNvbnN0IGdheF8xID0gcmVxdWlyZShcIi4uL2dheFwiKTtcbmNvbnN0IGxvbmdydW5uaW5nXzEgPSByZXF1aXJlKFwiLi9sb25ncnVubmluZ1wiKTtcbmNsYXNzIExvbmdydW5uaW5nQXBpQ2FsbGVyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIEFQSSBjYWxsZXIgdGhhdCBwZXJmb3JtcyBwb2xsaW5nIG9uIGEgbG9uZyBydW5uaW5nIG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtMb25nUnVubmluZ0Rlc2NyaXB0b3J9IGxvbmdydW5uaW5nRGVzY3JpcHRvciAtIEhvbGRzIHRoZVxuICAgICAqIGRlY29kZXJzIHVzZWQgZm9yIHVucGFja2luZyByZXNwb25zZXMgYW5kIHRoZSBvcGVyYXRpb25zQ2xpZW50XG4gICAgICogdXNlZCBmb3IgcG9sbGluZyB0aGUgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvbmdydW5uaW5nRGVzY3JpcHRvcikge1xuICAgICAgICB0aGlzLmxvbmdydW5uaW5nRGVzY3JpcHRvciA9IGxvbmdydW5uaW5nRGVzY3JpcHRvcjtcbiAgICB9XG4gICAgaW5pdChjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FsbF8xLk9uZ29pbmdDYWxsKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGNhbGxfMS5PbmdvaW5nQ2FsbFByb21pc2UoKTtcbiAgICB9XG4gICAgd3JhcChmdW5jKSB7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgIH1cbiAgICBjYWxsKGFwaUNhbGwsIGFyZ3VtZW50LCBzZXR0aW5ncywgY2FuY2VsbGVyKSB7XG4gICAgICAgIGNhbmNlbGxlci5jYWxsKChhcmd1bWVudCwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93cmFwT3BlcmF0aW9uKGFwaUNhbGwsIHNldHRpbmdzLCBhcmd1bWVudCwgY2FsbGJhY2spO1xuICAgICAgICB9LCBhcmd1bWVudCk7XG4gICAgfVxuICAgIF93cmFwT3BlcmF0aW9uKGFwaUNhbGwsIHNldHRpbmdzLCBhcmd1bWVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IGJhY2tvZmZTZXR0aW5ncyA9IHNldHRpbmdzLmxvbmdydW5uaW5nO1xuICAgICAgICBpZiAoIWJhY2tvZmZTZXR0aW5ncykge1xuICAgICAgICAgICAgYmFja29mZlNldHRpbmdzID0gKDAsIGdheF8xLmNyZWF0ZURlZmF1bHRCYWNrb2ZmU2V0dGluZ3MpKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9uZ3J1bm5pbmdEZXNjcmlwdG9yID0gdGhpcy5sb25ncnVubmluZ0Rlc2NyaXB0b3I7XG4gICAgICAgIHJldHVybiBhcGlDYWxsKGFyZ3VtZW50LCAoZXJyLCByYXdSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCwgbnVsbCwgcmF3UmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG5ldyBsb25ncnVubmluZ18xLk9wZXJhdGlvbihyYXdSZXNwb25zZSwgbG9uZ3J1bm5pbmdEZXNjcmlwdG9yLCBiYWNrb2ZmU2V0dGluZ3MsIHNldHRpbmdzKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG9wZXJhdGlvbiwgcmF3UmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZmFpbChjYW5jZWxsZXIsIGVycikge1xuICAgICAgICBjYW5jZWxsZXIuY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gICAgcmVzdWx0KGNhbmNlbGxlcikge1xuICAgICAgICByZXR1cm4gY2FuY2VsbGVyLnByb21pc2U7XG4gICAgfVxufVxuZXhwb3J0cy5Mb25ncnVubmluZ0FwaUNhbGxlciA9IExvbmdydW5uaW5nQXBpQ2FsbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9uZ1J1bm5pbmdBcGlDYWxsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTG9uZ3J1bm5pbmdBcGlDYWxsZXIiLCJjYWxsXzEiLCJyZXF1aXJlIiwiZ2F4XzEiLCJsb25ncnVubmluZ18xIiwiY29uc3RydWN0b3IiLCJsb25ncnVubmluZ0Rlc2NyaXB0b3IiLCJpbml0IiwiY2FsbGJhY2siLCJPbmdvaW5nQ2FsbCIsIk9uZ29pbmdDYWxsUHJvbWlzZSIsIndyYXAiLCJmdW5jIiwiY2FsbCIsImFwaUNhbGwiLCJhcmd1bWVudCIsInNldHRpbmdzIiwiY2FuY2VsbGVyIiwiX3dyYXBPcGVyYXRpb24iLCJiYWNrb2ZmU2V0dGluZ3MiLCJsb25ncnVubmluZyIsImNyZWF0ZURlZmF1bHRCYWNrb2ZmU2V0dGluZ3MiLCJlcnIiLCJyYXdSZXNwb25zZSIsIm9wZXJhdGlvbiIsIk9wZXJhdGlvbiIsImZhaWwiLCJyZXN1bHQiLCJwcm9taXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LongRunningDescriptor = void 0;\nconst longRunningApiCaller_1 = __webpack_require__(/*! ./longRunningApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js\");\n/**\n * A descriptor for long-running operations.\n */ class LongRunningDescriptor {\n    constructor(operationsClient, responseDecoder, metadataDecoder){\n        this.operationsClient = operationsClient;\n        this.responseDecoder = responseDecoder;\n        this.metadataDecoder = metadataDecoder;\n    }\n    getApiCaller() {\n        return new longRunningApiCaller_1.LongrunningApiCaller(this);\n    }\n}\nexports.LongRunningDescriptor = LongRunningDescriptor; //# sourceMappingURL=longRunningDescriptor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbG9uZ1J1bm5pbmdDYWxscy9sb25nUnVubmluZ0Rlc2NyaXB0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUcsS0FBSztBQUNyQyxNQUFNRyx5QkFBeUJDLG1CQUFPQSxDQUFDLGtIQUF3QjtBQUMvRDs7Q0FFQyxHQUNELE1BQU1GO0lBQ0ZHLFlBQVlDLGdCQUFnQixFQUFFQyxlQUFlLEVBQUVDLGVBQWUsQ0FBRTtRQUM1RCxJQUFJLENBQUNGLGdCQUFnQixHQUFHQTtRQUN4QixJQUFJLENBQUNDLGVBQWUsR0FBR0E7UUFDdkIsSUFBSSxDQUFDQyxlQUFlLEdBQUdBO0lBQzNCO0lBQ0FDLGVBQWU7UUFDWCxPQUFPLElBQUlOLHVCQUF1Qk8sb0JBQW9CLENBQUMsSUFBSTtJQUMvRDtBQUNKO0FBQ0FWLDZCQUE2QixHQUFHRSx1QkFDaEMsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2xvbmdSdW5uaW5nQ2FsbHMvbG9uZ1J1bm5pbmdEZXNjcmlwdG9yLmpzP2YwMjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxvbmdSdW5uaW5nRGVzY3JpcHRvciA9IHZvaWQgMDtcbmNvbnN0IGxvbmdSdW5uaW5nQXBpQ2FsbGVyXzEgPSByZXF1aXJlKFwiLi9sb25nUnVubmluZ0FwaUNhbGxlclwiKTtcbi8qKlxuICogQSBkZXNjcmlwdG9yIGZvciBsb25nLXJ1bm5pbmcgb3BlcmF0aW9ucy5cbiAqL1xuY2xhc3MgTG9uZ1J1bm5pbmdEZXNjcmlwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihvcGVyYXRpb25zQ2xpZW50LCByZXNwb25zZURlY29kZXIsIG1ldGFkYXRhRGVjb2Rlcikge1xuICAgICAgICB0aGlzLm9wZXJhdGlvbnNDbGllbnQgPSBvcGVyYXRpb25zQ2xpZW50O1xuICAgICAgICB0aGlzLnJlc3BvbnNlRGVjb2RlciA9IHJlc3BvbnNlRGVjb2RlcjtcbiAgICAgICAgdGhpcy5tZXRhZGF0YURlY29kZXIgPSBtZXRhZGF0YURlY29kZXI7XG4gICAgfVxuICAgIGdldEFwaUNhbGxlcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBsb25nUnVubmluZ0FwaUNhbGxlcl8xLkxvbmdydW5uaW5nQXBpQ2FsbGVyKHRoaXMpO1xuICAgIH1cbn1cbmV4cG9ydHMuTG9uZ1J1bm5pbmdEZXNjcmlwdG9yID0gTG9uZ1J1bm5pbmdEZXNjcmlwdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9uZ1J1bm5pbmdEZXNjcmlwdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkxvbmdSdW5uaW5nRGVzY3JpcHRvciIsImxvbmdSdW5uaW5nQXBpQ2FsbGVyXzEiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJvcGVyYXRpb25zQ2xpZW50IiwicmVzcG9uc2VEZWNvZGVyIiwibWV0YWRhdGFEZWNvZGVyIiwiZ2V0QXBpQ2FsbGVyIiwiTG9uZ3J1bm5pbmdBcGlDYWxsZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longrunning.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Operation = void 0;\nexports.operation = operation;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst operationProtos = __webpack_require__(/*! ../../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\");\nclass Operation extends events_1.EventEmitter {\n    /**\n     * Wrapper for a google.longrunnung.Operation.\n     *\n     * @constructor\n     *\n     * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\n     * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n     * operations service client and unpacking mechanisms for the operation.\n     * @param {BackoffSettings} backoffSettings - The backoff settings used in\n     * in polling the operation.\n     * @param {CallOptions} callOptions - CallOptions used in making get operation\n     * requests.\n     */ constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions){\n        super();\n        this.completeListeners = 0;\n        this.hasActiveListeners = false;\n        this.latestResponse = grpcOp;\n        this.name = this.latestResponse.name;\n        this.done = this.latestResponse.done;\n        this.error = this.latestResponse.error;\n        this.longrunningDescriptor = longrunningDescriptor;\n        this.result = null;\n        this.metadata = null;\n        this.backoffSettings = backoffSettings;\n        this._unpackResponse(grpcOp);\n        this._listenForEvents();\n        this._callOptions = callOptions;\n    }\n    /**\n     * Begin listening for events on the operation. This method keeps track of how\n     * many \"complete\" listeners are registered and removed, making sure polling\n     * is handled automatically.\n     *\n     * As long as there is one active \"complete\" listener, the connection is open.\n     * When there are no more listeners, the polling stops.\n     *\n     * @private\n     */ _listenForEvents() {\n        this.on(\"newListener\", (event)=>{\n            if (event === \"complete\") {\n                this.completeListeners++;\n                if (!this.hasActiveListeners) {\n                    this.hasActiveListeners = true;\n                    this.startPolling_();\n                }\n            }\n        });\n        this.on(\"removeListener\", (event)=>{\n            if (event === \"complete\" && --this.completeListeners === 0) {\n                this.hasActiveListeners = false;\n            }\n        });\n    }\n    /**\n     * Cancels current polling api call and cancels the operation.\n     *\n     * @return {Promise} the promise of the OperationsClient#cancelOperation api\n     * request.\n     */ cancel() {\n        if (this.currentCallPromise_) {\n            this.currentCallPromise_.cancel();\n        }\n        const operationsClient = this.longrunningDescriptor.operationsClient;\n        const cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();\n        cancelRequest.name = this.latestResponse.name;\n        return operationsClient.cancelOperation(cancelRequest);\n    }\n    getOperation(callback) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        const operationsClient = this.longrunningDescriptor.operationsClient;\n        function promisifyResponse() {\n            if (!callback) {\n                return new Promise((resolve, reject)=>{\n                    if (self.latestResponse.error) {\n                        const error = new googleError_1.GoogleError(self.latestResponse.error.message);\n                        error.code = self.latestResponse.error.code;\n                        reject(error);\n                    } else {\n                        resolve([\n                            self.result,\n                            self.metadata,\n                            self.latestResponse\n                        ]);\n                    }\n                });\n            }\n            return;\n        }\n        if (this.latestResponse.done) {\n            this._unpackResponse(this.latestResponse, callback);\n            return promisifyResponse();\n        }\n        const request = new operationProtos.google.longrunning.GetOperationRequest();\n        request.name = this.latestResponse.name;\n        this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);\n        const noCallbackPromise = this.currentCallPromise_.then((responses)=>{\n            self.latestResponse = responses[0];\n            self._unpackResponse(responses[0], callback);\n            return promisifyResponse();\n        }, (err)=>{\n            if (callback) {\n                callback(err);\n                return;\n            }\n            return Promise.reject(err);\n        });\n        if (!callback) {\n            return noCallbackPromise;\n        }\n    }\n    _unpackResponse(op, callback) {\n        const responseDecoder = this.longrunningDescriptor.responseDecoder;\n        const metadataDecoder = this.longrunningDescriptor.metadataDecoder;\n        let response;\n        let metadata;\n        if (op.done) {\n            if (op.result === \"error\") {\n                const error = new googleError_1.GoogleError(op.error.message);\n                error.code = op.error.code;\n                this.error = error;\n                if (callback) {\n                    callback(error);\n                }\n                return;\n            }\n            if (responseDecoder && op.response) {\n                this.response = op.response;\n                response = responseDecoder(op.response.value);\n                this.result = response;\n                this.done = true;\n            }\n        }\n        if (metadataDecoder && op.metadata) {\n            metadata = metadataDecoder(op.metadata.value);\n            this.metadata = metadata;\n        }\n        if (callback) {\n            callback(null, response, metadata, op);\n        }\n    }\n    /**\n     * Poll `getOperation` to check the operation's status. This runs a loop to\n     * ping using the backoff strategy specified at initialization.\n     *\n     * Note: This method is automatically called once a \"complete\" event handler\n     * is registered on the operation.\n     *\n     * @private\n     */ startPolling_() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        let now = new Date();\n        const delayMult = this.backoffSettings.retryDelayMultiplier;\n        const maxDelay = this.backoffSettings.maxRetryDelayMillis;\n        let delay = this.backoffSettings.initialRetryDelayMillis;\n        let deadline = Infinity;\n        if (this.backoffSettings.totalTimeoutMillis) {\n            deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\n        }\n        let previousMetadataBytes;\n        if (this.latestResponse.metadata) {\n            previousMetadataBytes = this.latestResponse.metadata.value;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        function emit(event, ...args) {\n            self.emit(event, ...args);\n        }\n        // Helper function to replace nodejs buffer's equals()\n        function arrayEquals(a, b) {\n            if (a.byteLength !== b.byteLength) {\n                return false;\n            }\n            for(let i = 0; i < a.byteLength; ++i){\n                if (a[i] !== b[i]) return false;\n            }\n            return true;\n        }\n        function retry() {\n            if (!self.hasActiveListeners) {\n                return;\n            }\n            if (now.getTime() >= deadline) {\n                const error = new googleError_1.GoogleError(\"Total timeout exceeded before any response was received\");\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\n                setImmediate(emit, \"error\", error);\n                return;\n            }\n            self.getOperation((err, result, metadata, rawResponse)=>{\n                if (err) {\n                    setImmediate(emit, \"error\", err);\n                    return;\n                }\n                if (!result) {\n                    if (rawResponse.metadata && (!previousMetadataBytes || rawResponse && !arrayEquals(rawResponse.metadata.value, previousMetadataBytes))) {\n                        setImmediate(emit, \"progress\", metadata, rawResponse);\n                        previousMetadataBytes = rawResponse.metadata.value;\n                    }\n                    // special case: some APIs fail to set either result or error\n                    // but set done = true (e.g. speech with silent file).\n                    // Some APIs just use this for the normal completion\n                    // (e.g. nodejs-contact-center-insights), so let's just return\n                    // an empty response in this case.\n                    if (rawResponse.done) {\n                        setImmediate(emit, \"complete\", {}, metadata, rawResponse);\n                        return;\n                    }\n                    setTimeout(()=>{\n                        now = new Date();\n                        delay = Math.min(delay * delayMult, maxDelay);\n                        retry();\n                    }, delay);\n                    return;\n                }\n                setImmediate(emit, \"complete\", result, metadata, rawResponse);\n            });\n        }\n        retry();\n    }\n    /**\n     * Wraps the `complete` and `error` events in a Promise.\n     *\n     * @return {promise} - Promise that resolves on operation completion and rejects\n     * on operation error.\n     */ promise() {\n        return new Promise((resolve, reject)=>{\n            this.on(\"error\", reject).on(\"complete\", (result, metadata, rawResponse)=>{\n                resolve([\n                    result,\n                    metadata,\n                    rawResponse\n                ]);\n            });\n        });\n    }\n}\nexports.Operation = Operation;\n/**\n * Method used to create Operation objects.\n *\n * @constructor\n *\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\n * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n * operations service client and unpacking mechanisms for the operation.\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\n * in polling the operation.\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\n * requests.\n */ function operation(op, longrunningDescriptor, backoffSettings, callOptions) {\n    return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\n} //# sourceMappingURL=longrunning.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NormalApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\n/**\n * Creates an API caller for regular unary methods.\n */ class NormalApiCaller {\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, canceller) {\n        canceller.call(apiCall, argument);\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.NormalApiCaller = NormalApiCaller; //# sourceMappingURL=normalApiCaller.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbm9ybWFsQ2FsbHMvbm9ybWFsQXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHLEtBQUs7QUFDL0IsTUFBTUcsU0FBU0MsbUJBQU9BLENBQUMsa0VBQVM7QUFDaEM7O0NBRUMsR0FDRCxNQUFNRjtJQUNGRyxLQUFLQyxRQUFRLEVBQUU7UUFDWCxJQUFJQSxVQUFVO1lBQ1YsT0FBTyxJQUFJSCxPQUFPSSxXQUFXLENBQUNEO1FBQ2xDO1FBQ0EsT0FBTyxJQUFJSCxPQUFPSyxrQkFBa0I7SUFDeEM7SUFDQUMsS0FBS0MsSUFBSSxFQUFFO1FBQ1AsT0FBT0E7SUFDWDtJQUNBQyxLQUFLQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUU7UUFDekNBLFVBQVVKLElBQUksQ0FBQ0MsU0FBU0M7SUFDNUI7SUFDQUcsS0FBS0QsU0FBUyxFQUFFRSxHQUFHLEVBQUU7UUFDakJGLFVBQVVULFFBQVEsQ0FBQ1c7SUFDdkI7SUFDQUMsT0FBT0gsU0FBUyxFQUFFO1FBQ2QsT0FBT0EsVUFBVUksT0FBTztJQUM1QjtBQUNKO0FBQ0FuQix1QkFBdUIsR0FBR0UsaUJBQzFCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9ub3JtYWxDYWxscy9ub3JtYWxBcGlDYWxsZXIuanM/NDI3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTm9ybWFsQXBpQ2FsbGVyID0gdm9pZCAwO1xuY29uc3QgY2FsbF8xID0gcmVxdWlyZShcIi4uL2NhbGxcIik7XG4vKipcbiAqIENyZWF0ZXMgYW4gQVBJIGNhbGxlciBmb3IgcmVndWxhciB1bmFyeSBtZXRob2RzLlxuICovXG5jbGFzcyBOb3JtYWxBcGlDYWxsZXIge1xuICAgIGluaXQoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGNhbGxfMS5PbmdvaW5nQ2FsbChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBjYWxsXzEuT25nb2luZ0NhbGxQcm9taXNlKCk7XG4gICAgfVxuICAgIHdyYXAoZnVuYykge1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICB9XG4gICAgY2FsbChhcGlDYWxsLCBhcmd1bWVudCwgc2V0dGluZ3MsIGNhbmNlbGxlcikge1xuICAgICAgICBjYW5jZWxsZXIuY2FsbChhcGlDYWxsLCBhcmd1bWVudCk7XG4gICAgfVxuICAgIGZhaWwoY2FuY2VsbGVyLCBlcnIpIHtcbiAgICAgICAgY2FuY2VsbGVyLmNhbGxiYWNrKGVycik7XG4gICAgfVxuICAgIHJlc3VsdChjYW5jZWxsZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbmNlbGxlci5wcm9taXNlO1xuICAgIH1cbn1cbmV4cG9ydHMuTm9ybWFsQXBpQ2FsbGVyID0gTm9ybWFsQXBpQ2FsbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9ybWFsQXBpQ2FsbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk5vcm1hbEFwaUNhbGxlciIsImNhbGxfMSIsInJlcXVpcmUiLCJpbml0IiwiY2FsbGJhY2siLCJPbmdvaW5nQ2FsbCIsIk9uZ29pbmdDYWxsUHJvbWlzZSIsIndyYXAiLCJmdW5jIiwiY2FsbCIsImFwaUNhbGwiLCJhcmd1bWVudCIsInNldHRpbmdzIiwiY2FuY2VsbGVyIiwiZmFpbCIsImVyciIsInJlc3VsdCIsInByb21pc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/retries.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.retryable = retryable;\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst timeout_1 = __webpack_require__(/*! ./timeout */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\");\n/**\n * Creates a function equivalent to func, but that retries on certain\n * exceptions.\n *\n * @private\n *\n * @param {GRPCCall} func - A function.\n * @param {RetryOptions} retry - Configures the exceptions upon which the\n *   function eshould retry, and the parameters to the exponential backoff retry\n *   algorithm.\n * @param {GRPCCallOtherArgs} otherArgs - the additional arguments to be passed to func.\n * @return {SimpleCallbackFunction} A function that will retry.\n */ function retryable(func, retry, otherArgs, apiName) {\n    const delayMult = retry.backoffSettings.retryDelayMultiplier;\n    const maxDelay = retry.backoffSettings.maxRetryDelayMillis;\n    const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;\n    const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;\n    let delay = retry.backoffSettings.initialRetryDelayMillis;\n    let timeout = retry.backoffSettings.initialRpcTimeoutMillis;\n    /**\n     * Equivalent to ``func``, but retries upon transient failure.\n     *\n     * Retrying is done through an exponential backoff algorithm configured\n     * by the options in ``retry``.\n     * @param {RequestType} argument The request object.\n     * @param {APICallback} callback The callback.\n     * @return {GRPCCall}\n     */ return (argument, callback)=>{\n        let canceller;\n        let timeoutId;\n        let now = new Date();\n        let deadline;\n        if (retry.backoffSettings.totalTimeoutMillis) {\n            deadline = now.getTime() + retry.backoffSettings.totalTimeoutMillis;\n        }\n        let retries = 0;\n        const maxRetries = retry.backoffSettings.maxRetries;\n        // TODO: define A/B testing values for retry behaviors.\n        /** Repeat the API call as long as necessary. */ function repeat(err) {\n            timeoutId = null;\n            if (deadline && now.getTime() >= deadline) {\n                const error = new googleError_1.GoogleError(`Total timeout of API ${apiName} exceeded ${retry.backoffSettings.totalTimeoutMillis} milliseconds ${err ? `retrying error ${err} ` : \"\"} before any response was received.`);\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\n                callback(error);\n                return;\n            }\n            if (retries && retries >= maxRetries) {\n                const error = new googleError_1.GoogleError(\"Exceeded maximum number of retries \" + (err ? `retrying error ${err} ` : \"\") + \"before any response was received\");\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\n                callback(error);\n                return;\n            }\n            retries++;\n            let lastError = err;\n            const toCall = (0, timeout_1.addTimeoutArg)(func, timeout, otherArgs);\n            canceller = toCall(argument, (err, response, next, rawResponse)=>{\n                // Save only the error before deadline exceeded\n                if (err && err.code !== 4) {\n                    lastError = err;\n                }\n                if (!err) {\n                    callback(null, response, next, rawResponse);\n                    return;\n                }\n                canceller = null;\n                if (retry.retryCodes.length > 0 && retry.retryCodes.indexOf(err.code) < 0) {\n                    err.note = \"Exception occurred in retry method that was \" + \"not classified as transient\";\n                    callback(err);\n                } else {\n                    const toSleep = Math.random() * delay;\n                    timeoutId = setTimeout(()=>{\n                        now = new Date();\n                        delay = Math.min(delay * delayMult, maxDelay);\n                        const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;\n                        const rpcTimeout = maxTimeout ? maxTimeout : 0;\n                        const newDeadline = deadline ? deadline - now.getTime() : 0;\n                        timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);\n                        repeat(lastError);\n                    }, toSleep);\n                }\n            });\n            if (canceller instanceof Promise) {\n                canceller.catch((err)=>{\n                    callback(new googleError_1.GoogleError(err));\n                });\n            }\n        }\n        if (maxRetries && deadline) {\n            const error = new googleError_1.GoogleError(\"Cannot set both totalTimeoutMillis and maxRetries \" + \"in backoffSettings.\");\n            error.code = status_1.Status.INVALID_ARGUMENT;\n            callback(error);\n        } else {\n            repeat();\n        }\n        return {\n            cancel () {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n                if (canceller) {\n                    canceller.cancel();\n                } else {\n                    const error = new googleError_1.GoogleError(\"cancelled\");\n                    error.code = status_1.Status.CANCELLED;\n                    callback(error);\n                }\n            }\n        };\n    };\n} //# sourceMappingURL=retries.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/timeout.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.addTimeoutArg = addTimeoutArg;\n/**\n * Updates func so that it gets called with the timeout as its final arg.\n *\n * This converts a function, func, into another function with updated deadline.\n *\n * @private\n *\n * @param {GRPCCall} func - a function to be updated.\n * @param {number} timeout - to be added to the original function as it final\n *   positional arg.\n * @param {Object} otherArgs - the additional arguments to be passed to func.\n * @param {Object=} abTests - the A/B testing key/value pairs.\n * @return {function(Object, APICallback)}\n *  the function with other arguments and the timeout.\n */ function addTimeoutArg(func, timeout, otherArgs, abTests) {\n    // TODO: this assumes the other arguments consist of metadata and options,\n    // which is specific to gRPC calls. Remove the hidden dependency on gRPC.\n    return (argument, callback)=>{\n        const now = new Date();\n        const options = otherArgs.options || {};\n        options.deadline = new Date(now.getTime() + timeout);\n        const metadata = otherArgs.metadataBuilder ? otherArgs.metadataBuilder(abTests, otherArgs.headers || {}) : null;\n        return func(argument, metadata, options, callback);\n    };\n} //# sourceMappingURL=timeout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbm9ybWFsQ2FsbHMvdGltZW91dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBR0U7QUFDeEI7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDRCxTQUFTQSxjQUFjQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxPQUFPO0lBQ3BELDBFQUEwRTtJQUMxRSx5RUFBeUU7SUFDekUsT0FBTyxDQUFDQyxVQUFVQztRQUNkLE1BQU1DLE1BQU0sSUFBSUM7UUFDaEIsTUFBTUMsVUFBVU4sVUFBVU0sT0FBTyxJQUFJLENBQUM7UUFDdENBLFFBQVFDLFFBQVEsR0FBRyxJQUFJRixLQUFLRCxJQUFJSSxPQUFPLEtBQUtUO1FBQzVDLE1BQU1VLFdBQVdULFVBQVVVLGVBQWUsR0FDcENWLFVBQVVVLGVBQWUsQ0FBQ1QsU0FBU0QsVUFBVVcsT0FBTyxJQUFJLENBQUMsS0FDekQ7UUFDTixPQUFPYixLQUFLSSxVQUFVTyxVQUFVSCxTQUFTSDtJQUM3QztBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL25vcm1hbENhbGxzL3RpbWVvdXQuanM/YzA1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWRkVGltZW91dEFyZyA9IGFkZFRpbWVvdXRBcmc7XG4vKipcbiAqIFVwZGF0ZXMgZnVuYyBzbyB0aGF0IGl0IGdldHMgY2FsbGVkIHdpdGggdGhlIHRpbWVvdXQgYXMgaXRzIGZpbmFsIGFyZy5cbiAqXG4gKiBUaGlzIGNvbnZlcnRzIGEgZnVuY3Rpb24sIGZ1bmMsIGludG8gYW5vdGhlciBmdW5jdGlvbiB3aXRoIHVwZGF0ZWQgZGVhZGxpbmUuXG4gKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0ge0dSUENDYWxsfSBmdW5jIC0gYSBmdW5jdGlvbiB0byBiZSB1cGRhdGVkLlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXQgLSB0byBiZSBhZGRlZCB0byB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gYXMgaXQgZmluYWxcbiAqICAgcG9zaXRpb25hbCBhcmcuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXJBcmdzIC0gdGhlIGFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBmdW5jLlxuICogQHBhcmFtIHtPYmplY3Q9fSBhYlRlc3RzIC0gdGhlIEEvQiB0ZXN0aW5nIGtleS92YWx1ZSBwYWlycy5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKE9iamVjdCwgQVBJQ2FsbGJhY2spfVxuICogIHRoZSBmdW5jdGlvbiB3aXRoIG90aGVyIGFyZ3VtZW50cyBhbmQgdGhlIHRpbWVvdXQuXG4gKi9cbmZ1bmN0aW9uIGFkZFRpbWVvdXRBcmcoZnVuYywgdGltZW91dCwgb3RoZXJBcmdzLCBhYlRlc3RzKSB7XG4gICAgLy8gVE9ETzogdGhpcyBhc3N1bWVzIHRoZSBvdGhlciBhcmd1bWVudHMgY29uc2lzdCBvZiBtZXRhZGF0YSBhbmQgb3B0aW9ucyxcbiAgICAvLyB3aGljaCBpcyBzcGVjaWZpYyB0byBnUlBDIGNhbGxzLiBSZW1vdmUgdGhlIGhpZGRlbiBkZXBlbmRlbmN5IG9uIGdSUEMuXG4gICAgcmV0dXJuIChhcmd1bWVudCwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG90aGVyQXJncy5vcHRpb25zIHx8IHt9O1xuICAgICAgICBvcHRpb25zLmRlYWRsaW5lID0gbmV3IERhdGUobm93LmdldFRpbWUoKSArIHRpbWVvdXQpO1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IG90aGVyQXJncy5tZXRhZGF0YUJ1aWxkZXJcbiAgICAgICAgICAgID8gb3RoZXJBcmdzLm1ldGFkYXRhQnVpbGRlcihhYlRlc3RzLCBvdGhlckFyZ3MuaGVhZGVycyB8fCB7fSlcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIGZ1bmMoYXJndW1lbnQsIG1ldGFkYXRhLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYWRkVGltZW91dEFyZyIsImZ1bmMiLCJ0aW1lb3V0Iiwib3RoZXJBcmdzIiwiYWJUZXN0cyIsImFyZ3VtZW50IiwiY2FsbGJhY2siLCJub3ciLCJEYXRlIiwib3B0aW9ucyIsImRlYWRsaW5lIiwiZ2V0VGltZSIsIm1ldGFkYXRhIiwibWV0YWRhdGFCdWlsZGVyIiwiaGVhZGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/operationsClient.js":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/src/operationsClient.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\nconst descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\nconst gax = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\nconst configData = __webpack_require__(/*! ./operations_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/operations_client_config.json\");\nconst operationProtoJson = __webpack_require__(/*! ../protos/operations.json */ \"(rsc)/./node_modules/google-gax/build/protos/operations.json\");\nconst transcoding_1 = __webpack_require__(/*! ./transcoding */ \"(rsc)/./node_modules/google-gax/build/src/transcoding.js\");\nexports.SERVICE_ADDRESS = \"longrunning.googleapis.com\";\nconst version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = \"gapic/0.7.1\";\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */ exports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */ class OperationsClient {\n    constructor(gaxGrpc, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    operationsProtos, options){\n        const opts = Object.assign({\n            servicePath: exports.SERVICE_ADDRESS,\n            port: DEFAULT_SERVICE_PORT,\n            clientConfig: {}\n        }, options);\n        const googleApiClient = [\n            \"gl-node/\" + process.versions.node\n        ];\n        if (opts.libName && opts.libVersion) {\n            googleApiClient.push(opts.libName + \"/\" + opts.libVersion);\n        }\n        googleApiClient.push(CODE_GEN_NAME_VERSION, \"gax/\" + version);\n        if (opts.fallback) {\n            googleApiClient.push(\"gl-web/\" + version);\n        } else {\n            googleApiClient.push(\"grpc/\" + gaxGrpc.grpcVersion);\n        }\n        const defaults = gaxGrpc.constructSettings(\"google.longrunning.Operations\", configData, opts.clientConfig || {}, {\n            \"x-goog-api-client\": googleApiClient.join(\" \")\n        });\n        this.auth = gaxGrpc.auth;\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        this.descriptor = {\n            listOperations: new descriptor_1.PageDescriptor(\"pageToken\", \"nextPageToken\", \"operations\")\n        };\n        // Put together the \"service stub\" for\n        // google.longrunning.Operations.\n        this.operationsStub = gaxGrpc.createStub(opts.fallback ? operationsProtos.lookupService(\"google.longrunning.Operations\") : operationsProtos.google.longrunning.Operations, opts);\n        const operationsStubMethods = [\n            \"getOperation\",\n            \"listOperations\",\n            \"cancelOperation\",\n            \"deleteOperation\"\n        ];\n        for (const methodName of operationsStubMethods){\n            const innerCallPromise = this.operationsStub.then((stub)=>(...args)=>{\n                    const func = stub[methodName];\n                    return func.apply(stub, args);\n                }, (err)=>()=>{\n                    throw err;\n                });\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\n        }\n    }\n    /** Closes this operations client. */ close() {\n        this.operationsStub.then((stub)=>stub.close());\n    }\n    getProjectId(callback) {\n        if (this.auth && \"getProjectId\" in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error(\"Cannot determine project ID.\"));\n        } else {\n            return Promise.reject(\"Cannot determine project ID.\");\n        }\n    }\n    // Service calls\n    getOperationInternal(request, options, callback) {\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}. The promise has a method named\n     * \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     */ getOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        } else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`.\n     *\n     * NOTE: the `name` binding below allows API services to override the binding\n     * to use different resource name schemes.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, it contains the\n     * result in a single response. If the response indicates the next page\n     * exists, the third parameter is set to be used for the next request object.\n     * The fourth parameter keeps the raw response object of an object\n     * representing [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, the array has\n     * three elements. The first element is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"} in a single response. The second\n     * element is the next request object if the response indicates the next page\n     * exists, or null. The third element is an object representing\n     * [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *     name: '',\n     *     filter: ''\n     * };\n     * // Iterate over all elements.\n     * const [resources] = await client.listOperations(request);\n     * for (const resource of resources) {\n     *   console.log(resources);\n     * }\n     *\n     * // Or obtain the paged response.\n     * const options = {autoPaginate: false};\n     * let nextRequest = request;\n     * while(nextRequest) {\n     *   const response = await client.listOperations(nextRequest, options);\n     *   const resources = response[0];\n     *   nextRequest = response[1];\n     *   const rawResponse = response[2];\n     *   for (const resource of resources) {\n     *     // doThingsWith(resource);\n     *   }\n     * };\n     */ listOperations(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        } else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.listOperations(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listOperations} continuously\n     * and invokes the callback registered for 'data' event for each element in\n     * the responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *   name: '',\n     *   filter: ''\n     * };\n     * client.listOperationsStream(request)\n     *   .on('data', element => {\n     *     // doThingsWith(element)\n     *   })\n     *   .on('error', err => {\n     *     console.error(err);\n     *   });\n     */ listOperationsStream(request, options) {\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */ listOperationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     */ cancelOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        } else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     */ deleteOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        } else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.deleteOperation(request, options, callback);\n    }\n}\nexports.OperationsClient = OperationsClient;\nclass OperationsClientBuilder {\n    /**\n     * Builds a new Operations Client\n     * @param gaxGrpc {GrpcClient}\n     */ constructor(gaxGrpc, protoJson){\n        if (protoJson && gaxGrpc.httpRules) {\n            // overwrite the http rules if provide in service yaml.\n            (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);\n        }\n        const operationsProtos = protoJson !== null && protoJson !== void 0 ? protoJson : gaxGrpc.loadProtoJSON(operationProtoJson);\n        /**\n         * Build a new instance of {@link OperationsClient}.\n         *\n         * @param {Object=} opts - The optional parameters.\n         * @param {String=} opts.servicePath - Domain name of the API remote host.\n         * @param {number=} opts.port - The port on which to connect to the remote host.\n         * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n         * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n         */ this.operationsClient = (opts)=>{\n            if (gaxGrpc.fallback) {\n                opts.fallback = gaxGrpc.fallback;\n            }\n            return new OperationsClient(gaxGrpc, operationsProtos, opts);\n        };\n        Object.assign(this.operationsClient, OperationsClient);\n    }\n}\nexports.OperationsClientBuilder = OperationsClientBuilder; //# sourceMappingURL=operationsClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/operationsClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PageDescriptor = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst normalApiCaller_1 = __webpack_require__(/*! ../normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\nconst pagedApiCaller_1 = __webpack_require__(/*! ./pagedApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js\");\nconst maxAttemptsEmptyResponse = 10;\n/**\n * A descriptor for methods that support pagination.\n */ class PageDescriptor {\n    constructor(requestPageTokenField, responsePageTokenField, resourceField){\n        this.requestPageTokenField = requestPageTokenField;\n        this.responsePageTokenField = responsePageTokenField;\n        this.resourceField = resourceField;\n    }\n    /**\n     * Creates a new object Stream which emits the resource on 'data' event.\n     */ createStream(apiCall, request, options) {\n        const stream = new stream_1.PassThrough({\n            objectMode: true\n        });\n        options = Object.assign({}, options, {\n            autoPaginate: false\n        });\n        const maxResults = \"maxResults\" in options ? options.maxResults : -1;\n        let pushCount = 0;\n        let started = false;\n        function callback(err, resources, next, apiResp) {\n            if (err) {\n                stream.emit(\"error\", err);\n                return;\n            }\n            // emit full api response with every page.\n            stream.emit(\"response\", apiResp);\n            for(let i = 0; i < resources.length; ++i){\n                // TODO: rewrite without accessing stream internals\n                if (stream._readableState.ended) {\n                    return;\n                }\n                if (resources[i] === null) {\n                    continue;\n                }\n                stream.push(resources[i]);\n                pushCount++;\n                if (pushCount === maxResults) {\n                    stream.end();\n                }\n            }\n            // TODO: rewrite without accessing stream internals\n            if (stream._readableState.ended) {\n                return;\n            }\n            if (!next) {\n                stream.end();\n                return;\n            }\n            // When pageToken is specified in the original options, it will overwrite\n            // the page token field in the next request. Therefore it must be cleared.\n            if (\"pageToken\" in options) {\n                delete options.pageToken;\n            }\n            if (stream.isPaused()) {\n                request = next;\n                started = false;\n            } else {\n                setImmediate(apiCall, next, options, callback);\n            }\n        }\n        stream.on(\"resume\", ()=>{\n            if (!started) {\n                started = true;\n                apiCall(request, options, callback);\n            }\n        });\n        return stream;\n    }\n    /**\n     * Create an async iterable which can be recursively called for data on-demand.\n     */ asyncIterate(apiCall, request, options) {\n        options = Object.assign({}, options, {\n            autoPaginate: false\n        });\n        const iterable = this.createIterator(apiCall, request, options);\n        return iterable;\n    }\n    createIterator(apiCall, request, options) {\n        const asyncIterable = {\n            [Symbol.asyncIterator] () {\n                let nextPageRequest = request;\n                const cache = [];\n                return {\n                    async next () {\n                        if (cache.length > 0) {\n                            return Promise.resolve({\n                                done: false,\n                                value: cache.shift()\n                            });\n                        }\n                        let attempts = 0;\n                        while(cache.length === 0 && nextPageRequest){\n                            let result;\n                            [result, nextPageRequest] = await apiCall(nextPageRequest, options);\n                            // For pagination response with protobuf map type, use tuple as representation.\n                            if (result && !Array.isArray(result)) {\n                                for (const [key, value] of Object.entries(result)){\n                                    cache.push([\n                                        key,\n                                        value\n                                    ]);\n                                }\n                            } else {\n                                cache.push(...result);\n                            }\n                            if (cache.length === 0) {\n                                ++attempts;\n                                if (attempts > maxAttemptsEmptyResponse) {\n                                    break;\n                                }\n                            }\n                        }\n                        if (cache.length === 0) {\n                            return Promise.resolve({\n                                done: true,\n                                value: undefined\n                            });\n                        }\n                        return Promise.resolve({\n                            done: false,\n                            value: cache.shift()\n                        });\n                    }\n                };\n            }\n        };\n        return asyncIterable;\n    }\n    getApiCaller(settings) {\n        if (!settings.autoPaginate) {\n            return new normalApiCaller_1.NormalApiCaller();\n        }\n        return new pagedApiCaller_1.PagedApiCaller(this);\n    }\n}\nexports.PageDescriptor = PageDescriptor; //# sourceMappingURL=pageDescriptor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PagedApiCaller = void 0;\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst resourceCollector_1 = __webpack_require__(/*! ./resourceCollector */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js\");\nclass PagedApiCaller {\n    /**\n     * Creates an API caller that returns a stream to performs page-streaming.\n     *\n     * @private\n     * @constructor\n     * @param {PageDescriptor} pageDescriptor - indicates the structure\n     *   of page streaming to be performed.\n     */ constructor(pageDescriptor){\n        this.pageDescriptor = pageDescriptor;\n    }\n    /**\n     * This function translates between regular gRPC calls (that accepts a request and returns a response,\n     * and does not know anything about pages and page tokens) and the users' callback (that expects\n     * to see resources from one page, a request to get the next page, and the raw response from the server).\n     *\n     * It generates a function that can be passed as a callback function to a gRPC call, will understand\n     * pagination-specific fields in the response, and call the users' callback after having those fields\n     * parsed.\n     *\n     * @param request Request object. It needs to be passed to all subsequent next page requests\n     * (the main content of the request object stays unchanged, only the next page token changes)\n     * @param callback The user's callback that expects the page content, next page request, and raw response.\n     */ generateParseResponseCallback(request, callback) {\n        const resourceFieldName = this.pageDescriptor.resourceField;\n        const responsePageTokenFieldName = this.pageDescriptor.responsePageTokenField;\n        const requestPageTokenFieldName = this.pageDescriptor.requestPageTokenField;\n        return (err, response)=>{\n            if (err) {\n                callback(err);\n                return;\n            }\n            if (!request) {\n                callback(new googleError_1.GoogleError(\"Undefined request in pagination method callback.\"));\n                return;\n            }\n            if (!response) {\n                callback(new googleError_1.GoogleError(\"Undefined response in pagination method callback.\"));\n                return;\n            }\n            const resources = response[resourceFieldName] || [];\n            const pageToken = response[responsePageTokenFieldName];\n            let nextPageRequest = null;\n            if (pageToken) {\n                nextPageRequest = Object.assign({}, request);\n                nextPageRequest[requestPageTokenFieldName] = pageToken;\n            }\n            callback(err, resources, nextPageRequest, response);\n        };\n    }\n    /**\n     * Adds a special ability to understand pagination-specific fields to the existing gRPC call.\n     * The original gRPC call just calls callback(err, result).\n     * The wrapped one will call callback(err, resources, nextPageRequest, rawResponse) instead.\n     *\n     * @param func gRPC call (normally, a service stub call). The gRPC call is expected to accept four parameters:\n     * request, metadata, call options, and callback.\n     */ wrap(func) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        return function wrappedCall(argument, metadata, options, callback) {\n            return func(argument, metadata, options, self.generateParseResponseCallback(argument, callback));\n        };\n    }\n    /**\n     * Makes it possible to use both callback-based and promise-based calls.\n     * Returns an OngoingCall or OngoingCallPromise object.\n     * Regardless of which one is returned, it always has a `.callback` to call.\n     *\n     * @param settings Call settings. Can only be used to replace Promise with another promise implementation.\n     * @param [callback] Callback to be called, if any.\n     */ init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    /**\n     * Implements auto-pagination logic.\n     *\n     * @param apiCall A function that performs gRPC request and calls its callback with a response or an error.\n     * It's supposed to be a gRPC service stub function wrapped into several layers of wrappers that make it\n     * accept just two parameters: (request, callback).\n     * @param request A request object that came from the user.\n     * @param settings Call settings. We are interested in `maxResults` and `autoPaginate` (they are optional).\n     * @param ongoingCall An instance of OngoingCall or OngoingCallPromise that can be used for call cancellation,\n     * and is used to return results to the user.\n     */ call(apiCall, request, settings, ongoingCall) {\n        request = Object.assign({}, request);\n        if (!settings.autoPaginate) {\n            // they don't want auto-pagination this time - okay, just call once\n            ongoingCall.call(apiCall, request);\n            return;\n        }\n        const maxResults = settings.maxResults || -1;\n        const resourceCollector = new resourceCollector_1.ResourceCollector(apiCall, maxResults);\n        resourceCollector.processAllPages(request).then((resources)=>ongoingCall.callback(null, resources), (err)=>ongoingCall.callback(err));\n    }\n    fail(ongoingCall, err) {\n        ongoingCall.callback(err);\n    }\n    result(ongoingCall) {\n        return ongoingCall.promise;\n    }\n}\nexports.PagedApiCaller = PagedApiCaller; //# sourceMappingURL=pagedApiCaller.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ResourceCollector = void 0;\n/**\n * ResourceCollector class implements asynchronous logic of calling the API call that supports pagination,\n * page by page, collecting all resources (up to `maxResults`) in the array.\n *\n * Usage:\n *   const resourceCollector = new ResourceCollector(apiCall, maxResults); // -1 for unlimited\n *   resourceCollector.processAllPages(request).then(resources => ...);\n */ class ResourceCollector {\n    constructor(apiCall, maxResults = -1){\n        this.apiCall = apiCall;\n        this.resources = [];\n        this.maxResults = maxResults;\n    }\n    callback(err, resources, nextPageRequest) {\n        if (err) {\n            // Something went wrong with this request - failing everything\n            this.rejectCallback(err);\n            return;\n        }\n        // Process one page\n        for (const resource of resources){\n            this.resources.push(resource);\n            if (this.resources.length === this.maxResults) {\n                nextPageRequest = null;\n                break;\n            }\n        }\n        // All done?\n        if (!nextPageRequest) {\n            this.resolveCallback(this.resources);\n            return;\n        }\n        // Schedule the next call\n        const callback = (...args)=>this.callback(...args);\n        setImmediate(this.apiCall, nextPageRequest, callback);\n    }\n    processAllPages(firstRequest) {\n        return new Promise((resolve, reject)=>{\n            this.resolveCallback = resolve;\n            this.rejectCallback = reject;\n            // Schedule the first call\n            const callback = (...args)=>this.callback(...args);\n            setImmediate(this.apiCall, firstRequest, callback);\n        });\n    }\n}\nexports.ResourceCollector = ResourceCollector; //# sourceMappingURL=resourceCollector.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcGFnaW5hdGlvbkNhbGxzL3Jlc291cmNlQ29sbGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHLEtBQUs7QUFDakM7Ozs7Ozs7Q0FPQyxHQUNELE1BQU1FO0lBQ0ZDLFlBQVlDLE9BQU8sRUFBRUMsYUFBYSxDQUFDLENBQUMsQ0FBRTtRQUNsQyxJQUFJLENBQUNELE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNFLFNBQVMsR0FBRyxFQUFFO1FBQ25CLElBQUksQ0FBQ0QsVUFBVSxHQUFHQTtJQUN0QjtJQUNBRSxTQUFTQyxHQUFHLEVBQUVGLFNBQVMsRUFBRUcsZUFBZSxFQUFFO1FBQ3RDLElBQUlELEtBQUs7WUFDTCw4REFBOEQ7WUFDOUQsSUFBSSxDQUFDRSxjQUFjLENBQUNGO1lBQ3BCO1FBQ0o7UUFDQSxtQkFBbUI7UUFDbkIsS0FBSyxNQUFNRyxZQUFZTCxVQUFXO1lBQzlCLElBQUksQ0FBQ0EsU0FBUyxDQUFDTSxJQUFJLENBQUNEO1lBQ3BCLElBQUksSUFBSSxDQUFDTCxTQUFTLENBQUNPLE1BQU0sS0FBSyxJQUFJLENBQUNSLFVBQVUsRUFBRTtnQkFDM0NJLGtCQUFrQjtnQkFDbEI7WUFDSjtRQUNKO1FBQ0EsWUFBWTtRQUNaLElBQUksQ0FBQ0EsaUJBQWlCO1lBQ2xCLElBQUksQ0FBQ0ssZUFBZSxDQUFDLElBQUksQ0FBQ1IsU0FBUztZQUNuQztRQUNKO1FBQ0EseUJBQXlCO1FBQ3pCLE1BQU1DLFdBQVcsQ0FBQyxHQUFHUSxPQUFTLElBQUksQ0FBQ1IsUUFBUSxJQUFJUTtRQUMvQ0MsYUFBYSxJQUFJLENBQUNaLE9BQU8sRUFBRUssaUJBQWlCRjtJQUNoRDtJQUNBVSxnQkFBZ0JDLFlBQVksRUFBRTtRQUMxQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDekIsSUFBSSxDQUFDUCxlQUFlLEdBQUdNO1lBQ3ZCLElBQUksQ0FBQ1YsY0FBYyxHQUFHVztZQUN0QiwwQkFBMEI7WUFDMUIsTUFBTWQsV0FBVyxDQUFDLEdBQUdRLE9BQVMsSUFBSSxDQUFDUixRQUFRLElBQUlRO1lBQy9DQyxhQUFhLElBQUksQ0FBQ1osT0FBTyxFQUFFYyxjQUFjWDtRQUM3QztJQUNKO0FBQ0o7QUFDQVAseUJBQXlCLEdBQUdFLG1CQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ueWMtaG91c2luZy1hcHAvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcGFnaW5hdGlvbkNhbGxzL3Jlc291cmNlQ29sbGVjdG9yLmpzPzQ0MjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlc291cmNlQ29sbGVjdG9yID0gdm9pZCAwO1xuLyoqXG4gKiBSZXNvdXJjZUNvbGxlY3RvciBjbGFzcyBpbXBsZW1lbnRzIGFzeW5jaHJvbm91cyBsb2dpYyBvZiBjYWxsaW5nIHRoZSBBUEkgY2FsbCB0aGF0IHN1cHBvcnRzIHBhZ2luYXRpb24sXG4gKiBwYWdlIGJ5IHBhZ2UsIGNvbGxlY3RpbmcgYWxsIHJlc291cmNlcyAodXAgdG8gYG1heFJlc3VsdHNgKSBpbiB0aGUgYXJyYXkuXG4gKlxuICogVXNhZ2U6XG4gKiAgIGNvbnN0IHJlc291cmNlQ29sbGVjdG9yID0gbmV3IFJlc291cmNlQ29sbGVjdG9yKGFwaUNhbGwsIG1heFJlc3VsdHMpOyAvLyAtMSBmb3IgdW5saW1pdGVkXG4gKiAgIHJlc291cmNlQ29sbGVjdG9yLnByb2Nlc3NBbGxQYWdlcyhyZXF1ZXN0KS50aGVuKHJlc291cmNlcyA9PiAuLi4pO1xuICovXG5jbGFzcyBSZXNvdXJjZUNvbGxlY3RvciB7XG4gICAgY29uc3RydWN0b3IoYXBpQ2FsbCwgbWF4UmVzdWx0cyA9IC0xKSB7XG4gICAgICAgIHRoaXMuYXBpQ2FsbCA9IGFwaUNhbGw7XG4gICAgICAgIHRoaXMucmVzb3VyY2VzID0gW107XG4gICAgICAgIHRoaXMubWF4UmVzdWx0cyA9IG1heFJlc3VsdHM7XG4gICAgfVxuICAgIGNhbGxiYWNrKGVyciwgcmVzb3VyY2VzLCBuZXh0UGFnZVJlcXVlc3QpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgLy8gU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCB0aGlzIHJlcXVlc3QgLSBmYWlsaW5nIGV2ZXJ5dGhpbmdcbiAgICAgICAgICAgIHRoaXMucmVqZWN0Q2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcm9jZXNzIG9uZSBwYWdlXG4gICAgICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgcmVzb3VyY2VzKSB7XG4gICAgICAgICAgICB0aGlzLnJlc291cmNlcy5wdXNoKHJlc291cmNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc291cmNlcy5sZW5ndGggPT09IHRoaXMubWF4UmVzdWx0cykge1xuICAgICAgICAgICAgICAgIG5leHRQYWdlUmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsIGRvbmU/XG4gICAgICAgIGlmICghbmV4dFBhZ2VSZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVDYWxsYmFjayh0aGlzLnJlc291cmNlcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2NoZWR1bGUgdGhlIG5leHQgY2FsbFxuICAgICAgICBjb25zdCBjYWxsYmFjayA9ICguLi5hcmdzKSA9PiB0aGlzLmNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgICAgICBzZXRJbW1lZGlhdGUodGhpcy5hcGlDYWxsLCBuZXh0UGFnZVJlcXVlc3QsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgcHJvY2Vzc0FsbFBhZ2VzKGZpcnN0UmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlQ2FsbGJhY2sgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5yZWplY3RDYWxsYmFjayA9IHJlamVjdDtcbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIHRoZSBmaXJzdCBjYWxsXG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9ICguLi5hcmdzKSA9PiB0aGlzLmNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKHRoaXMuYXBpQ2FsbCwgZmlyc3RSZXF1ZXN0LCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVzb3VyY2VDb2xsZWN0b3IgPSBSZXNvdXJjZUNvbGxlY3Rvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc291cmNlQ29sbGVjdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJlc291cmNlQ29sbGVjdG9yIiwiY29uc3RydWN0b3IiLCJhcGlDYWxsIiwibWF4UmVzdWx0cyIsInJlc291cmNlcyIsImNhbGxiYWNrIiwiZXJyIiwibmV4dFBhZ2VSZXF1ZXN0IiwicmVqZWN0Q2FsbGJhY2siLCJyZXNvdXJjZSIsInB1c2giLCJsZW5ndGgiLCJyZXNvbHZlQ2FsbGJhY2siLCJhcmdzIiwic2V0SW1tZWRpYXRlIiwicHJvY2Vzc0FsbFBhZ2VzIiwiZmlyc3RSZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/pathTemplate.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/pathTemplate.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PathTemplate = void 0;\nclass PathTemplate {\n    /**\n     * @param {String} data the of the template\n     *\n     * @constructor\n     */ constructor(data){\n        this.bindings = {};\n        this.data = data;\n        this.segments = this.parsePathTemplate(data);\n        this.size = this.segments.length;\n    }\n    /**\n     * Matches a fully-qualified path template string.\n     *\n     * @param {String} path a fully-qualified path template string\n     * @return {Object} contains const names matched to binding values\n     * @throws {TypeError} if path can't be matched to this template\n     */ match(path) {\n        let pathSegments = path.split(\"/\");\n        const bindings = {};\n        if (pathSegments.length !== this.segments.length) {\n            // if the path contains a wildcard, then the length may differ by 1.\n            if (!this.data.includes(\"**\")) {\n                throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same.`);\n            } else if (pathSegments.length !== this.segments.length + 1) {\n                throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same with one wildcard.`);\n            }\n        }\n        for(let index = 0; index < this.segments.length && pathSegments.length > 0; index++){\n            if (this.segments[index] !== pathSegments[0]) {\n                if (!this.segments[index].includes(\"*\")) {\n                    throw new TypeError(`segment does not match, ${this.segments[index]} and  ${pathSegments[index]}.`);\n                } else {\n                    let segment = this.segments[index];\n                    const matches = segment.match(/\\{[$0-9a-zA-Z_]+=.*?\\}/g);\n                    if (!matches) {\n                        throw new Error(`Error processing path template segment ${segment}`);\n                    }\n                    const variables = matches.map((str)=>str.replace(/^\\{/, \"\").replace(/=.*/, \"\"));\n                    if (segment.includes(\"**\")) {\n                        bindings[variables[0]] = pathSegments[0] + \"/\" + pathSegments[1];\n                        pathSegments = pathSegments.slice(2);\n                    } else {\n                        // atomic resource\n                        if (variables.length === 1) {\n                            bindings[variables[0]] = pathSegments[0];\n                        } else {\n                            // non-slash resource\n                            // segment: {blurb_id=*}.{legacy_user=*} to match pathSegments: ['bar.user2']\n                            // split the match pathSegments[0] -> value: ['bar', 'user2']\n                            // compare the length of two arrays, and compare array items\n                            const value = pathSegments[0].split(/[-_.~]/);\n                            if (value.length !== variables.length) {\n                                throw new Error(`segment ${segment} does not match ${pathSegments[0]}`);\n                            }\n                            for (const v of variables){\n                                bindings[v] = value[0];\n                                segment = segment.replace(`{${v}=*}`, `${value[0]}`);\n                                value.shift();\n                            }\n                            // segment: {blurb_id=*}.{legacy_user=*} matching pathSegments: ['bar~user2'] should fail\n                            if (segment !== pathSegments[0]) {\n                                throw new TypeError(`non slash resource pattern ${this.segments[index]} and ${pathSegments[0]} should have same separator`);\n                            }\n                        }\n                        pathSegments.shift();\n                    }\n                }\n            } else {\n                pathSegments.shift();\n            }\n        }\n        return bindings;\n    }\n    /**\n     * Renders a path template using the provided bindings.\n     *\n     * @param {Object} bindings a mapping of const names to binding strings\n     * @return {String} a rendered representation of the path template\n     * @throws {TypeError} if a key is missing, or if a sub-template cannot be\n     *   parsed\n     */ render(bindings) {\n        if (Object.keys(bindings).length !== Object.keys(this.bindings).length) {\n            throw new TypeError(`The number of variables ${Object.keys(bindings).length} does not match the number of needed variables ${Object.keys(this.bindings).length}`);\n        }\n        let path = this.inspect();\n        for (const key of Object.keys(bindings)){\n            const b = bindings[key].toString();\n            if (!this.bindings[key]) {\n                throw new TypeError(`render fails for not matching ${bindings[key]}`);\n            }\n            const variable = this.bindings[key];\n            if (variable === \"*\") {\n                if (!b.match(/[^/{}]+/)) {\n                    throw new TypeError(`render fails for not matching ${b}`);\n                }\n                path = path.replace(`{${key}=*}`, `${b}`);\n            } else if (variable === \"**\") {\n                if (!b.match(/[^{}]+/)) {\n                    throw new TypeError(`render fails for not matching ${b}`);\n                }\n                path = path.replace(`{${key}=**}`, `${b}`);\n            }\n        }\n        return path;\n    }\n    /**\n     * Renders the path template.\n     *\n     * @return {string} contains const names matched to binding values\n     */ inspect() {\n        return this.segments.join(\"/\");\n    }\n    /**\n     * Parse the path template.\n     *\n     * @return {string[]} return segments of the input path.\n     * For example: 'buckets/{hello}'' will give back ['buckets', {hello=*}]\n     */ parsePathTemplate(data) {\n        const pathSegments = splitPathTemplate(data);\n        let index = 0;\n        let wildCardCount = 0;\n        const segments = [];\n        let matches;\n        pathSegments.forEach((segment)=>{\n            // * or ** -> segments.push('{$0=*}');\n            //         -> bindings['$0'] = '*'\n            if (segment === \"*\" || segment === \"**\") {\n                this.bindings[`$${index}`] = segment;\n                segments.push(`{$${index}=${segment}}`);\n                index = index + 1;\n                if (segment === \"**\") {\n                    ++wildCardCount;\n                }\n            } else if (matches = segment.match(/\\{[0-9a-zA-Z-.~_]+(?:=.*?)?\\}/g)) {\n                for (const subsegment of matches){\n                    const pairMatch = subsegment.match(/^\\{([0-9a-zA-Z-.~_]+)(?:=(.*?))?\\}$/);\n                    if (!pairMatch) {\n                        throw new Error(`Cannot process path template segment ${subsegment}`);\n                    }\n                    const key = pairMatch[1];\n                    let value = pairMatch[2];\n                    if (!value) {\n                        value = \"*\";\n                        segment = segment.replace(key, key + \"=*\");\n                        this.bindings[key] = value;\n                    } else if (value === \"*\") {\n                        this.bindings[key] = value;\n                    } else if (value === \"**\") {\n                        ++wildCardCount;\n                        this.bindings[key] = value;\n                    }\n                }\n                segments.push(segment);\n            } else if (segment.match(/[0-9a-zA-Z-.~_]+/)) {\n                segments.push(segment);\n            }\n        });\n        if (wildCardCount > 1) {\n            throw new TypeError(\"Can not have more than one wildcard.\");\n        }\n        return segments;\n    }\n}\nexports.PathTemplate = PathTemplate;\n/**\n * Split the path template by `/`.\n * It can not be simply splitted by `/` because there might be `/` in the segments.\n * For example: 'a/b/{a=hello/world}' we do not want to break the brackets pair\n * so above path will be splitted as ['a', 'b', '{a=hello/world}']\n */ function splitPathTemplate(data) {\n    let left = 0;\n    let right = 0;\n    let bracketCount = 0;\n    const segments = [];\n    while(right >= left && right < data.length){\n        if (data.charAt(right) === \"{\") {\n            bracketCount = bracketCount + 1;\n        } else if (data.charAt(right) === \"}\") {\n            bracketCount = bracketCount - 1;\n        } else if (data.charAt(right) === \"/\") {\n            if (right === data.length - 1) {\n                throw new TypeError(\"Invalid path, it can not be ended by /\");\n            }\n            if (bracketCount === 0) {\n                // complete bracket, to avoid the case a/b/**/*/{a=hello/world}\n                segments.push(data.substring(left, right));\n                left = right + 1;\n            }\n        }\n        if (right === data.length - 1) {\n            if (bracketCount !== 0) {\n                throw new TypeError(\"Brackets are invalid.\");\n            }\n            segments.push(data.substring(left));\n        }\n        right = right + 1;\n    }\n    return segments;\n} //# sourceMappingURL=pathTemplate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/routingHeader.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/src/routingHeader.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromParams = fromParams;\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\n/**\n * Helpers for constructing routing headers.\n *\n * These headers are used by Google infrastructure to determine how to route\n * requests, especially for services that are regional.\n *\n * Generally, these headers are specified as gRPC metadata.\n */ /**\n * Constructs the routing header from the given params\n *\n * @param {Object} params - the request header parameters.\n * @return {string} the routing header value.\n */ function fromParams(params) {\n    return querystring.stringify(params);\n} //# sourceMappingURL=routingHeader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcm91dGluZ0hlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBR0U7QUFDckIsTUFBTUMsY0FBY0MsbUJBQU9BLENBQUMsZ0NBQWE7QUFDekM7Ozs7Ozs7Q0FPQyxHQUNEOzs7OztDQUtDLEdBQ0QsU0FBU0YsV0FBV0csTUFBTTtJQUN0QixPQUFPRixZQUFZRyxTQUFTLENBQUNEO0FBQ2pDLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL3JvdXRpbmdIZWFkZXIuanM/NDEyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbVBhcmFtcyA9IGZyb21QYXJhbXM7XG5jb25zdCBxdWVyeXN0cmluZyA9IHJlcXVpcmUoXCJxdWVyeXN0cmluZ1wiKTtcbi8qKlxuICogSGVscGVycyBmb3IgY29uc3RydWN0aW5nIHJvdXRpbmcgaGVhZGVycy5cbiAqXG4gKiBUaGVzZSBoZWFkZXJzIGFyZSB1c2VkIGJ5IEdvb2dsZSBpbmZyYXN0cnVjdHVyZSB0byBkZXRlcm1pbmUgaG93IHRvIHJvdXRlXG4gKiByZXF1ZXN0cywgZXNwZWNpYWxseSBmb3Igc2VydmljZXMgdGhhdCBhcmUgcmVnaW9uYWwuXG4gKlxuICogR2VuZXJhbGx5LCB0aGVzZSBoZWFkZXJzIGFyZSBzcGVjaWZpZWQgYXMgZ1JQQyBtZXRhZGF0YS5cbiAqL1xuLyoqXG4gKiBDb25zdHJ1Y3RzIHRoZSByb3V0aW5nIGhlYWRlciBmcm9tIHRoZSBnaXZlbiBwYXJhbXNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gdGhlIHJlcXVlc3QgaGVhZGVyIHBhcmFtZXRlcnMuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSByb3V0aW5nIGhlYWRlciB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZnJvbVBhcmFtcyhwYXJhbXMpIHtcbiAgICByZXR1cm4gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHBhcmFtcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0aW5nSGVhZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZyb21QYXJhbXMiLCJxdWVyeXN0cmluZyIsInJlcXVpcmUiLCJwYXJhbXMiLCJzdHJpbmdpZnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/routingHeader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/status.js":
/*!*****************************************************!*\
  !*** ./node_modules/google-gax/build/src/status.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HttpCodeToRpcCodeMap = exports.Status = void 0;\nexports.rpcCodeFromHttpStatusCode = rpcCodeFromHttpStatusCode;\n// The following is a copy of the Status enum defined in @grpc/grpc-js,\n// src/constants.ts. We need to use some of these statuses here and there,\n// but we don't want to include the whole @grpc/grpc-js into the browser\n// bundle just to have this small enum.\nvar Status;\n(function(Status) {\n    Status[Status[\"OK\"] = 0] = \"OK\";\n    Status[Status[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    Status[Status[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    Status[Status[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    Status[Status[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    Status[Status[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    Status[Status[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    Status[Status[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    Status[Status[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    Status[Status[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    Status[Status[\"ABORTED\"] = 10] = \"ABORTED\";\n    Status[Status[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    Status[Status[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    Status[Status[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    Status[Status[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    Status[Status[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n    Status[Status[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(Status || (exports.Status = Status = {}));\nexports.HttpCodeToRpcCodeMap = new Map([\n    [\n        400,\n        Status.INVALID_ARGUMENT\n    ],\n    [\n        401,\n        Status.UNAUTHENTICATED\n    ],\n    [\n        403,\n        Status.PERMISSION_DENIED\n    ],\n    [\n        404,\n        Status.NOT_FOUND\n    ],\n    [\n        409,\n        Status.ABORTED\n    ],\n    [\n        416,\n        Status.OUT_OF_RANGE\n    ],\n    [\n        429,\n        Status.RESOURCE_EXHAUSTED\n    ],\n    [\n        499,\n        Status.CANCELLED\n    ],\n    [\n        501,\n        Status.UNIMPLEMENTED\n    ],\n    [\n        503,\n        Status.UNAVAILABLE\n    ],\n    [\n        504,\n        Status.DEADLINE_EXCEEDED\n    ]\n]);\n// Maps HTTP status codes to gRPC status codes above.\nfunction rpcCodeFromHttpStatusCode(httpStatusCode) {\n    if (exports.HttpCodeToRpcCodeMap.has(httpStatusCode)) {\n        return exports.HttpCodeToRpcCodeMap.get(httpStatusCode);\n    }\n    // All 2xx\n    if (httpStatusCode >= 200 && httpStatusCode < 300) {\n        return Status.OK;\n    }\n    // All other 4xx\n    if (httpStatusCode >= 400 && httpStatusCode < 500) {\n        return Status.FAILED_PRECONDITION;\n    }\n    // All other 5xx\n    if (httpStatusCode >= 500 && httpStatusCode < 600) {\n        return Status.INTERNAL;\n    }\n    // Everything else\n    return Status.UNKNOWN;\n} //# sourceMappingURL=status.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RhdHVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDRCQUE0QixHQUFHQSxjQUFjLEdBQUcsS0FBSztBQUNyREEsaUNBQWlDLEdBQUdJO0FBQ3BDLHVFQUF1RTtBQUN2RSwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFLHVDQUF1QztBQUN2QyxJQUFJRDtBQUNILFVBQVVBLE1BQU07SUFDYkEsTUFBTSxDQUFDQSxNQUFNLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRztJQUMzQkEsTUFBTSxDQUFDQSxNQUFNLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRztJQUNsQ0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUNoQ0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxHQUFHO0lBQ3pDQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEdBQUc7SUFDMUNBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLFlBQVksR0FBRyxFQUFFLEdBQUc7SUFDbENBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsR0FBRztJQUN2Q0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxHQUFHO0lBQzFDQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxxQkFBcUIsR0FBRyxFQUFFLEdBQUc7SUFDM0NBLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDLHNCQUFzQixHQUFHLEVBQUUsR0FBRztJQUM1Q0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRztJQUNqQ0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsZUFBZSxHQUFHLEdBQUcsR0FBRztJQUN0Q0EsTUFBTSxDQUFDQSxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHO0lBQ3ZDQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHO0lBQ2xDQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxjQUFjLEdBQUcsR0FBRyxHQUFHO0lBQ3JDQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHO0lBQ25DQSxNQUFNLENBQUNBLE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLEdBQUc7QUFDN0MsR0FBR0EsVUFBV0gsQ0FBQUEsY0FBYyxHQUFHRyxTQUFTLENBQUM7QUFDekNILDRCQUE0QixHQUFHLElBQUlLLElBQUk7SUFDbkM7UUFBQztRQUFLRixPQUFPRyxnQkFBZ0I7S0FBQztJQUM5QjtRQUFDO1FBQUtILE9BQU9JLGVBQWU7S0FBQztJQUM3QjtRQUFDO1FBQUtKLE9BQU9LLGlCQUFpQjtLQUFDO0lBQy9CO1FBQUM7UUFBS0wsT0FBT00sU0FBUztLQUFDO0lBQ3ZCO1FBQUM7UUFBS04sT0FBT08sT0FBTztLQUFDO0lBQ3JCO1FBQUM7UUFBS1AsT0FBT1EsWUFBWTtLQUFDO0lBQzFCO1FBQUM7UUFBS1IsT0FBT1Msa0JBQWtCO0tBQUM7SUFDaEM7UUFBQztRQUFLVCxPQUFPVSxTQUFTO0tBQUM7SUFDdkI7UUFBQztRQUFLVixPQUFPVyxhQUFhO0tBQUM7SUFDM0I7UUFBQztRQUFLWCxPQUFPWSxXQUFXO0tBQUM7SUFDekI7UUFBQztRQUFLWixPQUFPYSxpQkFBaUI7S0FBQztDQUNsQztBQUNELHFEQUFxRDtBQUNyRCxTQUFTWiwwQkFBMEJhLGNBQWM7SUFDN0MsSUFBSWpCLFFBQVFFLG9CQUFvQixDQUFDZ0IsR0FBRyxDQUFDRCxpQkFBaUI7UUFDbEQsT0FBT2pCLFFBQVFFLG9CQUFvQixDQUFDaUIsR0FBRyxDQUFDRjtJQUM1QztJQUNBLFVBQVU7SUFDVixJQUFJQSxrQkFBa0IsT0FBT0EsaUJBQWlCLEtBQUs7UUFDL0MsT0FBT2QsT0FBT2lCLEVBQUU7SUFDcEI7SUFDQSxnQkFBZ0I7SUFDaEIsSUFBSUgsa0JBQWtCLE9BQU9BLGlCQUFpQixLQUFLO1FBQy9DLE9BQU9kLE9BQU9rQixtQkFBbUI7SUFDckM7SUFDQSxnQkFBZ0I7SUFDaEIsSUFBSUosa0JBQWtCLE9BQU9BLGlCQUFpQixLQUFLO1FBQy9DLE9BQU9kLE9BQU9tQixRQUFRO0lBQzFCO0lBQ0Esa0JBQWtCO0lBQ2xCLE9BQU9uQixPQUFPb0IsT0FBTztBQUN6QixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9zdGF0dXMuanM/ZjJhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSHR0cENvZGVUb1JwY0NvZGVNYXAgPSBleHBvcnRzLlN0YXR1cyA9IHZvaWQgMDtcbmV4cG9ydHMucnBjQ29kZUZyb21IdHRwU3RhdHVzQ29kZSA9IHJwY0NvZGVGcm9tSHR0cFN0YXR1c0NvZGU7XG4vLyBUaGUgZm9sbG93aW5nIGlzIGEgY29weSBvZiB0aGUgU3RhdHVzIGVudW0gZGVmaW5lZCBpbiBAZ3JwYy9ncnBjLWpzLFxuLy8gc3JjL2NvbnN0YW50cy50cy4gV2UgbmVlZCB0byB1c2Ugc29tZSBvZiB0aGVzZSBzdGF0dXNlcyBoZXJlIGFuZCB0aGVyZSxcbi8vIGJ1dCB3ZSBkb24ndCB3YW50IHRvIGluY2x1ZGUgdGhlIHdob2xlIEBncnBjL2dycGMtanMgaW50byB0aGUgYnJvd3NlclxuLy8gYnVuZGxlIGp1c3QgdG8gaGF2ZSB0aGlzIHNtYWxsIGVudW0uXG52YXIgU3RhdHVzO1xuKGZ1bmN0aW9uIChTdGF0dXMpIHtcbiAgICBTdGF0dXNbU3RhdHVzW1wiT0tcIl0gPSAwXSA9IFwiT0tcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQ0FOQ0VMTEVEXCJdID0gMV0gPSBcIkNBTkNFTExFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTktOT1dOXCJdID0gMl0gPSBcIlVOS05PV05cIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIkRFQURMSU5FX0VYQ0VFREVEXCJdID0gNF0gPSBcIkRFQURMSU5FX0VYQ0VFREVEXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIk5PVF9GT1VORFwiXSA9IDVdID0gXCJOT1RfRk9VTkRcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUxSRUFEWV9FWElTVFNcIl0gPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiUEVSTUlTU0lPTl9ERU5JRURcIl0gPSA3XSA9IFwiUEVSTUlTU0lPTl9ERU5JRURcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiUkVTT1VSQ0VfRVhIQVVTVEVEXCJdID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJGQUlMRURfUFJFQ09ORElUSU9OXCJdID0gOV0gPSBcIkZBSUxFRF9QUkVDT05ESVRJT05cIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUJPUlRFRFwiXSA9IDEwXSA9IFwiQUJPUlRFRFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJPVVRfT0ZfUkFOR0VcIl0gPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTklNUExFTUVOVEVEXCJdID0gMTJdID0gXCJVTklNUExFTUVOVEVEXCI7XG4gICAgU3RhdHVzW1N0YXR1c1tcIklOVEVSTkFMXCJdID0gMTNdID0gXCJJTlRFUk5BTFwiO1xuICAgIFN0YXR1c1tTdGF0dXNbXCJVTkFWQUlMQUJMRVwiXSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiREFUQV9MT1NTXCJdID0gMTVdID0gXCJEQVRBX0xPU1NcIjtcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5BVVRIRU5USUNBVEVEXCJdID0gMTZdID0gXCJVTkFVVEhFTlRJQ0FURURcIjtcbn0pKFN0YXR1cyB8fCAoZXhwb3J0cy5TdGF0dXMgPSBTdGF0dXMgPSB7fSkpO1xuZXhwb3J0cy5IdHRwQ29kZVRvUnBjQ29kZU1hcCA9IG5ldyBNYXAoW1xuICAgIFs0MDAsIFN0YXR1cy5JTlZBTElEX0FSR1VNRU5UXSxcbiAgICBbNDAxLCBTdGF0dXMuVU5BVVRIRU5USUNBVEVEXSxcbiAgICBbNDAzLCBTdGF0dXMuUEVSTUlTU0lPTl9ERU5JRURdLFxuICAgIFs0MDQsIFN0YXR1cy5OT1RfRk9VTkRdLFxuICAgIFs0MDksIFN0YXR1cy5BQk9SVEVEXSxcbiAgICBbNDE2LCBTdGF0dXMuT1VUX09GX1JBTkdFXSxcbiAgICBbNDI5LCBTdGF0dXMuUkVTT1VSQ0VfRVhIQVVTVEVEXSxcbiAgICBbNDk5LCBTdGF0dXMuQ0FOQ0VMTEVEXSxcbiAgICBbNTAxLCBTdGF0dXMuVU5JTVBMRU1FTlRFRF0sXG4gICAgWzUwMywgU3RhdHVzLlVOQVZBSUxBQkxFXSxcbiAgICBbNTA0LCBTdGF0dXMuREVBRExJTkVfRVhDRUVERURdLFxuXSk7XG4vLyBNYXBzIEhUVFAgc3RhdHVzIGNvZGVzIHRvIGdSUEMgc3RhdHVzIGNvZGVzIGFib3ZlLlxuZnVuY3Rpb24gcnBjQ29kZUZyb21IdHRwU3RhdHVzQ29kZShodHRwU3RhdHVzQ29kZSkge1xuICAgIGlmIChleHBvcnRzLkh0dHBDb2RlVG9ScGNDb2RlTWFwLmhhcyhodHRwU3RhdHVzQ29kZSkpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuSHR0cENvZGVUb1JwY0NvZGVNYXAuZ2V0KGh0dHBTdGF0dXNDb2RlKTtcbiAgICB9XG4gICAgLy8gQWxsIDJ4eFxuICAgIGlmIChodHRwU3RhdHVzQ29kZSA+PSAyMDAgJiYgaHR0cFN0YXR1c0NvZGUgPCAzMDApIHtcbiAgICAgICAgcmV0dXJuIFN0YXR1cy5PSztcbiAgICB9XG4gICAgLy8gQWxsIG90aGVyIDR4eFxuICAgIGlmIChodHRwU3RhdHVzQ29kZSA+PSA0MDAgJiYgaHR0cFN0YXR1c0NvZGUgPCA1MDApIHtcbiAgICAgICAgcmV0dXJuIFN0YXR1cy5GQUlMRURfUFJFQ09ORElUSU9OO1xuICAgIH1cbiAgICAvLyBBbGwgb3RoZXIgNXh4XG4gICAgaWYgKGh0dHBTdGF0dXNDb2RlID49IDUwMCAmJiBodHRwU3RhdHVzQ29kZSA8IDYwMCkge1xuICAgICAgICByZXR1cm4gU3RhdHVzLklOVEVSTkFMO1xuICAgIH1cbiAgICAvLyBFdmVyeXRoaW5nIGVsc2VcbiAgICByZXR1cm4gU3RhdHVzLlVOS05PV047XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiSHR0cENvZGVUb1JwY0NvZGVNYXAiLCJTdGF0dXMiLCJycGNDb2RlRnJvbUh0dHBTdGF0dXNDb2RlIiwiTWFwIiwiSU5WQUxJRF9BUkdVTUVOVCIsIlVOQVVUSEVOVElDQVRFRCIsIlBFUk1JU1NJT05fREVOSUVEIiwiTk9UX0ZPVU5EIiwiQUJPUlRFRCIsIk9VVF9PRl9SQU5HRSIsIlJFU09VUkNFX0VYSEFVU1RFRCIsIkNBTkNFTExFRCIsIlVOSU1QTEVNRU5URUQiLCJVTkFWQUlMQUJMRSIsIkRFQURMSU5FX0VYQ0VFREVEIiwiaHR0cFN0YXR1c0NvZGUiLCJoYXMiLCJnZXQiLCJPSyIsIkZBSUxFRF9QUkVDT05ESVRJT04iLCJJTlRFUk5BTCIsIlVOS05PV04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/status.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamArrayParser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StreamArrayParser = void 0;\nconst abort_controller_1 = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst fallbackRest_1 = __webpack_require__(/*! ./fallbackRest */ \"(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\");\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nclass StreamArrayParser extends stream_1.Transform {\n    /**\n     * StreamArrayParser processes array of valid JSON objects in random chunks\n     * through readable stream, and produces a stream of plain Javascript objects\n     * where it converted from the corresponding protobuf message instance.\n     *\n     * The default JSON parser decodes the input stream under the\n     * following rules:\n     *  1. The stream represents a valid JSON array (must start with a \"[\" and\n     * close with the corresponding \"]\"). Each element of this array is assumed to\n     * be either an array or an object, and will be decoded as a JS object and\n     *    delivered.\n     *  2. All JSON elements in the buffer will be decoded and delivered in a\n     * stream.\n     *\n     * @private\n     * @constructor\n     * @param {protobuf.Method} rpc - the protobuf method produce array of JSON.\n     * @param {Object} options - the options pass to Transform Stream. See more\n     * details\n     * https://nodejs.org/api/stream.html#stream_new_stream_transform_options.\n     */ constructor(rpc, options){\n        super(Object.assign({}, options, {\n            readableObjectMode: true\n        }));\n        this._done = false;\n        this._prevBlock = Buffer.from(\"\");\n        this._isInString = false;\n        this._isSkipped = false;\n        this._level = 0;\n        this.rpc = rpc;\n        this.cancelController = (0, featureDetection_1.hasAbortController)() ? new AbortController() : new abort_controller_1.AbortController();\n        this.cancelSignal = this.cancelController.signal;\n        this.cancelRequested = false;\n    }\n    _transform(chunk, _, callback) {\n        let objectStart = 0;\n        let curIndex = 0;\n        if (this._level === 0 && curIndex === 0) {\n            if (String.fromCharCode(chunk[0]) !== \"[\") {\n                this.emit(\"error\", new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));\n            }\n            curIndex++;\n            this._level++;\n        }\n        while(curIndex < chunk.length){\n            const curValue = String.fromCharCode(chunk[curIndex]);\n            if (!this._isSkipped) {\n                switch(curValue){\n                    case \"{\":\n                        // Check if it's in string, we ignore the curly brace in string.\n                        // Otherwise the object level++.\n                        if (!this._isInString) {\n                            this._level++;\n                        }\n                        if (!this._isInString && this._level === 2) {\n                            objectStart = curIndex;\n                        }\n                        break;\n                    case '\"':\n                        // Flip the string status\n                        this._isInString = !this._isInString;\n                        break;\n                    case \"}\":\n                        // check if it's in string\n                        // if true, do nothing\n                        // if false and level = 0, push data\n                        if (!this._isInString) {\n                            this._level--;\n                        }\n                        if (!this._isInString && this._level === 1) {\n                            // find a object\n                            const objBuff = Buffer.concat([\n                                this._prevBlock,\n                                chunk.slice(objectStart, curIndex + 1)\n                            ]);\n                            try {\n                                // HTTP response.ok is true.\n                                const msgObj = (0, fallbackRest_1.decodeResponse)(this.rpc, true, objBuff);\n                                this.push(msgObj);\n                            } catch (err) {\n                                this.emit(\"error\", err);\n                            }\n                            objectStart = curIndex + 1;\n                            this._prevBlock = Buffer.from(\"\");\n                        }\n                        break;\n                    case \"]\":\n                        if (!this._isInString && this._level === 1) {\n                            this._done = true;\n                            this.push(null);\n                        }\n                        break;\n                    case \"\\\\\":\n                        // Escaping escape character.\n                        this._isSkipped = true;\n                        break;\n                    default:\n                        break;\n                }\n            } else {\n                this._isSkipped = false;\n            }\n            curIndex++;\n        }\n        if (this._level > 1) {\n            this._prevBlock = Buffer.concat([\n                this._prevBlock,\n                chunk.slice(objectStart, curIndex)\n            ]);\n        }\n        callback();\n    }\n    _flush(callback) {\n        callback();\n    }\n    cancel() {\n        this._done = true;\n        this.cancelRequested = true;\n        this.cancelController.abort();\n        this.end();\n    }\n}\nexports.StreamArrayParser = StreamArrayParser; //# sourceMappingURL=streamArrayParser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StreamDescriptor = void 0;\nconst streamingApiCaller_1 = __webpack_require__(/*! ./streamingApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\");\n/**\n * A descriptor for streaming calls.\n */ class StreamDescriptor {\n    constructor(streamType, rest, gaxStreamingRetries){\n        this.type = streamType;\n        this.streaming = true;\n        this.rest = rest;\n        this.gaxStreamingRetries = gaxStreamingRetries;\n    }\n    getApiCaller() {\n        // Right now retrying does not work with gRPC-streaming, because retryable\n        // assumes an API call returns an event emitter while gRPC-streaming methods\n        // return Stream.\n        return new streamingApiCaller_1.StreamingApiCaller(this);\n    }\n}\nexports.StreamDescriptor = StreamDescriptor; //# sourceMappingURL=streamDescriptor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtRGVzY3JpcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ0RBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3QkFBd0IsR0FBRyxLQUFLO0FBQ2hDLE1BQU1HLHVCQUF1QkMsbUJBQU9BLENBQUMsNEdBQXNCO0FBQzNEOztDQUVDLEdBQ0QsTUFBTUY7SUFDRkcsWUFBWUMsVUFBVSxFQUFFQyxJQUFJLEVBQUVDLG1CQUFtQixDQUFFO1FBQy9DLElBQUksQ0FBQ0MsSUFBSSxHQUFHSDtRQUNaLElBQUksQ0FBQ0ksU0FBUyxHQUFHO1FBQ2pCLElBQUksQ0FBQ0gsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUdBO0lBQy9CO0lBQ0FHLGVBQWU7UUFDWCwwRUFBMEU7UUFDMUUsNEVBQTRFO1FBQzVFLGlCQUFpQjtRQUNqQixPQUFPLElBQUlSLHFCQUFxQlMsa0JBQWtCLENBQUMsSUFBSTtJQUMzRDtBQUNKO0FBQ0FaLHdCQUF3QixHQUFHRSxrQkFDM0IsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL3N0cmVhbWluZ0NhbGxzL3N0cmVhbURlc2NyaXB0b3IuanM/NTY2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyZWFtRGVzY3JpcHRvciA9IHZvaWQgMDtcbmNvbnN0IHN0cmVhbWluZ0FwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vc3RyZWFtaW5nQXBpQ2FsbGVyXCIpO1xuLyoqXG4gKiBBIGRlc2NyaXB0b3IgZm9yIHN0cmVhbWluZyBjYWxscy5cbiAqL1xuY2xhc3MgU3RyZWFtRGVzY3JpcHRvciB7XG4gICAgY29uc3RydWN0b3Ioc3RyZWFtVHlwZSwgcmVzdCwgZ2F4U3RyZWFtaW5nUmV0cmllcykge1xuICAgICAgICB0aGlzLnR5cGUgPSBzdHJlYW1UeXBlO1xuICAgICAgICB0aGlzLnN0cmVhbWluZyA9IHRydWU7XG4gICAgICAgIHRoaXMucmVzdCA9IHJlc3Q7XG4gICAgICAgIHRoaXMuZ2F4U3RyZWFtaW5nUmV0cmllcyA9IGdheFN0cmVhbWluZ1JldHJpZXM7XG4gICAgfVxuICAgIGdldEFwaUNhbGxlcigpIHtcbiAgICAgICAgLy8gUmlnaHQgbm93IHJldHJ5aW5nIGRvZXMgbm90IHdvcmsgd2l0aCBnUlBDLXN0cmVhbWluZywgYmVjYXVzZSByZXRyeWFibGVcbiAgICAgICAgLy8gYXNzdW1lcyBhbiBBUEkgY2FsbCByZXR1cm5zIGFuIGV2ZW50IGVtaXR0ZXIgd2hpbGUgZ1JQQy1zdHJlYW1pbmcgbWV0aG9kc1xuICAgICAgICAvLyByZXR1cm4gU3RyZWFtLlxuICAgICAgICByZXR1cm4gbmV3IHN0cmVhbWluZ0FwaUNhbGxlcl8xLlN0cmVhbWluZ0FwaUNhbGxlcih0aGlzKTtcbiAgICB9XG59XG5leHBvcnRzLlN0cmVhbURlc2NyaXB0b3IgPSBTdHJlYW1EZXNjcmlwdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtRGVzY3JpcHRvci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTdHJlYW1EZXNjcmlwdG9yIiwic3RyZWFtaW5nQXBpQ2FsbGVyXzEiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJzdHJlYW1UeXBlIiwicmVzdCIsImdheFN0cmVhbWluZ1JldHJpZXMiLCJ0eXBlIiwic3RyZWFtaW5nIiwiZ2V0QXBpQ2FsbGVyIiwiU3RyZWFtaW5nQXBpQ2FsbGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js":
/*!***********************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streaming.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StreamProxy = exports.StreamType = void 0;\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\nconst streamingRetryRequest_1 = __webpack_require__(/*! ../streamingRetryRequest */ \"(rsc)/./node_modules/google-gax/build/src/streamingRetryRequest.js\");\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst duplexify = __webpack_require__(/*! duplexify */ \"(rsc)/./node_modules/duplexify/index.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst retryRequest = __webpack_require__(/*! retry-request */ \"(rsc)/./node_modules/retry-request/index.js\");\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */ var StreamType;\n(function(StreamType) {\n    /** Client sends a single request, server streams responses. */ StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n    /** Client streams requests, server returns a single response. */ StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n    /** Both client and server stream objects. */ StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType || (exports.StreamType = StreamType = {}));\nclass StreamProxy extends duplexify {\n    /**\n     * StreamProxy is a proxy to gRPC-streaming method.\n     *\n     * @private\n     * @constructor\n     * @param {StreamType} type - the type of gRPC stream.\n     * @param {ApiCallback} callback - the callback for further API call.\n     */ constructor(type, callback, rest, gaxServerStreamingRetries){\n        super(undefined, undefined, {\n            objectMode: true,\n            readable: type !== StreamType.CLIENT_STREAMING,\n            writable: type !== StreamType.SERVER_STREAMING\n        });\n        this.retries = 0;\n        this.type = type;\n        this._callback = callback;\n        this._isCancelCalled = false;\n        this._responseHasSent = false;\n        this.rest = rest;\n        this.gaxServerStreamingRetries = gaxServerStreamingRetries;\n    }\n    shouldRetryRequest(error, retry) {\n        const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\n        let shouldRetry = this.defaultShouldRetry(e, retry);\n        if (retry.shouldRetryFn) {\n            shouldRetry = retry.shouldRetryFn(e);\n        }\n        return shouldRetry;\n    }\n    cancel() {\n        if (this.stream) {\n            this.stream.cancel();\n        } else {\n            this._isCancelCalled = true;\n        }\n    }\n    retry(stream, retry) {\n        let retryArgument = this.argument;\n        if (typeof retry.getResumptionRequestFn === \"function\") {\n            const resumptionRetryArgument = retry.getResumptionRequestFn(retryArgument);\n            if (resumptionRetryArgument !== undefined) {\n                retryArgument = resumptionRetryArgument;\n            }\n        }\n        this.resetStreams(stream);\n        const newStream = this.apiCall(retryArgument, this._callback);\n        this.stream = newStream;\n        this.streamHandoffHelper(newStream, retry);\n        return newStream;\n    }\n    /**\n     * Helper function to handle total timeout + max retry check for server streaming retries\n     * @param {number} deadline - the current retry deadline\n     * @param {number} maxRetries - maximum total number of retries\n     * @param {number} totalTimeoutMillis - total timeout in milliseconds\n     */ throwIfMaxRetriesOrTotalTimeoutExceeded(deadline, maxRetries, totalTimeoutMillis) {\n        const now = new Date();\n        if (this.prevDeadline !== undefined && deadline && now.getTime() >= this.prevDeadline) {\n            const error = new googleError_1.GoogleError(`Total timeout of API exceeded ${totalTimeoutMillis} milliseconds before any response was received.`);\n            error.code = status_1.Status.DEADLINE_EXCEEDED;\n            this.emit(\"error\", error);\n            this.destroy();\n            // Without throwing error you get unhandled error since we are returning a new stream\n            // There might be a better way to do this\n            throw error;\n        }\n        if (this.retries && this.retries >= maxRetries) {\n            const error = new googleError_1.GoogleError(\"Exceeded maximum number of retries before any \" + \"response was received\");\n            error.code = status_1.Status.DEADLINE_EXCEEDED;\n            this.emit(\"error\", error);\n            this.destroy();\n            throw error;\n        }\n    }\n    /**\n     * Error handler for server streaming retries\n     * @param {CancellableStream} stream - the stream being retried\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\n     *   function should retry, and the parameters to the exponential backoff retry\n     *   algorithm.\n     * @param {Error} error - error to handle\n     */ streamHandoffErrorHandler(stream, retry, error) {\n        let retryStream = this.stream;\n        const delayMult = retry.backoffSettings.retryDelayMultiplier;\n        const maxDelay = retry.backoffSettings.maxRetryDelayMillis;\n        const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;\n        const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;\n        let delay = retry.backoffSettings.initialRetryDelayMillis;\n        let timeout = retry.backoffSettings.initialRpcTimeoutMillis;\n        let now = new Date();\n        let deadline = 0;\n        if (retry.backoffSettings.totalTimeoutMillis) {\n            deadline = now.getTime() + retry.backoffSettings.totalTimeoutMillis;\n        }\n        const maxRetries = retry.backoffSettings.maxRetries;\n        try {\n            this.throwIfMaxRetriesOrTotalTimeoutExceeded(deadline, maxRetries, retry.backoffSettings.totalTimeoutMillis);\n        } catch (error) {\n            return;\n        }\n        this.retries++;\n        if (this.shouldRetryRequest(error, retry)) {\n            const toSleep = Math.random() * delay;\n            setTimeout(()=>{\n                now = new Date();\n                delay = Math.min(delay * delayMult, maxDelay);\n                const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;\n                const rpcTimeout = maxTimeout ? maxTimeout : 0;\n                this.prevDeadline = deadline;\n                const newDeadline = deadline ? deadline - now.getTime() : 0;\n                timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);\n            }, toSleep);\n        } else {\n            const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\n            e.note = \"Exception occurred in retry method that was \" + \"not classified as transient\";\n            // for some reason this error must be emitted here\n            // instead of the destroy, otherwise the error event\n            // is swallowed\n            this.emit(\"error\", e);\n            this.destroy();\n            return;\n        }\n        retryStream = this.retry(stream, retry);\n        this.stream = retryStream;\n        return;\n    }\n    /**\n     * Used during server streaming retries to handle\n     * event forwarding, errors, and/or stream closure\n     * @param {CancellableStream} stream - the stream that we're doing the retry on\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\n     *   function should retry, and the parameters to the exponential backoff retry\n     *   algorithm.\n     */ streamHandoffHelper(stream, retry) {\n        let enteredError = false;\n        this.eventForwardHelper(stream);\n        stream.on(\"error\", (error)=>{\n            enteredError = true;\n            this.streamHandoffErrorHandler(stream, retry, error);\n        });\n        stream.on(\"data\", (data)=>{\n            this.retries = 0;\n            this.emit.bind(this, \"data\")(data);\n        });\n        stream.on(\"end\", ()=>{\n            if (!enteredError) {\n                enteredError = true;\n                this.emit(\"end\");\n                this.cancel();\n            }\n        });\n    }\n    eventForwardHelper(stream) {\n        const eventsToForward = [\n            \"metadata\",\n            \"response\",\n            \"status\"\n        ];\n        eventsToForward.forEach((event)=>{\n            stream.on(event, this.emit.bind(this, event));\n        });\n    }\n    statusMetadataHelper(stream) {\n        // gRPC is guaranteed emit the 'status' event but not 'metadata', and 'status' is the last event to emit.\n        // Emit the 'response' event if stream has no 'metadata' event.\n        // This avoids the stream swallowing the other events, such as 'end'.\n        stream.on(\"status\", ()=>{\n            if (!this._responseHasSent) {\n                stream.emit(\"response\", {\n                    code: 200,\n                    details: \"\",\n                    message: \"OK\"\n                });\n            }\n        });\n        // We also want to supply the status data as 'response' event to support\n        // the behavior of google-cloud-node expects.\n        // see:\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n        stream.on(\"metadata\", (metadata)=>{\n            // Create a response object with succeeds.\n            // TODO: unify this logic with the decoration of gRPC response when it's\n            // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n            stream.emit(\"response\", {\n                code: 200,\n                details: \"\",\n                message: \"OK\",\n                metadata\n            });\n            this._responseHasSent = true;\n        });\n    }\n    /**\n     * Forward events from an API request stream to the user's stream.\n     * @param {Stream} stream - The API request stream.\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\n     *   function should retry, and the parameters to the exponential backoff retry\n     *   algorithm.\n     */ forwardEvents(stream) {\n        this.eventForwardHelper(stream);\n        this.statusMetadataHelper(stream);\n        stream.on(\"error\", (error)=>{\n            googleError_1.GoogleError.parseGRPCStatusDetails(error);\n        });\n    }\n    defaultShouldRetry(error, retry) {\n        if (retry.retryCodes.length > 0 && retry.retryCodes.indexOf(error.code) < 0 || retry.retryCodes.length === 0) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Forward events from an API request stream to the user's stream.\n     * @param {Stream} stream - The API request stream.\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\n     *   function eshould retry, and the parameters to the exponential backoff retry\n     *   algorithm.\n     */ forwardEventsWithRetries(stream, retry) {\n        let retryStream = this.stream;\n        this.eventForwardHelper(stream);\n        this.statusMetadataHelper(stream);\n        stream.on(\"error\", (error)=>{\n            const timeout = retry.backoffSettings.totalTimeoutMillis;\n            const maxRetries = retry.backoffSettings.maxRetries;\n            if (maxRetries && maxRetries > 0 || timeout && timeout > 0) {\n                if (this.shouldRetryRequest(error, retry)) {\n                    if (maxRetries && timeout) {\n                        const newError = new googleError_1.GoogleError(\"Cannot set both totalTimeoutMillis and maxRetries \" + \"in backoffSettings.\");\n                        newError.code = status_1.Status.INVALID_ARGUMENT;\n                        this.emit(\"error\", newError);\n                        this.destroy();\n                        return; //end chunk\n                    } else {\n                        this.retries++;\n                        retryStream = this.retry(stream, retry);\n                        this.stream = retryStream;\n                        return retryStream;\n                    }\n                } else {\n                    const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\n                    e.note = \"Exception occurred in retry method that was \" + \"not classified as transient\";\n                    this.destroy(e);\n                    return; // end chunk\n                }\n            } else {\n                if (maxRetries === 0) {\n                    const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\n                    e.note = \"Max retries is set to zero.\";\n                    this.destroy(e);\n                    return; // end chunk\n                }\n                return googleError_1.GoogleError.parseGRPCStatusDetails(error);\n            }\n        });\n        return retryStream;\n    }\n    /**\n     * Resets the target stream as part of the retry process\n     * @param {CancellableStream} requestStream - the stream to end\n     */ resetStreams(requestStream) {\n        if (requestStream) {\n            requestStream.cancel && requestStream.cancel();\n            if (requestStream.destroy) {\n                requestStream.destroy();\n            } else if (requestStream.end) {\n                // TODO: not used in server streaming, but likely needed\n                // if we want to add BIDI or client side streaming\n                requestStream.end();\n            }\n        }\n    }\n    /**\n     * Specifies the target stream.\n     * @param {ApiCall} apiCall - the API function to be called.\n     * @param {Object} argument - the argument to be passed to the apiCall.\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\n     *   function should retry, and the parameters to the exponential backoff retry\n     *   algorithm.\n     */ setStream(apiCall, argument, retryRequestOptions = {}, retry) {\n        this.apiCall = apiCall;\n        this.argument = argument;\n        if (this.type === StreamType.SERVER_STREAMING) {\n            if (this.rest) {\n                const stream = apiCall(argument, this._callback);\n                this.stream = stream;\n                this.setReadable(stream);\n            } else if (this.gaxServerStreamingRetries) {\n                const retryStream = (0, streamingRetryRequest_1.streamingRetryRequest)({\n                    request: ()=>{\n                        if (this._isCancelCalled) {\n                            if (this.stream) {\n                                this.stream.cancel();\n                            }\n                            return;\n                        }\n                        const stream = apiCall(argument, this._callback);\n                        this.stream = stream;\n                        this.stream = this.forwardEventsWithRetries(stream, retry);\n                        return this.stream;\n                    }\n                });\n                this.setReadable(retryStream);\n            } else {\n                const retryStream = retryRequest(null, {\n                    objectMode: true,\n                    request: ()=>{\n                        if (this._isCancelCalled) {\n                            if (this.stream) {\n                                this.stream.cancel();\n                            }\n                            return;\n                        }\n                        const stream = apiCall(argument, this._callback);\n                        this.stream = stream;\n                        this.forwardEvents(stream);\n                        return stream;\n                    },\n                    retries: retryRequestOptions.retries,\n                    currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n                    noResponseRetries: retryRequestOptions.noResponseRetries,\n                    shouldRetryFn: retryRequestOptions.shouldRetryFn\n                });\n                this.setReadable(retryStream);\n            }\n            return;\n        }\n        const stream = apiCall(argument, this._callback);\n        this.stream = stream;\n        this.forwardEvents(stream);\n        if (this.type === StreamType.CLIENT_STREAMING) {\n            this.setWritable(stream);\n        }\n        if (this.type === StreamType.BIDI_STREAMING) {\n            this.setReadable(stream);\n            this.setWritable(stream);\n        }\n        if (this._isCancelCalled && this.stream) {\n            this.stream.cancel();\n        }\n    }\n}\nexports.StreamProxy = StreamProxy; //# sourceMappingURL=streaming.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StreamingApiCaller = void 0;\nconst warnings_1 = __webpack_require__(/*! ../warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\nconst streaming_1 = __webpack_require__(/*! ./streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\nclass StreamingApiCaller {\n    /**\n     * An API caller for methods of gRPC streaming.\n     * @private\n     * @constructor\n     * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\n     */ constructor(descriptor){\n        this.descriptor = descriptor;\n    }\n    init(callback) {\n        return new streaming_1.StreamProxy(this.descriptor.type, callback, this.descriptor.rest, this.descriptor.gaxStreamingRetries);\n    }\n    wrap(func) {\n        switch(this.descriptor.type){\n            case streaming_1.StreamType.SERVER_STREAMING:\n                return (argument, metadata, options)=>{\n                    return func(argument, metadata, options);\n                };\n            case streaming_1.StreamType.CLIENT_STREAMING:\n                return (argument, metadata, options, callback)=>{\n                    return func(metadata, options, callback);\n                };\n            case streaming_1.StreamType.BIDI_STREAMING:\n                return (argument, metadata, options)=>{\n                    return func(metadata, options);\n                };\n            default:\n                (0, warnings_1.warn)(\"streaming_wrap_unknown_stream_type\", `Unknown stream type: ${this.descriptor.type}`);\n        }\n        return func;\n    }\n    call(apiCall, argument, settings, stream) {\n        stream.setStream(apiCall, argument, settings.retryRequestOptions, settings.retry);\n    }\n    fail(stream, err) {\n        stream.emit(\"error\", err);\n    }\n    result(stream) {\n        return stream;\n    }\n}\nexports.StreamingApiCaller = StreamingApiCaller; //# sourceMappingURL=streamingApiCaller.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtaW5nQXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDBCQUEwQixHQUFHLEtBQUs7QUFDbEMsTUFBTUcsYUFBYUMsbUJBQU9BLENBQUMsMEVBQWE7QUFDeEMsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsMEZBQWE7QUFDekMsTUFBTUY7SUFDRjs7Ozs7S0FLQyxHQUNESSxZQUFZQyxVQUFVLENBQUU7UUFDcEIsSUFBSSxDQUFDQSxVQUFVLEdBQUdBO0lBQ3RCO0lBQ0FDLEtBQUtDLFFBQVEsRUFBRTtRQUNYLE9BQU8sSUFBSUosWUFBWUssV0FBVyxDQUFDLElBQUksQ0FBQ0gsVUFBVSxDQUFDSSxJQUFJLEVBQUVGLFVBQVUsSUFBSSxDQUFDRixVQUFVLENBQUNLLElBQUksRUFBRSxJQUFJLENBQUNMLFVBQVUsQ0FBQ00sbUJBQW1CO0lBQ2hJO0lBQ0FDLEtBQUtDLElBQUksRUFBRTtRQUNQLE9BQVEsSUFBSSxDQUFDUixVQUFVLENBQUNJLElBQUk7WUFDeEIsS0FBS04sWUFBWVcsVUFBVSxDQUFDQyxnQkFBZ0I7Z0JBQ3hDLE9BQU8sQ0FBQ0MsVUFBVUMsVUFBVUM7b0JBQ3hCLE9BQU9MLEtBQUtHLFVBQVVDLFVBQVVDO2dCQUNwQztZQUNKLEtBQUtmLFlBQVlXLFVBQVUsQ0FBQ0ssZ0JBQWdCO2dCQUN4QyxPQUFPLENBQUNILFVBQVVDLFVBQVVDLFNBQVNYO29CQUNqQyxPQUFPTSxLQUFLSSxVQUFVQyxTQUFTWDtnQkFDbkM7WUFDSixLQUFLSixZQUFZVyxVQUFVLENBQUNNLGNBQWM7Z0JBQ3RDLE9BQU8sQ0FBQ0osVUFBVUMsVUFBVUM7b0JBQ3hCLE9BQU9MLEtBQUtJLFVBQVVDO2dCQUMxQjtZQUNKO2dCQUNLLElBQUdqQixXQUFXb0IsSUFBSSxFQUFFLHNDQUFzQyxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQ2hCLFVBQVUsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7UUFDakg7UUFDQSxPQUFPSTtJQUNYO0lBQ0FTLEtBQUtDLE9BQU8sRUFBRVAsUUFBUSxFQUFFUSxRQUFRLEVBQUVDLE1BQU0sRUFBRTtRQUN0Q0EsT0FBT0MsU0FBUyxDQUFDSCxTQUFTUCxVQUFVUSxTQUFTRyxtQkFBbUIsRUFBRUgsU0FBU0ksS0FBSztJQUNwRjtJQUNBQyxLQUFLSixNQUFNLEVBQUVLLEdBQUcsRUFBRTtRQUNkTCxPQUFPTSxJQUFJLENBQUMsU0FBU0Q7SUFDekI7SUFDQUUsT0FBT1AsTUFBTSxFQUFFO1FBQ1gsT0FBT0E7SUFDWDtBQUNKO0FBQ0EzQiwwQkFBMEIsR0FBR0Usb0JBQzdCLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL255Yy1ob3VzaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9zdHJlYW1pbmdDYWxscy9zdHJlYW1pbmdBcGlDYWxsZXIuanM/MDMyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyZWFtaW5nQXBpQ2FsbGVyID0gdm9pZCAwO1xuY29uc3Qgd2FybmluZ3NfMSA9IHJlcXVpcmUoXCIuLi93YXJuaW5nc1wiKTtcbmNvbnN0IHN0cmVhbWluZ18xID0gcmVxdWlyZShcIi4vc3RyZWFtaW5nXCIpO1xuY2xhc3MgU3RyZWFtaW5nQXBpQ2FsbGVyIHtcbiAgICAvKipcbiAgICAgKiBBbiBBUEkgY2FsbGVyIGZvciBtZXRob2RzIG9mIGdSUEMgc3RyZWFtaW5nLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtTdHJlYW1EZXNjcmlwdG9yfSBkZXNjcmlwdG9yIC0gdGhlIGRlc2NyaXB0b3Igb2YgdGhlIG1ldGhvZCBzdHJ1Y3R1cmUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGVzY3JpcHRvcikge1xuICAgICAgICB0aGlzLmRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yO1xuICAgIH1cbiAgICBpbml0KGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgc3RyZWFtaW5nXzEuU3RyZWFtUHJveHkodGhpcy5kZXNjcmlwdG9yLnR5cGUsIGNhbGxiYWNrLCB0aGlzLmRlc2NyaXB0b3IucmVzdCwgdGhpcy5kZXNjcmlwdG9yLmdheFN0cmVhbWluZ1JldHJpZXMpO1xuICAgIH1cbiAgICB3cmFwKGZ1bmMpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmRlc2NyaXB0b3IudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBzdHJlYW1pbmdfMS5TdHJlYW1UeXBlLlNFUlZFUl9TVFJFQU1JTkc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhcmd1bWVudCwgbWV0YWRhdGEsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmMoYXJndW1lbnQsIG1ldGFkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBzdHJlYW1pbmdfMS5TdHJlYW1UeXBlLkNMSUVOVF9TVFJFQU1JTkc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhcmd1bWVudCwgbWV0YWRhdGEsIG9wdGlvbnMsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jKG1ldGFkYXRhLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2Ugc3RyZWFtaW5nXzEuU3RyZWFtVHlwZS5CSURJX1NUUkVBTUlORzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKGFyZ3VtZW50LCBtZXRhZGF0YSwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuYyhtZXRhZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgKDAsIHdhcm5pbmdzXzEud2FybikoJ3N0cmVhbWluZ193cmFwX3Vua25vd25fc3RyZWFtX3R5cGUnLCBgVW5rbm93biBzdHJlYW0gdHlwZTogJHt0aGlzLmRlc2NyaXB0b3IudHlwZX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYztcbiAgICB9XG4gICAgY2FsbChhcGlDYWxsLCBhcmd1bWVudCwgc2V0dGluZ3MsIHN0cmVhbSkge1xuICAgICAgICBzdHJlYW0uc2V0U3RyZWFtKGFwaUNhbGwsIGFyZ3VtZW50LCBzZXR0aW5ncy5yZXRyeVJlcXVlc3RPcHRpb25zLCBzZXR0aW5ncy5yZXRyeSk7XG4gICAgfVxuICAgIGZhaWwoc3RyZWFtLCBlcnIpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgcmVzdWx0KHN0cmVhbSkge1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cbn1cbmV4cG9ydHMuU3RyZWFtaW5nQXBpQ2FsbGVyID0gU3RyZWFtaW5nQXBpQ2FsbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtaW5nQXBpQ2FsbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlN0cmVhbWluZ0FwaUNhbGxlciIsIndhcm5pbmdzXzEiLCJyZXF1aXJlIiwic3RyZWFtaW5nXzEiLCJjb25zdHJ1Y3RvciIsImRlc2NyaXB0b3IiLCJpbml0IiwiY2FsbGJhY2siLCJTdHJlYW1Qcm94eSIsInR5cGUiLCJyZXN0IiwiZ2F4U3RyZWFtaW5nUmV0cmllcyIsIndyYXAiLCJmdW5jIiwiU3RyZWFtVHlwZSIsIlNFUlZFUl9TVFJFQU1JTkciLCJhcmd1bWVudCIsIm1ldGFkYXRhIiwib3B0aW9ucyIsIkNMSUVOVF9TVFJFQU1JTkciLCJCSURJX1NUUkVBTUlORyIsIndhcm4iLCJjYWxsIiwiYXBpQ2FsbCIsInNldHRpbmdzIiwic3RyZWFtIiwic2V0U3RyZWFtIiwicmV0cnlSZXF1ZXN0T3B0aW9ucyIsInJldHJ5IiwiZmFpbCIsImVyciIsImVtaXQiLCJyZXN1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingRetryRequest.js":
/*!********************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingRetryRequest.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2023 Google LLC\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.streamingRetryRequest = streamingRetryRequest;\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//     https://www.apache.org/licenses/LICENSE-2.0\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nconst { PassThrough } = __webpack_require__(/*! stream */ \"stream\");\nconst DEFAULTS = {\n    /*\n      Max # of retries\n    */ maxRetries: 2\n};\n// In retry-request, you could pass parameters to request using the requestOpts parameter\n// when we called retry-request from gax, we always passed null\n// passing null here removes an unnecessary parameter from this implementation\nconst requestOps = null;\nconst objectMode = true; // we don't support objectMode being false\n/**\n * Localized adaptation derived from retry-request\n * @param opts - corresponds to https://github.com/googleapis/retry-request#opts-optional\n * @returns\n */ function streamingRetryRequest(opts) {\n    opts = Object.assign({}, DEFAULTS, opts);\n    if (opts.request === undefined) {\n        throw new Error(\"A request function must be provided\");\n    }\n    let numNoResponseAttempts = 0;\n    let streamResponseHandled = false;\n    let requestStream;\n    let delayStream;\n    const retryStream = new PassThrough({\n        objectMode: objectMode\n    });\n    makeRequest();\n    return retryStream;\n    function makeRequest() {\n        streamResponseHandled = false;\n        delayStream = new PassThrough({\n            objectMode: objectMode\n        });\n        requestStream = opts.request(requestOps);\n        requestStream// gRPC via google-cloud-node can emit an `error` as well as a `response`\n        // Whichever it emits, we run with-- we can't run with both. That's what\n        // is up with the `streamResponseHandled` tracking.\n        .on(\"error\", (err)=>{\n            if (streamResponseHandled) {\n                return;\n            }\n            streamResponseHandled = true;\n            onResponse(err);\n        }).on(\"response\", (resp)=>{\n            if (streamResponseHandled) {\n                return;\n            }\n            streamResponseHandled = true;\n            onResponse(null, resp);\n        });\n        requestStream.pipe(delayStream);\n    }\n    function onResponse(err, response = null) {\n        // An error such as DNS resolution.\n        if (err) {\n            numNoResponseAttempts++;\n            if (numNoResponseAttempts <= opts.maxRetries) {\n                makeRequest();\n            } else {\n                retryStream.emit(\"error\", err);\n            }\n            return;\n        }\n        // No more attempts need to be made, just continue on.\n        retryStream.emit(\"response\", response);\n        delayStream.pipe(retryStream);\n        requestStream.on(\"error\", ()=>{\n            // retryStream must be destroyed here for the stream handoff part of retries to function properly\n            // but the error event should not be passed - if it emits as part of .destroy()\n            // it will bubble up early to the caller\n            retryStream.destroy();\n        });\n    }\n} //# sourceMappingURL=streamingRetryRequest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nUmV0cnlSZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUdFO0FBQ2hDLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLGtEQUFrRDtBQUNsRCxzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDLE1BQU0sRUFBRUMsV0FBVyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQ2hDLE1BQU1DLFdBQVc7SUFDYjs7SUFFQSxHQUNBQyxZQUFZO0FBQ2hCO0FBQ0EseUZBQXlGO0FBQ3pGLCtEQUErRDtBQUMvRCw4RUFBOEU7QUFDOUUsTUFBTUMsYUFBYTtBQUNuQixNQUFNQyxhQUFhLE1BQU0sMENBQTBDO0FBQ25FOzs7O0NBSUMsR0FDRCxTQUFTTixzQkFBc0JPLElBQUk7SUFDL0JBLE9BQU9YLE9BQU9ZLE1BQU0sQ0FBQyxDQUFDLEdBQUdMLFVBQVVJO0lBQ25DLElBQUlBLEtBQUtFLE9BQU8sS0FBS0MsV0FBVztRQUM1QixNQUFNLElBQUlDLE1BQU07SUFDcEI7SUFDQSxJQUFJQyx3QkFBd0I7SUFDNUIsSUFBSUMsd0JBQXdCO0lBQzVCLElBQUlDO0lBQ0osSUFBSUM7SUFDSixNQUFNQyxjQUFjLElBQUlmLFlBQVk7UUFBRUssWUFBWUE7SUFBVztJQUM3RFc7SUFDQSxPQUFPRDtJQUNQLFNBQVNDO1FBQ0xKLHdCQUF3QjtRQUN4QkUsY0FBYyxJQUFJZCxZQUFZO1lBQUVLLFlBQVlBO1FBQVc7UUFDdkRRLGdCQUFnQlAsS0FBS0UsT0FBTyxDQUFDSjtRQUM3QlMsYUFDSSx5RUFBeUU7UUFDekUsd0VBQXdFO1FBQ3hFLG1EQUFtRDtTQUNsREksRUFBRSxDQUFDLFNBQVMsQ0FBQ0M7WUFDZCxJQUFJTix1QkFBdUI7Z0JBQ3ZCO1lBQ0o7WUFDQUEsd0JBQXdCO1lBQ3hCTyxXQUFXRDtRQUNmLEdBQ0tELEVBQUUsQ0FBQyxZQUFZLENBQUNHO1lBQ2pCLElBQUlSLHVCQUF1QjtnQkFDdkI7WUFDSjtZQUNBQSx3QkFBd0I7WUFDeEJPLFdBQVcsTUFBTUM7UUFDckI7UUFDQVAsY0FBY1EsSUFBSSxDQUFDUDtJQUN2QjtJQUNBLFNBQVNLLFdBQVdELEdBQUcsRUFBRUksV0FBVyxJQUFJO1FBQ3BDLG1DQUFtQztRQUNuQyxJQUFJSixLQUFLO1lBQ0xQO1lBQ0EsSUFBSUEseUJBQXlCTCxLQUFLSCxVQUFVLEVBQUU7Z0JBQzFDYTtZQUNKLE9BQ0s7Z0JBQ0RELFlBQVlRLElBQUksQ0FBQyxTQUFTTDtZQUM5QjtZQUNBO1FBQ0o7UUFDQSxzREFBc0Q7UUFDdERILFlBQVlRLElBQUksQ0FBQyxZQUFZRDtRQUM3QlIsWUFBWU8sSUFBSSxDQUFDTjtRQUNqQkYsY0FBY0ksRUFBRSxDQUFDLFNBQVM7WUFDdEIsaUdBQWlHO1lBQ2pHLCtFQUErRTtZQUMvRSx3Q0FBd0M7WUFDeENGLFlBQVlTLE9BQU87UUFDdkI7SUFDSjtBQUNKLEVBQ0EsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL3N0cmVhbWluZ1JldHJ5UmVxdWVzdC5qcz9jNGNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdHJlYW1pbmdSZXRyeVJlcXVlc3QgPSBzdHJlYW1pbmdSZXRyeVJlcXVlc3Q7XG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vLyAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmNvbnN0IHsgUGFzc1Rocm91Z2ggfSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgREVGQVVMVFMgPSB7XG4gICAgLypcbiAgICAgIE1heCAjIG9mIHJldHJpZXNcbiAgICAqL1xuICAgIG1heFJldHJpZXM6IDIsXG59O1xuLy8gSW4gcmV0cnktcmVxdWVzdCwgeW91IGNvdWxkIHBhc3MgcGFyYW1ldGVycyB0byByZXF1ZXN0IHVzaW5nIHRoZSByZXF1ZXN0T3B0cyBwYXJhbWV0ZXJcbi8vIHdoZW4gd2UgY2FsbGVkIHJldHJ5LXJlcXVlc3QgZnJvbSBnYXgsIHdlIGFsd2F5cyBwYXNzZWQgbnVsbFxuLy8gcGFzc2luZyBudWxsIGhlcmUgcmVtb3ZlcyBhbiB1bm5lY2Vzc2FyeSBwYXJhbWV0ZXIgZnJvbSB0aGlzIGltcGxlbWVudGF0aW9uXG5jb25zdCByZXF1ZXN0T3BzID0gbnVsbDtcbmNvbnN0IG9iamVjdE1vZGUgPSB0cnVlOyAvLyB3ZSBkb24ndCBzdXBwb3J0IG9iamVjdE1vZGUgYmVpbmcgZmFsc2Vcbi8qKlxuICogTG9jYWxpemVkIGFkYXB0YXRpb24gZGVyaXZlZCBmcm9tIHJldHJ5LXJlcXVlc3RcbiAqIEBwYXJhbSBvcHRzIC0gY29ycmVzcG9uZHMgdG8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZWFwaXMvcmV0cnktcmVxdWVzdCNvcHRzLW9wdGlvbmFsXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBzdHJlYW1pbmdSZXRyeVJlcXVlc3Qob3B0cykge1xuICAgIG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUUywgb3B0cyk7XG4gICAgaWYgKG9wdHMucmVxdWVzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQSByZXF1ZXN0IGZ1bmN0aW9uIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgICB9XG4gICAgbGV0IG51bU5vUmVzcG9uc2VBdHRlbXB0cyA9IDA7XG4gICAgbGV0IHN0cmVhbVJlc3BvbnNlSGFuZGxlZCA9IGZhbHNlO1xuICAgIGxldCByZXF1ZXN0U3RyZWFtO1xuICAgIGxldCBkZWxheVN0cmVhbTtcbiAgICBjb25zdCByZXRyeVN0cmVhbSA9IG5ldyBQYXNzVGhyb3VnaCh7IG9iamVjdE1vZGU6IG9iamVjdE1vZGUgfSk7XG4gICAgbWFrZVJlcXVlc3QoKTtcbiAgICByZXR1cm4gcmV0cnlTdHJlYW07XG4gICAgZnVuY3Rpb24gbWFrZVJlcXVlc3QoKSB7XG4gICAgICAgIHN0cmVhbVJlc3BvbnNlSGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICBkZWxheVN0cmVhbSA9IG5ldyBQYXNzVGhyb3VnaCh7IG9iamVjdE1vZGU6IG9iamVjdE1vZGUgfSk7XG4gICAgICAgIHJlcXVlc3RTdHJlYW0gPSBvcHRzLnJlcXVlc3QocmVxdWVzdE9wcyk7XG4gICAgICAgIHJlcXVlc3RTdHJlYW1cbiAgICAgICAgICAgIC8vIGdSUEMgdmlhIGdvb2dsZS1jbG91ZC1ub2RlIGNhbiBlbWl0IGFuIGBlcnJvcmAgYXMgd2VsbCBhcyBhIGByZXNwb25zZWBcbiAgICAgICAgICAgIC8vIFdoaWNoZXZlciBpdCBlbWl0cywgd2UgcnVuIHdpdGgtLSB3ZSBjYW4ndCBydW4gd2l0aCBib3RoLiBUaGF0J3Mgd2hhdFxuICAgICAgICAgICAgLy8gaXMgdXAgd2l0aCB0aGUgYHN0cmVhbVJlc3BvbnNlSGFuZGxlZGAgdHJhY2tpbmcuXG4gICAgICAgICAgICAub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICAgICAgaWYgKHN0cmVhbVJlc3BvbnNlSGFuZGxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cmVhbVJlc3BvbnNlSGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICBvblJlc3BvbnNlKGVycik7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ3Jlc3BvbnNlJywgKHJlc3ApID0+IHtcbiAgICAgICAgICAgIGlmIChzdHJlYW1SZXNwb25zZUhhbmRsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJlYW1SZXNwb25zZUhhbmRsZWQgPSB0cnVlO1xuICAgICAgICAgICAgb25SZXNwb25zZShudWxsLCByZXNwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcXVlc3RTdHJlYW0ucGlwZShkZWxheVN0cmVhbSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uUmVzcG9uc2UoZXJyLCByZXNwb25zZSA9IG51bGwpIHtcbiAgICAgICAgLy8gQW4gZXJyb3Igc3VjaCBhcyBETlMgcmVzb2x1dGlvbi5cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgbnVtTm9SZXNwb25zZUF0dGVtcHRzKys7XG4gICAgICAgICAgICBpZiAobnVtTm9SZXNwb25zZUF0dGVtcHRzIDw9IG9wdHMubWF4UmV0cmllcykge1xuICAgICAgICAgICAgICAgIG1ha2VSZXF1ZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXRyeVN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm8gbW9yZSBhdHRlbXB0cyBuZWVkIHRvIGJlIG1hZGUsIGp1c3QgY29udGludWUgb24uXG4gICAgICAgIHJldHJ5U3RyZWFtLmVtaXQoJ3Jlc3BvbnNlJywgcmVzcG9uc2UpO1xuICAgICAgICBkZWxheVN0cmVhbS5waXBlKHJldHJ5U3RyZWFtKTtcbiAgICAgICAgcmVxdWVzdFN0cmVhbS5vbignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyByZXRyeVN0cmVhbSBtdXN0IGJlIGRlc3Ryb3llZCBoZXJlIGZvciB0aGUgc3RyZWFtIGhhbmRvZmYgcGFydCBvZiByZXRyaWVzIHRvIGZ1bmN0aW9uIHByb3Blcmx5XG4gICAgICAgICAgICAvLyBidXQgdGhlIGVycm9yIGV2ZW50IHNob3VsZCBub3QgYmUgcGFzc2VkIC0gaWYgaXQgZW1pdHMgYXMgcGFydCBvZiAuZGVzdHJveSgpXG4gICAgICAgICAgICAvLyBpdCB3aWxsIGJ1YmJsZSB1cCBlYXJseSB0byB0aGUgY2FsbGVyXG4gICAgICAgICAgICByZXRyeVN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbWluZ1JldHJ5UmVxdWVzdC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdHJlYW1pbmdSZXRyeVJlcXVlc3QiLCJQYXNzVGhyb3VnaCIsInJlcXVpcmUiLCJERUZBVUxUUyIsIm1heFJldHJpZXMiLCJyZXF1ZXN0T3BzIiwib2JqZWN0TW9kZSIsIm9wdHMiLCJhc3NpZ24iLCJyZXF1ZXN0IiwidW5kZWZpbmVkIiwiRXJyb3IiLCJudW1Ob1Jlc3BvbnNlQXR0ZW1wdHMiLCJzdHJlYW1SZXNwb25zZUhhbmRsZWQiLCJyZXF1ZXN0U3RyZWFtIiwiZGVsYXlTdHJlYW0iLCJyZXRyeVN0cmVhbSIsIm1ha2VSZXF1ZXN0Iiwib24iLCJlcnIiLCJvblJlc3BvbnNlIiwicmVzcCIsInBpcGUiLCJyZXNwb25zZSIsImVtaXQiLCJkZXN0cm95Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingRetryRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/transcoding.js":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/src/transcoding.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getField = getField;\nexports.deepCopyWithoutMatchedFields = deepCopyWithoutMatchedFields;\nexports.deleteField = deleteField;\nexports.buildQueryStringComponents = buildQueryStringComponents;\nexports.encodeWithSlashes = encodeWithSlashes;\nexports.encodeWithoutSlashes = encodeWithoutSlashes;\nexports.applyPattern = applyPattern;\nexports.match = match;\nexports.flattenObject = flattenObject;\nexports.isProto3OptionalField = isProto3OptionalField;\nexports.transcode = transcode;\nexports.overrideHttpRules = overrideHttpRules;\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\nconst httpOptionName = \"(google.api.http)\";\nconst proto3OptionalName = \"proto3_optional\";\n// List of methods as defined in google/api/http.proto (see HttpRule)\nconst supportedHttpMethods = [\n    \"get\",\n    \"post\",\n    \"put\",\n    \"patch\",\n    \"delete\"\n];\nfunction getField(request, field, allowObjects = false // in most cases, we need leaf fields\n) {\n    const parts = field.split(\".\");\n    let value = request;\n    for (const part of parts){\n        if (typeof value !== \"object\") {\n            return undefined;\n        }\n        value = value[part];\n    }\n    if (!allowObjects && typeof value === \"object\" && !Array.isArray(value) && value !== null) {\n        return undefined;\n    }\n    return value;\n}\nfunction deepCopyWithoutMatchedFields(request, fieldsToSkip, fullNamePrefix = \"\") {\n    if (typeof request !== \"object\" || request === null) {\n        return request;\n    }\n    const copy = Object.assign({}, request);\n    for(const key in copy){\n        if (fieldsToSkip.has(`${fullNamePrefix}${key}`)) {\n            delete copy[key];\n            continue;\n        }\n        const nextFullNamePrefix = `${fullNamePrefix}${key}.`;\n        if (Array.isArray(copy[key])) {\n            // a field of an array cannot be addressed as \"request.field\", so we omit the skipping logic for array descendants\n            copy[key] = copy[key].map((value)=>deepCopyWithoutMatchedFields(value, new Set()));\n        } else if (typeof copy[key] === \"object\" && copy[key] !== null) {\n            copy[key] = deepCopyWithoutMatchedFields(copy[key], fieldsToSkip, nextFullNamePrefix);\n        }\n    }\n    return copy;\n}\nfunction deleteField(request, field) {\n    const parts = field.split(\".\");\n    while(parts.length > 1){\n        if (typeof request !== \"object\") {\n            return;\n        }\n        const part = parts.shift();\n        request = request[part];\n    }\n    const part = parts.shift();\n    if (typeof request !== \"object\") {\n        return;\n    }\n    delete request[part];\n}\nfunction buildQueryStringComponents(request, prefix = \"\") {\n    const resultList = [];\n    for(const key in request){\n        if (Array.isArray(request[key])) {\n            for (const value of request[key]){\n                resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(value.toString())}`);\n            }\n        } else if (typeof request[key] === \"object\" && request[key] !== null) {\n            resultList.push(...buildQueryStringComponents(request[key], `${key}.`));\n        } else {\n            resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(request[key] === null ? \"null\" : request[key].toString())}`);\n        }\n    }\n    return resultList;\n}\nfunction encodeWithSlashes(str) {\n    return str.split(\"\").map((c)=>c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c)).join(\"\");\n}\nfunction encodeWithoutSlashes(str) {\n    return str.split(\"\").map((c)=>c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c)).join(\"\");\n}\nfunction escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction applyPattern(pattern, fieldValue) {\n    if (!pattern || pattern === \"*\") {\n        return encodeWithSlashes(fieldValue);\n    }\n    if (!pattern.includes(\"*\") && pattern !== fieldValue) {\n        return undefined;\n    }\n    // since we're converting the pattern to a regex, make necessary precautions:\n    const regex = new RegExp(\"^\" + escapeRegExp(pattern).replace(/\\\\\\*\\\\\\*/g, \"(.+)\").replace(/\\\\\\*/g, \"([^/]+)\") + \"$\");\n    if (!fieldValue.match(regex)) {\n        return undefined;\n    }\n    return encodeWithoutSlashes(fieldValue);\n}\nfunction fieldToCamelCase(field) {\n    const parts = field.split(\".\");\n    return parts.map((part)=>(0, util_1.toCamelCase)(part)).join(\".\");\n}\nfunction match(request, pattern) {\n    let url = pattern;\n    const matchedFields = [];\n    for(;;){\n        const match = url.match(/^(.*)\\{([^}=]+)(?:=([^}]*))?\\}(.*)/);\n        if (!match) {\n            break;\n        }\n        const [, before, field, pattern, after] = match;\n        const camelCasedField = fieldToCamelCase(field);\n        matchedFields.push(fieldToCamelCase(camelCasedField));\n        const fieldValue = getField(request, camelCasedField);\n        if (fieldValue === undefined) {\n            return undefined;\n        }\n        const appliedPattern = applyPattern(pattern, fieldValue === null ? \"null\" : fieldValue.toString());\n        if (appliedPattern === undefined) {\n            return undefined;\n        }\n        url = before + appliedPattern + after;\n    }\n    return {\n        matchedFields,\n        url\n    };\n}\nfunction flattenObject(request) {\n    const result = {};\n    for(const key in request){\n        if (request[key] === undefined) {\n            continue;\n        }\n        if (Array.isArray(request[key])) {\n            // According to the http.proto comments, a repeated field may only\n            // contain primitive types, so no extra recursion here.\n            result[key] = request[key];\n            continue;\n        }\n        if (typeof request[key] === \"object\" && request[key] !== null) {\n            const nested = flattenObject(request[key]);\n            for(const nestedKey in nested){\n                result[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n            continue;\n        }\n        result[key] = request[key];\n    }\n    return result;\n}\nfunction isProto3OptionalField(field) {\n    return field && field.options && field.options[proto3OptionalName];\n}\nfunction transcode(request, parsedOptions) {\n    const httpRules = [];\n    for (const option of parsedOptions){\n        if (!(httpOptionName in option)) {\n            continue;\n        }\n        const httpRule = option[httpOptionName];\n        httpRules.push(httpRule);\n        if (httpRule === null || httpRule === void 0 ? void 0 : httpRule.additional_bindings) {\n            const additionalBindings = Array.isArray(httpRule.additional_bindings) ? httpRule.additional_bindings : [\n                httpRule.additional_bindings\n            ];\n            httpRules.push(...additionalBindings);\n        }\n    }\n    for (const httpRule of httpRules){\n        for (const httpMethod of supportedHttpMethods){\n            if (!(httpMethod in httpRule)) {\n                continue;\n            }\n            const pathTemplate = httpRule[httpMethod];\n            const matchResult = match(request, pathTemplate);\n            if (matchResult === undefined) {\n                continue;\n            }\n            const { url, matchedFields } = matchResult;\n            let data = deepCopyWithoutMatchedFields(request, new Set(matchedFields));\n            if (httpRule.body === \"*\") {\n                return {\n                    httpMethod,\n                    url,\n                    queryString: \"\",\n                    data\n                };\n            }\n            // one field possibly goes to request data, others go to query string\n            const queryStringObject = data;\n            if (httpRule.body) {\n                data = getField(queryStringObject, fieldToCamelCase(httpRule.body), /*allowObjects:*/ true);\n                deleteField(queryStringObject, fieldToCamelCase(httpRule.body));\n            } else {\n                data = \"\";\n            }\n            const queryStringComponents = buildQueryStringComponents(queryStringObject);\n            const queryString = queryStringComponents.join(\"&\");\n            if (!data || typeof data === \"object\" && Object.keys(data).length === 0) {\n                data = \"\";\n            }\n            return {\n                httpMethod,\n                url,\n                queryString,\n                data\n            };\n        }\n    }\n    return undefined;\n}\n// Override the protobuf json's the http rules.\nfunction overrideHttpRules(httpRules, protoJson) {\n    for (const rule of httpRules){\n        if (!rule.selector) {\n            continue;\n        }\n        const rpc = protoJson.lookup(rule.selector);\n        // Not support override on non-exist RPC or a RPC without an annotation.\n        // We could reconsider if we have the use case later.\n        if (!rpc || !rpc.parsedOptions) {\n            continue;\n        }\n        for (const item of rpc.parsedOptions){\n            if (!(httpOptionName in item)) {\n                continue;\n            }\n            const httpOptions = item[httpOptionName];\n            for(const httpMethod in httpOptions){\n                if (httpMethod in rule) {\n                    if (httpMethod === \"additional_bindings\") {\n                        continue;\n                    }\n                    httpOptions[httpMethod] = rule[httpMethod];\n                }\n                if (rule.additional_bindings) {\n                    httpOptions[\"additional_bindings\"] = !httpOptions[\"additional_bindings\"] ? [] : Array.isArray(httpOptions[\"additional_bindings\"]) ? httpOptions[\"additional_bindings\"] : [\n                        httpOptions[\"additional_bindings\"]\n                    ];\n                    // Make the additional_binding to be an array if it is not.\n                    httpOptions[\"additional_bindings\"].push(...rule.additional_bindings);\n                }\n            }\n        }\n    }\n} //# sourceMappingURL=transcoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/transcoding.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/util.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/util.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.camelToSnakeCase = camelToSnakeCase;\nexports.toCamelCase = toCamelCase;\nexports.toLowerCamelCase = toLowerCamelCase;\nexports.makeUUID = makeUUID;\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const uuid_1 = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nfunction words(str, normalize = false) {\n    if (normalize) {\n        // strings like somethingABCSomething are special case for protobuf.js,\n        // they should be split as \"something\", \"abc\", \"something\".\n        // Deal with sequences of capital letters first.\n        str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, (str)=>{\n            return str[0] + str.slice(1, str.length - 1).toLowerCase() + str[str.length - 1];\n        });\n    }\n    // split on spaces, non-alphanumeric, or capital letters\n    // note: we keep the capitalization of the first word (special case: IPProtocol)\n    return str.split(/(?=[A-Z])|[^A-Za-z0-9.]+/).filter((w)=>w.length > 0).map((w, index)=>index === 0 ? w : w.toLowerCase());\n}\n/**\n * Converts the first character of the given string to lower case.\n */ function lowercase(str) {\n    if (str.length === 0) {\n        return str;\n    }\n    return str[0].toLowerCase() + str.slice(1);\n}\n/**\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\n * to snake_case (normally used in proto definitions).\n */ function camelToSnakeCase(str) {\n    // Keep the first position capitalization, otherwise decapitalize with underscore.\n    const wordsList = words(str);\n    if (wordsList.length === 0) {\n        return str;\n    }\n    const result = [\n        wordsList[0]\n    ];\n    result.push(...wordsList.slice(1).map(lowercase));\n    return result.join(\"_\");\n}\n/**\n * Capitalizes the first character of the given string.\n */ function capitalize(str) {\n    if (str.length === 0) {\n        return str;\n    }\n    return str[0].toUpperCase() + str.slice(1);\n}\n/**\n * Converts a given string from snake_case (normally used in proto definitions) or\n * PascalCase (also used in proto definitions) to camelCase (used by protobuf.js).\n * Preserves capitalization of the first character.\n */ function toCamelCase(str) {\n    const wordsList = words(str, /*normalize:*/ true);\n    if (wordsList.length === 0) {\n        return str;\n    }\n    const result = [\n        wordsList[0]\n    ];\n    result.push(...wordsList.slice(1).map((w)=>{\n        if (w.match(/^\\d+$/)) {\n            return \"_\" + w;\n        }\n        return capitalize(w);\n    }));\n    return result.join(\"\");\n}\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */ function toLowerCamelCase(str) {\n    const camelCase = toCamelCase(str);\n    if (camelCase.length === 0) {\n        return camelCase;\n    }\n    return camelCase[0].toLowerCase() + camelCase.slice(1);\n}\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */ function makeUUID() {\n    return (0, uuid_1.v4)();\n} //# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/warnings.js":
/*!*******************************************************!*\
  !*** ./node_modules/google-gax/build/src/warnings.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.warn = warn;\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\nconst emittedWarnings = new Set();\n// warnType is the type of warning (e.g. 'DeprecationWarning', 'ExperimentalWarning', etc.)\nfunction warn(code, message, warnType) {\n    // Only show a given warning once\n    if (emittedWarnings.has(code)) {\n        return;\n    }\n    emittedWarnings.add(code);\n    if (!(0, featureDetection_1.isNodeJS)()) {\n        console.warn(message);\n    } else if (typeof warnType !== \"undefined\") {\n        process.emitWarning(message, {\n            type: warnType\n        });\n    } else {\n        process.emitWarning(message);\n    }\n} //# sourceMappingURL=warnings.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvd2FybmluZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsWUFBWSxHQUFHRTtBQUNmLE1BQU1DLHFCQUFxQkMsbUJBQU9BLENBQUMseUZBQW9CO0FBQ3ZELE1BQU1DLGtCQUFrQixJQUFJQztBQUM1QiwyRkFBMkY7QUFDM0YsU0FBU0osS0FBS0ssSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFFBQVE7SUFDakMsaUNBQWlDO0lBQ2pDLElBQUlKLGdCQUFnQkssR0FBRyxDQUFDSCxPQUFPO1FBQzNCO0lBQ0o7SUFDQUYsZ0JBQWdCTSxHQUFHLENBQUNKO0lBQ3BCLElBQUksQ0FBQyxDQUFDLEdBQUdKLG1CQUFtQlMsUUFBUSxLQUFLO1FBQ3JDQyxRQUFRWCxJQUFJLENBQUNNO0lBQ2pCLE9BQ0ssSUFBSSxPQUFPQyxhQUFhLGFBQWE7UUFDdENLLFFBQVFDLFdBQVcsQ0FBQ1AsU0FBUztZQUN6QlEsTUFBTVA7UUFDVjtJQUNKLE9BQ0s7UUFDREssUUFBUUMsV0FBVyxDQUFDUDtJQUN4QjtBQUNKLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbnljLWhvdXNpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL3dhcm5pbmdzLmpzPzYwYWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndhcm4gPSB3YXJuO1xuY29uc3QgZmVhdHVyZURldGVjdGlvbl8xID0gcmVxdWlyZShcIi4vZmVhdHVyZURldGVjdGlvblwiKTtcbmNvbnN0IGVtaXR0ZWRXYXJuaW5ncyA9IG5ldyBTZXQoKTtcbi8vIHdhcm5UeXBlIGlzIHRoZSB0eXBlIG9mIHdhcm5pbmcgKGUuZy4gJ0RlcHJlY2F0aW9uV2FybmluZycsICdFeHBlcmltZW50YWxXYXJuaW5nJywgZXRjLilcbmZ1bmN0aW9uIHdhcm4oY29kZSwgbWVzc2FnZSwgd2FyblR5cGUpIHtcbiAgICAvLyBPbmx5IHNob3cgYSBnaXZlbiB3YXJuaW5nIG9uY2VcbiAgICBpZiAoZW1pdHRlZFdhcm5pbmdzLmhhcyhjb2RlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVtaXR0ZWRXYXJuaW5ncy5hZGQoY29kZSk7XG4gICAgaWYgKCEoMCwgZmVhdHVyZURldGVjdGlvbl8xLmlzTm9kZUpTKSgpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHdhcm5UeXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKG1lc3NhZ2UsIHtcbiAgICAgICAgICAgIHR5cGU6IHdhcm5UeXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcobWVzc2FnZSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2FybmluZ3MuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwid2FybiIsImZlYXR1cmVEZXRlY3Rpb25fMSIsInJlcXVpcmUiLCJlbWl0dGVkV2FybmluZ3MiLCJTZXQiLCJjb2RlIiwibWVzc2FnZSIsIndhcm5UeXBlIiwiaGFzIiwiYWRkIiwiaXNOb2RlSlMiLCJjb25zb2xlIiwicHJvY2VzcyIsImVtaXRXYXJuaW5nIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/warnings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/iam_service.json":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/iam_service.json ***!
  \***************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"iam":{"nested":{"v1":{"options":{"cc_enable_arenas":true,"csharp_namespace":"Google.Cloud.Iam.V1","go_package":"google.golang.org/genproto/googleapis/iam/v1;iam","java_multiple_files":true,"java_outer_classname":"PolicyProto","java_package":"com.google.iam.v1","php_namespace":"Google\\\\Cloud\\\\Iam\\\\V1"},"nested":{"IAMPolicy":{"options":{"(google.api.default_host)":"iam-meta-api.googleapis.com"},"methods":{"SetIamPolicy":{"requestType":"SetIamPolicyRequest","responseType":"Policy","options":{"(google.api.http).post":"/v1/{resource=**}:setIamPolicy","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:setIamPolicy","body":"*"}}]},"GetIamPolicy":{"requestType":"GetIamPolicyRequest","responseType":"Policy","options":{"(google.api.http).post":"/v1/{resource=**}:getIamPolicy","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:getIamPolicy","body":"*"}}]},"TestIamPermissions":{"requestType":"TestIamPermissionsRequest","responseType":"TestIamPermissionsResponse","options":{"(google.api.http).post":"/v1/{resource=**}:testIamPermissions","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:testIamPermissions","body":"*"}}]}}},"SetIamPolicyRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"policy":{"type":"Policy","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"GetIamPolicyRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"options":{"type":"GetPolicyOptions","id":2}}},"TestIamPermissionsRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"permissions":{"rule":"repeated","type":"string","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"TestIamPermissionsResponse":{"fields":{"permissions":{"rule":"repeated","type":"string","id":1}}},"GetPolicyOptions":{"fields":{"requestedPolicyVersion":{"type":"int32","id":1}}},"Policy":{"fields":{"version":{"type":"int32","id":1},"bindings":{"rule":"repeated","type":"Binding","id":4},"etag":{"type":"bytes","id":3}}},"Binding":{"fields":{"role":{"type":"string","id":1},"members":{"rule":"repeated","type":"string","id":2},"condition":{"type":"google.type.Expr","id":3}}},"PolicyDelta":{"fields":{"bindingDeltas":{"rule":"repeated","type":"BindingDelta","id":1},"auditConfigDeltas":{"rule":"repeated","type":"AuditConfigDelta","id":2}}},"BindingDelta":{"fields":{"action":{"type":"Action","id":1},"role":{"type":"string","id":2},"member":{"type":"string","id":3},"condition":{"type":"google.type.Expr","id":4}},"nested":{"Action":{"values":{"ACTION_UNSPECIFIED":0,"ADD":1,"REMOVE":2}}}},"AuditConfigDelta":{"fields":{"action":{"type":"Action","id":1},"service":{"type":"string","id":2},"exemptedMember":{"type":"string","id":3},"logType":{"type":"string","id":4}},"nested":{"Action":{"values":{"ACTION_UNSPECIFIED":0,"ADD":1,"REMOVE":2}}}},"logging":{"options":{"csharp_namespace":"Google.Cloud.Iam.V1.Logging","go_package":"google.golang.org/genproto/googleapis/iam/v1/logging;logging","java_multiple_files":true,"java_outer_classname":"AuditDataProto","java_package":"com.google.iam.v1.logging"},"nested":{"AuditData":{"fields":{"policyDelta":{"type":"google.iam.v1.PolicyDelta","id":2}}}}}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ResourceProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"},"fieldBehavior":{"rule":"repeated","type":"google.api.FieldBehavior","id":1052,"extend":"google.protobuf.FieldOptions"},"FieldBehavior":{"values":{"FIELD_BEHAVIOR_UNSPECIFIED":0,"OPTIONAL":1,"REQUIRED":2,"OUTPUT_ONLY":3,"INPUT_ONLY":4,"IMMUTABLE":5}},"resourceReference":{"type":"google.api.ResourceReference","id":1055,"extend":"google.protobuf.FieldOptions"},"resourceDefinition":{"rule":"repeated","type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.FileOptions"},"resource":{"type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.MessageOptions"},"ResourceDescriptor":{"fields":{"type":{"type":"string","id":1},"pattern":{"rule":"repeated","type":"string","id":2},"nameField":{"type":"string","id":3},"history":{"type":"History","id":4},"plural":{"type":"string","id":5},"singular":{"type":"string","id":6}},"nested":{"History":{"values":{"HISTORY_UNSPECIFIED":0,"ORIGINALLY_SINGLE_PATTERN":1,"FUTURE_MULTI_PATTERN":2}}}},"ResourceReference":{"fields":{"type":{"type":"string","id":1},"childType":{"type":"string","id":2}}}}},"protobuf":{"options":{"go_package":"github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}}}},"type":{"options":{"go_package":"google.golang.org/genproto/googleapis/type/expr;expr","java_multiple_files":true,"java_outer_classname":"ExprProto","java_package":"com.google.type","objc_class_prefix":"GTP"},"nested":{"Expr":{"fields":{"expression":{"type":"string","id":1},"title":{"type":"string","id":2},"description":{"type":"string","id":3},"location":{"type":"string","id":4}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/locations.json":
/*!*************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/locations.json ***!
  \*************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"cloud":{"nested":{"location":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/cloud/location;location","java_multiple_files":true,"java_outer_classname":"LocationsProto","java_package":"com.google.cloud.location"},"nested":{"Locations":{"options":{"(google.api.default_host)":"cloud.googleapis.com","(google.api.oauth_scopes)":"https://www.googleapis.com/auth/cloud-platform"},"methods":{"ListLocations":{"requestType":"ListLocationsRequest","responseType":"ListLocationsResponse","options":{"(google.api.http).get":"/v1/{name=locations}","(google.api.http).additional_bindings.get":"/v1/{name=projects/*}/locations"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=locations}","additional_bindings":{"get":"/v1/{name=projects/*}/locations"}}}]},"GetLocation":{"requestType":"GetLocationRequest","responseType":"Location","options":{"(google.api.http).get":"/v1/{name=locations/*}","(google.api.http).additional_bindings.get":"/v1/{name=projects/*/locations/*}"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=locations/*}","additional_bindings":{"get":"/v1/{name=projects/*/locations/*}"}}}]}}},"ListLocationsRequest":{"fields":{"name":{"type":"string","id":1},"filter":{"type":"string","id":2},"pageSize":{"type":"int32","id":3},"pageToken":{"type":"string","id":4}}},"ListLocationsResponse":{"fields":{"locations":{"rule":"repeated","type":"Location","id":1},"nextPageToken":{"type":"string","id":2}}},"GetLocationRequest":{"fields":{"name":{"type":"string","id":1}}},"Location":{"fields":{"name":{"type":"string","id":1},"locationId":{"type":"string","id":4},"displayName":{"type":"string","id":5},"labels":{"keyType":"string","type":"string","id":2},"metadata":{"type":"google.protobuf.Any","id":3}}}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ClientProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"}}},"protobuf":{"options":{"go_package":"google.golang.org/protobuf/types/descriptorpb","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/operations.json":
/*!**************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/operations.json ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"longrunning":{"options":{"cc_enable_arenas":true,"csharp_namespace":"Google.LongRunning","go_package":"google.golang.org/genproto/googleapis/longrunning;longrunning","java_multiple_files":true,"java_outer_classname":"OperationsProto","java_package":"com.google.longrunning","php_namespace":"Google\\\\LongRunning"},"nested":{"operationInfo":{"type":"google.longrunning.OperationInfo","id":1049,"extend":"google.protobuf.MethodOptions"},"Operations":{"options":{"(google.api.default_host)":"longrunning.googleapis.com"},"methods":{"ListOperations":{"requestType":"ListOperationsRequest","responseType":"ListOperationsResponse","options":{"(google.api.http).get":"/v1/{name=operations}","(google.api.method_signature)":"name,filter"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=operations}"}},{"(google.api.method_signature)":"name,filter"}]},"GetOperation":{"requestType":"GetOperationRequest","responseType":"Operation","options":{"(google.api.http).get":"/v1/operations/{name}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/operations/{name}"}},{"(google.api.method_signature)":"name"}]},"DeleteOperation":{"requestType":"DeleteOperationRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).delete":"/v1/{name=operations/**}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"delete":"/v1/{name=operations/**}"}},{"(google.api.method_signature)":"name"}]},"CancelOperation":{"requestType":"CancelOperationRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).post":"/v1/{name=operations/**}:cancel","(google.api.http).body":"*","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{name=operations/**}:cancel","body":"*"}},{"(google.api.method_signature)":"name"}]},"WaitOperation":{"requestType":"WaitOperationRequest","responseType":"Operation"}}},"Operation":{"oneofs":{"result":{"oneof":["error","response"]}},"fields":{"name":{"type":"string","id":1},"metadata":{"type":"google.protobuf.Any","id":2},"done":{"type":"bool","id":3},"error":{"type":"google.rpc.Status","id":4},"response":{"type":"google.protobuf.Any","id":5}}},"GetOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"ListOperationsRequest":{"fields":{"name":{"type":"string","id":4},"filter":{"type":"string","id":1},"pageSize":{"type":"int32","id":2},"pageToken":{"type":"string","id":3}}},"ListOperationsResponse":{"fields":{"operations":{"rule":"repeated","type":"Operation","id":1},"nextPageToken":{"type":"string","id":2}}},"CancelOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"DeleteOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"WaitOperationRequest":{"fields":{"name":{"type":"string","id":1},"timeout":{"type":"google.protobuf.Duration","id":2}}},"OperationInfo":{"fields":{"responseType":{"type":"string","id":1},"metadataType":{"type":"string","id":2}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ClientProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"}}},"protobuf":{"options":{"go_package":"github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"Duration":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}},"Empty":{"fields":{}}}},"rpc":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/rpc/status;status","java_multiple_files":true,"java_outer_classname":"StatusProto","java_package":"com.google.rpc","objc_class_prefix":"RPC"},"nested":{"Status":{"fields":{"code":{"type":"int32","id":1},"message":{"type":"string","id":2},"details":{"rule":"repeated","type":"google.protobuf.Any","id":3}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/status.json":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/protos/status.json ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"Duration":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}}}},"rpc":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/rpc/errdetails;errdetails","java_multiple_files":true,"java_outer_classname":"ErrorDetailsProto","java_package":"com.google.rpc","objc_class_prefix":"RPC"},"nested":{"Status":{"fields":{"code":{"type":"int32","id":1},"message":{"type":"string","id":2},"details":{"rule":"repeated","type":"google.protobuf.Any","id":3}}},"RetryInfo":{"fields":{"retryDelay":{"type":"google.protobuf.Duration","id":1}}},"DebugInfo":{"fields":{"stackEntries":{"rule":"repeated","type":"string","id":1},"detail":{"type":"string","id":2}}},"QuotaFailure":{"fields":{"violations":{"rule":"repeated","type":"Violation","id":1}},"nested":{"Violation":{"fields":{"subject":{"type":"string","id":1},"description":{"type":"string","id":2}}}}},"ErrorInfo":{"fields":{"reason":{"type":"string","id":1},"domain":{"type":"string","id":2},"metadata":{"keyType":"string","type":"string","id":3}}},"PreconditionFailure":{"fields":{"violations":{"rule":"repeated","type":"Violation","id":1}},"nested":{"Violation":{"fields":{"type":{"type":"string","id":1},"subject":{"type":"string","id":2},"description":{"type":"string","id":3}}}}},"BadRequest":{"fields":{"fieldViolations":{"rule":"repeated","type":"FieldViolation","id":1}},"nested":{"FieldViolation":{"fields":{"field":{"type":"string","id":1},"description":{"type":"string","id":2}}}}},"RequestInfo":{"fields":{"requestId":{"type":"string","id":1},"servingData":{"type":"string","id":2}}},"ResourceInfo":{"fields":{"resourceType":{"type":"string","id":1},"resourceName":{"type":"string","id":2},"owner":{"type":"string","id":3},"description":{"type":"string","id":4}}},"Help":{"fields":{"links":{"rule":"repeated","type":"Link","id":1}},"nested":{"Link":{"fields":{"description":{"type":"string","id":1},"url":{"type":"string","id":2}}}}},"LocalizedMessage":{"fields":{"locale":{"type":"string","id":1},"message":{"type":"string","id":2}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/iam_policy_service_client_config.json":
/*!*********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/iam_policy_service_client_config.json ***!
  \*********************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"interfaces":{"google.iam.v1.IAMPolicy":{"retry_codes":{"non_idempotent":[],"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":20000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":20000,"total_timeout_millis":600000}},"methods":{"GetIamPolicy":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"SetIamPolicy":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"TestIamPermissions":{"retry_codes_name":"non_idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/locations_client_config.json":
/*!************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/locations_client_config.json ***!
  \************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"interfaces":{"google.cloud.location.Locations":{"retry_codes":{"non_idempotent":[],"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":60000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":60000,"total_timeout_millis":600000}},"methods":{"ListLocations":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"GetLocation":{"retry_codes_name":"non_idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/operations_client_config.json":
/*!*************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/operations_client_config.json ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"interfaces":{"google.longrunning.Operations":{"retry_codes":{"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"],"non_idempotent":[]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":90000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":90000,"total_timeout_millis":600000}},"methods":{"GetOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"ListOperations":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"CancelOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"DeleteOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/protosList.json":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/protosList.json ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = JSON.parse('["google/api/annotations.proto","google/api/apikeys/v2/apikeys.proto","google/api/apikeys/v2/resources.proto","google/api/auth.proto","google/api/backend.proto","google/api/billing.proto","google/api/client.proto","google/api/cloudquotas/v1/cloudquotas.proto","google/api/cloudquotas/v1/resources.proto","google/api/config_change.proto","google/api/consumer.proto","google/api/context.proto","google/api/control.proto","google/api/distribution.proto","google/api/documentation.proto","google/api/endpoint.proto","google/api/error_reason.proto","google/api/expr/conformance/v1alpha1/conformance_service.proto","google/api/expr/v1alpha1/checked.proto","google/api/expr/v1alpha1/eval.proto","google/api/expr/v1alpha1/explain.proto","google/api/expr/v1alpha1/syntax.proto","google/api/expr/v1alpha1/value.proto","google/api/expr/v1beta1/decl.proto","google/api/expr/v1beta1/eval.proto","google/api/expr/v1beta1/expr.proto","google/api/expr/v1beta1/source.proto","google/api/expr/v1beta1/value.proto","google/api/field_behavior.proto","google/api/field_info.proto","google/api/http.proto","google/api/httpbody.proto","google/api/label.proto","google/api/launch_stage.proto","google/api/log.proto","google/api/logging.proto","google/api/metric.proto","google/api/monitored_resource.proto","google/api/monitoring.proto","google/api/policy.proto","google/api/quota.proto","google/api/resource.proto","google/api/routing.proto","google/api/service.proto","google/api/servicecontrol/v1/check_error.proto","google/api/servicecontrol/v1/distribution.proto","google/api/servicecontrol/v1/http_request.proto","google/api/servicecontrol/v1/log_entry.proto","google/api/servicecontrol/v1/metric_value.proto","google/api/servicecontrol/v1/operation.proto","google/api/servicecontrol/v1/quota_controller.proto","google/api/servicecontrol/v1/service_controller.proto","google/api/servicecontrol/v2/service_controller.proto","google/api/servicemanagement/v1/resources.proto","google/api/servicemanagement/v1/servicemanager.proto","google/api/serviceusage/v1/resources.proto","google/api/serviceusage/v1/serviceusage.proto","google/api/serviceusage/v1beta1/resources.proto","google/api/serviceusage/v1beta1/serviceusage.proto","google/api/source_info.proto","google/api/system_parameter.proto","google/api/usage.proto","google/api/visibility.proto","google/cloud/location/locations.proto","google/iam/v1/iam_policy.proto","google/iam/v1/logging/audit_data.proto","google/iam/v1/options.proto","google/iam/v1/policy.proto","google/logging/type/http_request.proto","google/logging/type/log_severity.proto","google/longrunning/operations.proto","google/monitoring/v3/alert.proto","google/monitoring/v3/alert_service.proto","google/monitoring/v3/common.proto","google/monitoring/v3/dropped_labels.proto","google/monitoring/v3/group.proto","google/monitoring/v3/group_service.proto","google/monitoring/v3/metric.proto","google/monitoring/v3/metric_service.proto","google/monitoring/v3/mutation_record.proto","google/monitoring/v3/notification.proto","google/monitoring/v3/notification_service.proto","google/monitoring/v3/query_service.proto","google/monitoring/v3/service.proto","google/monitoring/v3/service_service.proto","google/monitoring/v3/snooze.proto","google/monitoring/v3/snooze_service.proto","google/monitoring/v3/span_context.proto","google/monitoring/v3/uptime.proto","google/monitoring/v3/uptime_service.proto","google/protobuf/any.proto","google/protobuf/api.proto","google/protobuf/bridge/message_set.proto","google/protobuf/compiler/plugin.proto","google/protobuf/compiler/ruby/ruby_generated_code.proto","google/protobuf/compiler/ruby/ruby_generated_code_proto2.proto","google/protobuf/compiler/ruby/ruby_generated_code_proto2_import.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_explicit.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_explicit_legacy.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_implicit.proto","google/protobuf/cpp_features.proto","google/protobuf/descriptor.proto","google/protobuf/duration.proto","google/protobuf/empty.proto","google/protobuf/field_mask.proto","google/protobuf/source_context.proto","google/protobuf/struct.proto","google/protobuf/timestamp.proto","google/protobuf/type.proto","google/protobuf/util/json_format.proto","google/protobuf/util/json_format_proto3.proto","google/protobuf/wrappers.proto","google/rpc/code.proto","google/rpc/context/attribute_context.proto","google/rpc/context/audit_context.proto","google/rpc/error_details.proto","google/rpc/http.proto","google/rpc/status.proto","google/type/calendar_period.proto","google/type/color.proto","google/type/date.proto","google/type/datetime.proto","google/type/dayofweek.proto","google/type/decimal.proto","google/type/expr.proto","google/type/fraction.proto","google/type/interval.proto","google/type/latlng.proto","google/type/localized_text.proto","google/type/money.proto","google/type/month.proto","google/type/phone_number.proto","google/type/postal_address.proto","google/type/quaternion.proto","google/type/timeofday.proto"]');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/package.json":
/*!**********************************************!*\
  !*** ./node_modules/google-gax/package.json ***!
  \**********************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"google-gax","version":"4.4.1","description":"Google API Extensions","main":"build/src/index.js","types":"build/src/index.d.ts","files":["build/src","build/protos/","!build/src/**/*.map"],"dependencies":{"@grpc/grpc-js":"^1.10.9","@grpc/proto-loader":"^0.7.13","@types/long":"^4.0.0","abort-controller":"^3.0.0","duplexify":"^4.0.0","google-auth-library":"^9.3.0","node-fetch":"^2.7.0","object-hash":"^3.0.0","proto3-json-serializer":"^2.0.2","retry-request":"^7.0.0","uuid":"^9.0.1","protobufjs":"^7.3.2"},"devDependencies":{"@types/uuid":"^9.0.7","@babel/plugin-proposal-private-methods":"^7.18.6","@compodoc/compodoc":"1.1.23","@types/mocha":"^9.0.0","@types/ncp":"^2.0.1","@types/node":"^20.5.0","@types/node-fetch":"^2.6.11","@types/object-hash":"^3.0.0","@types/proxyquire":"^1.3.28","@types/pumpify":"^1.4.1","@types/sinon":"^17.0.0","@types/uglify-js":"^3.17.0","c8":"^9.0.0","cheerio":"1.0.0-rc.12","codecov":"^3.1.0","execa":"^5.0.0","glob":"10.4.5","google-proto-files":"^4.2.0","gts":"^5.0.0","jackspeak":"3.4.3","linkinator":"^4.0.0","lru-cache":"10.4.3","long":"^4.0.0","mkdirp":"^2.0.0","mocha":"^9.0.0","ncp":"^2.0.0","null-loader":"^4.0.0","protobufjs-cli":"1.1.3","proxyquire":"^2.0.1","pumpify":"^2.0.0","sinon":"^18.0.0","stream-events":"^1.0.4","ts-loader":"^8.0.0","typescript":"^5.1.6","uglify-js":"^3.17.0","walkdir":"^0.4.0","webpack":"^4.0.0","webpack-cli":"^4.0.0"},"scripts":{"docs":"compodoc src/","pretest":"npm run prepare","test":"c8 mocha build/test/unit","lint":"gts check src samples test","clean":"gts clean","compile":"tsc -p . && cp src/*.json build/src && cp -r test/fixtures build/test && cp -r protos build/","compile-operation-protos":"pbjs -t json google/longrunning/operations.proto -p ./protos > protos/operations.json && pbjs -t static-module -r operations_protos google/longrunning/operations.proto -p ./protos > protos/operations.js && pbts protos/operations.js -o protos/operations.d.ts","compile-compute-operations-protos":"pbjs -t json google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.json && pbjs -t static-module -r compute_operations_protos google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.js && pbts protos/compute_operations.js -o protos/compute_operations.d.ts","compile-iam-protos":"pbjs -t json google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.json && pbjs -t static-module -r iam_protos google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.js && pbts protos/iam_service.js -o protos/iam_service.d.ts","compile-location-protos":"pbjs -t json google/cloud/location/locations.proto -p ./protos > protos/locations.json && pbjs -t static-module -r locations_protos google/cloud/location/locations.proto -p ./protos > protos/locations.js && pbts protos/locations.js -o protos/locations.d.ts","compile-status-protos":"pbjs -t json google/rpc/status.proto google/rpc/error_details.proto -p ./protos > protos/status.json","compile-http-protos":"pbjs -t static-module -r http_proto --keep-case google/api/http.proto -p ./protos > protos/http.js && pbts protos/http.js -o protos/http.d.ts","fix":"gts fix","prepare":"npm run compile && cd ../tools && npm i && npm run compile && cd ../gax && pwd && node ../tools/build/src/prepublish.js . && mkdirp build/protos && cp -r protos/* build/protos/ && npm run minify-proto-json","system-test":"c8 mocha build/test/system-test --timeout 600000 && npm run test-application","samples-test":"cd samples/ && npm link ../ && npm test && cd ../","docs-test":"linkinator docs","predocs-test":"npm run docs","browser-test":"cd test/browser-test && npm run prefetch && npm install && npm test","test-application":"cd test/test-application && npm run prefetch && npm install && npm start","prelint":"cd samples; npm link ../; npm install","precompile":"gts clean","update-protos":"cd ../tools && npm i && npm run compile && cd ../gax && node ../tools/build/src/listProtos.js .","minify-proto-json":"cd ../tools && npm i && npm run compile && cd ../gax && node ../tools/build/src/minify.js","@compodoc/compodoc":"1.1.21"},"keywords":["grpc"],"repository":{"type":"git","url":"https://github.com/googleapis/gax-nodejs.git","directory":"gax"},"author":"Google API Authors","license":"Apache-2.0","bugs":{"url":"https://github.com/googleapis/gax-nodejs/issues"},"homepage":"https://github.com/googleapis/gax-nodejs#readme","engines":{"node":">=14"},"browser":"build/src/fallback.js"}');

/***/ })

};
;