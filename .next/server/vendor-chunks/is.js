"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/is";
exports.ids = ["vendor-chunks/is"];
exports.modules = {

/***/ "(rsc)/./node_modules/is/index.js":
/*!**********************************!*\
  !*** ./node_modules/is/index.js ***!
  \**********************************/
/***/ ((module) => {

eval("/* globals window, HTMLElement */ \n/**!\n * is\n * the definitive JavaScript type testing library\n *\n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */ var objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\nvar symbolValueOf;\nif (typeof Symbol === \"function\") {\n    symbolValueOf = Symbol.prototype.valueOf;\n}\nvar bigIntValueOf;\nif (typeof BigInt === \"function\") {\n    bigIntValueOf = BigInt.prototype.valueOf;\n}\nvar isActualNaN = function(value) {\n    return value !== value;\n};\nvar NON_HOST_TYPES = {\n    \"boolean\": 1,\n    number: 1,\n    string: 1,\n    undefined: 1\n};\nvar base64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n/**\n * Expose `is`\n */ var is = {};\n/**\n * Test general.\n */ /**\n * is.type\n * Test if `value` is a type of `type`.\n *\n * @param {*} value value to test\n * @param {String} type type\n * @return {Boolean} true if `value` is a type of `type`, false otherwise\n * @api public\n */ is.a = is.type = function(value, type) {\n    return typeof value === type;\n};\n/**\n * is.defined\n * Test if `value` is defined.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is defined, false otherwise\n * @api public\n */ is.defined = function(value) {\n    return typeof value !== \"undefined\";\n};\n/**\n * is.empty\n * Test if `value` is empty.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is empty, false otherwise\n * @api public\n */ is.empty = function(value) {\n    var type = toStr.call(value);\n    var key;\n    if (type === \"[object Array]\" || type === \"[object Arguments]\" || type === \"[object String]\") {\n        return value.length === 0;\n    }\n    if (type === \"[object Object]\") {\n        for(key in value){\n            if (owns.call(value, key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return !value;\n};\n/**\n * is.equal\n * Test if `value` is equal to `other`.\n *\n * @param {*} value value to test\n * @param {*} other value to compare with\n * @return {Boolean} true if `value` is equal to `other`, false otherwise\n */ is.equal = function equal(value, other) {\n    if (value === other) {\n        return true;\n    }\n    var type = toStr.call(value);\n    var key;\n    if (type !== toStr.call(other)) {\n        return false;\n    }\n    if (type === \"[object Object]\") {\n        for(key in value){\n            if (!is.equal(value[key], other[key]) || !(key in other)) {\n                return false;\n            }\n        }\n        for(key in other){\n            if (!is.equal(value[key], other[key]) || !(key in value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (type === \"[object Array]\") {\n        key = value.length;\n        if (key !== other.length) {\n            return false;\n        }\n        while(key--){\n            if (!is.equal(value[key], other[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (type === \"[object Function]\") {\n        return value.prototype === other.prototype;\n    }\n    if (type === \"[object Date]\") {\n        return value.getTime() === other.getTime();\n    }\n    return false;\n};\n/**\n * is.hosted\n * Test if `value` is hosted by `host`.\n *\n * @param {*} value to test\n * @param {*} host host to test with\n * @return {Boolean} true if `value` is hosted by `host`, false otherwise\n * @api public\n */ is.hosted = function(value, host) {\n    var type = typeof host[value];\n    return type === \"object\" ? !!host[value] : !NON_HOST_TYPES[type];\n};\n/**\n * is.instance\n * Test if `value` is an instance of `constructor`.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an instance of `constructor`\n * @api public\n */ is.instance = is[\"instanceof\"] = function(value, constructor) {\n    return value instanceof constructor;\n};\n/**\n * is.nil / is.null\n * Test if `value` is null.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is null, false otherwise\n * @api public\n */ is.nil = is[\"null\"] = function(value) {\n    return value === null;\n};\n/**\n * is.undef / is.undefined\n * Test if `value` is undefined.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is undefined, false otherwise\n * @api public\n */ is.undef = is.undefined = function(value) {\n    return typeof value === \"undefined\";\n};\n/**\n * Test arguments.\n */ /**\n * is.args\n * Test if `value` is an arguments object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */ is.args = is.arguments = function(value) {\n    var isStandardArguments = toStr.call(value) === \"[object Arguments]\";\n    var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);\n    return isStandardArguments || isOldArguments;\n};\n/**\n * Test array.\n */ /**\n * is.array\n * Test if 'value' is an array.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an array, false otherwise\n * @api public\n */ is.array = Array.isArray || function(value) {\n    return toStr.call(value) === \"[object Array]\";\n};\n/**\n * is.arguments.empty\n * Test if `value` is an empty arguments object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an empty arguments object, false otherwise\n * @api public\n */ is.args.empty = function(value) {\n    return is.args(value) && value.length === 0;\n};\n/**\n * is.array.empty\n * Test if `value` is an empty array.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an empty array, false otherwise\n * @api public\n */ is.array.empty = function(value) {\n    return is.array(value) && value.length === 0;\n};\n/**\n * is.arraylike\n * Test if `value` is an arraylike object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */ is.arraylike = function(value) {\n    return !!value && !is.bool(value) && owns.call(value, \"length\") && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n/**\n * Test boolean.\n */ /**\n * is.bool\n * Test if `value` is a boolean.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a boolean, false otherwise\n * @api public\n */ is.bool = is[\"boolean\"] = function(value) {\n    return toStr.call(value) === \"[object Boolean]\";\n};\n/**\n * is.false\n * Test if `value` is false.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is false, false otherwise\n * @api public\n */ is[\"false\"] = function(value) {\n    return is.bool(value) && Boolean(Number(value)) === false;\n};\n/**\n * is.true\n * Test if `value` is true.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is true, false otherwise\n * @api public\n */ is[\"true\"] = function(value) {\n    return is.bool(value) && Boolean(Number(value)) === true;\n};\n/**\n * Test date.\n */ /**\n * is.date\n * Test if `value` is a date.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a date, false otherwise\n * @api public\n */ is.date = function(value) {\n    return toStr.call(value) === \"[object Date]\";\n};\n/**\n * is.date.valid\n * Test if `value` is a valid date.\n *\n * @param {*} value value to test\n * @returns {Boolean} true if `value` is a valid date, false otherwise\n */ is.date.valid = function(value) {\n    return is.date(value) && !isNaN(Number(value));\n};\n/**\n * Test element.\n */ /**\n * is.element\n * Test if `value` is an html element.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an HTML Element, false otherwise\n * @api public\n */ is.element = function(value) {\n    return value !== undefined && typeof HTMLElement !== \"undefined\" && value instanceof HTMLElement && value.nodeType === 1;\n};\n/**\n * Test error.\n */ /**\n * is.error\n * Test if `value` is an error object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an error object, false otherwise\n * @api public\n */ is.error = function(value) {\n    return toStr.call(value) === \"[object Error]\";\n};\n/**\n * Test function.\n */ /**\n * is.fn / is.function (deprecated)\n * Test if `value` is a function.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a function, false otherwise\n * @api public\n */ is.fn = is[\"function\"] = function(value) {\n    var isAlert =  false && 0;\n    if (isAlert) {\n        return true;\n    }\n    var str = toStr.call(value);\n    return str === \"[object Function]\" || str === \"[object GeneratorFunction]\" || str === \"[object AsyncFunction]\";\n};\n/**\n * Test number.\n */ /**\n * is.number\n * Test if `value` is a number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a number, false otherwise\n * @api public\n */ is.number = function(value) {\n    return toStr.call(value) === \"[object Number]\";\n};\n/**\n * is.infinite\n * Test if `value` is positive or negative infinity.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise\n * @api public\n */ is.infinite = function(value) {\n    return value === Infinity || value === -Infinity;\n};\n/**\n * is.decimal\n * Test if `value` is a decimal number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a decimal number, false otherwise\n * @api public\n */ is.decimal = function(value) {\n    return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0;\n};\n/**\n * is.divisibleBy\n * Test if `value` is divisible by `n`.\n *\n * @param {Number} value value to test\n * @param {Number} n dividend\n * @return {Boolean} true if `value` is divisible by `n`, false otherwise\n * @api public\n */ is.divisibleBy = function(value, n) {\n    var isDividendInfinite = is.infinite(value);\n    var isDivisorInfinite = is.infinite(n);\n    var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;\n    return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0;\n};\n/**\n * is.integer\n * Test if `value` is an integer.\n *\n * @param value to test\n * @return {Boolean} true if `value` is an integer, false otherwise\n * @api public\n */ is.integer = is[\"int\"] = function(value) {\n    return is.number(value) && !isActualNaN(value) && value % 1 === 0;\n};\n/**\n * is.maximum\n * Test if `value` is greater than 'others' values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is greater than `others` values\n * @api public\n */ is.maximum = function(value, others) {\n    if (isActualNaN(value)) {\n        throw new TypeError(\"NaN is not a valid value\");\n    } else if (!is.arraylike(others)) {\n        throw new TypeError(\"second argument must be array-like\");\n    }\n    var len = others.length;\n    while(--len >= 0){\n        if (value < others[len]) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * is.minimum\n * Test if `value` is less than `others` values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is less than `others` values\n * @api public\n */ is.minimum = function(value, others) {\n    if (isActualNaN(value)) {\n        throw new TypeError(\"NaN is not a valid value\");\n    } else if (!is.arraylike(others)) {\n        throw new TypeError(\"second argument must be array-like\");\n    }\n    var len = others.length;\n    while(--len >= 0){\n        if (value > others[len]) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * is.nan\n * Test if `value` is not a number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is not a number, false otherwise\n * @api public\n */ is.nan = function(value) {\n    return !is.number(value) || value !== value;\n};\n/**\n * is.even\n * Test if `value` is an even number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an even number, false otherwise\n * @api public\n */ is.even = function(value) {\n    return is.infinite(value) || is.number(value) && value === value && value % 2 === 0;\n};\n/**\n * is.odd\n * Test if `value` is an odd number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an odd number, false otherwise\n * @api public\n */ is.odd = function(value) {\n    return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0;\n};\n/**\n * is.ge\n * Test if `value` is greater than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */ is.ge = function(value, other) {\n    if (isActualNaN(value) || isActualNaN(other)) {\n        throw new TypeError(\"NaN is not a valid value\");\n    }\n    return !is.infinite(value) && !is.infinite(other) && value >= other;\n};\n/**\n * is.gt\n * Test if `value` is greater than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */ is.gt = function(value, other) {\n    if (isActualNaN(value) || isActualNaN(other)) {\n        throw new TypeError(\"NaN is not a valid value\");\n    }\n    return !is.infinite(value) && !is.infinite(other) && value > other;\n};\n/**\n * is.le\n * Test if `value` is less than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if 'value' is less than or equal to 'other'\n * @api public\n */ is.le = function(value, other) {\n    if (isActualNaN(value) || isActualNaN(other)) {\n        throw new TypeError(\"NaN is not a valid value\");\n    }\n    return !is.infinite(value) && !is.infinite(other) && value <= other;\n};\n/**\n * is.lt\n * Test if `value` is less than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if `value` is less than `other`\n * @api public\n */ is.lt = function(value, other) {\n    if (isActualNaN(value) || isActualNaN(other)) {\n        throw new TypeError(\"NaN is not a valid value\");\n    }\n    return !is.infinite(value) && !is.infinite(other) && value < other;\n};\n/**\n * is.within\n * Test if `value` is within `start` and `finish`.\n *\n * @param {Number} value value to test\n * @param {Number} start lower bound\n * @param {Number} finish upper bound\n * @return {Boolean} true if 'value' is is within 'start' and 'finish'\n * @api public\n */ is.within = function(value, start, finish) {\n    if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {\n        throw new TypeError(\"NaN is not a valid value\");\n    } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {\n        throw new TypeError(\"all arguments must be numbers\");\n    }\n    var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);\n    return isAnyInfinite || value >= start && value <= finish;\n};\n/**\n * Test object.\n */ /**\n * is.object\n * Test if `value` is an object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an object, false otherwise\n * @api public\n */ is.object = function(value) {\n    return toStr.call(value) === \"[object Object]\";\n};\n/**\n * is.primitive\n * Test if `value` is a primitive.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a primitive, false otherwise\n * @api public\n */ is.primitive = function isPrimitive(value) {\n    if (!value) {\n        return true;\n    }\n    if (typeof value === \"object\" || is.object(value) || is.fn(value) || is.array(value)) {\n        return false;\n    }\n    return true;\n};\n/**\n * is.hash\n * Test if `value` is a hash - a plain object literal.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a hash, false otherwise\n * @api public\n */ is.hash = function(value) {\n    return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval;\n};\n/**\n * Test regexp.\n */ /**\n * is.regexp\n * Test if `value` is a regular expression.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a regexp, false otherwise\n * @api public\n */ is.regexp = function(value) {\n    return toStr.call(value) === \"[object RegExp]\";\n};\n/**\n * Test string.\n */ /**\n * is.string\n * Test if `value` is a string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a string, false otherwise\n * @api public\n */ is.string = function(value) {\n    return toStr.call(value) === \"[object String]\";\n};\n/**\n * Test base64 string.\n */ /**\n * is.base64\n * Test if `value` is a valid base64 encoded string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise\n * @api public\n */ is.base64 = function(value) {\n    return is.string(value) && (!value.length || base64Regex.test(value));\n};\n/**\n * Test base64 string.\n */ /**\n * is.hex\n * Test if `value` is a valid hex encoded string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a hex encoded string, false otherwise\n * @api public\n */ is.hex = function(value) {\n    return is.string(value) && (!value.length || hexRegex.test(value));\n};\n/**\n * is.symbol\n * Test if `value` is an ES6 Symbol\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a Symbol, false otherise\n * @api public\n */ is.symbol = function(value) {\n    return typeof Symbol === \"function\" && toStr.call(value) === \"[object Symbol]\" && typeof symbolValueOf.call(value) === \"symbol\";\n};\n/**\n * is.bigint\n * Test if `value` is an ES-proposed BigInt\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a BigInt, false otherise\n * @api public\n */ is.bigint = function(value) {\n    // eslint-disable-next-line valid-typeof\n    return typeof BigInt === \"function\" && toStr.call(value) === \"[object BigInt]\" && typeof bigIntValueOf.call(value) === \"bigint\";\n};\nmodule.exports = is;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/is/index.js\n");

/***/ })

};
;